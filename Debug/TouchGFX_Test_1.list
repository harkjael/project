
TouchGFX_Test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e5c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003798  0801e770  0801e770  0002e770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003ea  08021f08  08021f08  00031f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 0001d6c0  080222f4  080222f4  000322f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000020  0803f9b4  0803f9b4  0004f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0803f9d4  0803f9d4  00050150  2**0
                  CONTENTS
  7 .ARM          00000008  0803f9d4  0803f9d4  0004f9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0803f9dc  0803f9dc  00050150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0803f9dc  0803f9dc  0004f9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0803f9f0  0803f9f0  0004f9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000150  20000000  0803f9f8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00008980  20000150  0803fb48  00050150  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  20008ad0  0803fb48  00058ad0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00050150  2**0
                  CONTENTS, READONLY
 15 .debug_info   0007f567  00000000  00000000  00050180  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000efba  00000000  00000000  000cf6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003818  00000000  00000000  000de6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003368  00000000  00000000  000e1ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0000e72b  00000000  00000000  000e5228  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00034587  00000000  00000000  000f3953  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001080a1  00000000  00000000  00127eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0022ff7b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f438  00000000  00000000  00230078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801e758 	.word	0x0801e758

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0801e758 	.word	0x0801e758

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
#ifdef USE_SEGGER
	DWT->CTRL |= (1 << 0);    // Enable Cycle Counter for SEGGER
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <main+0x60>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <main+0x60>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 fe10 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f82c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
    // LCD_init(); must be inserted before MX_TouchGFX_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 faa2 	bl	8000af0 <MX_GPIO_Init>
  MX_FMC_Init();
 80005ac:	f000 f9ee 	bl	800098c <MX_FMC_Init>
  MX_CRC_Init();
 80005b0:	f000 f8b2 	bl	8000718 <MX_CRC_Init>
  MX_LTDC_Init();
 80005b4:	f000 f93a 	bl	800082c <MX_LTDC_Init>
  MX_DMA2D_Init();
 80005b8:	f000 f8c2 	bl	8000740 <MX_DMA2D_Init>
  MX_I2C1_Init();
 80005bc:	f000 f8f2 	bl	80007a4 <MX_I2C1_Init>
  MX_USART2_Init();
 80005c0:	f000 f9b6 	bl	8000930 <MX_USART2_Init>
  LCD_init();
 80005c4:	f000 fbbe 	bl	8000d44 <LCD_init>
  MX_TouchGFX_Init();
 80005c8:	f00c f990 	bl	800c8ec <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f006 fef6 	bl	80073bc <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
#ifdef USE_SEGGER
  SEGGER_SYSVIEW_Conf();
 80005d0:	f00a fc42 	bl	800ae58 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005d4:	f00b fbb4 	bl	800bd40 <SEGGER_SYSVIEW_Start>
#endif
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <main+0x64>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x68>)
 80005de:	f006 ff55 	bl	800748c <osThreadNew>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <main+0x6c>)
 80005e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f006 ff1c 	bl	8007424 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x5c>
 80005ee:	bf00      	nop
 80005f0:	e0001000 	.word	0xe0001000
 80005f4:	0801ee28 	.word	0x0801ee28
 80005f8:	0800c8f9 	.word	0x0800c8f9
 80005fc:	2000888c 	.word	0x2000888c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0a0      	sub	sp, #128	; 0x80
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f01d f926 	bl	801d860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2230      	movs	r2, #48	; 0x30
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f01d f917 	bl	801d860 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b36      	ldr	r3, [pc, #216]	; (8000710 <SystemClock_Config+0x110>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a35      	ldr	r2, [pc, #212]	; (8000710 <SystemClock_Config+0x110>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <SystemClock_Config+0x110>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <SystemClock_Config+0x114>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a2f      	ldr	r2, [pc, #188]	; (8000714 <SystemClock_Config+0x114>)
 8000658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <SystemClock_Config+0x114>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800067e:	2319      	movs	r3, #25
 8000680:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000682:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000686:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fda3 	bl	80051e0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a0:	f000 fd32 	bl	8001108 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a4:	f004 fd4c 	bl	8005140 <HAL_PWREx_EnableOverDrive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ae:	f000 fd2b 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ce:	2105      	movs	r1, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 fff5 	bl	80056c0 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006dc:	f000 fd14 	bl	8001108 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80006e0:	2308      	movs	r3, #8
 80006e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006e4:	23c0      	movs	r3, #192	; 0xc0
 80006e6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;   //4: LCD_CLK=12MHz
 80006e8:	2305      	movs	r3, #5
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f9e0 	bl	8005abc <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000702:	f000 fd01 	bl	8001108 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3780      	adds	r7, #128	; 0x80
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_CRC_Init+0x20>)
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <MX_CRC_Init+0x24>)
 8000720:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_CRC_Init+0x20>)
 8000724:	f001 fec4 	bl	80024b0 <HAL_CRC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800072e:	f000 fceb 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200087dc 	.word	0x200087dc
 800073c:	40023000 	.word	0x40023000

08000740 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_DMA2D_Init+0x60>)
 8000748:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_DMA2D_Init+0x5c>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_DMA2D_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000764:	2200      	movs	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_DMA2D_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000776:	f001 fed9 	bl	800252c <HAL_DMA2D_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000780:	f000 fcc2 	bl	8001108 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000784:	2101      	movs	r1, #1
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_DMA2D_Init+0x5c>)
 8000788:	f002 f99a 	bl	8002ac0 <HAL_DMA2D_ConfigLayer>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000792:	f000 fcb9 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20008920 	.word	0x20008920
 80007a0:	4002b000 	.word	0x4002b000

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  HAL_I2C_DeInit(&hi2c1);
 80007a8:	481d      	ldr	r0, [pc, #116]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007aa:	f002 febd 	bl	8003528 <HAL_I2C_DeInit>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_I2C1_Init+0x80>)
 80007b2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_I2C1_Init+0x84>)
 80007b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007e8:	f002 fd66 	bl	80032b8 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 fc89 	bl	8001108 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007fa:	f004 f83a 	bl	8004872 <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x64>
  {
    Error_Handler();
 8000804:	f000 fc80 	bl	8001108 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2C1_Init+0x7c>)
 800080c:	f004 f86d 	bl	80048ea <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x76>
  {
    Error_Handler();
 8000816:	f000 fc77 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20008788 	.word	0x20008788
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2234      	movs	r2, #52	; 0x34
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f01d f811 	bl	801d860 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800083e:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000840:	4a3a      	ldr	r2, [pc, #232]	; (800092c <MX_LTDC_Init+0x100>)
 8000842:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000844:	4b38      	ldr	r3, [pc, #224]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <MX_LTDC_Init+0xfc>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000850:	4b35      	ldr	r3, [pc, #212]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]

  hltdc.Init.HorizontalSync = 40;
 800085c:	4b32      	ldr	r3, [pc, #200]	; (8000928 <MX_LTDC_Init+0xfc>)
 800085e:	2228      	movs	r2, #40	; 0x28
 8000860:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000864:	2209      	movs	r2, #9
 8000866:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_LTDC_Init+0xfc>)
 800086a:	222a      	movs	r2, #42	; 0x2a
 800086c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000870:	220b      	movs	r2, #11
 8000872:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000876:	f240 220a 	movw	r2, #522	; 0x20a
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_LTDC_Init+0xfc>)
 800087e:	f240 121b 	movw	r2, #283	; 0x11b
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 524;
 8000884:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000886:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_LTDC_Init+0xfc>)
 800088e:	f240 121d 	movw	r2, #285	; 0x11d
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.AccumulatedActiveW = 487;
  hltdc.Init.AccumulatedActiveH = 327;
  hltdc.Init.TotalWidth = 491;
  hltdc.Init.TotalHeigh = 331;
  */
  hltdc.Init.Backcolor.Blue = 0;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_LTDC_Init+0xfc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_LTDC_Init+0xfc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008ac:	481e      	ldr	r0, [pc, #120]	; (8000928 <MX_LTDC_Init+0xfc>)
 80008ae:	f004 f85b 	bl	8004968 <HAL_LTDC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 fc26 	bl	8001108 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80008c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008c4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80008ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80008ce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008d4:	23ff      	movs	r3, #255	; 0xff
 80008d6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008e2:	2305      	movs	r3, #5
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80008e6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80008ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80008f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000912:	f004 f9b1 	bl	8004c78 <HAL_LTDC_ConfigLayer>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800091c:	f000 fbf4 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3738      	adds	r7, #56	; 0x38
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200087e4 	.word	0x200087e4
 800092c:	40016800 	.word	0x40016800

08000930 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART2_Init+0x54>)
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <MX_USART2_Init+0x58>)
 8000938:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_USART2_Init+0x54>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_9B;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART2_Init+0x54>)
 8000944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000948:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_Init+0x54>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_Init+0x54>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_Init+0x54>)
 8000958:	2208      	movs	r2, #8
 800095a:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_Init+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_Init+0x54>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_Init+0x54>)
 800096a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_USART2_Init+0x54>)
 8000972:	f005 fd1d 	bl	80063b0 <HAL_USART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_Init+0x50>
  {
    Error_Handler();
 800097c:	f000 fbc4 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200088dc 	.word	0x200088dc
 8000988:	40004400 	.word	0x40004400

0800098c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 80009b8:	4b49      	ldr	r3, [pc, #292]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009ba:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009be:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009c0:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009c2:	4a48      	ldr	r2, [pc, #288]	; (8000ae4 <MX_FMC_Init+0x158>)
 80009c4:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009c6:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 80009d2:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009d8:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009da:	2210      	movs	r2, #16
 80009dc:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009e4:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80009ea:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009f0:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <MX_FMC_Init+0x154>)
 80009f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000a12:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 7;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000a38:	2311      	movs	r3, #17
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <MX_FMC_Init+0x154>)
 8000a4a:	f004 fb23 	bl	8005094 <HAL_NOR_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_FMC_Init+0xcc>
  {
    Error_Handler( );
 8000a54:	f000 fb58 	bl	8001108 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <MX_FMC_Init+0x160>)
 8000a5c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a72:	2220      	movs	r2, #32
 8000a74:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a7e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a82:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a90:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 7;
 8000aac:	2307      	movs	r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 3;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_FMC_Init+0x15c>)
 8000ac2:	f005 f9b9 	bl	8005e38 <HAL_SDRAM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_FMC_Init+0x144>
  {
    Error_Handler( );
 8000acc:	f000 fb1c 	bl	8001108 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000ad0:	f240 5069 	movw	r0, #1385	; 0x569
 8000ad4:	f000 f8d8 	bl	8000c88 <BSP_SDRAM_Initialization_sequence>
  /* USER CODE END FMC_Init 2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20008890 	.word	0x20008890
 8000ae4:	a0000104 	.word	0xa0000104
 8000ae8:	20008960 	.word	0x20008960
 8000aec:	a0000140 	.word	0xa0000140

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b090      	sub	sp, #64	; 0x40
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b0a:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a5b      	ldr	r2, [pc, #364]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a54      	ldr	r2, [pc, #336]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a4d      	ldr	r2, [pc, #308]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a46      	ldr	r2, [pc, #280]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b39      	ldr	r3, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_GPIO_Init+0x18c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin|MCU_Pin|VSYNC_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 51a6 	mov.w	r1, #5312	; 0x14c0
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_GPIO_Init+0x190>)
 8000c26:	f002 fb2d 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c30:	4814      	ldr	r0, [pc, #80]	; (8000c84 <MX_GPIO_Init+0x194>)
 8000c32:	f002 fb27 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRAME_RATE_Pin MCU_Pin VSYNC_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|MCU_Pin|VSYNC_Pin|RENDER_TIME_Pin;
 8000c36:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_GPIO_Init+0x190>)
 8000c50:	f002 f864 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_GPIO_Init+0x194>)
 8000c6e:	f002 f855 	bl	8002d1c <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	; 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40020400 	.word	0x40020400

08000c88 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_CommandTypeDef Command = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  __IO uint32_t tmpmrd = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cbe:	f005 f8ef 	bl	8005ea0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f001 fac0 	bl	8002248 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ce4:	f005 f8dc 	bl	8005ea0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cec:	2310      	movs	r3, #16
 8000cee:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 8;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	4619      	mov	r1, r3
 8000d02:	480f      	ldr	r0, [pc, #60]	; (8000d40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000d04:	f005 f8cc 	bl	8005ea0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000d08:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000d0c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d12:	2310      	movs	r3, #16
 8000d14:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = tmpmrd;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000d2a:	f005 f8b9 	bl	8005ea0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount); 
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000d32:	f005 f8e0 	bl	8005ef6 <HAL_SDRAM_ProgramRefreshRate>
}
 8000d36:	bf00      	nop
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20008960 	.word	0x20008960

08000d44 <LCD_init>:


static void LCD_init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	LCD_RST_HIGH;
 8000d48:	4b7d      	ldr	r3, [pc, #500]	; (8000f40 <LCD_init+0x1fc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a7c      	ldr	r2, [pc, #496]	; (8000f40 <LCD_init+0x1fc>)
 8000d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d52:	6193      	str	r3, [r2, #24]
	HAL_Delay(1); // Delay 1ms
 8000d54:	2001      	movs	r0, #1
 8000d56:	f001 fa77 	bl	8002248 <HAL_Delay>
	LCD_RST_LOW;
 8000d5a:	4b79      	ldr	r3, [pc, #484]	; (8000f40 <LCD_init+0x1fc>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a78      	ldr	r2, [pc, #480]	; (8000f40 <LCD_init+0x1fc>)
 8000d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d64:	6193      	str	r3, [r2, #24]
	HAL_Delay(10); // Delay 10ms // This delay time is necessary
 8000d66:	200a      	movs	r0, #10
 8000d68:	f001 fa6e 	bl	8002248 <HAL_Delay>
	LCD_RST_HIGH;
 8000d6c:	4b74      	ldr	r3, [pc, #464]	; (8000f40 <LCD_init+0x1fc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a73      	ldr	r2, [pc, #460]	; (8000f40 <LCD_init+0x1fc>)
 8000d72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d76:	6193      	str	r3, [r2, #24]
	HAL_Delay(120); // Delay 120 ms
 8000d78:	2078      	movs	r0, #120	; 0x78
 8000d7a:	f001 fa65 	bl	8002248 <HAL_Delay>
	///************* Start Initial Sequence **********//

	SPI_WriteComm(0xE0);   //P-Gamma
 8000d7e:	20e0      	movs	r0, #224	; 0xe0
 8000d80:	f000 f8e0 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f915 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x03);
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f000 f912 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0C);
 8000d90:	200c      	movs	r0, #12
 8000d92:	f000 f90f 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x09);
 8000d96:	2009      	movs	r0, #9
 8000d98:	f000 f90c 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x17);
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f000 f909 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x09);
 8000da2:	2009      	movs	r0, #9
 8000da4:	f000 f906 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x3E);
 8000da8:	203e      	movs	r0, #62	; 0x3e
 8000daa:	f000 f903 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x89);
 8000dae:	2089      	movs	r0, #137	; 0x89
 8000db0:	f000 f900 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x49);
 8000db4:	2049      	movs	r0, #73	; 0x49
 8000db6:	f000 f8fd 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x08);
 8000dba:	2008      	movs	r0, #8
 8000dbc:	f000 f8fa 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0D);
 8000dc0:	200d      	movs	r0, #13
 8000dc2:	f000 f8f7 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0A);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 f8f4 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x13);
 8000dcc:	2013      	movs	r0, #19
 8000dce:	f000 f8f1 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x15);
 8000dd2:	2015      	movs	r0, #21
 8000dd4:	f000 f8ee 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0F);
 8000dd8:	200f      	movs	r0, #15
 8000dda:	f000 f8eb 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0XE1);   //N-Gamma
 8000dde:	20e1      	movs	r0, #225	; 0xe1
 8000de0:	f000 f8b0 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f8e5 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x11);
 8000dea:	2011      	movs	r0, #17
 8000dec:	f000 f8e2 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x15);
 8000df0:	2015      	movs	r0, #21
 8000df2:	f000 f8df 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x03);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f000 f8dc 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0F);
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f000 f8d9 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x05);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f000 f8d6 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x2D);
 8000e08:	202d      	movs	r0, #45	; 0x2d
 8000e0a:	f000 f8d3 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x34);
 8000e0e:	2034      	movs	r0, #52	; 0x34
 8000e10:	f000 f8d0 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x41);
 8000e14:	2041      	movs	r0, #65	; 0x41
 8000e16:	f000 f8cd 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x02);
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f000 f8ca 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteData(0x0B);
 8000e20:	200b      	movs	r0, #11
 8000e22:	f000 f8c7 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0A);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f000 f8c4 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x33);
 8000e2c:	2033      	movs	r0, #51	; 0x33
 8000e2e:	f000 f8c1 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x37);
 8000e32:	2037      	movs	r0, #55	; 0x37
 8000e34:	f000 f8be 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x0F);
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f000 f8bb 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0XC0);  //Power Control 1
 8000e3e:	20c0      	movs	r0, #192	; 0xc0
 8000e40:	f000 f880 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x17);  //Vreg1out
 8000e44:	2017      	movs	r0, #23
 8000e46:	f000 f8b5 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x15);  //Verg2out
 8000e4a:	2015      	movs	r0, #21
 8000e4c:	f000 f8b2 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0xC1);  //Power Control 2
 8000e50:	20c1      	movs	r0, #193	; 0xc1
 8000e52:	f000 f877 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x41);  //VGH,VGL
 8000e56:	2041      	movs	r0, #65	; 0x41
 8000e58:	f000 f8ac 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0xC5);  //Power Control 3
 8000e5c:	20c5      	movs	r0, #197	; 0xc5
 8000e5e:	f000 f871 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f8a6 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x12);  //Vcom
 8000e68:	2012      	movs	r0, #18
 8000e6a:	f000 f8a3 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x80);
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	f000 f8a0 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0x36);   //Memory Access
 8000e74:	2036      	movs	r0, #54	; 0x36
 8000e76:	f000 f865 	bl	8000f44 <SPI_WriteComm>
	//SPI_WriteData(0x08); 		// MY(D7),MX(D6),MV(D5)=000 : rb mirror
	//SPI_WriteData(0x48); 		// MY(D7),MX(D6),MV(D5)=010 : ru normal
	//SPI_WriteData(0xC8);   	// MY(D7),MX(D6),MV(D5)=110 : lu mirror
	//SPI_WriteData(0x28);   	// MY(D7),MX(D6),MV(D5)=001 : rb normal flickering, display weird
	SPI_WriteData(0xE8);   	// MY(D7),MX(D6),MV(D5)=111 : ok but flickering
 8000e7a:	20e8      	movs	r0, #232	; 0xe8
 8000e7c:	f000 f89a 	bl	8000fb4 <SPI_WriteData>
	//SPI_WriteData(0xA8);   	// MY(D7),MX(D6),MV(D5)=101
	//SPI_WriteData(0x88);   		// MY(D7),MX(D6),MV(D5)=100

	SPI_WriteComm(0x2A);	// Column Address Set
 8000e80:	202a      	movs	r0, #42	; 0x2a
 8000e82:	f000 f85f 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);	// SC[15:8]
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f894 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x00);	// SC[7:0]
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 f891 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x01);	// EC[15:8]
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 f88e 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0xDF);	// EC[7:0]   --> 479 = 0x1DF
 8000e98:	20df      	movs	r0, #223	; 0xdf
 8000e9a:	f000 f88b 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0x2B);	// Page Address Set
 8000e9e:	202b      	movs	r0, #43	; 0x2b
 8000ea0:	f000 f850 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);	// SP[15:8]
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 f885 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x00);	// SP[7:0]
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f882 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x01);	// EP[15:8]
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 f87f 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x3F);	// EP[7:0]	 --> 319 = 0x13F
 8000eb6:	203f      	movs	r0, #63	; 0x3f
 8000eb8:	f000 f87c 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0x3A);   // Interface Pixel Format
 8000ebc:	203a      	movs	r0, #58	; 0x3a
 8000ebe:	f000 f841 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x66);	// 18 bits / pixel
 8000ec2:	2066      	movs	r0, #102	; 0x66
 8000ec4:	f000 f876 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0XB0);   // Interface Mode Control
 8000ec8:	20b0      	movs	r0, #176	; 0xb0
 8000eca:	f000 f83b 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f870 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0xB1);   //Frame rate
 8000ed4:	20b1      	movs	r0, #177	; 0xb1
 8000ed6:	f000 f835 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0xA0);  	//60Hz
 8000eda:	20a0      	movs	r0, #160	; 0xa0
 8000edc:	f000 f86a 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0xB4);   //Display Inversion Control
 8000ee0:	20b4      	movs	r0, #180	; 0xb4
 8000ee2:	f000 f82f 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x02);  //2-dot
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 f864 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0XB6);  //RGB/MCU Interface Control
 8000eec:	20b6      	movs	r0, #182	; 0xb6
 8000eee:	f000 f829 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x20);  //MCU 02
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	f000 f85e 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x02);  //Source,Gate scan direction
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f000 f85b 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0XE9);   // Set Image Function
 8000efe:	20e9      	movs	r0, #233	; 0xe9
 8000f00:	f000 f820 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0x00);  // Disable 24 bit data input
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f855 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0xF7);    // Adjust Control
 8000f0a:	20f7      	movs	r0, #247	; 0xf7
 8000f0c:	f000 f81a 	bl	8000f44 <SPI_WriteComm>
	SPI_WriteData(0xA9);
 8000f10:	20a9      	movs	r0, #169	; 0xa9
 8000f12:	f000 f84f 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x51);
 8000f16:	2051      	movs	r0, #81	; 0x51
 8000f18:	f000 f84c 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x2C);
 8000f1c:	202c      	movs	r0, #44	; 0x2c
 8000f1e:	f000 f849 	bl	8000fb4 <SPI_WriteData>
	SPI_WriteData(0x82);   // D7 stream, loose
 8000f22:	2082      	movs	r0, #130	; 0x82
 8000f24:	f000 f846 	bl	8000fb4 <SPI_WriteData>

	SPI_WriteComm(0x11);   //Sleep out
 8000f28:	2011      	movs	r0, #17
 8000f2a:	f000 f80b 	bl	8000f44 <SPI_WriteComm>
	HAL_Delay(120);
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f001 f98a 	bl	8002248 <HAL_Delay>
	SPI_WriteComm(0x29);  //Display on
 8000f34:	2029      	movs	r0, #41	; 0x29
 8000f36:	f000 f805 	bl	8000f44 <SPI_WriteComm>
	//SPI_WriteComm(0x2C);  //Memory Write
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020400 	.word	0x40020400

08000f44 <SPI_WriteComm>:

static void SPI_WriteComm(uint8_t comm)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	uint16_t result16[]={0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	81bb      	strh	r3, [r7, #12]

	result = Bit_Reversal(comm);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f865 	bl	8001028 <Bit_Reversal>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
	result16[0] = ((uint16_t)result << 1) | 0 ;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	81bb      	strh	r3, [r7, #12]
	  while (HAL_USART_GetState(&husart2) != HAL_USART_STATE_READY)
 8000f6c:	bf00      	nop
 8000f6e:	480f      	ldr	r0, [pc, #60]	; (8000fac <SPI_WriteComm+0x68>)
 8000f70:	f005 fbe2 	bl	8006738 <HAL_USART_GetState>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d1f9      	bne.n	8000f6e <SPI_WriteComm+0x2a>
	  {
	  }
	  LCD_CSX_LOW;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <SPI_WriteComm+0x6c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <SPI_WriteComm+0x6c>)
 8000f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f84:	6193      	str	r3, [r2, #24]
	  HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f001 f95e 	bl	8002248 <HAL_Delay>
	if(HAL_USART_Transmit_IT(&husart2, (uint8_t*)result16, 1)!= HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2201      	movs	r2, #1
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <SPI_WriteComm+0x68>)
 8000f96:	f005 fa4c 	bl	8006432 <HAL_USART_Transmit_IT>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d000      	beq.n	8000fa2 <SPI_WriteComm+0x5e>
	  {
		//BSP_LED_On(LED3);
		while(1)
 8000fa0:	e7fe      	b.n	8000fa0 <SPI_WriteComm+0x5c>
		{
		}
	  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200088dc 	.word	0x200088dc
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <SPI_WriteData>:

static void SPI_WriteData(uint8_t data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
	uint16_t result16[]={0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	81bb      	strh	r3, [r7, #12]

	result = Bit_Reversal(data);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f82d 	bl	8001028 <Bit_Reversal>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
	result16[0] = ((uint16_t)result << 1) | 1 ;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	81bb      	strh	r3, [r7, #12]
	  while (HAL_USART_GetState(&husart2) != HAL_USART_STATE_READY)
 8000fe2:	bf00      	nop
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <SPI_WriteData+0x6c>)
 8000fe6:	f005 fba7 	bl	8006738 <HAL_USART_GetState>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d1f9      	bne.n	8000fe4 <SPI_WriteData+0x30>
	  {
	  }
	  LCD_CSX_LOW;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <SPI_WriteData+0x70>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <SPI_WriteData+0x70>)
 8000ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ffa:	6193      	str	r3, [r2, #24]
	  HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f001 f923 	bl	8002248 <HAL_Delay>
	if(HAL_USART_Transmit_IT(&husart2, (uint8_t*)result16, 1)!= HAL_OK)
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <SPI_WriteData+0x6c>)
 800100c:	f005 fa11 	bl	8006432 <HAL_USART_Transmit_IT>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d000      	beq.n	8001018 <SPI_WriteData+0x64>
	  {
		//BSP_LED_On(LED3);
		while(1)
 8001016:	e7fe      	b.n	8001016 <SPI_WriteData+0x62>
		{
		}
	  }
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200088dc 	.word	0x200088dc
 8001024:	40020400 	.word	0x40020400

08001028 <Bit_Reversal>:

static uint8_t Bit_Reversal(uint8_t v)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]

	result = ((v << 7) & 0x80) | ((v << 5) & 0x40) | ((v << 3) & 0x20) | ((v << 1) & 0x10) |\
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	01db      	lsls	r3, r3, #7
 800103a:	b25a      	sxtb	r2, r3
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	015b      	lsls	r3, r3, #5
 8001040:	b25b      	sxtb	r3, r3
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	b25b      	sxtb	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b25a      	sxtb	r2, r3
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	b25b      	sxtb	r3, r3
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	b25b      	sxtb	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b25a      	sxtb	r2, r3
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	b25b      	sxtb	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b25a      	sxtb	r2, r3
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	09db      	lsrs	r3, r3, #7
 8001070:	b2db      	uxtb	r3, r3
 8001072:	b25b      	sxtb	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b25a      	sxtb	r2, r3
			((v >> 7) & 0x01) | ((v >> 5) & 0x02) | ((v >> 3) & 0x04) | ((v >> 1) & 0x08);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b25b      	sxtb	r3, r3
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	b25b      	sxtb	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b25a      	sxtb	r2, r3
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	b25b      	sxtb	r3, r3
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	b25b      	sxtb	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b25a      	sxtb	r2, r3
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
	result = ((v << 7) & 0x80) | ((v << 5) & 0x40) | ((v << 3) & 0x20) | ((v << 1) & 0x10) |\
 80010ae:	73fb      	strb	r3, [r7, #15]
	return result;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_USART_TxCpltCallback>:

void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	LCD_CSX_HIGH;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_USART_TxCpltCallback+0x20>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_USART_TxCpltCallback+0x20>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6193      	str	r3, [r2, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f6:	f001 f887 	bl	8002208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40001000 	.word	0x40001000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_MspInit+0x54>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_MspInit+0x54>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x54>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_MspInit+0x54>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_MspInit+0x54>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_MspInit+0x54>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	210f      	movs	r1, #15
 800115a:	f06f 0001 	mvn.w	r0, #1
 800115e:	f001 f96f 	bl	8002440 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_CRC_MspInit+0x3c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10d      	bne.n	800119e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_CRC_MspInit+0x40>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_CRC_MspInit+0x40>)
 800118c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_CRC_MspInit+0x40>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023000 	.word	0x40023000
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_DMA2D_MspInit+0x48>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d115      	bne.n	80011f2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_DMA2D_MspInit+0x4c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_DMA2D_MspInit+0x4c>)
 80011d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_DMA2D_MspInit+0x4c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	205a      	movs	r0, #90	; 0x5a
 80011e8:	f001 f92a 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80011ec:	205a      	movs	r0, #90	; 0x5a
 80011ee:	f001 f943 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	4002b000 	.word	0x4002b000
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_DMA2D_MspDeInit+0x2c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d108      	bne.n	8001228 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_DMA2D_MspDeInit+0x30>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_DMA2D_MspDeInit+0x30>)
 800121c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001222:	205a      	movs	r0, #90	; 0x5a
 8001224:	f001 f936 	bl	8002494 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	4002b000 	.word	0x4002b000
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_I2C_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12c      	bne.n	80012b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001276:	f44f 7310 	mov.w	r3, #576	; 0x240
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127c:	2312      	movs	r3, #18
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001288:	2304      	movs	r3, #4
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <HAL_I2C_MspInit+0x8c>)
 8001294:	f001 fd42 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_I2C_MspDeInit+0x38>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10e      	bne.n	80012f8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_I2C_MspDeInit+0x3c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_I2C_MspDeInit+0x3c>)
 80012e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80012e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_I2C_MspDeInit+0x40>)
 80012ec:	f001 fec0 	bl	8003070 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_I2C_MspDeInit+0x40>)
 80012f4:	f001 febc 	bl	8003070 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40005400 	.word	0x40005400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a3c      	ldr	r2, [pc, #240]	; (800141c <HAL_LTDC_MspInit+0x110>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d171      	bne.n	8001412 <HAL_LTDC_MspInit+0x106>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a3a      	ldr	r2, [pc, #232]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a33      	ldr	r2, [pc, #204]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001370:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_LTDC_MspInit+0x114>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b0:	230e      	movs	r3, #14
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	481a      	ldr	r0, [pc, #104]	; (8001424 <HAL_LTDC_MspInit+0x118>)
 80013bc:	f001 fcae 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80013c0:	23ff      	movs	r3, #255	; 0xff
 80013c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013d0:	230e      	movs	r3, #14
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4813      	ldr	r0, [pc, #76]	; (8001428 <HAL_LTDC_MspInit+0x11c>)
 80013dc:	f001 fc9e 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 80013e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f2:	230e      	movs	r3, #14
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_LTDC_MspInit+0x120>)
 80013fe:	f001 fc8d 	bl	8002d1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2058      	movs	r0, #88	; 0x58
 8001408:	f001 f81a 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800140c:	2058      	movs	r0, #88	; 0x58
 800140e:	f001 f833 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40016800 	.word	0x40016800
 8001420:	40023800 	.word	0x40023800
 8001424:	40022400 	.word	0x40022400
 8001428:	40022800 	.word	0x40022800
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_USART_MspInit+0x94>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d133      	bne.n	80014ba <HAL_USART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_USART_MspInit+0x98>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_USART_MspInit+0x98>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_USART_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_USART_MspInit+0x98>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_USART_MspInit+0x98>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_USART_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 800148a:	231c      	movs	r3, #28
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149a:	2307      	movs	r3, #7
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_USART_MspInit+0x9c>)
 80014a6:	f001 fc39 	bl	8002d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2026      	movs	r0, #38	; 0x26
 80014b0:	f000 ffc6 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014b4:	2026      	movs	r0, #38	; 0x26
 80014b6:	f000 ffdf 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40004400 	.word	0x40004400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_FMC_MspInit+0x108>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d171      	bne.n	80015d0 <HAL_FMC_MspInit+0x100>
    return;
  }
  FMC_Initialized = 1;
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <HAL_FMC_MspInit+0x108>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_FMC_MspInit+0x10c>)
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <HAL_FMC_MspInit+0x10c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6393      	str	r3, [r2, #56]	; 0x38
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_FMC_MspInit+0x10c>)
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 800150e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001512:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001520:	230c      	movs	r3, #12
 8001522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	482d      	ldr	r0, [pc, #180]	; (80015e0 <HAL_FMC_MspInit+0x110>)
 800152a:	f001 fbf7 	bl	8002d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800152e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001532:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_10
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001540:	230c      	movs	r3, #12
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <HAL_FMC_MspInit+0x114>)
 800154a:	f001 fbe7 	bl	8002d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_3
 800154e:	f248 133f 	movw	r3, #33087	; 0x813f
 8001552:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001560:	230c      	movs	r3, #12
 8001562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	481f      	ldr	r0, [pc, #124]	; (80015e8 <HAL_FMC_MspInit+0x118>)
 800156a:	f001 fbd7 	bl	8002d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800156e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001572:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001580:	230c      	movs	r3, #12
 8001582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <HAL_FMC_MspInit+0x11c>)
 800158a:	f001 fbc7 	bl	8002d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800158e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001592:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015a0:	230c      	movs	r3, #12
 80015a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <HAL_FMC_MspInit+0x120>)
 80015aa:	f001 fbb7 	bl	8002d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80015ae:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80015b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c0:	230c      	movs	r3, #12
 80015c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <HAL_FMC_MspInit+0x124>)
 80015ca:	f001 fba7 	bl	8002d1c <HAL_GPIO_Init>
 80015ce:	e000      	b.n	80015d2 <HAL_FMC_MspInit+0x102>
    return;
 80015d0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000016c 	.word	0x2000016c
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021c00 	.word	0x40021c00

080015f8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001600:	f7ff ff66 	bl	80014d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001614:	f7ff ff5c 	bl	80014d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	2036      	movs	r0, #54	; 0x36
 8001636:	f000 ff03 	bl	8002440 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800163a:	2036      	movs	r0, #54	; 0x36
 800163c:	f000 ff1c 	bl	8002478 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_InitTick+0xa4>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <HAL_InitTick+0xa4>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_InitTick+0xa4>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800165c:	f107 0210 	add.w	r2, r7, #16
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f004 f9f6 	bl	8005a58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800166c:	f004 f9cc 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 8001670:	4603      	mov	r3, r0
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_InitTick+0xa8>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	3b01      	subs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_InitTick+0xac>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_InitTick+0xb0>)
 8001688:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_InitTick+0xac>)
 800168c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001690:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_InitTick+0xac>)
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_InitTick+0xac>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_InitTick+0xac>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_InitTick+0xac>)
 80016a6:	f004 fc46 	bl	8005f36 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <HAL_InitTick+0xac>)
 80016b2:	f004 fc75 	bl	8005fa0 <HAL_TIM_Base_Start_IT>
 80016b6:	4603      	mov	r3, r0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	20008994 	.word	0x20008994
 80016d0:	40001000 	.word	0x40001000

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <USART2_IRQHandler+0x10>)
 800170e:	f004 fed5 	bl	80064bc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200088dc 	.word	0x200088dc

0800171c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM6_DAC_IRQHandler+0x10>)
 8001722:	f004 fc61 	bl	8005fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20008994 	.word	0x20008994

08001730 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <LTDC_IRQHandler+0x10>)
 8001736:	f003 f9e7 	bl	8004b08 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200087e4 	.word	0x200087e4

08001744 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA2D_IRQHandler+0x10>)
 800174a:	f001 f8a8 	bl	800289e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20008920 	.word	0x20008920

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001772:	f01c f80f 	bl	801d794 <__errno>
 8001776:	4602      	mov	r2, r0
 8001778:	2316      	movs	r3, #22
 800177a:	6013      	str	r3, [r2, #0]
	return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
	while (1) {}		/* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
	}

return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
	}
	return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
	return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f01b ff74 	bl	801d794 <__errno>
 80018ac:	4602      	mov	r2, r0
 80018ae:	230c      	movs	r3, #12
 80018b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20030000 	.word	0x20030000
 80018d8:	00001000 	.word	0x00001000
 80018dc:	20000170 	.word	0x20000170
 80018e0:	20008ad0 	.word	0x20008ad0

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <SystemInit+0x28>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <SystemInit+0x28>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <SystemInit+0x28>)
 80018fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001916:	e003      	b.n	8001920 <LoopCopyDataInit>

08001918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800191a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800191c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800191e:	3104      	adds	r1, #4

08001920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001928:	d3f6      	bcc.n	8001918 <CopyDataInit>
  ldr  r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800192c:	e002      	b.n	8001934 <LoopFillZerobss>

0800192e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800192e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001930:	f842 3b04 	str.w	r3, [r2], #4

08001934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001938:	d3f9      	bcc.n	800192e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193a:	f7ff ffd3 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f01b ff41 	bl	801d7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7fe fe25 	bl	8000590 <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001948:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800194c:	0803f9f8 	.word	0x0803f9f8
  ldr  r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001954:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8001958:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 800195c:	20008ad0 	.word	0x20008ad0

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>

08001962 <exc7200_Init>:
  * @brief  Initialize the exc7200 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void exc7200_Init(uint16_t DeviceAddr)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800196c:	f00d fc7c 	bl	800f268 <IOE_Init>
  
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <exc7200_Reset>:
  * @brief  Reset the exc7200 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void exc7200_Reset(uint16_t DeviceAddr)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]

}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <exc7200_ReadID>:
  * @brief  Read the exc7200 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t exc7200_ReadID(uint16_t DeviceAddr)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <exc7200_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void exc7200_TS_Start(uint16_t DeviceAddr)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	80fb      	strh	r3, [r7, #6]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <exc7200_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t exc7200_TS_DetectTouch(uint16_t DeviceAddr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
  */
  static uint32_t noTouchCounter = 0;
  static uint8_t lastTouched = 0;  
  
  /* Read TS data : Send I2C Slave address + 1 Bit0=1 for:read */
  IOE_ReadMultiple(DeviceAddr | 1, EXC7200_READ_CMD, aBufferTS, 10);  
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	b2d8      	uxtb	r0, r3
 80019d0:	230a      	movs	r3, #10
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <exc7200_TS_DetectTouch+0x64>)
 80019d4:	2109      	movs	r1, #9
 80019d6:	f00d fc7a 	bl	800f2ce <IOE_ReadMultiple>

  /* check for first byte */
  if (aBufferTS[1]==0x83 && noTouchCounter > 4) 
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <exc7200_TS_DetectTouch+0x64>)
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	2b83      	cmp	r3, #131	; 0x83
 80019e0:	d108      	bne.n	80019f4 <exc7200_TS_DetectTouch+0x38>
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <exc7200_TS_DetectTouch+0x68>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d904      	bls.n	80019f4 <exc7200_TS_DetectTouch+0x38>
  {	
    lastTouched = 1;
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <exc7200_TS_DetectTouch+0x6c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
    return 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e010      	b.n	8001a16 <exc7200_TS_DetectTouch+0x5a>
  }
  if (lastTouched)
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <exc7200_TS_DetectTouch+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <exc7200_TS_DetectTouch+0x4e>
  {
    lastTouched = 0;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <exc7200_TS_DetectTouch+0x6c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    noTouchCounter = 0;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <exc7200_TS_DetectTouch+0x68>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e004      	b.n	8001a14 <exc7200_TS_DetectTouch+0x58>
  }
  else
  {
    noTouchCounter++;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <exc7200_TS_DetectTouch+0x68>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <exc7200_TS_DetectTouch+0x68>)
 8001a12:	6013      	str	r3, [r2, #0]
  }
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200089d4 	.word	0x200089d4
 8001a24:	20000174 	.word	0x20000174
 8001a28:	20000178 	.word	0x20000178

08001a2c <exc7200_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void exc7200_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	81fb      	strh	r3, [r7, #14]
  /* Calculate positions */
  *X = (((aBufferTS[3]&0x00ff) << 4) | ((aBufferTS[2]&0x00f0) >> 4));
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <exc7200_TS_GetXY+0x98>)
 8001a3c:	78db      	ldrb	r3, [r3, #3]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <exc7200_TS_GetXY+0x98>)
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	801a      	strh	r2, [r3, #0]
  *Y = (((aBufferTS[5]&0x00ff) << 4) | ((aBufferTS[4]&0x00f0) >> 4));
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <exc7200_TS_GetXY+0x98>)
 8001a58:	795b      	ldrb	r3, [r3, #5]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <exc7200_TS_GetXY+0x98>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	801a      	strh	r2, [r3, #0]
  
  *X = (*X * 640) / 2048;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da01      	bge.n	8001a88 <exc7200_TS_GetXY+0x5c>
 8001a84:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a88:	12db      	asrs	r3, r3, #11
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	801a      	strh	r2, [r3, #0]
  *Y = (*Y * 480) / 2048;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da01      	bge.n	8001aa6 <exc7200_TS_GetXY+0x7a>
 8001aa2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001aa6:	12db      	asrs	r3, r3, #11
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	801a      	strh	r2, [r3, #0]
  
  /* Dummy Read to deactivate read mode */
  IOE_ReadMultiple(DeviceAddr, EXC7200_READ_CMD, aBufferTS, 10);      
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	b2d8      	uxtb	r0, r3
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <exc7200_TS_GetXY+0x98>)
 8001ab6:	2109      	movs	r1, #9
 8001ab8:	f00d fc09 	bl	800f2ce <IOE_ReadMultiple>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200089d4 	.word	0x200089d4

08001ac8 <exc7200_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void exc7200_TS_EnableIT(uint16_t DeviceAddr)
{  
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <exc7200_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void exc7200_TS_DisableIT(uint16_t DeviceAddr)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	80fb      	strh	r3, [r7, #6]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <exc7200_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t exc7200_TS_ITStatus(uint16_t DeviceAddr)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <exc7200_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void exc7200_TS_ClearIT(uint16_t DeviceAddr)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa59 	bl	8001fe8 <stmpe811_GetInstance>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2bff      	cmp	r3, #255	; 0xff
 8001b3e:	d112      	bne.n	8001b66 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 fa51 	bl	8001fe8 <stmpe811_GetInstance>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d80a      	bhi.n	8001b66 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	b2d1      	uxtb	r1, r2
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <stmpe811_Init+0x4c>)
 8001b58:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001b5a:	f00d fb85 	bl	800f268 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f807 	bl	8001b74 <stmpe811_Reset>
    }
  }
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000017c 	.word	0x2000017c

08001b74 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2202      	movs	r2, #2
 8001b84:	2103      	movs	r1, #3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00d fb7b 	bl	800f282 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f00d fbd0 	bl	800f332 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f00d fb71 	bl	800f282 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f00d fbc6 	bl	800f332 <IOE_Delay>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001bae:	b590      	push	{r4, r7, lr}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001bb8:	f00d fb56 	bl	800f268 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00d fb70 	bl	800f2a8 <IOE_Read>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00d fb67 	bl	800f2a8 <IOE_Read>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001bde:	4323      	orrs	r3, r4
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	b29b      	uxth	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2109      	movs	r1, #9
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00d fb51 	bl	800f2a8 <IOE_Read>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	2109      	movs	r1, #9
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00d fb31 	bl	800f282 <IOE_Write>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2109      	movs	r1, #9
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00d fb33 	bl	800f2a8 <IOE_Read>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	2109      	movs	r1, #9
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00d fb13 	bl	800f282 <IOE_Write>
    
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	80fb      	strh	r3, [r7, #6]
 8001c70:	4613      	mov	r3, r2
 8001c72:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	210a      	movs	r1, #10
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00d fb12 	bl	800f2a8 <IOE_Read>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	797b      	ldrb	r3, [r7, #5]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	210a      	movs	r1, #10
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00d faf2 	bl	800f282 <IOE_Write>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	460a      	mov	r2, r1
 8001cb0:	80fb      	strh	r3, [r7, #6]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	210a      	movs	r1, #10
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00d faf1 	bl	800f2a8 <IOE_Read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001cca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	b25a      	sxtb	r2, r3
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	210a      	movs	r1, #10
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00d facc 	bl	800f282 <IOE_Write>
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460a      	mov	r2, r1
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	210b      	movs	r1, #11
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00d facd 	bl	800f2a8 <IOE_Read>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	797b      	ldrb	r3, [r7, #5]
 8001d14:	4013      	ands	r3, r2
 8001d16:	b2db      	uxtb	r3, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	797a      	ldrb	r2, [r7, #5]
 8001d36:	210b      	movs	r1, #11
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00d faa2 	bl	800f282 <IOE_Write>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	6039      	str	r1, [r7, #0]
 8001d50:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2117      	movs	r1, #23
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00d faa3 	bl	800f2a8 <IOE_Read>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4013      	ands	r3, r2
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	2117      	movs	r1, #23
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00d fa7e 	bl	800f282 <IOE_Write>
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00d fa82 	bl	800f2a8 <IOE_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	f023 0304 	bic.w	r3, r3, #4
 8001dae:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	2104      	movs	r1, #4
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00d fa62 	bl	800f282 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	21f0      	movs	r1, #240	; 0xf0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ffbf 	bl	8001d46 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00d fa52 	bl	800f282 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2249      	movs	r2, #73	; 0x49
 8001de4:	2120      	movs	r1, #32
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00d fa4b 	bl	800f282 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001dec:	2002      	movs	r0, #2
 8001dee:	f00d faa0 	bl	800f332 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2201      	movs	r2, #1
 8001df8:	2121      	movs	r1, #33	; 0x21
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f00d fa41 	bl	800f282 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	229a      	movs	r2, #154	; 0x9a
 8001e06:	2141      	movs	r1, #65	; 0x41
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00d fa3a 	bl	800f282 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2201      	movs	r2, #1
 8001e14:	214a      	movs	r1, #74	; 0x4a
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00d fa33 	bl	800f282 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	214b      	movs	r1, #75	; 0x4b
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00d fa2c 	bl	800f282 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2200      	movs	r2, #0
 8001e30:	214b      	movs	r1, #75	; 0x4b
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00d fa25 	bl	800f282 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2156      	movs	r1, #86	; 0x56
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00d fa1e 	bl	800f282 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2158      	movs	r1, #88	; 0x58
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00d fa17 	bl	800f282 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2140      	movs	r1, #64	; 0x40
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00d fa10 	bl	800f282 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	210b      	movs	r1, #11
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00d fa09 	bl	800f282 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001e70:	2002      	movs	r0, #2
 8001e72:	f00d fa5e 	bl	800f332 <IOE_Delay>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2140      	movs	r1, #64	; 0x40
 8001e92:	4618      	mov	r0, r3
 8001e94:	f00d fa08 	bl	800f2a8 <IOE_Read>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	214c      	movs	r1, #76	; 0x4c
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00d f9f6 	bl	800f2a8 <IOE_Read>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e00d      	b.n	8001ee4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2201      	movs	r2, #1
 8001ece:	214b      	movs	r1, #75	; 0x4b
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00d f9d6 	bl	800f282 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	214b      	movs	r1, #75	; 0x4b
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00d f9cf 	bl	800f282 <IOE_Write>
  }
  
  return ret;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001efc:	89fb      	ldrh	r3, [r7, #14]
 8001efe:	b2d8      	uxtb	r0, r3
 8001f00:	f107 0210 	add.w	r2, r7, #16
 8001f04:	2304      	movs	r3, #4
 8001f06:	21d7      	movs	r1, #215	; 0xd7
 8001f08:	f00d f9e1 	bl	800f2ce <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001f0c:	7c3b      	ldrb	r3, [r7, #16]
 8001f0e:	061a      	lsls	r2, r3, #24
 8001f10:	7c7b      	ldrb	r3, [r7, #17]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	7cbb      	ldrb	r3, [r7, #18]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	7cfa      	ldrb	r2, [r7, #19]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	0d1b      	lsrs	r3, r3, #20
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2201      	movs	r2, #1
 8001f42:	214b      	movs	r1, #75	; 0x4b
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00d f99c 	bl	800f282 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2200      	movs	r2, #0
 8001f50:	214b      	movs	r1, #75	; 0x4b
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00d f995 	bl	800f282 <IOE_Write>
}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001f6a:	f00d f984 	bl	800f276 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	211f      	movs	r1, #31
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fe76 	bl	8001c64 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fe36 	bl	8001bec <stmpe811_EnableGlobalIT>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fe47 	bl	8001c28 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	211f      	movs	r1, #31
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe81 	bl	8001ca6 <stmpe811_DisableITSource>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	211f      	movs	r1, #31
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe99 	bl	8001cf2 <stmpe811_ReadGITStatus>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	211f      	movs	r1, #31
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fea1 	bl	8001d20 <stmpe811_ClearGlobalIT>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e00b      	b.n	8002014 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <stmpe811_GetInstance+0x40>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	b29b      	uxth	r3, r3
 8002004:	88fa      	ldrh	r2, [r7, #6]
 8002006:	429a      	cmp	r2, r3
 8002008:	d101      	bne.n	800200e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	e006      	b.n	800201c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	3301      	adds	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d9f0      	bls.n	8001ffc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800201a:	23ff      	movs	r3, #255	; 0xff
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	2000017c 	.word	0x2000017c

0800202c <ts3510_Init>:
  * @brief  Initialize the ts3510 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void ts3510_Init(uint16_t DeviceAddr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002036:	f00d f917 	bl	800f268 <IOE_Init>
  
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <ts3510_Reset>:
  * @brief  Reset the ts3510 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void ts3510_Reset(uint16_t DeviceAddr)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	80fb      	strh	r3, [r7, #6]

}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <ts3510_ReadID>:
  * @brief  Read the ts3510 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t ts3510_ReadID(uint16_t DeviceAddr)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <ts3510_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void ts3510_TS_Start(uint16_t DeviceAddr)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <ts3510_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t ts3510_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  uint8_t aBufferTS[11];
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <ts3510_TS_DetectTouch+0x58>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	813b      	strh	r3, [r7, #8]
   
  /* Prepare for LCD read data */
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	b2d8      	uxtb	r0, r3
 800209c:	f107 0208 	add.w	r2, r7, #8
 80020a0:	2302      	movs	r3, #2
 80020a2:	2100      	movs	r1, #0
 80020a4:	f00d f92d 	bl	800f302 <IOE_WriteMultiple>

  /* Read TS data from LCD */
  IOE_ReadMultiple(DeviceAddr, TS3510_READ_BLOCK_REG, aBufferTS, 11);  
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	b2d8      	uxtb	r0, r3
 80020ac:	f107 020c 	add.w	r2, r7, #12
 80020b0:	230b      	movs	r3, #11
 80020b2:	218a      	movs	r1, #138	; 0x8a
 80020b4:	f00d f90b 	bl	800f2ce <IOE_ReadMultiple>

  /* check for first byte */
  if((aBufferTS[1] == 0xFF) && (aBufferTS[2] == 0xFF) && (aBufferTS[3] == 0xFF) && (aBufferTS[4] == 0xFF))
 80020b8:	7b7b      	ldrb	r3, [r7, #13]
 80020ba:	2bff      	cmp	r3, #255	; 0xff
 80020bc:	d10a      	bne.n	80020d4 <ts3510_TS_DetectTouch+0x4c>
 80020be:	7bbb      	ldrb	r3, [r7, #14]
 80020c0:	2bff      	cmp	r3, #255	; 0xff
 80020c2:	d107      	bne.n	80020d4 <ts3510_TS_DetectTouch+0x4c>
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d104      	bne.n	80020d4 <ts3510_TS_DetectTouch+0x4c>
 80020ca:	7c3b      	ldrb	r3, [r7, #16]
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d101      	bne.n	80020d4 <ts3510_TS_DetectTouch+0x4c>
  {
    return 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <ts3510_TS_DetectTouch+0x4e>
  }
  else
  {
    return 1;
 80020d4:	2301      	movs	r3, #1
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	0801e780 	.word	0x0801e780

080020e4 <ts3510_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void ts3510_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	81fb      	strh	r3, [r7, #14]
  uint8_t aBufferTS[11];
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <ts3510_TS_GetXY+0x78>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	823b      	strh	r3, [r7, #16]
  
  /* Prepare for LCD read data */
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	b2d8      	uxtb	r0, r3
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	2302      	movs	r3, #2
 8002102:	2100      	movs	r1, #0
 8002104:	f00d f8fd 	bl	800f302 <IOE_WriteMultiple>

  /* Read TS data from LCD */
  IOE_ReadMultiple(DeviceAddr, TS3510_READ_BLOCK_REG, aBufferTS, 11);  
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	b2d8      	uxtb	r0, r3
 800210c:	f107 0214 	add.w	r2, r7, #20
 8002110:	230b      	movs	r3, #11
 8002112:	218a      	movs	r1, #138	; 0x8a
 8002114:	f00d f8db 	bl	800f2ce <IOE_ReadMultiple>

  /* Calculate positions */
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8002118:	7d7b      	ldrb	r3, [r7, #21]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	7dba      	ldrb	r2, [r7, #22]
 800211e:	4313      	orrs	r3, r2
 8002120:	031b      	lsls	r3, r3, #12
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <ts3510_TS_GetXY+0x7c>)
 8002124:	fb82 1203 	smull	r1, r2, r2, r3
 8002128:	1212      	asrs	r2, r2, #8
 800212a:	17db      	asrs	r3, r3, #31
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	b29a      	uxth	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	801a      	strh	r2, [r3, #0]
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	7e3a      	ldrb	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <ts3510_TS_GetXY+0x80>)
 8002140:	fb82 1203 	smull	r1, r2, r2, r3
 8002144:	441a      	add	r2, r3
 8002146:	1212      	asrs	r2, r2, #8
 8002148:	17db      	asrs	r3, r3, #31
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	801a      	strh	r2, [r3, #0]
  
  /* set position to be relative to 12bits resolution */
}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	0801e780 	.word	0x0801e780
 8002160:	66666667 	.word	0x66666667
 8002164:	88888889 	.word	0x88888889

08002168 <ts3510_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void ts3510_TS_EnableIT(uint16_t DeviceAddr)
{  
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <ts3510_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void ts3510_TS_DisableIT(uint16_t DeviceAddr)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	80fb      	strh	r3, [r7, #6]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <ts3510_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t ts3510_TS_ITStatus(uint16_t DeviceAddr)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  return 0;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <ts3510_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void ts3510_TS_ClearIT(uint16_t DeviceAddr)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <HAL_Init+0x40>)
 80021ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_Init+0x40>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_Init+0x40>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f91c 	bl	800242a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fa14 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7fe ff8e 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000084 	.word	0x20000084
 800222c:	200089e0 	.word	0x200089e0

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	200089e0 	.word	0x200089e0

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_Delay+0x40>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000084 	.word	0x20000084

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db10      	blt.n	8002360 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <__NVIC_DisableIRQ+0x40>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	3320      	adds	r3, #32
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800235c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff2a 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002452:	f7ff ff3f 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f7ff ffb1 	bl	80023c4 <NVIC_EncodePriority>
 8002462:	4602      	mov	r2, r0
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff80 	bl	8002370 <__NVIC_SetPriority>
}
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff32 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff42 	bl	800232c <__NVIC_DisableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	795b      	ldrb	r3, [r3, #5]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fe4c 	bl	8001170 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00c      	b.n	8002520 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e03b      	b.n	80025b6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fe2e 	bl	80011b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257c:	f023 0107 	bic.w	r1, r3, #7
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002596:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68d1      	ldr	r1, [r2, #12]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e05f      	b.n	8002692 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_DMA2D_DeInit+0xdc>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02e      	beq.n	800263c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8c1 	bl	8002774 <HAL_DMA2D_Abort>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d021      	beq.n	800263c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e04a      	b.n	8002692 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b20      	cmp	r3, #32
 8002608:	d108      	bne.n	800261c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800260a:	2100      	movs	r1, #0
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f8f7 	bl	8002800 <HAL_DMA2D_CLUTLoading_Abort>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d011      	beq.n	800263c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e03a      	b.n	8002692 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d108      	bne.n	800263c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800262a:	2101      	movs	r1, #1
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8e7 	bl	8002800 <HAL_DMA2D_CLUTLoading_Abort>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e02a      	b.n	8002692 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	223f      	movs	r2, #63	; 0x3f
 800264a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe fdc5 	bl	8001204 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_DMA2D_Start_IT+0x1c>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e020      	b.n	80026fe <HAL_DMA2D_Start_IT+0x5e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fa84 	bl	8002be4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80026ea:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af02      	add	r7, sp, #8
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_DMA2D_BlendingStart_IT+0x1c>
 800271e:	2302      	movs	r3, #2
 8002720:	e024      	b.n	800276c <HAL_DMA2D_BlendingStart_IT+0x66>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fa4d 	bl	8002be4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002758:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0205 	bic.w	r2, r3, #5
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0204 	orr.w	r2, r2, #4
 800278e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002790:	f7ff fd4e 	bl	8002230 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002796:	e017      	b.n	80027c8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002798:	f7ff fd4a 	bl	8002230 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a6:	d90f      	bls.n	80027c8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2203      	movs	r2, #3
 80027b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e017      	b.n	80027f8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e0      	bne.n	8002798 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80027e4:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3324      	adds	r3, #36	; 0x24
 8002810:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0204 	orr.w	r2, r2, #4
 8002820:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d103      	bne.n	8002830 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	331c      	adds	r3, #28
 800282e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002830:	f7ff fcfe 	bl	8002230 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002836:	e017      	b.n	8002868 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002838:	f7ff fcfa 	bl	8002230 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002846:	d90f      	bls.n	8002868 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e016      	b.n	8002896 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e1      	bne.n	8002838 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002882:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d026      	beq.n	800290e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d021      	beq.n	800290e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d026      	beq.n	8002966 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d021      	beq.n	8002966 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002930:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	f043 0202 	orr.w	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d026      	beq.n	80029be <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002976:	2b00      	cmp	r3, #0
 8002978:	d021      	beq.n	80029be <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2208      	movs	r2, #8
 8002990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2204      	movs	r2, #4
 80029a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00e      	beq.n	80029f0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2204      	movs	r2, #4
 80029e8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f853 	bl	8002a96 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d024      	beq.n	8002a44 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01f      	beq.n	8002a44 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01f      	beq.n	8002a8e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01a      	beq.n	8002a8e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f80e 	bl	8002aaa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_DMA2D_ConfigLayer+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e079      	b.n	8002bd4 <HAL_DMA2D_ConfigLayer+0x114>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	3318      	adds	r3, #24
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_DMA2D_ConfigLayer+0x120>)
 8002b0c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b0a      	cmp	r3, #10
 8002b14:	d003      	beq.n	8002b1e <HAL_DMA2D_ConfigLayer+0x5e>
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d107      	bne.n	8002b2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e005      	b.n	8002b3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d120      	bne.n	8002b82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	ea02 0103 	and.w	r1, r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b0a      	cmp	r3, #10
 8002b68:	d003      	beq.n	8002b72 <HAL_DMA2D_ConfigLayer+0xb2>
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b09      	cmp	r3, #9
 8002b70:	d127      	bne.n	8002bc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b80:	e01f      	b.n	8002bc2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	ea02 0103 	and.w	r1, r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b0a      	cmp	r3, #10
 8002baa:	d003      	beq.n	8002bb4 <HAL_DMA2D_ConfigLayer+0xf4>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	d106      	bne.n	8002bc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002bc0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	ff03000f 	.word	0xff03000f

08002be4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b08b      	sub	sp, #44	; 0x2c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	431a      	orrs	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c1c:	d174      	bne.n	8002d08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c24:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c2c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c34:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	e053      	b.n	8002cfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	e048      	b.n	8002cfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d111      	bne.n	8002c98 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	0cdb      	lsrs	r3, r3, #19
 8002c78:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	0a9b      	lsrs	r3, r3, #10
 8002c7e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08db      	lsrs	r3, r3, #3
 8002c84:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	02db      	lsls	r3, r3, #11
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	e032      	b.n	8002cfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d117      	bne.n	8002cd0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	0fdb      	lsrs	r3, r3, #31
 8002ca4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	0cdb      	lsrs	r3, r3, #19
 8002caa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	0adb      	lsrs	r3, r3, #11
 8002cb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	03db      	lsls	r3, r3, #15
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	e016      	b.n	8002cfe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	0f1b      	lsrs	r3, r3, #28
 8002cd4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	0d1b      	lsrs	r3, r3, #20
 8002cda:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	0b1b      	lsrs	r3, r3, #12
 8002ce0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	011a      	lsls	r2, r3, #4
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d06:	e003      	b.n	8002d10 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
}
 8002d10:	bf00      	nop
 8002d12:	372c      	adds	r7, #44	; 0x2c
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e177      	b.n	8003028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 8166 	bne.w	8003022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d00b      	beq.n	8002d76 <HAL_GPIO_Init+0x5a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d6a:	2b11      	cmp	r3, #17
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0xfc>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b12      	cmp	r3, #18
 8002e16:	d123      	bne.n	8002e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80c0 	beq.w	8003022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_GPIO_Init+0x320>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a64      	ldr	r2, [pc, #400]	; (800303c <HAL_GPIO_Init+0x320>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b62      	ldr	r3, [pc, #392]	; (800303c <HAL_GPIO_Init+0x320>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ebe:	4a60      	ldr	r2, [pc, #384]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a57      	ldr	r2, [pc, #348]	; (8003044 <HAL_GPIO_Init+0x328>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d037      	beq.n	8002f5a <HAL_GPIO_Init+0x23e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a56      	ldr	r2, [pc, #344]	; (8003048 <HAL_GPIO_Init+0x32c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_GPIO_Init+0x23a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a55      	ldr	r2, [pc, #340]	; (800304c <HAL_GPIO_Init+0x330>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d02b      	beq.n	8002f52 <HAL_GPIO_Init+0x236>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a54      	ldr	r2, [pc, #336]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d025      	beq.n	8002f4e <HAL_GPIO_Init+0x232>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_GPIO_Init+0x338>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <HAL_GPIO_Init+0x22e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_GPIO_Init+0x33c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x22a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a51      	ldr	r2, [pc, #324]	; (800305c <HAL_GPIO_Init+0x340>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_GPIO_Init+0x344>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4f      	ldr	r2, [pc, #316]	; (8003064 <HAL_GPIO_Init+0x348>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_GPIO_Init+0x34c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f32:	2309      	movs	r3, #9
 8002f34:	e012      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f36:	230a      	movs	r3, #10
 8002f38:	e010      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	e00e      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00c      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f42:	2306      	movs	r3, #6
 8002f44:	e00a      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f46:	2305      	movs	r3, #5
 8002f48:	e008      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e004      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_GPIO_Init+0x240>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f002 0203 	and.w	r2, r2, #3
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	4093      	lsls	r3, r2
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6c:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_GPIO_Init+0x350>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f9e:	4a33      	ldr	r2, [pc, #204]	; (800306c <HAL_GPIO_Init+0x350>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fa4:	4b31      	ldr	r3, [pc, #196]	; (800306c <HAL_GPIO_Init+0x350>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc8:	4a28      	ldr	r2, [pc, #160]	; (800306c <HAL_GPIO_Init+0x350>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_GPIO_Init+0x350>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_GPIO_Init+0x350>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_GPIO_Init+0x350>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <HAL_GPIO_Init+0x350>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3301      	adds	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	f67f ae84 	bls.w	8002d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003030:	bf00      	nop
 8003032:	3724      	adds	r7, #36	; 0x24
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800
 8003044:	40020000 	.word	0x40020000
 8003048:	40020400 	.word	0x40020400
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021000 	.word	0x40021000
 8003058:	40021400 	.word	0x40021400
 800305c:	40021800 	.word	0x40021800
 8003060:	40021c00 	.word	0x40021c00
 8003064:	40022000 	.word	0x40022000
 8003068:	40022400 	.word	0x40022400
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e0d9      	b.n	8003240 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800308c:	2201      	movs	r2, #1
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	f040 80c9 	bne.w	800323a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030a8:	4a6a      	ldr	r2, [pc, #424]	; (8003254 <HAL_GPIO_DeInit+0x1e4>)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a62      	ldr	r2, [pc, #392]	; (8003258 <HAL_GPIO_DeInit+0x1e8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d037      	beq.n	8003142 <HAL_GPIO_DeInit+0xd2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a61      	ldr	r2, [pc, #388]	; (800325c <HAL_GPIO_DeInit+0x1ec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_GPIO_DeInit+0xce>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a60      	ldr	r2, [pc, #384]	; (8003260 <HAL_GPIO_DeInit+0x1f0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02b      	beq.n	800313a <HAL_GPIO_DeInit+0xca>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a5f      	ldr	r2, [pc, #380]	; (8003264 <HAL_GPIO_DeInit+0x1f4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_DeInit+0xc6>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a5e      	ldr	r2, [pc, #376]	; (8003268 <HAL_GPIO_DeInit+0x1f8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_DeInit+0xc2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_GPIO_DeInit+0x1fc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_DeInit+0xbe>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_GPIO_DeInit+0x200>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_DeInit+0xba>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_GPIO_DeInit+0x204>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_DeInit+0xb6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a5a      	ldr	r2, [pc, #360]	; (8003278 <HAL_GPIO_DeInit+0x208>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_DeInit+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a59      	ldr	r2, [pc, #356]	; (800327c <HAL_GPIO_DeInit+0x20c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_DeInit+0xae>
 800311a:	2309      	movs	r3, #9
 800311c:	e012      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 800311e:	230a      	movs	r3, #10
 8003120:	e010      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 8003122:	2308      	movs	r3, #8
 8003124:	e00e      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 8003126:	2307      	movs	r3, #7
 8003128:	e00c      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 800312a:	2306      	movs	r3, #6
 800312c:	e00a      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 800312e:	2305      	movs	r3, #5
 8003130:	e008      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 8003132:	2304      	movs	r3, #4
 8003134:	e006      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_DeInit+0xd4>
 8003142:	2300      	movs	r3, #0
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d132      	bne.n	80031ba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	4948      	ldr	r1, [pc, #288]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 800315e:	4013      	ands	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	4945      	ldr	r1, [pc, #276]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 800316c:	4013      	ands	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43db      	mvns	r3, r3
 8003178:	4941      	ldr	r1, [pc, #260]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 800317a:	4013      	ands	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800317e:	4b40      	ldr	r3, [pc, #256]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	493e      	ldr	r1, [pc, #248]	; (8003280 <HAL_GPIO_DeInit+0x210>)
 8003188:	4013      	ands	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_GPIO_DeInit+0x1e4>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	4829      	ldr	r0, [pc, #164]	; (8003254 <HAL_GPIO_DeInit+0x1e4>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	400a      	ands	r2, r1
 80031b4:	3302      	adds	r3, #2
 80031b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2103      	movs	r1, #3
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	08d2      	lsrs	r2, r2, #3
 80031f0:	4019      	ands	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2103      	movs	r1, #3
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	2101      	movs	r1, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	401a      	ands	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2103      	movs	r1, #3
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f af22 	bls.w	800308c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40013800 	.word	0x40013800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40021400 	.word	0x40021400
 8003270:	40021800 	.word	0x40021800
 8003274:	40021c00 	.word	0x40021c00
 8003278:	40022000 	.word	0x40022000
 800327c:	40022400 	.word	0x40022400
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a0:	e003      	b.n	80032aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e11f      	b.n	800350a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd ffaa 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800331c:	f002 fb74 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 8003320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a7b      	ldr	r2, [pc, #492]	; (8003514 <HAL_I2C_Init+0x25c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d807      	bhi.n	800333c <HAL_I2C_Init+0x84>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_I2C_Init+0x260>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e006      	b.n	800334a <HAL_I2C_Init+0x92>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_I2C_Init+0x264>)
 8003340:	4293      	cmp	r3, r2
 8003342:	bf94      	ite	ls
 8003344:	2301      	movls	r3, #1
 8003346:	2300      	movhi	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0db      	b.n	800350a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a72      	ldr	r2, [pc, #456]	; (8003520 <HAL_I2C_Init+0x268>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9b      	lsrs	r3, r3, #18
 800335c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a64      	ldr	r2, [pc, #400]	; (8003514 <HAL_I2C_Init+0x25c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <HAL_I2C_Init+0xd4>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	e009      	b.n	80033a0 <HAL_I2C_Init+0xe8>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_I2C_Init+0x26c>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	3301      	adds	r3, #1
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4956      	ldr	r1, [pc, #344]	; (8003514 <HAL_I2C_Init+0x25c>)
 80033bc:	428b      	cmp	r3, r1
 80033be:	d80d      	bhi.n	80033dc <HAL_I2C_Init+0x124>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e59      	subs	r1, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	bf38      	it	cc
 80033d8:	2304      	movcc	r3, #4
 80033da:	e04f      	b.n	800347c <HAL_I2C_Init+0x1c4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <HAL_I2C_Init+0x150>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e012      	b.n	800342e <HAL_I2C_Init+0x176>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x17e>
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_I2C_Init+0x1c4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <HAL_I2C_Init+0x1a4>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1e58      	subs	r0, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	e00f      	b.n	800347c <HAL_I2C_Init+0x1c4>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6809      	ldr	r1, [r1, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6911      	ldr	r1, [r2, #16]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	000186a0 	.word	0x000186a0
 8003518:	001e847f 	.word	0x001e847f
 800351c:	003d08ff 	.word	0x003d08ff
 8003520:	431bde83 	.word	0x431bde83
 8003524:	10624dd3 	.word	0x10624dd3

08003528 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e021      	b.n	800357e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2224      	movs	r2, #36	; 0x24
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd feb8 	bl	80012c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	; 0x30
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	460b      	mov	r3, r1
 8003596:	817b      	strh	r3, [r7, #10]
 8003598:	4613      	mov	r3, r2
 800359a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800359c:	f7fe fe48 	bl	8002230 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	f040 820b 	bne.w	80039c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2319      	movs	r3, #25
 80035b6:	2201      	movs	r2, #1
 80035b8:	497c      	ldr	r1, [pc, #496]	; (80037ac <HAL_I2C_Master_Receive+0x224>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 ff7c 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	e1fe      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_I2C_Master_Receive+0x50>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e1f7      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d007      	beq.n	80035fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2222      	movs	r2, #34	; 0x22
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2210      	movs	r2, #16
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	893a      	ldrh	r2, [r7, #8]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_I2C_Master_Receive+0x228>)
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003640:	8979      	ldrh	r1, [r7, #10]
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fcf0 	bl	800402c <I2C_MasterRequestRead>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1b8      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d113      	bne.n	8003686 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e18c      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	2b01      	cmp	r3, #1
 800368c:	d11b      	bne.n	80036c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e16c      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d11b      	bne.n	8003706 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	e14c      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800372c:	e138      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	2b03      	cmp	r3, #3
 8003734:	f200 80f1 	bhi.w	800391a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	2b01      	cmp	r3, #1
 800373e:	d123      	bne.n	8003788 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f001 f80f 	bl	8004768 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e139      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003786:	e10b      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	2b02      	cmp	r3, #2
 800378e:	d14e      	bne.n	800382e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	2200      	movs	r2, #0
 8003798:	4906      	ldr	r1, [pc, #24]	; (80037b4 <HAL_I2C_Master_Receive+0x22c>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fe8c 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e10e      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
 80037aa:	bf00      	nop
 80037ac:	00100002 	.word	0x00100002
 80037b0:	ffff0000 	.word	0xffff0000
 80037b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800382c:	e0b8      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	2200      	movs	r2, #0
 8003836:	4966      	ldr	r1, [pc, #408]	; (80039d0 <HAL_I2C_Master_Receive+0x448>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fe3d 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0bf      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2200      	movs	r2, #0
 8003892:	494f      	ldr	r1, [pc, #316]	; (80039d0 <HAL_I2C_Master_Receive+0x448>)
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fe0f 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e091      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003918:	e042      	b.n	80039a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 ff22 	bl	8004768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e04c      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d118      	bne.n	80039a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f aec2 	bne.w	800372e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	00010004 	.word	0x00010004

080039d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ee:	f7fe fc1f 	bl	8002230 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	f040 80d9 	bne.w	8003bb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2319      	movs	r3, #25
 8003a08:	2201      	movs	r2, #1
 8003a0a:	496d      	ldr	r1, [pc, #436]	; (8003bc0 <HAL_I2C_Mem_Write+0x1ec>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fd53 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_I2C_Mem_Write+0x56>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0c5      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x1e2>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d007      	beq.n	8003a50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2221      	movs	r2, #33	; 0x21
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2240      	movs	r2, #64	; 0x40
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a4d      	ldr	r2, [pc, #308]	; (8003bc4 <HAL_I2C_Mem_Write+0x1f0>)
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a92:	88f8      	ldrh	r0, [r7, #6]
 8003a94:	893a      	ldrh	r2, [r7, #8]
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb8e 	bl	80041c4 <I2C_RequestMemoryWrite>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d052      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e081      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fdd4 	bl	8004664 <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06b      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d11b      	bne.n	8003b54 <HAL_I2C_Mem_Write+0x180>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1aa      	bne.n	8003ab2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fdc0 	bl	80046e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e016      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	00100002 	.word	0x00100002
 8003bc4:	ffff0000 	.word	0xffff0000

08003bc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	817b      	strh	r3, [r7, #10]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	813b      	strh	r3, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003be2:	f7fe fb25 	bl	8002230 <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	f040 8208 	bne.w	8004006 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2319      	movs	r3, #25
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	497b      	ldr	r1, [pc, #492]	; (8003dec <HAL_I2C_Mem_Read+0x224>)
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fc59 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e1fb      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x56>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e1f4      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d007      	beq.n	8003c44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2222      	movs	r2, #34	; 0x22
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a5b      	ldr	r2, [pc, #364]	; (8003df0 <HAL_I2C_Mem_Read+0x228>)
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c86:	88f8      	ldrh	r0, [r7, #6]
 8003c88:	893a      	ldrh	r2, [r7, #8]
 8003c8a:	8979      	ldrh	r1, [r7, #10]
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	4603      	mov	r3, r0
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb28 	bl	80042ec <I2C_RequestMemoryRead>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1b0      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d113      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e184      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d11b      	bne.n	8003d16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e164      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d11b      	bne.n	8003d56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	e144      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d6c:	e138      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	f200 80f1 	bhi.w	8003f5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d123      	bne.n	8003dc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fcef 	bl	8004768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e139      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc6:	e10b      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d14e      	bne.n	8003e6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4906      	ldr	r1, [pc, #24]	; (8003df4 <HAL_I2C_Mem_Read+0x22c>)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fb6c 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e10e      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
 8003dea:	bf00      	nop
 8003dec:	00100002 	.word	0x00100002
 8003df0:	ffff0000 	.word	0xffff0000
 8003df4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e6c:	e0b8      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2200      	movs	r2, #0
 8003e76:	4966      	ldr	r1, [pc, #408]	; (8004010 <HAL_I2C_Mem_Read+0x448>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fb1d 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0bf      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	494f      	ldr	r1, [pc, #316]	; (8004010 <HAL_I2C_Mem_Read+0x448>)
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 faef 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e091      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f58:	e042      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fc02 	bl	8004768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e04c      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d118      	bne.n	8003fe0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f aec2 	bne.w	8003d6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	00010004 	.word	0x00010004

08004014 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	460b      	mov	r3, r1
 800403a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d006      	beq.n	8004066 <I2C_MasterRequestRead+0x3a>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d003      	beq.n	8004066 <I2C_MasterRequestRead+0x3a>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004064:	d108      	bne.n	8004078 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e00b      	b.n	8004090 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	2b11      	cmp	r3, #17
 800407e:	d107      	bne.n	8004090 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fa0b 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e078      	b.n	80041b4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ca:	d108      	bne.n	80040de <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
 80040dc:	e05e      	b.n	800419c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	11db      	asrs	r3, r3, #7
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 0306 	and.w	r3, r3, #6
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f063 030f 	orn	r3, r3, #15
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4930      	ldr	r1, [pc, #192]	; (80041bc <I2C_MasterRequestRead+0x190>)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa32 	bl	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e053      	b.n	80041b4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4929      	ldr	r1, [pc, #164]	; (80041c0 <I2C_MasterRequestRead+0x194>)
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fa22 	bl	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e043      	b.n	80041b4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004150:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f9aa 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e017      	b.n	80041b4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004184:	897b      	ldrh	r3, [r7, #10]
 8004186:	11db      	asrs	r3, r3, #7
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0306 	and.w	r3, r3, #6
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f063 030e 	orn	r3, r3, #14
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4907      	ldr	r1, [pc, #28]	; (80041c0 <I2C_MasterRequestRead+0x194>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f9df 	bl	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	00010008 	.word	0x00010008
 80041c0:	00010002 	.word	0x00010002

080041c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	817b      	strh	r3, [r7, #10]
 80041d6:	460b      	mov	r3, r1
 80041d8:	813b      	strh	r3, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f95c 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e05f      	b.n	80042e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004220:	897b      	ldrh	r3, [r7, #10]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800422e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	6a3a      	ldr	r2, [r7, #32]
 8004234:	492c      	ldr	r1, [pc, #176]	; (80042e8 <I2C_RequestMemoryWrite+0x124>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f995 	bl	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e04c      	b.n	80042e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425e:	6a39      	ldr	r1, [r7, #32]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f9ff 	bl	8004664 <I2C_WaitOnTXEFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2b04      	cmp	r3, #4
 8004272:	d107      	bne.n	8004284 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004282:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e02b      	b.n	80042e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428e:	893b      	ldrh	r3, [r7, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
 8004298:	e021      	b.n	80042de <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800429a:	893b      	ldrh	r3, [r7, #8]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	b29b      	uxth	r3, r3
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	6a39      	ldr	r1, [r7, #32]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f9d9 	bl	8004664 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d107      	bne.n	80042d0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e005      	b.n	80042e0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	00010002 	.word	0x00010002

080042ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	4608      	mov	r0, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	461a      	mov	r2, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	817b      	strh	r3, [r7, #10]
 80042fe:	460b      	mov	r3, r1
 8004300:	813b      	strh	r3, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	2200      	movs	r2, #0
 800432e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f8c0 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0a9      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	4951      	ldr	r1, [pc, #324]	; (80044b4 <I2C_RequestMemoryRead+0x1c8>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8f9 	bl	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e096      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	6a39      	ldr	r1, [r7, #32]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f963 	bl	8004664 <I2C_WaitOnTXEFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d107      	bne.n	80043bc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e075      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
 80043d0:	e021      	b.n	8004416 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043d2:	893b      	ldrh	r3, [r7, #8]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	6a39      	ldr	r1, [r7, #32]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f93d 	bl	8004664 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d107      	bne.n	8004408 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004406:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e04f      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	6a39      	ldr	r1, [r7, #32]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f922 	bl	8004664 <I2C_WaitOnTXEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d107      	bne.n	800443e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e034      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2200      	movs	r2, #0
 800445a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f82a 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e013      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004484:	897b      	ldrh	r3, [r7, #10]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	4906      	ldr	r1, [pc, #24]	; (80044b4 <I2C_RequestMemoryRead+0x1c8>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f863 	bl	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	00010002 	.word	0x00010002

080044b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	e025      	b.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d021      	beq.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fd fead 	bl	8002230 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e023      	b.n	800455e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10d      	bne.n	800453c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	43da      	mvns	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	e00c      	b.n	8004556 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	43da      	mvns	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d0b6      	beq.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004574:	e051      	b.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004584:	d123      	bne.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004594:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800459e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f043 0204 	orr.w	r2, r3, #4
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e046      	b.n	800465c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d021      	beq.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fd fe2b 	bl	8002230 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d116      	bne.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e020      	b.n	800465c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10c      	bne.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	43da      	mvns	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e00b      	b.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	43da      	mvns	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d18d      	bne.n	8004576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004670:	e02d      	b.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8ce 	bl	8004814 <I2C_IsAcknowledgeFailed>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e02d      	b.n	80046de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d021      	beq.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fd fdd1 	bl	8002230 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d116      	bne.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e007      	b.n	80046de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b80      	cmp	r3, #128	; 0x80
 80046da:	d1ca      	bne.n	8004672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f2:	e02d      	b.n	8004750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f88d 	bl	8004814 <I2C_IsAcknowledgeFailed>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e02d      	b.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d021      	beq.n	8004750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fd fd90 	bl	8002230 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e007      	b.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b04      	cmp	r3, #4
 800475c:	d1ca      	bne.n	80046f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004774:	e042      	b.n	80047fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d119      	bne.n	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0210 	mvn.w	r2, #16
 800478c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e029      	b.n	800480c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b8:	f7fd fd3a 	bl	8002230 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e007      	b.n	800480c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d1b5      	bne.n	8004776 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d11b      	bne.n	8004864 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004834:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f043 0204 	orr.w	r2, r3, #4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b20      	cmp	r3, #32
 8004886:	d129      	bne.n	80048dc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0210 	bic.w	r2, r2, #16
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	d12a      	bne.n	800495a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	; 0x24
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	f023 030f 	bic.w	r3, r3, #15
 800492a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b29a      	uxth	r2, r3
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	4313      	orrs	r3, r2
 8004934:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	89fa      	ldrh	r2, [r7, #14]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
  }
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0bf      	b.n	8004afa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fcbc 	bl	800130c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80049aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_LTDC_Init+0x19c>)
 80049dc:	400b      	ands	r3, r1
 80049de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6899      	ldr	r1, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68d9      	ldr	r1, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_LTDC_Init+0x19c>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68d9      	ldr	r1, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6919      	ldr	r1, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <HAL_LTDC_Init+0x19c>)
 8004a38:	400b      	ands	r3, r1
 8004a3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6919      	ldr	r1, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6959      	ldr	r1, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_LTDC_Init+0x19c>)
 8004a66:	400b      	ands	r3, r1
 8004a68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6959      	ldr	r1, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0206 	orr.w	r2, r2, #6
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	f000f800 	.word	0xf000f800

08004b08 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d023      	beq.n	8004b72 <HAL_LTDC_IRQHandler+0x6a>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01e      	beq.n	8004b72 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f86f 	bl	8004c50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d023      	beq.n	8004bc4 <HAL_LTDC_IRQHandler+0xbc>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01e      	beq.n	8004bc4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0202 	bic.w	r2, r2, #2
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ba4:	f043 0202 	orr.w	r2, r3, #2
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f846 	bl	8004c50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01b      	beq.n	8004c06 <HAL_LTDC_IRQHandler+0xfe>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d016      	beq.n	8004c06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2201      	movs	r2, #1
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f00c f917 	bl	8010e34 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <HAL_LTDC_IRQHandler+0x140>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0208 	bic.w	r2, r2, #8
 8004c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f80e 	bl	8004c64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c78:	b5b0      	push	{r4, r5, r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_LTDC_ConfigLayer+0x1a>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e02c      	b.n	8004cec <HAL_LTDC_ConfigLayer+0x74>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2134      	movs	r1, #52	; 0x34
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f849 	bl	8004d64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bdb0      	pop	{r4, r5, r7, pc}

08004cf4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_LTDC_ProgramLineEvent+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e023      	b.n	8004d54 <HAL_LTDC_ProgramLineEvent+0x60>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40016800 	.word	0x40016800

08004d64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	0c1b      	lsrs	r3, r3, #16
 8004d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d80:	4413      	add	r3, r2
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	01db      	lsls	r3, r3, #7
 8004d90:	4413      	add	r3, r2
 8004d92:	3384      	adds	r3, #132	; 0x84
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	01d2      	lsls	r2, r2, #7
 8004da0:	440a      	add	r2, r1
 8004da2:	3284      	adds	r2, #132	; 0x84
 8004da4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004da8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dba:	4413      	add	r3, r2
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	01db      	lsls	r3, r3, #7
 8004dc8:	440b      	add	r3, r1
 8004dca:	3384      	adds	r3, #132	; 0x84
 8004dcc:	4619      	mov	r1, r3
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004de2:	4413      	add	r3, r2
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	01db      	lsls	r3, r3, #7
 8004df2:	4413      	add	r3, r2
 8004df4:	3384      	adds	r3, #132	; 0x84
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	01d2      	lsls	r2, r2, #7
 8004e02:	440a      	add	r2, r1
 8004e04:	3284      	adds	r2, #132	; 0x84
 8004e06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e1a:	4413      	add	r3, r2
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4619      	mov	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	01db      	lsls	r3, r3, #7
 8004e28:	440b      	add	r3, r1
 8004e2a:	3384      	adds	r3, #132	; 0x84
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	01db      	lsls	r3, r3, #7
 8004e3e:	4413      	add	r3, r2
 8004e40:	3384      	adds	r3, #132	; 0x84
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	01d2      	lsls	r2, r2, #7
 8004e4e:	440a      	add	r2, r1
 8004e50:	3284      	adds	r2, #132	; 0x84
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	01db      	lsls	r3, r3, #7
 8004e62:	4413      	add	r3, r2
 8004e64:	3384      	adds	r3, #132	; 0x84
 8004e66:	461a      	mov	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	01db      	lsls	r3, r3, #7
 8004e94:	4413      	add	r3, r2
 8004e96:	3384      	adds	r3, #132	; 0x84
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3384      	adds	r3, #132	; 0x84
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	01db      	lsls	r3, r3, #7
 8004ec8:	440b      	add	r3, r1
 8004eca:	3384      	adds	r3, #132	; 0x84
 8004ecc:	4619      	mov	r1, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	01db      	lsls	r3, r3, #7
 8004ede:	4413      	add	r3, r2
 8004ee0:	3384      	adds	r3, #132	; 0x84
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	01d2      	lsls	r2, r2, #7
 8004eee:	440a      	add	r2, r1
 8004ef0:	3284      	adds	r2, #132	; 0x84
 8004ef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ef6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	01db      	lsls	r3, r3, #7
 8004f02:	4413      	add	r3, r2
 8004f04:	3384      	adds	r3, #132	; 0x84
 8004f06:	461a      	mov	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	01db      	lsls	r3, r3, #7
 8004f18:	4413      	add	r3, r2
 8004f1a:	3384      	adds	r3, #132	; 0x84
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	4611      	mov	r1, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	01d2      	lsls	r2, r2, #7
 8004f28:	440a      	add	r2, r1
 8004f2a:	3284      	adds	r2, #132	; 0x84
 8004f2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6809      	ldr	r1, [r1, #0]
 8004f42:	4608      	mov	r0, r1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	01c9      	lsls	r1, r1, #7
 8004f48:	4401      	add	r1, r0
 8004f4a:	3184      	adds	r1, #132	; 0x84
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	01db      	lsls	r3, r3, #7
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3384      	adds	r3, #132	; 0x84
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	01db      	lsls	r3, r3, #7
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3384      	adds	r3, #132	; 0x84
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	01db      	lsls	r3, r3, #7
 8004f7e:	4413      	add	r3, r2
 8004f80:	3384      	adds	r3, #132	; 0x84
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004f92:	2304      	movs	r3, #4
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e01b      	b.n	8004fd0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d102      	bne.n	8004fa6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e014      	b.n	8004fd0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d00b      	beq.n	8004fc6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d007      	beq.n	8004fc6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d003      	beq.n	8004fc6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d102      	bne.n	8004fcc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e001      	b.n	8004fd0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	01db      	lsls	r3, r3, #7
 8004fda:	4413      	add	r3, r2
 8004fdc:	3384      	adds	r3, #132	; 0x84
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	01d2      	lsls	r2, r2, #7
 8004fea:	440a      	add	r2, r1
 8004fec:	3284      	adds	r2, #132	; 0x84
 8004fee:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	041a      	lsls	r2, r3, #16
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1acb      	subs	r3, r1, r3
 800500a:	69f9      	ldr	r1, [r7, #28]
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	3303      	adds	r3, #3
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	6809      	ldr	r1, [r1, #0]
 8005016:	4608      	mov	r0, r1
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	01c9      	lsls	r1, r1, #7
 800501c:	4401      	add	r1, r0
 800501e:	3184      	adds	r1, #132	; 0x84
 8005020:	4313      	orrs	r3, r2
 8005022:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	01db      	lsls	r3, r3, #7
 800502e:	4413      	add	r3, r2
 8005030:	3384      	adds	r3, #132	; 0x84
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	4611      	mov	r1, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	01d2      	lsls	r2, r2, #7
 800503e:	440a      	add	r2, r1
 8005040:	3284      	adds	r2, #132	; 0x84
 8005042:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005046:	f023 0307 	bic.w	r3, r3, #7
 800504a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	4413      	add	r3, r2
 8005058:	3384      	adds	r3, #132	; 0x84
 800505a:	461a      	mov	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	01db      	lsls	r3, r3, #7
 800506c:	4413      	add	r3, r2
 800506e:	3384      	adds	r3, #132	; 0x84
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	4611      	mov	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	01d2      	lsls	r2, r2, #7
 800507c:	440a      	add	r2, r1
 800507e:	3284      	adds	r2, #132	; 0x84
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6013      	str	r3, [r2, #0]
}
 8005086:	bf00      	nop
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e043      	b.n	8005132 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7fc fa9a 	bl	80015f8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3308      	adds	r3, #8
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f001 ff3a 	bl	8006f48 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	461a      	mov	r2, r3
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	f001 ff96 	bl	8007010 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6858      	ldr	r0, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	f001 ffe1 	bl	80070b8 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	6892      	ldr	r2, [r2, #8]
 80050fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	6892      	ldr	r2, [r2, #8]
 800510a:	f041 0101 	orr.w	r1, r1, #1
 800510e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <HAL_NOR_Init+0xa8>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e002      	b.n	8005128 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_NOR_Init+0xa8>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000180 	.word	0x20000180

08005140 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005158:	6413      	str	r3, [r2, #64]	; 0x40
 800515a:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800516c:	f7fd f860 	bl	8002230 <HAL_GetTick>
 8005170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005172:	e009      	b.n	8005188 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005174:	f7fd f85c 	bl	8002230 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005182:	d901      	bls.n	8005188 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e01f      	b.n	80051c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005188:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d1ee      	bne.n	8005174 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800519c:	f7fd f848 	bl	8002230 <HAL_GetTick>
 80051a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051a2:	e009      	b.n	80051b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051a4:	f7fd f844 	bl	8002230 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b2:	d901      	bls.n	80051b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e007      	b.n	80051c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d1ee      	bne.n	80051a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	420e0040 	.word	0x420e0040
 80051d8:	40007000 	.word	0x40007000
 80051dc:	420e0044 	.word	0x420e0044

080051e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e25b      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d075      	beq.n	80052ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051fe:	4ba3      	ldr	r3, [pc, #652]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b04      	cmp	r3, #4
 8005208:	d00c      	beq.n	8005224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520a:	4ba0      	ldr	r3, [pc, #640]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005212:	2b08      	cmp	r3, #8
 8005214:	d112      	bne.n	800523c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005216:	4b9d      	ldr	r3, [pc, #628]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005222:	d10b      	bne.n	800523c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005224:	4b99      	ldr	r3, [pc, #612]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05b      	beq.n	80052e8 <HAL_RCC_OscConfig+0x108>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d157      	bne.n	80052e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e236      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005244:	d106      	bne.n	8005254 <HAL_RCC_OscConfig+0x74>
 8005246:	4b91      	ldr	r3, [pc, #580]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a90      	ldr	r2, [pc, #576]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e01d      	b.n	8005290 <HAL_RCC_OscConfig+0xb0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x98>
 800525e:	4b8b      	ldr	r3, [pc, #556]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a8a      	ldr	r2, [pc, #552]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b88      	ldr	r3, [pc, #544]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a87      	ldr	r2, [pc, #540]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e00b      	b.n	8005290 <HAL_RCC_OscConfig+0xb0>
 8005278:	4b84      	ldr	r3, [pc, #528]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a83      	ldr	r2, [pc, #524]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b81      	ldr	r3, [pc, #516]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a80      	ldr	r2, [pc, #512]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800528a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800528e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fc ffca 	bl	8002230 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a0:	f7fc ffc6 	bl	8002230 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	; 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e1fb      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b2:	4b76      	ldr	r3, [pc, #472]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0xc0>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fc ffb6 	bl	8002230 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c8:	f7fc ffb2 	bl	8002230 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	; 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1e7      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052da:	4b6c      	ldr	r3, [pc, #432]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0xe8>
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d063      	beq.n	80053be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052f6:	4b65      	ldr	r3, [pc, #404]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005302:	4b62      	ldr	r3, [pc, #392]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800530a:	2b08      	cmp	r3, #8
 800530c:	d11c      	bne.n	8005348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530e:	4b5f      	ldr	r3, [pc, #380]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531a:	4b5c      	ldr	r3, [pc, #368]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_RCC_OscConfig+0x152>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d001      	beq.n	8005332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e1bb      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	4b56      	ldr	r3, [pc, #344]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4952      	ldr	r1, [pc, #328]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005346:	e03a      	b.n	80053be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d020      	beq.n	8005392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005350:	4b4f      	ldr	r3, [pc, #316]	; (8005490 <HAL_RCC_OscConfig+0x2b0>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005356:	f7fc ff6b 	bl	8002230 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535e:	f7fc ff67 	bl	8002230 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e19c      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005370:	4b46      	ldr	r3, [pc, #280]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537c:	4b43      	ldr	r3, [pc, #268]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4940      	ldr	r1, [pc, #256]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800538c:	4313      	orrs	r3, r2
 800538e:	600b      	str	r3, [r1, #0]
 8005390:	e015      	b.n	80053be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005392:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_OscConfig+0x2b0>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fc ff4a 	bl	8002230 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a0:	f7fc ff46 	bl	8002230 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e17b      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	4b36      	ldr	r3, [pc, #216]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d030      	beq.n	800542c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d016      	beq.n	8005400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053d2:	4b30      	ldr	r3, [pc, #192]	; (8005494 <HAL_RCC_OscConfig+0x2b4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fc ff2a 	bl	8002230 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e0:	f7fc ff26 	bl	8002230 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e15b      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x200>
 80053fe:	e015      	b.n	800542c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_RCC_OscConfig+0x2b4>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005406:	f7fc ff13 	bl	8002230 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800540e:	f7fc ff0f 	bl	8002230 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e144      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f0      	bne.n	800540e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80a0 	beq.w	800557a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800543a:	2300      	movs	r3, #0
 800543c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10f      	bne.n	800546a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	4a0e      	ldr	r2, [pc, #56]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	6413      	str	r3, [r2, #64]	; 0x40
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <HAL_RCC_OscConfig+0x2ac>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546a:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_RCC_OscConfig+0x2b8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d121      	bne.n	80054ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_RCC_OscConfig+0x2b8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a07      	ldr	r2, [pc, #28]	; (8005498 <HAL_RCC_OscConfig+0x2b8>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005482:	f7fc fed5 	bl	8002230 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005488:	e011      	b.n	80054ae <HAL_RCC_OscConfig+0x2ce>
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800
 8005490:	42470000 	.word	0x42470000
 8005494:	42470e80 	.word	0x42470e80
 8005498:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549c:	f7fc fec8 	bl	8002230 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0fd      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b81      	ldr	r3, [pc, #516]	; (80056b4 <HAL_RCC_OscConfig+0x4d4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x2f0>
 80054c2:	4b7d      	ldr	r3, [pc, #500]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c6:	4a7c      	ldr	r2, [pc, #496]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	6713      	str	r3, [r2, #112]	; 0x70
 80054ce:	e01c      	b.n	800550a <HAL_RCC_OscConfig+0x32a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d10c      	bne.n	80054f2 <HAL_RCC_OscConfig+0x312>
 80054d8:	4b77      	ldr	r3, [pc, #476]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a76      	ldr	r2, [pc, #472]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
 80054e4:	4b74      	ldr	r3, [pc, #464]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4a73      	ldr	r2, [pc, #460]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6713      	str	r3, [r2, #112]	; 0x70
 80054f0:	e00b      	b.n	800550a <HAL_RCC_OscConfig+0x32a>
 80054f2:	4b71      	ldr	r3, [pc, #452]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a70      	ldr	r2, [pc, #448]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	4b6e      	ldr	r3, [pc, #440]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	4a6d      	ldr	r2, [pc, #436]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d015      	beq.n	800553e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fc fe8d 	bl	8002230 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7fc fe89 	bl	8002230 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e0bc      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005530:	4b61      	ldr	r3, [pc, #388]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0ee      	beq.n	800551a <HAL_RCC_OscConfig+0x33a>
 800553c:	e014      	b.n	8005568 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800553e:	f7fc fe77 	bl	8002230 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005544:	e00a      	b.n	800555c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005546:	f7fc fe73 	bl	8002230 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	f241 3288 	movw	r2, #5000	; 0x1388
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e0a6      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555c:	4b56      	ldr	r3, [pc, #344]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ee      	bne.n	8005546 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d105      	bne.n	800557a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556e:	4b52      	ldr	r3, [pc, #328]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	4a51      	ldr	r2, [pc, #324]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8092 	beq.w	80056a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005584:	4b4c      	ldr	r3, [pc, #304]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b08      	cmp	r3, #8
 800558e:	d05c      	beq.n	800564a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d141      	bne.n	800561c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005598:	4b48      	ldr	r3, [pc, #288]	; (80056bc <HAL_RCC_OscConfig+0x4dc>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559e:	f7fc fe47 	bl	8002230 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fc fe43 	bl	8002230 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e078      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b8:	4b3f      	ldr	r3, [pc, #252]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	019b      	lsls	r3, r3, #6
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	3b01      	subs	r3, #1
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	4933      	ldr	r1, [pc, #204]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ee:	4b33      	ldr	r3, [pc, #204]	; (80056bc <HAL_RCC_OscConfig+0x4dc>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fc fe1c 	bl	8002230 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fc fe18 	bl	8002230 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e04d      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560e:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x41c>
 800561a:	e045      	b.n	80056a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <HAL_RCC_OscConfig+0x4dc>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005622:	f7fc fe05 	bl	8002230 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562a:	f7fc fe01 	bl	8002230 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e036      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563c:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f0      	bne.n	800562a <HAL_RCC_OscConfig+0x44a>
 8005648:	e02e      	b.n	80056a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e029      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005656:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <HAL_RCC_OscConfig+0x4d8>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	429a      	cmp	r2, r3
 8005668:	d11c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d115      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800567e:	4013      	ands	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005684:	4293      	cmp	r3, r2
 8005686:	d10d      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40007000 	.word	0x40007000
 80056b8:	40023800 	.word	0x40023800
 80056bc:	42470060 	.word	0x42470060

080056c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0cc      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056d4:	4b68      	ldr	r3, [pc, #416]	; (8005878 <HAL_RCC_ClockConfig+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d90c      	bls.n	80056fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b65      	ldr	r3, [pc, #404]	; (8005878 <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b63      	ldr	r3, [pc, #396]	; (8005878 <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d001      	beq.n	80056fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0b8      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d020      	beq.n	800574a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005714:	4b59      	ldr	r3, [pc, #356]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a58      	ldr	r2, [pc, #352]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800571e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800572c:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	4a52      	ldr	r2, [pc, #328]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005738:	4b50      	ldr	r3, [pc, #320]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	494d      	ldr	r1, [pc, #308]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d044      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d107      	bne.n	800576e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	4b47      	ldr	r3, [pc, #284]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d119      	bne.n	800579e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e07f      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d003      	beq.n	800577e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800577a:	2b03      	cmp	r3, #3
 800577c:	d107      	bne.n	800578e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577e:	4b3f      	ldr	r3, [pc, #252]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e06f      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e067      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800579e:	4b37      	ldr	r3, [pc, #220]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f023 0203 	bic.w	r2, r3, #3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4934      	ldr	r1, [pc, #208]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057b0:	f7fc fd3e 	bl	8002230 <HAL_GetTick>
 80057b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b6:	e00a      	b.n	80057ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b8:	f7fc fd3a 	bl	8002230 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e04f      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ce:	4b2b      	ldr	r3, [pc, #172]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 020c 	and.w	r2, r3, #12
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	429a      	cmp	r2, r3
 80057de:	d1eb      	bne.n	80057b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <HAL_RCC_ClockConfig+0x1b8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d20c      	bcs.n	8005808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ee:	4b22      	ldr	r3, [pc, #136]	; (8005878 <HAL_RCC_ClockConfig+0x1b8>)
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <HAL_RCC_ClockConfig+0x1b8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e032      	b.n	800586e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005814:	4b19      	ldr	r3, [pc, #100]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4916      	ldr	r1, [pc, #88]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	490e      	ldr	r1, [pc, #56]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005846:	f000 f821 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800584a:	4601      	mov	r1, r0
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <HAL_RCC_ClockConfig+0x1c0>)
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	fa21 f303 	lsr.w	r3, r1, r3
 800585e:	4a09      	ldr	r2, [pc, #36]	; (8005884 <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_RCC_ClockConfig+0x1c8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fb feda 	bl	8001620 <HAL_InitTick>

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40023c00 	.word	0x40023c00
 800587c:	40023800 	.word	0x40023800
 8005880:	0801ee4c 	.word	0x0801ee4c
 8005884:	20000004 	.word	0x20000004
 8005888:	20000080 	.word	0x20000080

0800588c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	2300      	movs	r3, #0
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058a2:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d007      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x32>
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d008      	beq.n	80058c4 <HAL_RCC_GetSysClockFreq+0x38>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 808d 	bne.w	80059d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058b8:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80058ba:	60bb      	str	r3, [r7, #8]
       break;
 80058bc:	e08c      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058be:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <HAL_RCC_GetSysClockFreq+0x160>)
 80058c0:	60bb      	str	r3, [r7, #8]
      break;
 80058c2:	e089      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058c4:	4b47      	ldr	r3, [pc, #284]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ce:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d023      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058da:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	099b      	lsrs	r3, r3, #6
 80058e0:	f04f 0400 	mov.w	r4, #0
 80058e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	ea03 0501 	and.w	r5, r3, r1
 80058f0:	ea04 0602 	and.w	r6, r4, r2
 80058f4:	4a3d      	ldr	r2, [pc, #244]	; (80059ec <HAL_RCC_GetSysClockFreq+0x160>)
 80058f6:	fb02 f106 	mul.w	r1, r2, r6
 80058fa:	2200      	movs	r2, #0
 80058fc:	fb02 f205 	mul.w	r2, r2, r5
 8005900:	440a      	add	r2, r1
 8005902:	493a      	ldr	r1, [pc, #232]	; (80059ec <HAL_RCC_GetSysClockFreq+0x160>)
 8005904:	fba5 0101 	umull	r0, r1, r5, r1
 8005908:	1853      	adds	r3, r2, r1
 800590a:	4619      	mov	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f04f 0400 	mov.w	r4, #0
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	f7fa fcbb 	bl	8000290 <__aeabi_uldivmod>
 800591a:	4603      	mov	r3, r0
 800591c:	460c      	mov	r4, r1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e049      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005922:	4b30      	ldr	r3, [pc, #192]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	ea03 0501 	and.w	r5, r3, r1
 8005938:	ea04 0602 	and.w	r6, r4, r2
 800593c:	4629      	mov	r1, r5
 800593e:	4632      	mov	r2, r6
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	0154      	lsls	r4, r2, #5
 800594a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800594e:	014b      	lsls	r3, r1, #5
 8005950:	4619      	mov	r1, r3
 8005952:	4622      	mov	r2, r4
 8005954:	1b49      	subs	r1, r1, r5
 8005956:	eb62 0206 	sbc.w	r2, r2, r6
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	f04f 0400 	mov.w	r4, #0
 8005962:	0194      	lsls	r4, r2, #6
 8005964:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005968:	018b      	lsls	r3, r1, #6
 800596a:	1a5b      	subs	r3, r3, r1
 800596c:	eb64 0402 	sbc.w	r4, r4, r2
 8005970:	f04f 0100 	mov.w	r1, #0
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	00e2      	lsls	r2, r4, #3
 800597a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800597e:	00d9      	lsls	r1, r3, #3
 8005980:	460b      	mov	r3, r1
 8005982:	4614      	mov	r4, r2
 8005984:	195b      	adds	r3, r3, r5
 8005986:	eb44 0406 	adc.w	r4, r4, r6
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	02a2      	lsls	r2, r4, #10
 8005994:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005998:	0299      	lsls	r1, r3, #10
 800599a:	460b      	mov	r3, r1
 800599c:	4614      	mov	r4, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	4621      	mov	r1, r4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	461a      	mov	r2, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	f7fa fc70 	bl	8000290 <__aeabi_uldivmod>
 80059b0:	4603      	mov	r3, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	3301      	adds	r3, #1
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	60bb      	str	r3, [r7, #8]
      break;
 80059d0:	e002      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059d4:	60bb      	str	r3, [r7, #8]
      break;
 80059d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059d8:	68bb      	ldr	r3, [r7, #8]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	00f42400 	.word	0x00f42400
 80059ec:	017d7840 	.word	0x017d7840

080059f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000004 	.word	0x20000004

08005a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a0c:	f7ff fff0 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a10:	4601      	mov	r1, r0
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	0a9b      	lsrs	r3, r3, #10
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	0801ee5c 	.word	0x0801ee5c

08005a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a34:	f7ff ffdc 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a38:	4601      	mov	r1, r0
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	0b5b      	lsrs	r3, r3, #13
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	4a03      	ldr	r2, [pc, #12]	; (8005a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a46:	5cd3      	ldrb	r3, [r2, r3]
 8005a48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40023800 	.word	0x40023800
 8005a54:	0801ee5c 	.word	0x0801ee5c

08005a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	220f      	movs	r2, #15
 8005a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a68:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0203 	and.w	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	08db      	lsrs	r3, r3, #3
 8005a92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <HAL_RCC_GetClockConfig+0x60>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40023c00 	.word	0x40023c00

08005abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d075      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005af0:	4bad      	ldr	r3, [pc, #692]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005af6:	f7fc fb9b 	bl	8002230 <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005afc:	e008      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005afe:	f7fc fb97 	bl	8002230 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e18b      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b10:	4ba6      	ldr	r3, [pc, #664]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	019a      	lsls	r2, r3, #6
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	071b      	lsls	r3, r3, #28
 8005b34:	499d      	ldr	r1, [pc, #628]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01f      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b48:	4b98      	ldr	r3, [pc, #608]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4e:	0f1b      	lsrs	r3, r3, #28
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	019a      	lsls	r2, r3, #6
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	431a      	orrs	r2, r3
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	071b      	lsls	r3, r3, #28
 8005b68:	4990      	ldr	r1, [pc, #576]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b70:	4b8e      	ldr	r3, [pc, #568]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b76:	f023 021f 	bic.w	r2, r3, #31
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	498a      	ldr	r1, [pc, #552]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	019a      	lsls	r2, r3, #6
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	071b      	lsls	r3, r3, #28
 8005ba8:	4980      	ldr	r1, [pc, #512]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bb0:	4b7d      	ldr	r3, [pc, #500]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb6:	f7fc fb3b 	bl	8002230 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bbe:	f7fc fb37 	bl	8002230 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e12b      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bd0:	4b76      	ldr	r3, [pc, #472]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d079      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bf4:	4b6e      	ldr	r3, [pc, #440]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bfa:	f7fc fb19 	bl	8002230 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c02:	f7fc fb15 	bl	8002230 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e109      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c14:	4b65      	ldr	r3, [pc, #404]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c20:	d0ef      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d020      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c2e:	4b5f      	ldr	r3, [pc, #380]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	0f1b      	lsrs	r3, r3, #28
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	019a      	lsls	r2, r3, #6
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	071b      	lsls	r3, r3, #28
 8005c4e:	4957      	ldr	r1, [pc, #348]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c56:	4b55      	ldr	r3, [pc, #340]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4950      	ldr	r1, [pc, #320]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01e      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c7c:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	0e1b      	lsrs	r3, r3, #24
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	019a      	lsls	r2, r3, #6
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	061b      	lsls	r3, r3, #24
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	071b      	lsls	r3, r3, #28
 8005c9c:	4943      	ldr	r1, [pc, #268]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ca4:	4b41      	ldr	r3, [pc, #260]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	493e      	ldr	r1, [pc, #248]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cba:	4b3d      	ldr	r3, [pc, #244]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc0:	f7fc fab6 	bl	8002230 <HAL_GetTick>
 8005cc4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cc8:	f7fc fab2 	bl	8002230 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e0a6      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cda:	4b34      	ldr	r3, [pc, #208]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce6:	d1ef      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 808d 	beq.w	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6413      	str	r3, [r2, #64]	; 0x40
 8005d06:	4b29      	ldr	r3, [pc, #164]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d12:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1e:	f7fc fa87 	bl	8002230 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d26:	f7fc fa83 	bl	8002230 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e077      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d38:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d039      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d032      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d6c:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d78:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d11e      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d8a:	f7fc fa51 	bl	8002230 <HAL_GetTick>
 8005d8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d90:	e014      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fc fa4d 	bl	8002230 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d90b      	bls.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e03f      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005da8:	42470068 	.word	0x42470068
 8005dac:	40023800 	.word	0x40023800
 8005db0:	42470070 	.word	0x42470070
 8005db4:	40007000 	.word	0x40007000
 8005db8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0e4      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd4:	d10d      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005dd6:	4b16      	ldr	r3, [pc, #88]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	4911      	ldr	r1, [pc, #68]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	608b      	str	r3, [r1, #8]
 8005df0:	e005      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005df2:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dfc:	6093      	str	r3, [r2, #8]
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0a:	4909      	ldr	r1, [pc, #36]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005e22:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	424711e0 	.word	0x424711e0

08005e38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e025      	b.n	8005e98 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fb fbd3 	bl	800160c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f001 f95d 	bl	8007138 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	461a      	mov	r2, r3
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	f001 f9c8 	bl	800721e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d101      	bne.n	8005ebc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e018      	b.n	8005eee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fa25 	bl	800731c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d104      	bne.n	8005ee4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2205      	movs	r2, #5
 8005ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005ee2:	e003      	b.n	8005eec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d101      	bne.n	8005f10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e00e      	b.n	8005f2e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fa38 	bl	8007394 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e01d      	b.n	8005f84 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f815 	bl	8005f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 f967 	bl	8006248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b02      	cmp	r3, #2
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0202 	mvn.w	r2, #2
 8006014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8ee 	bl	800620c <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f8e0 	bl	80061f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8f1 	bl	8006220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b04      	cmp	r3, #4
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0204 	mvn.w	r2, #4
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8c4 	bl	800620c <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8b6 	bl	80061f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8c7 	bl	8006220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0208 	mvn.w	r2, #8
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f89a 	bl	800620c <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f88c 	bl	80061f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f89d 	bl	8006220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b10      	cmp	r3, #16
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b10      	cmp	r3, #16
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0210 	mvn.w	r2, #16
 8006110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2208      	movs	r2, #8
 8006116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f870 	bl	800620c <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f862 	bl	80061f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f873 	bl	8006220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b01      	cmp	r3, #1
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0201 	mvn.w	r2, #1
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fa ffbc 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b80      	cmp	r3, #128	; 0x80
 8006178:	d10e      	bne.n	8006198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006184:	2b80      	cmp	r3, #128	; 0x80
 8006186:	d107      	bne.n	8006198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f902 	bl	800639c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d10e      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d107      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f838 	bl	8006234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d10e      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d107      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0220 	mvn.w	r2, #32
 80061e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8cc 	bl	8006388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a40      	ldr	r2, [pc, #256]	; (800635c <TIM_Base_SetConfig+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006266:	d00f      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3d      	ldr	r2, [pc, #244]	; (8006360 <TIM_Base_SetConfig+0x118>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00b      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <TIM_Base_SetConfig+0x11c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d007      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a3b      	ldr	r2, [pc, #236]	; (8006368 <TIM_Base_SetConfig+0x120>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a3a      	ldr	r2, [pc, #232]	; (800636c <TIM_Base_SetConfig+0x124>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d108      	bne.n	800629a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2f      	ldr	r2, [pc, #188]	; (800635c <TIM_Base_SetConfig+0x114>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d02b      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d027      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <TIM_Base_SetConfig+0x118>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d023      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <TIM_Base_SetConfig+0x11c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01f      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <TIM_Base_SetConfig+0x120>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01b      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a29      	ldr	r2, [pc, #164]	; (800636c <TIM_Base_SetConfig+0x124>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d017      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a28      	ldr	r2, [pc, #160]	; (8006370 <TIM_Base_SetConfig+0x128>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a27      	ldr	r2, [pc, #156]	; (8006374 <TIM_Base_SetConfig+0x12c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a26      	ldr	r2, [pc, #152]	; (8006378 <TIM_Base_SetConfig+0x130>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <TIM_Base_SetConfig+0x134>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a24      	ldr	r2, [pc, #144]	; (8006380 <TIM_Base_SetConfig+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a23      	ldr	r2, [pc, #140]	; (8006384 <TIM_Base_SetConfig+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0a      	ldr	r2, [pc, #40]	; (800635c <TIM_Base_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_Base_SetConfig+0xf8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a0c      	ldr	r2, [pc, #48]	; (800636c <TIM_Base_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d103      	bne.n	8006348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	615a      	str	r2, [r3, #20]
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40010000 	.word	0x40010000
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	40010400 	.word	0x40010400
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800
 800637c:	40001800 	.word	0x40001800
 8006380:	40001c00 	.word	0x40001c00
 8006384:	40002000 	.word	0x40002000

08006388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e033      	b.n	800642a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb f82a 	bl	8001430 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fbd1 	bl	8006b8c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006408:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006418:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_USART_Transmit_IT>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	4613      	mov	r3, r2
 800643e:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	d130      	bne.n	80064ae <HAL_USART_Transmit_IT+0x7c>
  {
    if ((pTxData == NULL) || (Size == 0))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_USART_Transmit_IT+0x26>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_USART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e029      	b.n	80064b0 <HAL_USART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_USART_Transmit_IT+0x38>
 8006466:	2302      	movs	r3, #2
 8006468:	e022      	b.n	80064b0 <HAL_USART_Transmit_IT+0x7e>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2212      	movs	r2, #18
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       configured only for transmit "USART_MODE_TX"
       The __HAL_USART_ENABLE_IT(husart, USART_IT_ERR) can be used to enable the Frame error,
       Noise error interrupt */

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the USART Transmit Data Register Empty Interrupt */
    SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <HAL_USART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d117      	bne.n	8006522 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d012      	beq.n	8006522 <HAL_USART_IRQHandler+0x66>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b22      	cmp	r3, #34	; 0x22
 8006510:	d103      	bne.n	800651a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9c6 	bl	80068a4 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8006518:	e0ea      	b.n	80066f0 <HAL_USART_IRQHandler+0x234>
        USART_TransmitReceive_IT(husart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa5c 	bl	80069d8 <USART_TransmitReceive_IT>
      return;
 8006520:	e0e6      	b.n	80066f0 <HAL_USART_IRQHandler+0x234>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80bb 	beq.w	80066a0 <HAL_USART_IRQHandler+0x1e4>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <HAL_USART_IRQHandler+0x84>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80b0 	beq.w	80066a0 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_USART_IRQHandler+0xa4>
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	f043 0201 	orr.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_USART_IRQHandler+0xc4>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f043 0202 	orr.w	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_USART_IRQHandler+0xe4>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <HAL_USART_IRQHandler+0x10e>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_USART_IRQHandler+0x102>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f043 0208 	orr.w	r2, r3, #8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 808d 	beq.w	80066ee <HAL_USART_IRQHandler+0x232>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d011      	beq.n	8006602 <HAL_USART_IRQHandler+0x146>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00c      	beq.n	8006602 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b22      	cmp	r3, #34	; 0x22
 80065f2:	d103      	bne.n	80065fc <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f955 	bl	80068a4 <USART_Receive_IT>
 80065fa:	e002      	b.n	8006602 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9eb 	bl	80069d8 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <HAL_USART_IRQHandler+0x16e>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d031      	beq.n	800668e <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f892 	bl	8006754 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d123      	bne.n	8006686 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	2b00      	cmp	r3, #0
 8006654:	d013      	beq.n	800667e <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <HAL_USART_IRQHandler+0x23c>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	4618      	mov	r0, r3
 8006664:	f7fb ff40 	bl	80024e8 <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00e      	b.n	800669c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f850 	bl	8006724 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00a      	b.n	800669c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f84c 	bl	8006724 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e006      	b.n	800669c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f848 	bl	8006724 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800669a:	e028      	b.n	80066ee <HAL_USART_IRQHandler+0x232>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800669c:	bf00      	nop
    return;
 800669e:	e026      	b.n	80066ee <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d012      	beq.n	80066d0 <HAL_USART_IRQHandler+0x214>
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00d      	beq.n	80066d0 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b12      	cmp	r3, #18
 80066be:	d103      	bne.n	80066c8 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f879 	bl	80067b8 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 80066c6:	e013      	b.n	80066f0 <HAL_USART_IRQHandler+0x234>
      USART_TransmitReceive_IT(husart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f985 	bl	80069d8 <USART_TransmitReceive_IT>
    return;
 80066ce:	e00f      	b.n	80066f0 <HAL_USART_IRQHandler+0x234>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <HAL_USART_IRQHandler+0x234>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_USART_IRQHandler+0x234>
  {
    USART_EndTransmit_IT(husart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8bd 	bl	8006864 <USART_EndTransmit_IT>
    return;
 80066ea:	bf00      	nop
 80066ec:	e000      	b.n	80066f0 <HAL_USART_IRQHandler+0x234>
    return;
 80066ee:	bf00      	nop
  }
}
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	08006791 	.word	0x08006791

080066fc <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_USART_GetState>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL state
  */
HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  return husart->State;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006746:	b2db      	uxtb	r3, r3
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800676a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff ffba 	bl	8006724 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b12      	cmp	r3, #18
 80067ca:	d144      	bne.n	8006856 <USART_Transmit_IT+0x9e>
  {
    if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d4:	d11a      	bne.n	800680c <USART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ea:	605a      	str	r2, [r3, #4]
      if (husart->Init.Parity == USART_PARITY_NONE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <USART_Transmit_IT+0x48>
      {
        husart->pTxBuffPtr += 2U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c9a      	adds	r2, r3, #2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24
 80067fe:	e00e      	b.n	800681e <USART_Transmit_IT+0x66>
      }
      else
      {
        husart->pTxBuffPtr += 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24
 800680a:	e008      	b.n	800681e <USART_Transmit_IT+0x66>
      }
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6251      	str	r1, [r2, #36]	; 0x24
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29b      	uxth	r3, r3
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4619      	mov	r1, r3
 800682c:	8551      	strh	r1, [r2, #42]	; 0x2a
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10f      	bne.n	8006852 <USART_Transmit_IT+0x9a>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006840:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006850:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e000      	b.n	8006858 <USART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006856:	2302      	movs	r3, #2
  }
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687a:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fa fc13 	bl	80010c0 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  if (husart->State == HAL_USART_STATE_BUSY_RX)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b22      	cmp	r3, #34	; 0x22
 80068b6:	f040 808a 	bne.w	80069ce <USART_Receive_IT+0x12a>
  {
    if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d132      	bne.n	800692a <USART_Receive_IT+0x86>
    {
      tmp = (uint16_t *) husart->pRxBuffPtr;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	60fb      	str	r3, [r7, #12]
      if (husart->Init.Parity == USART_PARITY_NONE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10e      	bne.n	80068f0 <USART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	801a      	strh	r2, [r3, #0]
        husart->pRxBuffPtr += 2U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80068ee:	e00c      	b.n	800690a <USART_Receive_IT+0x66>
      }
      else
      {
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	801a      	strh	r2, [r3, #0]
        husart->pRxBuffPtr += 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if (--husart->RxXferCount != 0x00U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29b      	uxth	r3, r3
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4619      	mov	r1, r3
 8006918:	8651      	strh	r1, [r2, #50]	; 0x32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d02f      	beq.n	800697e <USART_Receive_IT+0xda>
      {
        /* Send dummy byte in order to generate the clock for the slave to send the next data */
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	e029      	b.n	800697e <USART_Receive_IT+0xda>
      }
    }
    else
    {
      if (husart->Init.Parity == USART_PARITY_NONE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <USART_Receive_IT+0xa4>
      {
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6858      	ldr	r0, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	1c59      	adds	r1, r3, #1
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006942:	b2c2      	uxtb	r2, r0
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	e00c      	b.n	8006962 <USART_Receive_IT+0xbe>
      }
      else
      {
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	1c58      	adds	r0, r3, #1
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	62c8      	str	r0, [r1, #44]	; 0x2c
 800695a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
      }

      if (--husart->RxXferCount != 0x00U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29b      	uxth	r3, r3
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4619      	mov	r1, r3
 8006970:	8651      	strh	r1, [r2, #50]	; 0x32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <USART_Receive_IT+0xda>
      {
        /* Send dummy byte in order to generate the clock for the slave to send the next data */
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	22ff      	movs	r2, #255	; 0xff
 800697c:	605a      	str	r2, [r3, #4]
      }
    }

    if (husart->RxXferCount == 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d120      	bne.n	80069ca <USART_Receive_IT+0x126>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0220 	bic.w	r2, r2, #32
 8006996:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069a6:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0201 	bic.w	r2, r2, #1
 80069b6:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fe9b 	bl	80066fc <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e002      	b.n	80069d0 <USART_Receive_IT+0x12c>
    }
    return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e000      	b.n	80069d0 <USART_Receive_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 80069ce:	2302      	movs	r3, #2
  }
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b32      	cmp	r3, #50	; 0x32
 80069ea:	f040 80c9 	bne.w	8006b80 <USART_TransmitReceive_IT+0x1a8>
  {
    if (husart->TxXferCount != 0x00U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d043      	beq.n	8006a80 <USART_TransmitReceive_IT+0xa8>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d13c      	bne.n	8006a80 <USART_TransmitReceive_IT+0xa8>
      {
        if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0e:	d11a      	bne.n	8006a46 <USART_TransmitReceive_IT+0x6e>
        {
          tmp = (uint16_t *) husart->pTxBuffPtr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a24:	605a      	str	r2, [r3, #4]
          if (husart->Init.Parity == USART_PARITY_NONE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d105      	bne.n	8006a3a <USART_TransmitReceive_IT+0x62>
          {
            husart->pTxBuffPtr += 2U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24
 8006a38:	e00e      	b.n	8006a58 <USART_TransmitReceive_IT+0x80>
          }
          else
          {
            husart->pTxBuffPtr += 1U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24
 8006a44:	e008      	b.n	8006a58 <USART_TransmitReceive_IT+0x80>
          }
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6251      	str	r1, [r2, #36]	; 0x24
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	605a      	str	r2, [r3, #4]
        }
        husart->TxXferCount--;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <USART_TransmitReceive_IT+0xa8>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7e:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d052      	beq.n	8006b30 <USART_TransmitReceive_IT+0x158>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d14b      	bne.n	8006b30 <USART_TransmitReceive_IT+0x158>
      {
        if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d123      	bne.n	8006aea <USART_TransmitReceive_IT+0x112>
        {
          tmp = (uint16_t *) husart->pRxBuffPtr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	60fb      	str	r3, [r7, #12]
          if (husart->Init.Parity == USART_PARITY_NONE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10e      	bne.n	8006ace <USART_TransmitReceive_IT+0xf6>
          {
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	801a      	strh	r2, [r3, #0]
            husart->pRxBuffPtr += 2U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	1c9a      	adds	r2, r3, #2
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8006acc:	e029      	b.n	8006b22 <USART_TransmitReceive_IT+0x14a>
          }
          else
          {
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	801a      	strh	r2, [r3, #0]
            husart->pRxBuffPtr += 1U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ae8:	e01b      	b.n	8006b22 <USART_TransmitReceive_IT+0x14a>
          }
        }
        else
        {
          if (husart->Init.Parity == USART_PARITY_NONE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <USART_TransmitReceive_IT+0x130>
          {
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6858      	ldr	r0, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b02:	b2c2      	uxtb	r2, r0
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e00c      	b.n	8006b22 <USART_TransmitReceive_IT+0x14a>
          }
          else
          {
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	1c58      	adds	r0, r3, #1
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	62c8      	str	r0, [r1, #44]	; 0x2c
 8006b1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
          }
        }
        husart->RxXferCount--;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d120      	bne.n	8006b7c <USART_TransmitReceive_IT+0x1a4>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0220 	bic.w	r2, r2, #32
 8006b48:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b58:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fdcc 	bl	8006710 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e002      	b.n	8006b82 <USART_TransmitReceive_IT+0x1aa>
    }

    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <USART_TransmitReceive_IT+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 020c 	bic.w	r2, r2, #12
 8006ba8:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006bc2:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bf0:	f023 030c 	bic.w	r3, r3, #12
 8006bf4:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	431a      	orrs	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695a      	ldr	r2, [r3, #20]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c26:	615a      	str	r2, [r3, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4ac3      	ldr	r2, [pc, #780]	; (8006f3c <USART_SetConfig+0x3b0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d005      	beq.n	8006c3e <USART_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4ac2      	ldr	r2, [pc, #776]	; (8006f40 <USART_SetConfig+0x3b4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	f040 80bd 	bne.w	8006db8 <USART_SetConfig+0x22c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c3e:	f7fe fef7 	bl	8005a30 <HAL_RCC_GetPCLK2Freq>
 8006c42:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	461d      	mov	r5, r3
 8006c48:	f04f 0600 	mov.w	r6, #0
 8006c4c:	46a8      	mov	r8, r5
 8006c4e:	46b1      	mov	r9, r6
 8006c50:	eb18 0308 	adds.w	r3, r8, r8
 8006c54:	eb49 0409 	adc.w	r4, r9, r9
 8006c58:	4698      	mov	r8, r3
 8006c5a:	46a1      	mov	r9, r4
 8006c5c:	eb18 0805 	adds.w	r8, r8, r5
 8006c60:	eb49 0906 	adc.w	r9, r9, r6
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c78:	4688      	mov	r8, r1
 8006c7a:	4691      	mov	r9, r2
 8006c7c:	eb18 0005 	adds.w	r0, r8, r5
 8006c80:	eb49 0106 	adc.w	r1, r9, r6
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	461d      	mov	r5, r3
 8006c8a:	f04f 0600 	mov.w	r6, #0
 8006c8e:	196b      	adds	r3, r5, r5
 8006c90:	eb46 0406 	adc.w	r4, r6, r6
 8006c94:	461a      	mov	r2, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	f7f9 fafa 	bl	8000290 <__aeabi_uldivmod>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4ba8      	ldr	r3, [pc, #672]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	461d      	mov	r5, r3
 8006cb2:	f04f 0600 	mov.w	r6, #0
 8006cb6:	46a9      	mov	r9, r5
 8006cb8:	46b2      	mov	sl, r6
 8006cba:	eb19 0309 	adds.w	r3, r9, r9
 8006cbe:	eb4a 040a 	adc.w	r4, sl, sl
 8006cc2:	4699      	mov	r9, r3
 8006cc4:	46a2      	mov	sl, r4
 8006cc6:	eb19 0905 	adds.w	r9, r9, r5
 8006cca:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	4692      	mov	sl, r2
 8006ce6:	eb19 0005 	adds.w	r0, r9, r5
 8006cea:	eb4a 0106 	adc.w	r1, sl, r6
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	f04f 0600 	mov.w	r6, #0
 8006cf8:	196b      	adds	r3, r5, r5
 8006cfa:	eb46 0406 	adc.w	r4, r6, r6
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4623      	mov	r3, r4
 8006d02:	f7f9 fac5 	bl	8000290 <__aeabi_uldivmod>
 8006d06:	4603      	mov	r3, r0
 8006d08:	460c      	mov	r4, r1
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4b8d      	ldr	r3, [pc, #564]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	2164      	movs	r1, #100	; 0x64
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	3332      	adds	r3, #50	; 0x32
 8006d20:	4a88      	ldr	r2, [pc, #544]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d2e:	4498      	add	r8, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	461d      	mov	r5, r3
 8006d34:	f04f 0600 	mov.w	r6, #0
 8006d38:	46a9      	mov	r9, r5
 8006d3a:	46b2      	mov	sl, r6
 8006d3c:	eb19 0309 	adds.w	r3, r9, r9
 8006d40:	eb4a 040a 	adc.w	r4, sl, sl
 8006d44:	4699      	mov	r9, r3
 8006d46:	46a2      	mov	sl, r4
 8006d48:	eb19 0905 	adds.w	r9, r9, r5
 8006d4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d50:	f04f 0100 	mov.w	r1, #0
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d64:	4689      	mov	r9, r1
 8006d66:	4692      	mov	sl, r2
 8006d68:	eb19 0005 	adds.w	r0, r9, r5
 8006d6c:	eb4a 0106 	adc.w	r1, sl, r6
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	461d      	mov	r5, r3
 8006d76:	f04f 0600 	mov.w	r6, #0
 8006d7a:	196b      	adds	r3, r5, r5
 8006d7c:	eb46 0406 	adc.w	r4, r6, r6
 8006d80:	461a      	mov	r2, r3
 8006d82:	4623      	mov	r3, r4
 8006d84:	f7f9 fa84 	bl	8000290 <__aeabi_uldivmod>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4b6d      	ldr	r3, [pc, #436]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006d90:	fba3 1302 	umull	r1, r3, r3, r2
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	2164      	movs	r1, #100	; 0x64
 8006d98:	fb01 f303 	mul.w	r3, r1, r3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	3332      	adds	r3, #50	; 0x32
 8006da2:	4a68      	ldr	r2, [pc, #416]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	f003 0207 	and.w	r2, r3, #7
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4442      	add	r2, r8
 8006db4:	609a      	str	r2, [r3, #8]
 8006db6:	e0bb      	b.n	8006f30 <USART_SetConfig+0x3a4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006db8:	f7fe fe26 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	f04f 0600 	mov.w	r6, #0
 8006dc6:	46a8      	mov	r8, r5
 8006dc8:	46b1      	mov	r9, r6
 8006dca:	eb18 0308 	adds.w	r3, r8, r8
 8006dce:	eb49 0409 	adc.w	r4, r9, r9
 8006dd2:	4698      	mov	r8, r3
 8006dd4:	46a1      	mov	r9, r4
 8006dd6:	eb18 0805 	adds.w	r8, r8, r5
 8006dda:	eb49 0906 	adc.w	r9, r9, r6
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006df2:	4688      	mov	r8, r1
 8006df4:	4691      	mov	r9, r2
 8006df6:	eb18 0005 	adds.w	r0, r8, r5
 8006dfa:	eb49 0106 	adc.w	r1, r9, r6
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	461d      	mov	r5, r3
 8006e04:	f04f 0600 	mov.w	r6, #0
 8006e08:	196b      	adds	r3, r5, r5
 8006e0a:	eb46 0406 	adc.w	r4, r6, r6
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4623      	mov	r3, r4
 8006e12:	f7f9 fa3d 	bl	8000290 <__aeabi_uldivmod>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4b49      	ldr	r3, [pc, #292]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	f04f 0600 	mov.w	r6, #0
 8006e30:	46a9      	mov	r9, r5
 8006e32:	46b2      	mov	sl, r6
 8006e34:	eb19 0309 	adds.w	r3, r9, r9
 8006e38:	eb4a 040a 	adc.w	r4, sl, sl
 8006e3c:	4699      	mov	r9, r3
 8006e3e:	46a2      	mov	sl, r4
 8006e40:	eb19 0905 	adds.w	r9, r9, r5
 8006e44:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e48:	f04f 0100 	mov.w	r1, #0
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e5c:	4689      	mov	r9, r1
 8006e5e:	4692      	mov	sl, r2
 8006e60:	eb19 0005 	adds.w	r0, r9, r5
 8006e64:	eb4a 0106 	adc.w	r1, sl, r6
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	461d      	mov	r5, r3
 8006e6e:	f04f 0600 	mov.w	r6, #0
 8006e72:	196b      	adds	r3, r5, r5
 8006e74:	eb46 0406 	adc.w	r4, r6, r6
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4623      	mov	r3, r4
 8006e7c:	f7f9 fa08 	bl	8000290 <__aeabi_uldivmod>
 8006e80:	4603      	mov	r3, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	461a      	mov	r2, r3
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ea8:	4498      	add	r8, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	461d      	mov	r5, r3
 8006eae:	f04f 0600 	mov.w	r6, #0
 8006eb2:	46a9      	mov	r9, r5
 8006eb4:	46b2      	mov	sl, r6
 8006eb6:	eb19 0309 	adds.w	r3, r9, r9
 8006eba:	eb4a 040a 	adc.w	r4, sl, sl
 8006ebe:	4699      	mov	r9, r3
 8006ec0:	46a2      	mov	sl, r4
 8006ec2:	eb19 0905 	adds.w	r9, r9, r5
 8006ec6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006eca:	f04f 0100 	mov.w	r1, #0
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ed6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ede:	4689      	mov	r9, r1
 8006ee0:	4692      	mov	sl, r2
 8006ee2:	eb19 0005 	adds.w	r0, r9, r5
 8006ee6:	eb4a 0106 	adc.w	r1, sl, r6
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	461d      	mov	r5, r3
 8006ef0:	f04f 0600 	mov.w	r6, #0
 8006ef4:	196b      	adds	r3, r5, r5
 8006ef6:	eb46 0406 	adc.w	r4, r6, r6
 8006efa:	461a      	mov	r2, r3
 8006efc:	4623      	mov	r3, r4
 8006efe:	f7f9 f9c7 	bl	8000290 <__aeabi_uldivmod>
 8006f02:	4603      	mov	r3, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	461a      	mov	r2, r3
 8006f08:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	2164      	movs	r1, #100	; 0x64
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	3332      	adds	r3, #50	; 0x32
 8006f1c:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <USART_SetConfig+0x3b8>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f003 0207 	and.w	r2, r3, #7
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4442      	add	r2, r8
 8006f2e:	609a      	str	r2, [r3, #8]
  }
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40011000 	.word	0x40011000
 8006f40:	40011400 	.word	0x40011400
 8006f44:	51eb851f 	.word	0x51eb851f

08006f48 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f60:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4b29      	ldr	r3, [pc, #164]	; (800700c <FMC_NORSRAM_Init+0xc4>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f72:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8006f78:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8006f7e:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8006f84:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 8006f8a:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 8006f90:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 8006f96:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8006f9c:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 8006fa2:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 8006fa8:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 8006fae:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 8006fb4:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 8006fba:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d103      	bne.n	8006fd2 <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd0:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe6:	d10a      	bne.n	8006ffe <FMC_NORSRAM_Init+0xb6>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	ffe00080 	.word	0xffe00080

08007010 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007032:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800703e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 8007046:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 800704e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	3b01      	subs	r3, #1
 8007056:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8007058:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	3b02      	subs	r3, #2
 8007060:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8007062:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007068:	4313      	orrs	r3, r2
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6979      	ldr	r1, [r7, #20]
 8007078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007088:	d10e      	bne.n	80070a8 <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007092:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	3b01      	subs	r3, #1
 800709a:	051b      	lsls	r3, r3, #20
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070d0:	d122      	bne.n	8007118 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070da:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4b15      	ldr	r3, [pc, #84]	; (8007134 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070ee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070f6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80070fe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007104:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6979      	ldr	r1, [r7, #20]
 8007112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007116:	e005      	b.n	8007124 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	cff00000 	.word	0xcff00000

08007138 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d029      	beq.n	80071a6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800715e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007162:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800716c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007172:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007178:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800717e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007184:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800718a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007190:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007196:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e034      	b.n	8007210 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071bc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80071c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80071d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071da:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071e4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80071ea:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80071f0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80071f6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80071fc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4313      	orrs	r3, r2
 8007202:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800721e:	b480      	push	{r7}
 8007220:	b087      	sub	sp, #28
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d02e      	beq.n	8007296 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007244:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	3b01      	subs	r3, #1
 8007252:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007254:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800725e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	3b01      	subs	r3, #1
 8007266:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007268:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	3b01      	subs	r3, #1
 8007270:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007272:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	3b01      	subs	r3, #1
 800727a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800727c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	3b01      	subs	r3, #1
 8007284:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007286:	4313      	orrs	r3, r2
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	e03b      	b.n	800730e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80072b8:	4313      	orrs	r3, r2
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80072cc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	3b01      	subs	r3, #1
 80072da:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80072dc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80072e6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80072f0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80072fa:	4313      	orrs	r3, r2
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007338:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	3b01      	subs	r3, #1
 8007340:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007342:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007354:	f7fa ff6c 	bl	8002230 <HAL_GetTick>
 8007358:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800735a:	e010      	b.n	800737e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d00c      	beq.n	800737e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <FMC_SDRAM_SendCommand+0x5e>
 800736a:	f7fa ff61 	bl	8002230 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d201      	bcs.n	800737e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e006      	b.n	800738c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b20      	cmp	r3, #32
 8007388:	d0e8      	beq.n	800735c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c2:	f3ef 8305 	mrs	r3, IPSR
 80073c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80073c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10f      	bne.n	80073ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ce:	f3ef 8310 	mrs	r3, PRIMASK
 80073d2:	607b      	str	r3, [r7, #4]
  return(result);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <osKernelInitialize+0x32>
 80073da:	4b11      	ldr	r3, [pc, #68]	; (8007420 <osKernelInitialize+0x64>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d109      	bne.n	80073f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073e2:	f3ef 8311 	mrs	r3, BASEPRI
 80073e6:	603b      	str	r3, [r7, #0]
  return(result);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80073ee:	f06f 0305 	mvn.w	r3, #5
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e00c      	b.n	8007410 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073f6:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <osKernelInitialize+0x64>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80073fe:	4b08      	ldr	r3, [pc, #32]	; (8007420 <osKernelInitialize+0x64>)
 8007400:	2201      	movs	r2, #1
 8007402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e002      	b.n	8007410 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007410:	68fb      	ldr	r3, [r7, #12]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000184 	.word	0x20000184

08007424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742a:	f3ef 8305 	mrs	r3, IPSR
 800742e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007430:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10f      	bne.n	8007456 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007436:	f3ef 8310 	mrs	r3, PRIMASK
 800743a:	607b      	str	r3, [r7, #4]
  return(result);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <osKernelStart+0x32>
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <osKernelStart+0x64>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d109      	bne.n	800745e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800744a:	f3ef 8311 	mrs	r3, BASEPRI
 800744e:	603b      	str	r3, [r7, #0]
  return(result);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007456:	f06f 0305 	mvn.w	r3, #5
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e00e      	b.n	800747c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <osKernelStart+0x64>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d107      	bne.n	8007476 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <osKernelStart+0x64>)
 8007468:	2202      	movs	r2, #2
 800746a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800746c:	f001 ff02 	bl	8009274 <vTaskStartScheduler>
      stat = osOK;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e002      	b.n	800747c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000184 	.word	0x20000184

0800748c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b092      	sub	sp, #72	; 0x48
 8007490:	af04      	add	r7, sp, #16
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007498:	2300      	movs	r3, #0
 800749a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800749c:	f3ef 8305 	mrs	r3, IPSR
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f040 8094 	bne.w	80075d2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	623b      	str	r3, [r7, #32]
  return(result);
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 808d 	bne.w	80075d2 <osThreadNew+0x146>
 80074b8:	4b48      	ldr	r3, [pc, #288]	; (80075dc <osThreadNew+0x150>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d106      	bne.n	80074ce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074c0:	f3ef 8311 	mrs	r3, BASEPRI
 80074c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 8082 	bne.w	80075d2 <osThreadNew+0x146>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d07e      	beq.n	80075d2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80074d8:	2318      	movs	r3, #24
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80074dc:	2300      	movs	r3, #0
 80074de:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80074e0:	f107 031b 	add.w	r3, r7, #27
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d045      	beq.n	800757e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <osThreadNew+0x74>
        name = attr->name;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <osThreadNew+0x9a>
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	2b38      	cmp	r3, #56	; 0x38
 8007518:	d805      	bhi.n	8007526 <osThreadNew+0x9a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <osThreadNew+0x9e>
        return (NULL);
 8007526:	2300      	movs	r3, #0
 8007528:	e054      	b.n	80075d4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	089b      	lsrs	r3, r3, #2
 8007538:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <osThreadNew+0xd4>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	2b5f      	cmp	r3, #95	; 0x5f
 8007548:	d90a      	bls.n	8007560 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800754e:	2b00      	cmp	r3, #0
 8007550:	d006      	beq.n	8007560 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <osThreadNew+0xd4>
        mem = 1;
 800755a:	2301      	movs	r3, #1
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
 800755e:	e010      	b.n	8007582 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10c      	bne.n	8007582 <osThreadNew+0xf6>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <osThreadNew+0xf6>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <osThreadNew+0xf6>
          mem = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28
 800757c:	e001      	b.n	8007582 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	2b01      	cmp	r3, #1
 8007586:	d110      	bne.n	80075aa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007590:	9202      	str	r2, [sp, #8]
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f001 fcb2 	bl	8008f08 <xTaskCreateStatic>
 80075a4:	4603      	mov	r3, r0
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e013      	b.n	80075d2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d110      	bne.n	80075d2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	f107 0314 	add.w	r3, r7, #20
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f001 fcf9 	bl	8008fba <xTaskCreate>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <osThreadNew+0x146>
          hTask = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075d2:	697b      	ldr	r3, [r7, #20]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3738      	adds	r7, #56	; 0x38
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20000184 	.word	0x20000184

080075e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08c      	sub	sp, #48	; 0x30
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f0:	f3ef 8305 	mrs	r3, IPSR
 80075f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80075f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 8088 	bne.w	800770e <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007602:	617b      	str	r3, [r7, #20]
  return(result);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f040 8081 	bne.w	800770e <osSemaphoreNew+0x12e>
 800760c:	4b42      	ldr	r3, [pc, #264]	; (8007718 <osSemaphoreNew+0x138>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d105      	bne.n	8007620 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007614:	f3ef 8311 	mrs	r3, BASEPRI
 8007618:	613b      	str	r3, [r7, #16]
  return(result);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d176      	bne.n	800770e <osSemaphoreNew+0x12e>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d073      	beq.n	800770e <osSemaphoreNew+0x12e>
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	429a      	cmp	r2, r3
 800762c:	d86f      	bhi.n	800770e <osSemaphoreNew+0x12e>
    mem = -1;
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
 8007632:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d015      	beq.n	8007666 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d006      	beq.n	8007650 <osSemaphoreNew+0x70>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2b4f      	cmp	r3, #79	; 0x4f
 8007648:	d902      	bls.n	8007650 <osSemaphoreNew+0x70>
        mem = 1;
 800764a:	2301      	movs	r3, #1
 800764c:	623b      	str	r3, [r7, #32]
 800764e:	e00c      	b.n	800766a <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d108      	bne.n	800766a <osSemaphoreNew+0x8a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <osSemaphoreNew+0x8a>
          mem = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	e001      	b.n	800766a <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d04d      	beq.n	800770e <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d129      	bne.n	80076cc <osSemaphoreNew+0xec>
        if (mem == 1) {
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d10b      	bne.n	8007696 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	2303      	movs	r3, #3
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	2001      	movs	r0, #1
 800768e:	f000 fbc7 	bl	8007e20 <xQueueGenericCreateStatic>
 8007692:	6278      	str	r0, [r7, #36]	; 0x24
 8007694:	e005      	b.n	80076a2 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007696:	2203      	movs	r2, #3
 8007698:	2100      	movs	r1, #0
 800769a:	2001      	movs	r0, #1
 800769c:	f000 fc32 	bl	8007f04 <xQueueGenericCreate>
 80076a0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d022      	beq.n	80076ee <osSemaphoreNew+0x10e>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01f      	beq.n	80076ee <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80076ae:	2300      	movs	r3, #0
 80076b0:	2200      	movs	r2, #0
 80076b2:	2100      	movs	r1, #0
 80076b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076b6:	f000 fcf1 	bl	800809c <xQueueGenericSend>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d016      	beq.n	80076ee <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 80076c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076c2:	f001 fa40 	bl	8008b46 <vQueueDelete>
            hSemaphore = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ca:	e010      	b.n	80076ee <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d108      	bne.n	80076e4 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	461a      	mov	r2, r3
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fc78 	bl	8007fd0 <xQueueCreateCountingSemaphoreStatic>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24
 80076e2:	e004      	b.n	80076ee <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fca7 	bl	800803a <xQueueCreateCountingSemaphore>
 80076ec:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00c      	beq.n	800770e <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <osSemaphoreNew+0x122>
          name = attr->name;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	61fb      	str	r3, [r7, #28]
 8007700:	e001      	b.n	8007706 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007706:	69f9      	ldr	r1, [r7, #28]
 8007708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800770a:	f001 fb6f 	bl	8008dec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007710:	4618      	mov	r0, r3
 8007712:	3728      	adds	r7, #40	; 0x28
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000184 	.word	0x20000184

0800771c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007734:	f06f 0303 	mvn.w	r3, #3
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e04e      	b.n	80077da <osSemaphoreAcquire+0xbe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800773c:	f3ef 8305 	mrs	r3, IPSR
 8007740:	617b      	str	r3, [r7, #20]
  return(result);
 8007742:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10f      	bne.n	8007768 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007748:	f3ef 8310 	mrs	r3, PRIMASK
 800774c:	613b      	str	r3, [r7, #16]
  return(result);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <osSemaphoreAcquire+0x4c>
 8007754:	4b23      	ldr	r3, [pc, #140]	; (80077e4 <osSemaphoreAcquire+0xc8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d12d      	bne.n	80077b8 <osSemaphoreAcquire+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800775c:	f3ef 8311 	mrs	r3, BASEPRI
 8007760:	60fb      	str	r3, [r7, #12]
  return(result);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d027      	beq.n	80077b8 <osSemaphoreAcquire+0x9c>
    if (timeout != 0U) {
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800776e:	f06f 0303 	mvn.w	r3, #3
 8007772:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007774:	e031      	b.n	80077da <osSemaphoreAcquire+0xbe>
    }
    else {
      yield = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	461a      	mov	r2, r3
 8007780:	2100      	movs	r1, #0
 8007782:	69b8      	ldr	r0, [r7, #24]
 8007784:	f001 f944 	bl	8008a10 <xQueueReceiveFromISR>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d003      	beq.n	8007796 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800778e:	f06f 0302 	mvn.w	r3, #2
 8007792:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007794:	e021      	b.n	80077da <osSemaphoreAcquire+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <osSemaphoreAcquire+0x96>
 800779c:	f004 fdf8 	bl	800c390 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <osSemaphoreAcquire+0xcc>)
 80077a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80077b0:	e013      	b.n	80077da <osSemaphoreAcquire+0xbe>
        portYIELD_FROM_ISR (yield);
 80077b2:	f004 fdd1 	bl	800c358 <SEGGER_SYSVIEW_RecordExitISR>
    if (timeout != 0U) {
 80077b6:	e010      	b.n	80077da <osSemaphoreAcquire+0xbe>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	69b8      	ldr	r0, [r7, #24]
 80077bc:	f000 ffea 	bl	8008794 <xQueueSemaphoreTake>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d009      	beq.n	80077da <osSemaphoreAcquire+0xbe>
      if (timeout != 0U) {
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <osSemaphoreAcquire+0xb8>
        stat = osErrorTimeout;
 80077cc:	f06f 0301 	mvn.w	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	e002      	b.n	80077da <osSemaphoreAcquire+0xbe>
      } else {
        stat = osErrorResource;
 80077d4:	f06f 0302 	mvn.w	r3, #2
 80077d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80077da:	69fb      	ldr	r3, [r7, #28]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000184 	.word	0x20000184
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007802:	f06f 0303 	mvn.w	r3, #3
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e041      	b.n	800788e <osSemaphoreRelease+0xa2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800780a:	f3ef 8305 	mrs	r3, IPSR
 800780e:	617b      	str	r3, [r7, #20]
  return(result);
 8007810:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10f      	bne.n	8007836 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007816:	f3ef 8310 	mrs	r3, PRIMASK
 800781a:	613b      	str	r3, [r7, #16]
  return(result);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <osSemaphoreRelease+0x4a>
 8007822:	4b1d      	ldr	r3, [pc, #116]	; (8007898 <osSemaphoreRelease+0xac>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d125      	bne.n	8007876 <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800782a:	f3ef 8311 	mrs	r3, BASEPRI
 800782e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01f      	beq.n	8007876 <osSemaphoreRelease+0x8a>
    yield = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	4619      	mov	r1, r3
 8007840:	69b8      	ldr	r0, [r7, #24]
 8007842:	f000 fdf5 	bl	8008430 <xQueueGiveFromISR>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d003      	beq.n	8007854 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800784c:	f06f 0302 	mvn.w	r3, #2
 8007850:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007852:	e01c      	b.n	800788e <osSemaphoreRelease+0xa2>
    } else {
      portYIELD_FROM_ISR (yield);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <osSemaphoreRelease+0x84>
 800785a:	f004 fd99 	bl	800c390 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <osSemaphoreRelease+0xb0>)
 8007860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800786e:	e00e      	b.n	800788e <osSemaphoreRelease+0xa2>
      portYIELD_FROM_ISR (yield);
 8007870:	f004 fd72 	bl	800c358 <SEGGER_SYSVIEW_RecordExitISR>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007874:	e00b      	b.n	800788e <osSemaphoreRelease+0xa2>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007876:	2300      	movs	r3, #0
 8007878:	2200      	movs	r2, #0
 800787a:	2100      	movs	r1, #0
 800787c:	69b8      	ldr	r0, [r7, #24]
 800787e:	f000 fc0d 	bl	800809c <xQueueGenericSend>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d002      	beq.n	800788e <osSemaphoreRelease+0xa2>
      stat = osErrorResource;
 8007888:	f06f 0302 	mvn.w	r3, #2
 800788c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800788e:	69fb      	ldr	r3, [r7, #28]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000184 	.word	0x20000184
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08c      	sub	sp, #48	; 0x30
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078b0:	f3ef 8305 	mrs	r3, IPSR
 80078b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80078b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d170      	bne.n	800799e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078bc:	f3ef 8310 	mrs	r3, PRIMASK
 80078c0:	617b      	str	r3, [r7, #20]
  return(result);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d16a      	bne.n	800799e <osMessageQueueNew+0xfe>
 80078c8:	4b37      	ldr	r3, [pc, #220]	; (80079a8 <osMessageQueueNew+0x108>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d105      	bne.n	80078dc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078d0:	f3ef 8311 	mrs	r3, BASEPRI
 80078d4:	613b      	str	r3, [r7, #16]
  return(result);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d160      	bne.n	800799e <osMessageQueueNew+0xfe>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d05d      	beq.n	800799e <osMessageQueueNew+0xfe>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d05a      	beq.n	800799e <osMessageQueueNew+0xfe>
    mem = -1;
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d029      	beq.n	8007948 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d012      	beq.n	8007922 <osMessageQueueNew+0x82>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b4f      	cmp	r3, #79	; 0x4f
 8007902:	d90e      	bls.n	8007922 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	429a      	cmp	r2, r3
 800791a:	d302      	bcc.n	8007922 <osMessageQueueNew+0x82>
        mem = 1;
 800791c:	2301      	movs	r3, #1
 800791e:	623b      	str	r3, [r7, #32]
 8007920:	e014      	b.n	800794c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d110      	bne.n	800794c <osMessageQueueNew+0xac>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007936:	2b00      	cmp	r3, #0
 8007938:	d108      	bne.n	800794c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <osMessageQueueNew+0xac>
          mem = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	623b      	str	r3, [r7, #32]
 8007946:	e001      	b.n	800794c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d10c      	bne.n	800796c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691a      	ldr	r2, [r3, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6899      	ldr	r1, [r3, #8]
 800795a:	2300      	movs	r3, #0
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	460b      	mov	r3, r1
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fa5c 	bl	8007e20 <xQueueGenericCreateStatic>
 8007968:	6278      	str	r0, [r7, #36]	; 0x24
 800796a:	e008      	b.n	800797e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d105      	bne.n	800797e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007972:	2200      	movs	r2, #0
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fac4 	bl	8007f04 <xQueueGenericCreate>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <osMessageQueueNew+0xf2>
        name = attr->name;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	e001      	b.n	8007996 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007996:	69f9      	ldr	r1, [r7, #28]
 8007998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800799a:	f001 fa27 	bl	8008dec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3728      	adds	r7, #40	; 0x28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000184 	.word	0x20000184

080079ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	4613      	mov	r3, r2
 80079ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c4:	f3ef 8305 	mrs	r3, IPSR
 80079c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80079ca:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10f      	bne.n	80079f0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079d0:	f3ef 8310 	mrs	r3, PRIMASK
 80079d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d109      	bne.n	80079f0 <osMessageQueuePut+0x44>
 80079dc:	4b2c      	ldr	r3, [pc, #176]	; (8007a90 <osMessageQueuePut+0xe4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d133      	bne.n	8007a4c <osMessageQueuePut+0xa0>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079e4:	f3ef 8311 	mrs	r3, BASEPRI
 80079e8:	617b      	str	r3, [r7, #20]
  return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d02d      	beq.n	8007a4c <osMessageQueuePut+0xa0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <osMessageQueuePut+0x56>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <osMessageQueuePut+0x56>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007a02:	f06f 0303 	mvn.w	r3, #3
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a08:	e03d      	b.n	8007a86 <osMessageQueuePut+0xda>
    }
    else {
      yield = pdFALSE;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a0e:	f107 0210 	add.w	r2, r7, #16
 8007a12:	2300      	movs	r3, #0
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	6a38      	ldr	r0, [r7, #32]
 8007a18:	f000 fc62 	bl	80082e0 <xQueueGenericSendFromISR>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d003      	beq.n	8007a2a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007a22:	f06f 0302 	mvn.w	r3, #2
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a28:	e02d      	b.n	8007a86 <osMessageQueuePut+0xda>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <osMessageQueuePut+0x9a>
 8007a30:	f004 fcae 	bl	800c390 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8007a34:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <osMessageQueuePut+0xe8>)
 8007a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a44:	e01f      	b.n	8007a86 <osMessageQueuePut+0xda>
        portYIELD_FROM_ISR (yield);
 8007a46:	f004 fc87 	bl	800c358 <SEGGER_SYSVIEW_RecordExitISR>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a4a:	e01c      	b.n	8007a86 <osMessageQueuePut+0xda>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <osMessageQueuePut+0xac>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d103      	bne.n	8007a60 <osMessageQueuePut+0xb4>
      stat = osErrorParameter;
 8007a58:	f06f 0303 	mvn.w	r3, #3
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5e:	e012      	b.n	8007a86 <osMessageQueuePut+0xda>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a60:	2300      	movs	r3, #0
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	6a38      	ldr	r0, [r7, #32]
 8007a68:	f000 fb18 	bl	800809c <xQueueGenericSend>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d009      	beq.n	8007a86 <osMessageQueuePut+0xda>
        if (timeout != 0U) {
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <osMessageQueuePut+0xd4>
          stat = osErrorTimeout;
 8007a78:	f06f 0301 	mvn.w	r3, #1
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	e002      	b.n	8007a86 <osMessageQueuePut+0xda>
        } else {
          stat = osErrorResource;
 8007a80:	f06f 0302 	mvn.w	r3, #2
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (stat);
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3728      	adds	r7, #40	; 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20000184 	.word	0x20000184
 8007a94:	e000ed04 	.word	0xe000ed04

08007a98 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ab4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10f      	bne.n	8007ada <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aba:	f3ef 8310 	mrs	r3, PRIMASK
 8007abe:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <osMessageQueueGet+0x42>
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <osMessageQueueGet+0xe0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d133      	bne.n	8007b36 <osMessageQueueGet+0x9e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ace:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d02d      	beq.n	8007b36 <osMessageQueueGet+0x9e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <osMessageQueueGet+0x54>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <osMessageQueueGet+0x54>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007aec:	f06f 0303 	mvn.w	r3, #3
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007af2:	e03c      	b.n	8007b6e <osMessageQueueGet+0xd6>
    }
    else {
      yield = pdFALSE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007af8:	f107 0310 	add.w	r3, r7, #16
 8007afc:	461a      	mov	r2, r3
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	6a38      	ldr	r0, [r7, #32]
 8007b02:	f000 ff85 	bl	8008a10 <xQueueReceiveFromISR>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d003      	beq.n	8007b14 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007b0c:	f06f 0302 	mvn.w	r3, #2
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b12:	e02c      	b.n	8007b6e <osMessageQueueGet+0xd6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <osMessageQueueGet+0x98>
 8007b1a:	f004 fc39 	bl	800c390 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8007b1e:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <osMessageQueueGet+0xe4>)
 8007b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b2e:	e01e      	b.n	8007b6e <osMessageQueueGet+0xd6>
        portYIELD_FROM_ISR (yield);
 8007b30:	f004 fc12 	bl	800c358 <SEGGER_SYSVIEW_RecordExitISR>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b34:	e01b      	b.n	8007b6e <osMessageQueueGet+0xd6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <osMessageQueueGet+0xaa>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <osMessageQueueGet+0xb2>
      stat = osErrorParameter;
 8007b42:	f06f 0303 	mvn.w	r3, #3
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
 8007b48:	e011      	b.n	8007b6e <osMessageQueueGet+0xd6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	6a38      	ldr	r0, [r7, #32]
 8007b50:	f000 fd0c 	bl	800856c <xQueueReceive>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d009      	beq.n	8007b6e <osMessageQueueGet+0xd6>
        if (timeout != 0U) {
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <osMessageQueueGet+0xd0>
          stat = osErrorTimeout;
 8007b60:	f06f 0301 	mvn.w	r3, #1
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
 8007b66:	e002      	b.n	8007b6e <osMessageQueueGet+0xd6>
        } else {
          stat = osErrorResource;
 8007b68:	f06f 0302 	mvn.w	r3, #2
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (stat);
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3728      	adds	r7, #40	; 0x28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000184 	.word	0x20000184
 8007b7c:	e000ed04 	.word	0xe000ed04

08007b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4a07      	ldr	r2, [pc, #28]	; (8007bac <vApplicationGetIdleTaskMemory+0x2c>)
 8007b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4a06      	ldr	r2, [pc, #24]	; (8007bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8007b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2280      	movs	r2, #128	; 0x80
 8007b9c:	601a      	str	r2, [r3, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20000188 	.word	0x20000188
 8007bb0:	200001e8 	.word	0x200001e8

08007bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a07      	ldr	r2, [pc, #28]	; (8007be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a06      	ldr	r2, [pc, #24]	; (8007be4 <vApplicationGetTimerTaskMemory+0x30>)
 8007bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd2:	601a      	str	r2, [r3, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	200003e8 	.word	0x200003e8
 8007be4:	20000448 	.word	0x20000448

08007be8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f103 0208 	add.w	r2, r3, #8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007c00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f103 0208 	add.w	r2, r3, #8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f103 0208 	add.w	r2, r3, #8
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d103      	bne.n	8007caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e00c      	b.n	8007cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3308      	adds	r3, #8
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e002      	b.n	8007cb8 <vListInsert+0x2e>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d2f6      	bcs.n	8007cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	601a      	str	r2, [r3, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6892      	ldr	r2, [r2, #8]
 8007d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6852      	ldr	r2, [r2, #4]
 8007d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d103      	bne.n	8007d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	1e5a      	subs	r2, r3, #1
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	e7fe      	b.n	8007d76 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007d78:	f002 fd68 	bl	800a84c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d84:	68f9      	ldr	r1, [r7, #12]
 8007d86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da8:	3b01      	subs	r3, #1
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	22ff      	movs	r2, #255	; 0xff
 8007dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	22ff      	movs	r2, #255	; 0xff
 8007dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d114      	bne.n	8007df8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01a      	beq.n	8007e0c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3310      	adds	r3, #16
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 fd02 	bl	80097e4 <xTaskRemoveFromEventList>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007de6:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <xQueueGenericReset+0xcc>)
 8007de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	e009      	b.n	8007e0c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3310      	adds	r3, #16
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fef3 	bl	8007be8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff feee 	bl	8007be8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e0c:	f002 fd4c 	bl	800a8a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e10:	2301      	movs	r3, #1
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08e      	sub	sp, #56	; 0x38
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <xQueueGenericCreateStatic+0x28>
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e46:	e7fe      	b.n	8007e46 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <xQueueGenericCreateStatic+0x42>
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <xQueueGenericCreateStatic+0x4e>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <xQueueGenericCreateStatic+0x52>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <xQueueGenericCreateStatic+0x54>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <xQueueGenericCreateStatic+0x6c>
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	623b      	str	r3, [r7, #32]
 8007e8a:	e7fe      	b.n	8007e8a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d102      	bne.n	8007e98 <xQueueGenericCreateStatic+0x78>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <xQueueGenericCreateStatic+0x7c>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <xQueueGenericCreateStatic+0x7e>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <xQueueGenericCreateStatic+0x96>
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	e7fe      	b.n	8007eb4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007eb6:	2350      	movs	r3, #80	; 0x50
 8007eb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b50      	cmp	r3, #80	; 0x50
 8007ebe:	d009      	beq.n	8007ed4 <xQueueGenericCreateStatic+0xb4>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e7fe      	b.n	8007ed2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00d      	beq.n	8007efa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ee6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f842 	bl	8007f7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3730      	adds	r7, #48	; 0x30
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <xQueueGenericCreate+0x28>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	e7fe      	b.n	8007f2a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d102      	bne.n	8007f38 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61fb      	str	r3, [r7, #28]
 8007f36:	e004      	b.n	8007f42 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
 8007f40:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	3350      	adds	r3, #80	; 0x50
 8007f46:	4618      	mov	r0, r3
 8007f48:	f002 fda2 	bl	800aa90 <pvPortMalloc>
 8007f4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	3350      	adds	r3, #80	; 0x50
 8007f58:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f62:	79fa      	ldrb	r2, [r7, #7]
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f805 	bl	8007f7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007f74:	69bb      	ldr	r3, [r7, #24]
	}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e002      	b.n	8007fa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fac:	2101      	movs	r1, #1
 8007fae:	69b8      	ldr	r0, [r7, #24]
 8007fb0:	f7ff fece 	bl	8007d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	68f9      	ldr	r1, [r7, #12]
 8007fc2:	2073      	movs	r0, #115	; 0x73
 8007fc4:	f003 fdb4 	bl	800bb30 <SEGGER_SYSVIEW_RecordU32x3>
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d909      	bls.n	8008012 <xQueueCreateCountingSemaphoreStatic+0x42>
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e7fe      	b.n	8008010 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008012:	2302      	movs	r3, #2
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	2100      	movs	r1, #0
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff feff 	bl	8007e20 <xQueueGenericCreateStatic>
 8008022:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008030:	69fb      	ldr	r3, [r7, #28]
	}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <xQueueCreateCountingSemaphore+0x24>
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	e7fe      	b.n	800805c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	429a      	cmp	r2, r3
 8008064:	d909      	bls.n	800807a <xQueueCreateCountingSemaphore+0x40>
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	e7fe      	b.n	8008078 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800807a:	2202      	movs	r2, #2
 800807c:	2100      	movs	r1, #0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff ff40 	bl	8007f04 <xQueueGenericCreate>
 8008084:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008092:	697b      	ldr	r3, [r7, #20]
	}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b090      	sub	sp, #64	; 0x40
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080aa:	2300      	movs	r3, #0
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d109      	bne.n	80080cc <xQueueGenericSend+0x30>
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ca:	e7fe      	b.n	80080ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <xQueueGenericSend+0x3e>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <xQueueGenericSend+0x42>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <xQueueGenericSend+0x44>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <xQueueGenericSend+0x5c>
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
 80080f6:	e7fe      	b.n	80080f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d103      	bne.n	8008106 <xQueueGenericSend+0x6a>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <xQueueGenericSend+0x6e>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <xQueueGenericSend+0x70>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d109      	bne.n	8008124 <xQueueGenericSend+0x88>
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	623b      	str	r3, [r7, #32]
 8008122:	e7fe      	b.n	8008122 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008124:	f001 fd56 	bl	8009bd4 <xTaskGetSchedulerState>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <xQueueGenericSend+0x98>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <xQueueGenericSend+0x9c>
 8008134:	2301      	movs	r3, #1
 8008136:	e000      	b.n	800813a <xQueueGenericSend+0x9e>
 8008138:	2300      	movs	r3, #0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <xQueueGenericSend+0xb6>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	61fb      	str	r3, [r7, #28]
 8008150:	e7fe      	b.n	8008150 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008152:	f002 fb7b 	bl	800a84c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	429a      	cmp	r2, r3
 8008160:	d302      	bcc.n	8008168 <xQueueGenericSend+0xcc>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d136      	bne.n	80081d6 <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	4618      	mov	r0, r3
 800816c:	f004 fa74 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	460b      	mov	r3, r1
 800817a:	4601      	mov	r1, r0
 800817c:	205a      	movs	r0, #90	; 0x5a
 800817e:	f003 fd4d 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008188:	f000 fd20 	bl	8008bcc <prvCopyDataToQueue>
 800818c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d010      	beq.n	80081b8 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fb22 	bl	80097e4 <xTaskRemoveFromEventList>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d013      	beq.n	80081ce <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081a6:	4b4d      	ldr	r3, [pc, #308]	; (80082dc <xQueueGenericSend+0x240>)
 80081a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	e00a      	b.n	80081ce <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081be:	4b47      	ldr	r3, [pc, #284]	; (80082dc <xQueueGenericSend+0x240>)
 80081c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081ce:	f002 fb6b 	bl	800a8a8 <vPortExitCritical>
				return pdPASS;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e07d      	b.n	80082d2 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d110      	bne.n	80081fe <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081dc:	f002 fb64 	bl	800a8a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	4618      	mov	r0, r3
 80081e4:	f004 fa38 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	460b      	mov	r3, r1
 80081f2:	4601      	mov	r1, r0
 80081f4:	205a      	movs	r0, #90	; 0x5a
 80081f6:	f003 fd11 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e069      	b.n	80082d2 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008204:	f107 0314 	add.w	r3, r7, #20
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fb51 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008212:	f002 fb49 	bl	800a8a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008216:	f001 f891 	bl	800933c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800821a:	f002 fb17 	bl	800a84c <vPortEnterCritical>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008224:	b25b      	sxtb	r3, r3
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d103      	bne.n	8008234 <xQueueGenericSend+0x198>
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x1ae>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800824a:	f002 fb2d 	bl	800a8a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800824e:	1d3a      	adds	r2, r7, #4
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f001 fb40 	bl	80098dc <xTaskCheckForTimeOut>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d124      	bne.n	80082ac <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008264:	f000 fdaa 	bl	8008dbc <prvIsQueueFull>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d018      	beq.n	80082a0 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	3310      	adds	r3, #16
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fa62 	bl	8009740 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800827c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800827e:	f000 fd35 	bl	8008cec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008282:	f001 f869 	bl	8009358 <xTaskResumeAll>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f af62 	bne.w	8008152 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800828e:	4b13      	ldr	r3, [pc, #76]	; (80082dc <xQueueGenericSend+0x240>)
 8008290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	e758      	b.n	8008152 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a2:	f000 fd23 	bl	8008cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a6:	f001 f857 	bl	8009358 <xTaskResumeAll>
 80082aa:	e752      	b.n	8008152 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ae:	f000 fd1d 	bl	8008cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082b2:	f001 f851 	bl	8009358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	4618      	mov	r0, r3
 80082ba:	f004 f9cd 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	460b      	mov	r3, r1
 80082c8:	4601      	mov	r1, r0
 80082ca:	205a      	movs	r0, #90	; 0x5a
 80082cc:	f003 fca6 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80082d0:	2300      	movs	r3, #0
		}
	}
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3738      	adds	r7, #56	; 0x38
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08e      	sub	sp, #56	; 0x38
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <xQueueGenericSendFromISR+0x2c>
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
 800830a:	e7fe      	b.n	800830a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <xQueueGenericSendFromISR+0x3a>
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <xQueueGenericSendFromISR+0x3e>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <xQueueGenericSendFromISR+0x40>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <xQueueGenericSendFromISR+0x58>
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	623b      	str	r3, [r7, #32]
 8008336:	e7fe      	b.n	8008336 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d103      	bne.n	8008346 <xQueueGenericSendFromISR+0x66>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <xQueueGenericSendFromISR+0x6a>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueGenericSendFromISR+0x6c>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <xQueueGenericSendFromISR+0x84>
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	e7fe      	b.n	8008362 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008364:	f002 fb56 	bl	800aa14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008368:	f3ef 8211 	mrs	r2, BASEPRI
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	61ba      	str	r2, [r7, #24]
 800837e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008380:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838c:	429a      	cmp	r2, r3
 800838e:	d302      	bcc.n	8008396 <xQueueGenericSendFromISR+0xb6>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d136      	bne.n	8008404 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800839c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	4618      	mov	r0, r3
 80083a4:	f004 f958 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80083a8:	4601      	mov	r1, r0
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	461a      	mov	r2, r3
 80083ae:	2060      	movs	r0, #96	; 0x60
 80083b0:	f003 fb64 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ba:	f000 fc07 	bl	8008bcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d112      	bne.n	80083ee <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d016      	beq.n	80083fe <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	3324      	adds	r3, #36	; 0x24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 fa05 	bl	80097e4 <xTaskRemoveFromEventList>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e007      	b.n	80083fe <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083f2:	3301      	adds	r3, #1
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	b25a      	sxtb	r2, r3
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083fe:	2301      	movs	r3, #1
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008402:	e00b      	b.n	800841c <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	4618      	mov	r0, r3
 8008408:	f004 f926 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 800840c:	4601      	mov	r1, r0
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	461a      	mov	r2, r3
 8008412:	2060      	movs	r0, #96	; 0x60
 8008414:	f003 fb32 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008418:	2300      	movs	r3, #0
 800841a:	637b      	str	r3, [r7, #52]	; 0x34
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008428:	4618      	mov	r0, r3
 800842a:	3738      	adds	r7, #56	; 0x38
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	623b      	str	r3, [r7, #32]
 8008456:	e7fe      	b.n	8008456 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <xQueueGiveFromISR+0x44>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	e7fe      	b.n	8008472 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d103      	bne.n	8008484 <xQueueGiveFromISR+0x54>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <xQueueGiveFromISR+0x58>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <xQueueGiveFromISR+0x5a>
 8008488:	2300      	movs	r3, #0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <xQueueGiveFromISR+0x72>
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	e7fe      	b.n	80084a0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084a2:	f002 fab7 	bl	800aa14 <vPortValidateInterruptPriority>
	__asm volatile
 80084a6:	f3ef 8211 	mrs	r2, BASEPRI
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	617a      	str	r2, [r7, #20]
 80084bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80084be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d235      	bcs.n	800853e <xQueueGiveFromISR+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	4618      	mov	r0, r3
 80084e0:	f004 f8ba 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80084e4:	4601      	mov	r1, r0
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	2060      	movs	r0, #96	; 0x60
 80084ec:	f003 fac6 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d112      	bne.n	8008528 <xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d016      	beq.n	8008538 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	3324      	adds	r3, #36	; 0x24
 800850e:	4618      	mov	r0, r3
 8008510:	f001 f968 	bl	80097e4 <xTaskRemoveFromEventList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e007      	b.n	8008538 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800852c:	3301      	adds	r3, #1
 800852e:	b2db      	uxtb	r3, r3
 8008530:	b25a      	sxtb	r2, r3
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008538:	2301      	movs	r3, #1
 800853a:	637b      	str	r3, [r7, #52]	; 0x34
 800853c:	e00b      	b.n	8008556 <xQueueGiveFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	4618      	mov	r0, r3
 8008542:	f004 f889 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008546:	4601      	mov	r1, r0
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	2060      	movs	r0, #96	; 0x60
 800854e:	f003 fa95 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008552:	2300      	movs	r3, #0
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008562:	4618      	mov	r0, r3
 8008564:	3738      	adds	r7, #56	; 0x38
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800856c:	b590      	push	{r4, r7, lr}
 800856e:	b08f      	sub	sp, #60	; 0x3c
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008578:	2300      	movs	r3, #0
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <xQueueReceive+0x2e>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	623b      	str	r3, [r7, #32]
 8008598:	e7fe      	b.n	8008598 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <xQueueReceive+0x3c>
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <xQueueReceive+0x40>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <xQueueReceive+0x42>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <xQueueReceive+0x5a>
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	e7fe      	b.n	80085c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085c6:	f001 fb05 	bl	8009bd4 <xTaskGetSchedulerState>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <xQueueReceive+0x6a>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <xQueueReceive+0x6e>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <xQueueReceive+0x70>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d109      	bne.n	80085f4 <xQueueReceive+0x88>
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	e7fe      	b.n	80085f2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80085f4:	f002 f92a 	bl	800a84c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	d031      	beq.n	8008668 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008608:	f000 fb4a 	bl	8008ca0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	4618      	mov	r0, r3
 8008610:	f004 f822 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008614:	4604      	mov	r4, r0
 8008616:	2000      	movs	r0, #0
 8008618:	f004 f81e 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 800861c:	4601      	mov	r1, r0
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	2301      	movs	r3, #1
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	460a      	mov	r2, r1
 8008628:	4621      	mov	r1, r4
 800862a:	205c      	movs	r0, #92	; 0x5c
 800862c:	f003 faf6 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	1e5a      	subs	r2, r3, #1
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00f      	beq.n	8008660 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	3310      	adds	r3, #16
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f8cd 	bl	80097e4 <xTaskRemoveFromEventList>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008650:	4b4f      	ldr	r3, [pc, #316]	; (8008790 <xQueueReceive+0x224>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008660:	f002 f922 	bl	800a8a8 <vPortExitCritical>
				return pdPASS;
 8008664:	2301      	movs	r3, #1
 8008666:	e08e      	b.n	8008786 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d115      	bne.n	800869a <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800866e:	f002 f91b 	bl	800a8a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	4618      	mov	r0, r3
 8008676:	f003 ffef 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 800867a:	4604      	mov	r4, r0
 800867c:	2000      	movs	r0, #0
 800867e:	f003 ffeb 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008682:	4601      	mov	r1, r0
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	2301      	movs	r3, #1
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	4613      	mov	r3, r2
 800868c:	460a      	mov	r2, r1
 800868e:	4621      	mov	r1, r4
 8008690:	205c      	movs	r0, #92	; 0x5c
 8008692:	f003 fac3 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008696:	2300      	movs	r3, #0
 8008698:	e075      	b.n	8008786 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a0:	f107 0310 	add.w	r3, r7, #16
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 f903 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086aa:	2301      	movs	r3, #1
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086ae:	f002 f8fb 	bl	800a8a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086b2:	f000 fe43 	bl	800933c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086b6:	f002 f8c9 	bl	800a84c <vPortEnterCritical>
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086c0:	b25b      	sxtb	r3, r3
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d103      	bne.n	80086d0 <xQueueReceive+0x164>
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086d6:	b25b      	sxtb	r3, r3
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d103      	bne.n	80086e6 <xQueueReceive+0x17a>
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e6:	f002 f8df 	bl	800a8a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ea:	1d3a      	adds	r2, r7, #4
 80086ec:	f107 0310 	add.w	r3, r7, #16
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 f8f2 	bl	80098dc <xTaskCheckForTimeOut>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d124      	bne.n	8008748 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008700:	f000 fb46 	bl	8008d90 <prvIsQueueEmpty>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d018      	beq.n	800873c <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	3324      	adds	r3, #36	; 0x24
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f001 f814 	bl	8009740 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800871a:	f000 fae7 	bl	8008cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800871e:	f000 fe1b 	bl	8009358 <xTaskResumeAll>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	f47f af65 	bne.w	80085f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800872a:	4b19      	ldr	r3, [pc, #100]	; (8008790 <xQueueReceive+0x224>)
 800872c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	e75b      	b.n	80085f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873e:	f000 fad5 	bl	8008cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008742:	f000 fe09 	bl	8009358 <xTaskResumeAll>
 8008746:	e755      	b.n	80085f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f000 facf 	bl	8008cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800874e:	f000 fe03 	bl	8009358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008754:	f000 fb1c 	bl	8008d90 <prvIsQueueEmpty>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	f43f af4a 	beq.w	80085f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	4618      	mov	r0, r3
 8008764:	f003 ff78 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008768:	4604      	mov	r4, r0
 800876a:	2000      	movs	r0, #0
 800876c:	f003 ff74 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008770:	4601      	mov	r1, r0
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	2301      	movs	r3, #1
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4613      	mov	r3, r2
 800877a:	460a      	mov	r2, r1
 800877c:	4621      	mov	r1, r4
 800877e:	205c      	movs	r0, #92	; 0x5c
 8008780:	f003 fa4c 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008786:	4618      	mov	r0, r3
 8008788:	3734      	adds	r7, #52	; 0x34
 800878a:	46bd      	mov	sp, r7
 800878c:	bd90      	pop	{r4, r7, pc}
 800878e:	bf00      	nop
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b091      	sub	sp, #68	; 0x44
 8008798:	af02      	add	r7, sp, #8
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <xQueueSemaphoreTake+0x30>
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	623b      	str	r3, [r7, #32]
 80087c2:	e7fe      	b.n	80087c2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d009      	beq.n	80087e0 <xQueueSemaphoreTake+0x4c>
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	e7fe      	b.n	80087de <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e0:	f001 f9f8 	bl	8009bd4 <xTaskGetSchedulerState>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <xQueueSemaphoreTake+0x5c>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <xQueueSemaphoreTake+0x60>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <xQueueSemaphoreTake+0x62>
 80087f4:	2300      	movs	r3, #0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <xQueueSemaphoreTake+0x7a>
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	e7fe      	b.n	800880c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800880e:	f002 f81d 	bl	800a84c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d036      	beq.n	800888c <xQueueSemaphoreTake+0xf8>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008820:	4618      	mov	r0, r3
 8008822:	f003 ff19 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008826:	4604      	mov	r4, r0
 8008828:	2000      	movs	r0, #0
 800882a:	f003 ff15 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 800882e:	4601      	mov	r1, r0
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	2301      	movs	r3, #1
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4613      	mov	r3, r2
 8008838:	460a      	mov	r2, r1
 800883a:	4621      	mov	r1, r4
 800883c:	205c      	movs	r0, #92	; 0x5c
 800883e:	f003 f9ed 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	1e5a      	subs	r2, r3, #1
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d104      	bne.n	800885c <xQueueSemaphoreTake+0xc8>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008852:	f001 fb4d 	bl	8009ef0 <pvTaskIncrementMutexHeldCount>
 8008856:	4602      	mov	r2, r0
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00f      	beq.n	8008884 <xQueueSemaphoreTake+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	3310      	adds	r3, #16
 8008868:	4618      	mov	r0, r3
 800886a:	f000 ffbb 	bl	80097e4 <xTaskRemoveFromEventList>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <xQueueSemaphoreTake+0xf0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008874:	4b65      	ldr	r3, [pc, #404]	; (8008a0c <xQueueSemaphoreTake+0x278>)
 8008876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008884:	f002 f810 	bl	800a8a8 <vPortExitCritical>
				return pdPASS;
 8008888:	2301      	movs	r3, #1
 800888a:	e0ba      	b.n	8008a02 <xQueueSemaphoreTake+0x26e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d122      	bne.n	80088d8 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <xQueueSemaphoreTake+0x118>
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	e7fe      	b.n	80088aa <xQueueSemaphoreTake+0x116>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088ac:	f001 fffc 	bl	800a8a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	4618      	mov	r0, r3
 80088b4:	f003 fed0 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80088b8:	4604      	mov	r4, r0
 80088ba:	2000      	movs	r0, #0
 80088bc:	f003 fecc 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80088c0:	4601      	mov	r1, r0
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	2301      	movs	r3, #1
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4613      	mov	r3, r2
 80088ca:	460a      	mov	r2, r1
 80088cc:	4621      	mov	r1, r4
 80088ce:	205c      	movs	r0, #92	; 0x5c
 80088d0:	f003 f9a4 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e094      	b.n	8008a02 <xQueueSemaphoreTake+0x26e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088de:	f107 030c 	add.w	r3, r7, #12
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 ffe4 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088ec:	f001 ffdc 	bl	800a8a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088f0:	f000 fd24 	bl	800933c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088f4:	f001 ffaa 	bl	800a84c <vPortEnterCritical>
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088fe:	b25b      	sxtb	r3, r3
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d103      	bne.n	800890e <xQueueSemaphoreTake+0x17a>
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008914:	b25b      	sxtb	r3, r3
 8008916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891a:	d103      	bne.n	8008924 <xQueueSemaphoreTake+0x190>
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008924:	f001 ffc0 	bl	800a8a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008928:	463a      	mov	r2, r7
 800892a:	f107 030c 	add.w	r3, r7, #12
 800892e:	4611      	mov	r1, r2
 8008930:	4618      	mov	r0, r3
 8008932:	f000 ffd3 	bl	80098dc <xTaskCheckForTimeOut>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d132      	bne.n	80089a2 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800893c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800893e:	f000 fa27 	bl	8008d90 <prvIsQueueEmpty>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d026      	beq.n	8008996 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d109      	bne.n	8008964 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8008950:	f001 ff7c 	bl	800a84c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4618      	mov	r0, r3
 800895a:	f001 f959 	bl	8009c10 <xTaskPriorityInherit>
 800895e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008960:	f001 ffa2 	bl	800a8a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	3324      	adds	r3, #36	; 0x24
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fee7 	bl	8009740 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008974:	f000 f9ba 	bl	8008cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008978:	f000 fcee 	bl	8009358 <xTaskResumeAll>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	f47f af45 	bne.w	800880e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <xQueueSemaphoreTake+0x278>)
 8008986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	e73b      	b.n	800880e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008998:	f000 f9a8 	bl	8008cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800899c:	f000 fcdc 	bl	8009358 <xTaskResumeAll>
 80089a0:	e735      	b.n	800880e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a4:	f000 f9a2 	bl	8008cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a8:	f000 fcd6 	bl	8009358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ae:	f000 f9ef 	bl	8008d90 <prvIsQueueEmpty>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f43f af2a 	beq.w	800880e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00d      	beq.n	80089dc <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80089c0:	f001 ff44 	bl	800a84c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089c6:	f000 f8e9 	bl	8008b9c <prvGetDisinheritPriorityAfterTimeout>
 80089ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 f9fe 	bl	8009dd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80089d8:	f001 ff66 	bl	800a8a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	4618      	mov	r0, r3
 80089e0:	f003 fe3a 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80089e4:	4604      	mov	r4, r0
 80089e6:	2000      	movs	r0, #0
 80089e8:	f003 fe36 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 80089ec:	4601      	mov	r1, r0
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	2301      	movs	r3, #1
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	460a      	mov	r2, r1
 80089f8:	4621      	mov	r1, r4
 80089fa:	205c      	movs	r0, #92	; 0x5c
 80089fc:	f003 f90e 	bl	800bc1c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008a00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	373c      	adds	r7, #60	; 0x3c
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd90      	pop	{r4, r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b08f      	sub	sp, #60	; 0x3c
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <xQueueReceiveFromISR+0x2a>
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	623b      	str	r3, [r7, #32]
 8008a38:	e7fe      	b.n	8008a38 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <xQueueReceiveFromISR+0x38>
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <xQueueReceiveFromISR+0x3c>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <xQueueReceiveFromISR+0x3e>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <xQueueReceiveFromISR+0x56>
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e7fe      	b.n	8008a64 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a66:	f001 ffd5 	bl	800aa14 <vPortValidateInterruptPriority>
	__asm volatile
 8008a6a:	f3ef 8211 	mrs	r2, BASEPRI
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	61ba      	str	r2, [r7, #24]
 8008a80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d03e      	beq.n	8008b10 <xQueueReceiveFromISR+0x100>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f003 fdda 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f003 fdd5 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	2062      	movs	r0, #98	; 0x62
 8008ab6:	f003 f83b 	bl	800bb30 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008aba:	68b9      	ldr	r1, [r7, #8]
 8008abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008abe:	f000 f8ef 	bl	8008ca0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	1e5a      	subs	r2, r3, #1
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad2:	d112      	bne.n	8008afa <xQueueReceiveFromISR+0xea>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d016      	beq.n	8008b0a <xQueueReceiveFromISR+0xfa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	3310      	adds	r3, #16
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 fe7f 	bl	80097e4 <xTaskRemoveFromEventList>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <xQueueReceiveFromISR+0xfa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <xQueueReceiveFromISR+0xfa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	e007      	b.n	8008b0a <xQueueReceiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008afe:	3301      	adds	r3, #1
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	b25a      	sxtb	r2, r3
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0e:	e010      	b.n	8008b32 <xQueueReceiveFromISR+0x122>
		}
		else
		{
			xReturn = pdFAIL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	4618      	mov	r0, r3
 8008b18:	f003 fd9e 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f003 fd99 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008b26:	4602      	mov	r2, r0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	2062      	movs	r0, #98	; 0x62
 8008b2e:	f002 ffff 	bl	800bb30 <SEGGER_SYSVIEW_RecordU32x3>
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	373c      	adds	r7, #60	; 0x3c
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd90      	pop	{r4, r7, pc}

08008b46 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <vQueueDelete+0x26>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60bb      	str	r3, [r7, #8]
 8008b6a:	e7fe      	b.n	8008b6a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f003 fd72 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008b74:	4603      	mov	r3, r0
 8008b76:	4619      	mov	r1, r3
 8008b78:	205f      	movs	r0, #95	; 0x5f
 8008b7a:	f002 ff43 	bl	800ba04 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f964 	bl	8008e4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <vQueueDelete+0x4e>
		{
			vPortFree( pxQueue );
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f002 f840 	bl	800ac14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008b94:	bf00      	nop
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d006      	beq.n	8008bba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	e001      	b.n	8008bbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
	}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10d      	bne.n	8008c06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d14d      	bne.n	8008c8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 f87c 	bl	8009cf4 <xTaskPriorityDisinherit>
 8008bfc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	605a      	str	r2, [r3, #4]
 8008c04:	e043      	b.n	8008c8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d119      	bne.n	8008c40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6898      	ldr	r0, [r3, #8]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c14:	461a      	mov	r2, r3
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	f014 fe17 	bl	801d84a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d32b      	bcc.n	8008c8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	609a      	str	r2, [r3, #8]
 8008c3e:	e026      	b.n	8008c8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68d8      	ldr	r0, [r3, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	461a      	mov	r2, r3
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	f014 fdfd 	bl	801d84a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	425b      	negs	r3, r3
 8008c5a:	441a      	add	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d207      	bcs.n	8008c7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c74:	425b      	negs	r3, r3
 8008c76:	441a      	add	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d105      	bne.n	8008c8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c96:	697b      	ldr	r3, [r7, #20]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d018      	beq.n	8008ce4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	441a      	add	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d303      	bcc.n	8008cd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68d9      	ldr	r1, [r3, #12]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6838      	ldr	r0, [r7, #0]
 8008ce0:	f014 fdb3 	bl	801d84a <memcpy>
	}
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cf4:	f001 fdaa 	bl	800a84c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d00:	e011      	b.n	8008d26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d012      	beq.n	8008d30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3324      	adds	r3, #36	; 0x24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fd68 	bl	80097e4 <xTaskRemoveFromEventList>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d1a:	f000 fe3f 	bl	800999c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dce9      	bgt.n	8008d02 <prvUnlockQueue+0x16>
 8008d2e:	e000      	b.n	8008d32 <prvUnlockQueue+0x46>
					break;
 8008d30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	22ff      	movs	r2, #255	; 0xff
 8008d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d3a:	f001 fdb5 	bl	800a8a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d3e:	f001 fd85 	bl	800a84c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d4a:	e011      	b.n	8008d70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d012      	beq.n	8008d7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3310      	adds	r3, #16
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fd43 	bl	80097e4 <xTaskRemoveFromEventList>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d64:	f000 fe1a 	bl	800999c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dce9      	bgt.n	8008d4c <prvUnlockQueue+0x60>
 8008d78:	e000      	b.n	8008d7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	22ff      	movs	r2, #255	; 0xff
 8008d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d84:	f001 fd90 	bl	800a8a8 <vPortExitCritical>
}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d98:	f001 fd58 	bl	800a84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e001      	b.n	8008dae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dae:	f001 fd7b 	bl	800a8a8 <vPortExitCritical>

	return xReturn;
 8008db2:	68fb      	ldr	r3, [r7, #12]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dc4:	f001 fd42 	bl	800a84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d102      	bne.n	8008dda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	e001      	b.n	8008dde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dde:	f001 fd63 	bl	800a8a8 <vPortExitCritical>

	return xReturn;
 8008de2:	68fb      	ldr	r3, [r7, #12]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e01e      	b.n	8008e3a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dfc:	4a12      	ldr	r2, [pc, #72]	; (8008e48 <vQueueAddToRegistry+0x5c>)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d115      	bne.n	8008e34 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e08:	490f      	ldr	r1, [pc, #60]	; (8008e48 <vQueueAddToRegistry+0x5c>)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e12:	4a0d      	ldr	r2, [pc, #52]	; (8008e48 <vQueueAddToRegistry+0x5c>)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f003 fc19 	bl	800c658 <SEGGER_SYSVIEW_ShrinkId>
 8008e26:	4601      	mov	r1, r0
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	2071      	movs	r0, #113	; 0x71
 8008e2e:	f002 fe25 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8008e32:	e005      	b.n	8008e40 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	d9dd      	bls.n	8008dfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e40:	bf00      	nop
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200089e4 	.word	0x200089e4

08008e4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e016      	b.n	8008e88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008e5a:	4a10      	ldr	r2, [pc, #64]	; (8008e9c <vQueueUnregisterQueue+0x50>)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	4413      	add	r3, r2
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d10b      	bne.n	8008e82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008e6a:	4a0c      	ldr	r2, [pc, #48]	; (8008e9c <vQueueUnregisterQueue+0x50>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008e74:	4a09      	ldr	r2, [pc, #36]	; (8008e9c <vQueueUnregisterQueue+0x50>)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	00db      	lsls	r3, r3, #3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	605a      	str	r2, [r3, #4]
				break;
 8008e80:	e005      	b.n	8008e8e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b07      	cmp	r3, #7
 8008e8c:	d9e5      	bls.n	8008e5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	200089e4 	.word	0x200089e4

08008ea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008eb0:	f001 fccc 	bl	800a84c <vPortEnterCritical>
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eba:	b25b      	sxtb	r3, r3
 8008ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec0:	d103      	bne.n	8008eca <vQueueWaitForMessageRestricted+0x2a>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ed0:	b25b      	sxtb	r3, r3
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d103      	bne.n	8008ee0 <vQueueWaitForMessageRestricted+0x40>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ee0:	f001 fce2 	bl	800a8a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	3324      	adds	r3, #36	; 0x24
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fc47 	bl	8009788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008efa:	6978      	ldr	r0, [r7, #20]
 8008efc:	f7ff fef6 	bl	8008cec <prvUnlockQueue>
	}
 8008f00:	bf00      	nop
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08e      	sub	sp, #56	; 0x38
 8008f0c:	af04      	add	r7, sp, #16
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d109      	bne.n	8008f30 <xTaskCreateStatic+0x28>
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	623b      	str	r3, [r7, #32]
 8008f2e:	e7fe      	b.n	8008f2e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d109      	bne.n	8008f4a <xTaskCreateStatic+0x42>
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	e7fe      	b.n	8008f48 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f4a:	2360      	movs	r3, #96	; 0x60
 8008f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b60      	cmp	r3, #96	; 0x60
 8008f52:	d009      	beq.n	8008f68 <xTaskCreateStatic+0x60>
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	e7fe      	b.n	8008f66 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01e      	beq.n	8008fac <xTaskCreateStatic+0xa4>
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f86:	2300      	movs	r3, #0
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	9302      	str	r3, [sp, #8]
 8008f8e:	f107 0314 	add.w	r3, r7, #20
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f850 	bl	8009044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fa6:	f000 f8d7 	bl	8009158 <prvAddNewTaskToReadyList>
 8008faa:	e001      	b.n	8008fb0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fb0:	697b      	ldr	r3, [r7, #20]
	}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3728      	adds	r7, #40	; 0x28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b08c      	sub	sp, #48	; 0x30
 8008fbe:	af04      	add	r7, sp, #16
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	603b      	str	r3, [r7, #0]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 fd5e 	bl	800aa90 <pvPortMalloc>
 8008fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00e      	beq.n	8008ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008fdc:	2060      	movs	r0, #96	; 0x60
 8008fde:	f001 fd57 	bl	800aa90 <pvPortMalloc>
 8008fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30
 8008ff0:	e005      	b.n	8008ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f001 fe0e 	bl	800ac14 <vPortFree>
 8008ff8:	e001      	b.n	8008ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d017      	beq.n	8009034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	2300      	movs	r3, #0
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f80e 	bl	8009044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009028:	69f8      	ldr	r0, [r7, #28]
 800902a:	f000 f895 	bl	8009158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800902e:	2301      	movs	r3, #1
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	e002      	b.n	800903a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009034:	f04f 33ff 	mov.w	r3, #4294967295
 8009038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800903a:	69bb      	ldr	r3, [r7, #24]
	}
 800903c:	4618      	mov	r0, r3
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	461a      	mov	r2, r3
 800905c:	21a5      	movs	r1, #165	; 0xa5
 800905e:	f014 fbff 	bl	801d860 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800906c:	3b01      	subs	r3, #1
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <prvInitialiseNewTask+0x56>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e7fe      	b.n	8009098 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
 800909e:	e012      	b.n	80090c6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	7819      	ldrb	r1, [r3, #0]
 80090a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	3334      	adds	r3, #52	; 0x34
 80090b0:	460a      	mov	r2, r1
 80090b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	4413      	add	r3, r2
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d006      	beq.n	80090ce <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	3301      	adds	r3, #1
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	2b0f      	cmp	r3, #15
 80090ca:	d9e9      	bls.n	80090a0 <prvInitialiseNewTask+0x5c>
 80090cc:	e000      	b.n	80090d0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80090ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	2b37      	cmp	r3, #55	; 0x37
 80090dc:	d901      	bls.n	80090e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090de:	2337      	movs	r3, #55	; 0x37
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	2200      	movs	r2, #0
 80090f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	3304      	adds	r3, #4
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fd95 	bl	8007c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	3318      	adds	r3, #24
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fd90 	bl	8007c28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	2200      	movs	r2, #0
 8009122:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	2200      	movs	r2, #0
 8009128:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2200      	movs	r2, #0
 800912e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	68f9      	ldr	r1, [r7, #12]
 8009136:	69b8      	ldr	r0, [r7, #24]
 8009138:	f001 fa5e 	bl	800a5f8 <pxPortInitialiseStack>
 800913c:	4602      	mov	r2, r0
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800914e:	bf00      	nop
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009158:	b5b0      	push	{r4, r5, r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af02      	add	r7, sp, #8
 800915e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009160:	f001 fb74 	bl	800a84c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009164:	4b3c      	ldr	r3, [pc, #240]	; (8009258 <prvAddNewTaskToReadyList+0x100>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3301      	adds	r3, #1
 800916a:	4a3b      	ldr	r2, [pc, #236]	; (8009258 <prvAddNewTaskToReadyList+0x100>)
 800916c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800916e:	4b3b      	ldr	r3, [pc, #236]	; (800925c <prvAddNewTaskToReadyList+0x104>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009176:	4a39      	ldr	r2, [pc, #228]	; (800925c <prvAddNewTaskToReadyList+0x104>)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800917c:	4b36      	ldr	r3, [pc, #216]	; (8009258 <prvAddNewTaskToReadyList+0x100>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d110      	bne.n	80091a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009184:	f000 fc2e 	bl	80099e4 <prvInitialiseTaskLists>
 8009188:	e00d      	b.n	80091a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800918a:	4b35      	ldr	r3, [pc, #212]	; (8009260 <prvAddNewTaskToReadyList+0x108>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009192:	4b32      	ldr	r3, [pc, #200]	; (800925c <prvAddNewTaskToReadyList+0x104>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	429a      	cmp	r2, r3
 800919e:	d802      	bhi.n	80091a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091a0:	4a2e      	ldr	r2, [pc, #184]	; (800925c <prvAddNewTaskToReadyList+0x104>)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091a6:	4b2f      	ldr	r3, [pc, #188]	; (8009264 <prvAddNewTaskToReadyList+0x10c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3301      	adds	r3, #1
 80091ac:	4a2d      	ldr	r2, [pc, #180]	; (8009264 <prvAddNewTaskToReadyList+0x10c>)
 80091ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091b0:	4b2c      	ldr	r3, [pc, #176]	; (8009264 <prvAddNewTaskToReadyList+0x10c>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d016      	beq.n	80091ec <prvAddNewTaskToReadyList+0x94>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f003 f91d 	bl	800c400 <SEGGER_SYSVIEW_OnTaskCreate>
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	461d      	mov	r5, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461c      	mov	r4, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	1ae3      	subs	r3, r4, r3
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	462b      	mov	r3, r5
 80091e8:	f001 fee4 	bl	800afb4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f003 f98e 	bl	800c510 <SEGGER_SYSVIEW_OnTaskStartReady>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <prvAddNewTaskToReadyList+0x110>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d903      	bls.n	8009208 <prvAddNewTaskToReadyList+0xb0>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	4a18      	ldr	r2, [pc, #96]	; (8009268 <prvAddNewTaskToReadyList+0x110>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a15      	ldr	r2, [pc, #84]	; (800926c <prvAddNewTaskToReadyList+0x114>)
 8009216:	441a      	add	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe fd0f 	bl	8007c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009224:	f001 fb40 	bl	800a8a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009228:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <prvAddNewTaskToReadyList+0x108>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00e      	beq.n	800924e <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <prvAddNewTaskToReadyList+0x104>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923a:	429a      	cmp	r2, r3
 800923c:	d207      	bcs.n	800924e <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800923e:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <prvAddNewTaskToReadyList+0x118>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bdb0      	pop	{r4, r5, r7, pc}
 8009256:	bf00      	nop
 8009258:	20000d1c 	.word	0x20000d1c
 800925c:	20000848 	.word	0x20000848
 8009260:	20000d28 	.word	0x20000d28
 8009264:	20000d38 	.word	0x20000d38
 8009268:	20000d24 	.word	0x20000d24
 800926c:	2000084c 	.word	0x2000084c
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800927e:	2300      	movs	r3, #0
 8009280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009282:	463a      	mov	r2, r7
 8009284:	1d39      	adds	r1, r7, #4
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fc78 	bl	8007b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	9202      	str	r2, [sp, #8]
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	2300      	movs	r3, #0
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	460a      	mov	r2, r1
 80092a2:	4920      	ldr	r1, [pc, #128]	; (8009324 <vTaskStartScheduler+0xb0>)
 80092a4:	4820      	ldr	r0, [pc, #128]	; (8009328 <vTaskStartScheduler+0xb4>)
 80092a6:	f7ff fe2f 	bl	8008f08 <xTaskCreateStatic>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b1f      	ldr	r3, [pc, #124]	; (800932c <vTaskStartScheduler+0xb8>)
 80092ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092b0:	4b1e      	ldr	r3, [pc, #120]	; (800932c <vTaskStartScheduler+0xb8>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092b8:	2301      	movs	r3, #1
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	e001      	b.n	80092c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d102      	bne.n	80092ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092c8:	f000 fe8c 	bl	8009fe4 <xTimerCreateTimerTask>
 80092cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d115      	bne.n	8009300 <vTaskStartScheduler+0x8c>
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092e6:	4b12      	ldr	r3, [pc, #72]	; (8009330 <vTaskStartScheduler+0xbc>)
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092ee:	4b11      	ldr	r3, [pc, #68]	; (8009334 <vTaskStartScheduler+0xc0>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80092f4:	4b10      	ldr	r3, [pc, #64]	; (8009338 <vTaskStartScheduler+0xc4>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092fa:	f001 fa09 	bl	800a710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092fe:	e00d      	b.n	800931c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d109      	bne.n	800931c <vTaskStartScheduler+0xa8>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e7fe      	b.n	800931a <vTaskStartScheduler+0xa6>
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	0801e784 	.word	0x0801e784
 8009328:	080099b5 	.word	0x080099b5
 800932c:	20000d40 	.word	0x20000d40
 8009330:	20000d3c 	.word	0x20000d3c
 8009334:	20000d28 	.word	0x20000d28
 8009338:	20000d20 	.word	0x20000d20

0800933c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <vTaskSuspendAll+0x18>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	4a03      	ldr	r2, [pc, #12]	; (8009354 <vTaskSuspendAll+0x18>)
 8009348:	6013      	str	r3, [r2, #0]
}
 800934a:	bf00      	nop
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20000d44 	.word	0x20000d44

08009358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009362:	2300      	movs	r3, #0
 8009364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009366:	4b43      	ldr	r3, [pc, #268]	; (8009474 <xTaskResumeAll+0x11c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <xTaskResumeAll+0x2a>
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	e7fe      	b.n	8009380 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009382:	f001 fa63 	bl	800a84c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009386:	4b3b      	ldr	r3, [pc, #236]	; (8009474 <xTaskResumeAll+0x11c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3b01      	subs	r3, #1
 800938c:	4a39      	ldr	r2, [pc, #228]	; (8009474 <xTaskResumeAll+0x11c>)
 800938e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009390:	4b38      	ldr	r3, [pc, #224]	; (8009474 <xTaskResumeAll+0x11c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d166      	bne.n	8009466 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009398:	4b37      	ldr	r3, [pc, #220]	; (8009478 <xTaskResumeAll+0x120>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d062      	beq.n	8009466 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093a0:	e033      	b.n	800940a <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80093a2:	4b36      	ldr	r3, [pc, #216]	; (800947c <xTaskResumeAll+0x124>)
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3318      	adds	r3, #24
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fca4 	bl	8007cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fc9f 	bl	8007cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f003 f8a5 	bl	800c510 <SEGGER_SYSVIEW_OnTaskStartReady>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ca:	4b2d      	ldr	r3, [pc, #180]	; (8009480 <xTaskResumeAll+0x128>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d903      	bls.n	80093da <xTaskResumeAll+0x82>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	4a2a      	ldr	r2, [pc, #168]	; (8009480 <xTaskResumeAll+0x128>)
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4a27      	ldr	r2, [pc, #156]	; (8009484 <xTaskResumeAll+0x12c>)
 80093e8:	441a      	add	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f7fe fc26 	bl	8007c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fa:	4b23      	ldr	r3, [pc, #140]	; (8009488 <xTaskResumeAll+0x130>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	429a      	cmp	r2, r3
 8009402:	d302      	bcc.n	800940a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009404:	4b21      	ldr	r3, [pc, #132]	; (800948c <xTaskResumeAll+0x134>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800940a:	4b1c      	ldr	r3, [pc, #112]	; (800947c <xTaskResumeAll+0x124>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1c7      	bne.n	80093a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009418:	f000 fbb6 	bl	8009b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800941c:	4b1c      	ldr	r3, [pc, #112]	; (8009490 <xTaskResumeAll+0x138>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d010      	beq.n	800944a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009428:	f000 f858 	bl	80094dc <xTaskIncrementTick>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009432:	4b16      	ldr	r3, [pc, #88]	; (800948c <xTaskResumeAll+0x134>)
 8009434:	2201      	movs	r2, #1
 8009436:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3b01      	subs	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1f1      	bne.n	8009428 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009444:	4b12      	ldr	r3, [pc, #72]	; (8009490 <xTaskResumeAll+0x138>)
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800944a:	4b10      	ldr	r3, [pc, #64]	; (800948c <xTaskResumeAll+0x134>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <xTaskResumeAll+0x13c>)
 8009458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009466:	f001 fa1f 	bl	800a8a8 <vPortExitCritical>

	return xAlreadyYielded;
 800946a:	68bb      	ldr	r3, [r7, #8]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000d44 	.word	0x20000d44
 8009478:	20000d1c 	.word	0x20000d1c
 800947c:	20000cdc 	.word	0x20000cdc
 8009480:	20000d24 	.word	0x20000d24
 8009484:	2000084c 	.word	0x2000084c
 8009488:	20000848 	.word	0x20000848
 800948c:	20000d30 	.word	0x20000d30
 8009490:	20000d2c 	.word	0x20000d2c
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <xTaskGetTickCount+0x1c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094a4:	687b      	ldr	r3, [r7, #4]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000d20 	.word	0x20000d20

080094b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094be:	f001 faa9 	bl	800aa14 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80094c2:	2300      	movs	r3, #0
 80094c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80094c6:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <xTaskGetTickCountFromISR+0x20>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094cc:	683b      	ldr	r3, [r7, #0]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000d20 	.word	0x20000d20

080094dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e6:	4b53      	ldr	r3, [pc, #332]	; (8009634 <xTaskIncrementTick+0x158>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 8091 	bne.w	8009612 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094f0:	4b51      	ldr	r3, [pc, #324]	; (8009638 <xTaskIncrementTick+0x15c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094f8:	4a4f      	ldr	r2, [pc, #316]	; (8009638 <xTaskIncrementTick+0x15c>)
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d11f      	bne.n	8009544 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009504:	4b4d      	ldr	r3, [pc, #308]	; (800963c <xTaskIncrementTick+0x160>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <xTaskIncrementTick+0x46>
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	e7fe      	b.n	8009520 <xTaskIncrementTick+0x44>
 8009522:	4b46      	ldr	r3, [pc, #280]	; (800963c <xTaskIncrementTick+0x160>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	4b45      	ldr	r3, [pc, #276]	; (8009640 <xTaskIncrementTick+0x164>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a43      	ldr	r2, [pc, #268]	; (800963c <xTaskIncrementTick+0x160>)
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	4a43      	ldr	r2, [pc, #268]	; (8009640 <xTaskIncrementTick+0x164>)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	4b43      	ldr	r3, [pc, #268]	; (8009644 <xTaskIncrementTick+0x168>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3301      	adds	r3, #1
 800953c:	4a41      	ldr	r2, [pc, #260]	; (8009644 <xTaskIncrementTick+0x168>)
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	f000 fb22 	bl	8009b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009544:	4b40      	ldr	r3, [pc, #256]	; (8009648 <xTaskIncrementTick+0x16c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	429a      	cmp	r2, r3
 800954c:	d352      	bcc.n	80095f4 <xTaskIncrementTick+0x118>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800954e:	4b3b      	ldr	r3, [pc, #236]	; (800963c <xTaskIncrementTick+0x160>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <xTaskIncrementTick+0x80>
 8009558:	2301      	movs	r3, #1
 800955a:	e000      	b.n	800955e <xTaskIncrementTick+0x82>
 800955c:	2300      	movs	r3, #0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d004      	beq.n	800956c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009562:	4b39      	ldr	r3, [pc, #228]	; (8009648 <xTaskIncrementTick+0x16c>)
 8009564:	f04f 32ff 	mov.w	r2, #4294967295
 8009568:	601a      	str	r2, [r3, #0]
					break;
 800956a:	e043      	b.n	80095f4 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800956c:	4b33      	ldr	r3, [pc, #204]	; (800963c <xTaskIncrementTick+0x160>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d203      	bcs.n	800958c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009584:	4a30      	ldr	r2, [pc, #192]	; (8009648 <xTaskIncrementTick+0x16c>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6013      	str	r3, [r2, #0]
						break;
 800958a:	e033      	b.n	80095f4 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3304      	adds	r3, #4
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe fbb3 	bl	8007cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	3318      	adds	r3, #24
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fbaa 	bl	8007cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f002 ffb0 	bl	800c510 <SEGGER_SYSVIEW_OnTaskStartReady>
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4b25      	ldr	r3, [pc, #148]	; (800964c <xTaskIncrementTick+0x170>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d903      	bls.n	80095c4 <xTaskIncrementTick+0xe8>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	4a22      	ldr	r2, [pc, #136]	; (800964c <xTaskIncrementTick+0x170>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a1f      	ldr	r2, [pc, #124]	; (8009650 <xTaskIncrementTick+0x174>)
 80095d2:	441a      	add	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fb31 	bl	8007c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <xTaskIncrementTick+0x178>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d3af      	bcc.n	800954e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095f2:	e7ac      	b.n	800954e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <xTaskIncrementTick+0x178>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4915      	ldr	r1, [pc, #84]	; (8009650 <xTaskIncrementTick+0x174>)
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d907      	bls.n	800961c <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e004      	b.n	800961c <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <xTaskIncrementTick+0x17c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3301      	adds	r3, #1
 8009618:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <xTaskIncrementTick+0x17c>)
 800961a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <xTaskIncrementTick+0x180>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <xTaskIncrementTick+0x14c>
		{
			xSwitchRequired = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009628:	697b      	ldr	r3, [r7, #20]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000d44 	.word	0x20000d44
 8009638:	20000d20 	.word	0x20000d20
 800963c:	20000cd4 	.word	0x20000cd4
 8009640:	20000cd8 	.word	0x20000cd8
 8009644:	20000d34 	.word	0x20000d34
 8009648:	20000d3c 	.word	0x20000d3c
 800964c:	20000d24 	.word	0x20000d24
 8009650:	2000084c 	.word	0x2000084c
 8009654:	20000848 	.word	0x20000848
 8009658:	20000d2c 	.word	0x20000d2c
 800965c:	20000d30 	.word	0x20000d30

08009660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009666:	4b30      	ldr	r3, [pc, #192]	; (8009728 <vTaskSwitchContext+0xc8>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800966e:	4b2f      	ldr	r3, [pc, #188]	; (800972c <vTaskSwitchContext+0xcc>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009674:	e053      	b.n	800971e <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 8009676:	4b2d      	ldr	r3, [pc, #180]	; (800972c <vTaskSwitchContext+0xcc>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800967c:	4b2c      	ldr	r3, [pc, #176]	; (8009730 <vTaskSwitchContext+0xd0>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	e00f      	b.n	80096a4 <vTaskSwitchContext+0x44>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d109      	bne.n	800969e <vTaskSwitchContext+0x3e>
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	607b      	str	r3, [r7, #4]
 800969c:	e7fe      	b.n	800969c <vTaskSwitchContext+0x3c>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	4923      	ldr	r1, [pc, #140]	; (8009734 <vTaskSwitchContext+0xd4>)
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0e5      	beq.n	8009684 <vTaskSwitchContext+0x24>
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4a1c      	ldr	r2, [pc, #112]	; (8009734 <vTaskSwitchContext+0xd4>)
 80096c4:	4413      	add	r3, r2
 80096c6:	60bb      	str	r3, [r7, #8]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	605a      	str	r2, [r3, #4]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	3308      	adds	r3, #8
 80096da:	429a      	cmp	r2, r3
 80096dc:	d104      	bne.n	80096e8 <vTaskSwitchContext+0x88>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	605a      	str	r2, [r3, #4]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	4a12      	ldr	r2, [pc, #72]	; (8009738 <vTaskSwitchContext+0xd8>)
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	4a0f      	ldr	r2, [pc, #60]	; (8009730 <vTaskSwitchContext+0xd0>)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <vTaskSwitchContext+0xd8>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3334      	adds	r3, #52	; 0x34
 80096fe:	2205      	movs	r2, #5
 8009700:	490e      	ldr	r1, [pc, #56]	; (800973c <vTaskSwitchContext+0xdc>)
 8009702:	4618      	mov	r0, r3
 8009704:	f014 f892 	bl	801d82c <memcmp>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d005      	beq.n	800971a <vTaskSwitchContext+0xba>
 800970e:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <vTaskSwitchContext+0xd8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4618      	mov	r0, r3
 8009714:	f002 feb8 	bl	800c488 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009718:	e001      	b.n	800971e <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 800971a:	f002 fe55 	bl	800c3c8 <SEGGER_SYSVIEW_OnIdle>
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000d44 	.word	0x20000d44
 800972c:	20000d30 	.word	0x20000d30
 8009730:	20000d24 	.word	0x20000d24
 8009734:	2000084c 	.word	0x2000084c
 8009738:	20000848 	.word	0x20000848
 800973c:	0801e784 	.word	0x0801e784

08009740 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d109      	bne.n	8009764 <vTaskPlaceOnEventList+0x24>
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e7fe      	b.n	8009762 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009764:	4b07      	ldr	r3, [pc, #28]	; (8009784 <vTaskPlaceOnEventList+0x44>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3318      	adds	r3, #24
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7fe fa8c 	bl	8007c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009772:	2101      	movs	r1, #1
 8009774:	6838      	ldr	r0, [r7, #0]
 8009776:	f000 fbcf 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000848 	.word	0x20000848

08009788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <vTaskPlaceOnEventListRestricted+0x26>
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e7fe      	b.n	80097ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097ae:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <vTaskPlaceOnEventListRestricted+0x58>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3318      	adds	r3, #24
 80097b4:	4619      	mov	r1, r3
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f7fe fa43 	bl	8007c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80097c2:	f04f 33ff 	mov.w	r3, #4294967295
 80097c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80097c8:	2024      	movs	r0, #36	; 0x24
 80097ca:	f002 f8fd 	bl	800b9c8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	68b8      	ldr	r0, [r7, #8]
 80097d2:	f000 fba1 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
	}
 80097d6:	bf00      	nop
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000848 	.word	0x20000848

080097e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d109      	bne.n	800980e <xTaskRemoveFromEventList+0x2a>
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e7fe      	b.n	800980c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	3318      	adds	r3, #24
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fa72 	bl	8007cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009818:	4b1f      	ldr	r3, [pc, #124]	; (8009898 <xTaskRemoveFromEventList+0xb4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d121      	bne.n	8009864 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3304      	adds	r3, #4
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fa69 	bl	8007cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	4618      	mov	r0, r3
 800982e:	f002 fe6f 	bl	800c510 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009836:	4b19      	ldr	r3, [pc, #100]	; (800989c <xTaskRemoveFromEventList+0xb8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d903      	bls.n	8009846 <xTaskRemoveFromEventList+0x62>
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	4a16      	ldr	r2, [pc, #88]	; (800989c <xTaskRemoveFromEventList+0xb8>)
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <xTaskRemoveFromEventList+0xbc>)
 8009854:	441a      	add	r2, r3
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	3304      	adds	r3, #4
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f7fe f9f0 	bl	8007c42 <vListInsertEnd>
 8009862:	e005      	b.n	8009870 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3318      	adds	r3, #24
 8009868:	4619      	mov	r1, r3
 800986a:	480e      	ldr	r0, [pc, #56]	; (80098a4 <xTaskRemoveFromEventList+0xc0>)
 800986c:	f7fe f9e9 	bl	8007c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <xTaskRemoveFromEventList+0xc4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	429a      	cmp	r2, r3
 800987c:	d905      	bls.n	800988a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009882:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <xTaskRemoveFromEventList+0xc8>)
 8009884:	2201      	movs	r2, #1
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e001      	b.n	800988e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800988e:	697b      	ldr	r3, [r7, #20]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000d44 	.word	0x20000d44
 800989c:	20000d24 	.word	0x20000d24
 80098a0:	2000084c 	.word	0x2000084c
 80098a4:	20000cdc 	.word	0x20000cdc
 80098a8:	20000848 	.word	0x20000848
 80098ac:	20000d30 	.word	0x20000d30

080098b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098b8:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <vTaskInternalSetTimeOutState+0x24>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <vTaskInternalSetTimeOutState+0x28>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	605a      	str	r2, [r3, #4]
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	20000d34 	.word	0x20000d34
 80098d8:	20000d20 	.word	0x20000d20

080098dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d109      	bne.n	8009900 <xTaskCheckForTimeOut+0x24>
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	613b      	str	r3, [r7, #16]
 80098fe:	e7fe      	b.n	80098fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d109      	bne.n	800991a <xTaskCheckForTimeOut+0x3e>
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	e7fe      	b.n	8009918 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800991a:	f000 ff97 	bl	800a84c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800991e:	4b1d      	ldr	r3, [pc, #116]	; (8009994 <xTaskCheckForTimeOut+0xb8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009936:	d102      	bne.n	800993e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009938:	2300      	movs	r3, #0
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	e023      	b.n	8009986 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <xTaskCheckForTimeOut+0xbc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d007      	beq.n	800995a <xTaskCheckForTimeOut+0x7e>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	429a      	cmp	r2, r3
 8009952:	d302      	bcc.n	800995a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009954:	2301      	movs	r3, #1
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	e015      	b.n	8009986 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	429a      	cmp	r2, r3
 8009962:	d20b      	bcs.n	800997c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	1ad2      	subs	r2, r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff ff9d 	bl	80098b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	e004      	b.n	8009986 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009982:	2301      	movs	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009986:	f000 ff8f 	bl	800a8a8 <vPortExitCritical>

	return xReturn;
 800998a:	69fb      	ldr	r3, [r7, #28]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000d20 	.word	0x20000d20
 8009998:	20000d34 	.word	0x20000d34

0800999c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099a0:	4b03      	ldr	r3, [pc, #12]	; (80099b0 <vTaskMissedYield+0x14>)
 80099a2:	2201      	movs	r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
}
 80099a6:	bf00      	nop
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	20000d30 	.word	0x20000d30

080099b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099bc:	f000 f852 	bl	8009a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <prvIdleTask+0x28>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d9f9      	bls.n	80099bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80099c8:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <prvIdleTask+0x2c>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099d8:	e7f0      	b.n	80099bc <prvIdleTask+0x8>
 80099da:	bf00      	nop
 80099dc:	2000084c 	.word	0x2000084c
 80099e0:	e000ed04 	.word	0xe000ed04

080099e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099ea:	2300      	movs	r3, #0
 80099ec:	607b      	str	r3, [r7, #4]
 80099ee:	e00c      	b.n	8009a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4a12      	ldr	r2, [pc, #72]	; (8009a44 <prvInitialiseTaskLists+0x60>)
 80099fc:	4413      	add	r3, r2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe f8f2 	bl	8007be8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3301      	adds	r3, #1
 8009a08:	607b      	str	r3, [r7, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b37      	cmp	r3, #55	; 0x37
 8009a0e:	d9ef      	bls.n	80099f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a10:	480d      	ldr	r0, [pc, #52]	; (8009a48 <prvInitialiseTaskLists+0x64>)
 8009a12:	f7fe f8e9 	bl	8007be8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a16:	480d      	ldr	r0, [pc, #52]	; (8009a4c <prvInitialiseTaskLists+0x68>)
 8009a18:	f7fe f8e6 	bl	8007be8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a1c:	480c      	ldr	r0, [pc, #48]	; (8009a50 <prvInitialiseTaskLists+0x6c>)
 8009a1e:	f7fe f8e3 	bl	8007be8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a22:	480c      	ldr	r0, [pc, #48]	; (8009a54 <prvInitialiseTaskLists+0x70>)
 8009a24:	f7fe f8e0 	bl	8007be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a28:	480b      	ldr	r0, [pc, #44]	; (8009a58 <prvInitialiseTaskLists+0x74>)
 8009a2a:	f7fe f8dd 	bl	8007be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a2e:	4b0b      	ldr	r3, [pc, #44]	; (8009a5c <prvInitialiseTaskLists+0x78>)
 8009a30:	4a05      	ldr	r2, [pc, #20]	; (8009a48 <prvInitialiseTaskLists+0x64>)
 8009a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a34:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <prvInitialiseTaskLists+0x7c>)
 8009a36:	4a05      	ldr	r2, [pc, #20]	; (8009a4c <prvInitialiseTaskLists+0x68>)
 8009a38:	601a      	str	r2, [r3, #0]
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	2000084c 	.word	0x2000084c
 8009a48:	20000cac 	.word	0x20000cac
 8009a4c:	20000cc0 	.word	0x20000cc0
 8009a50:	20000cdc 	.word	0x20000cdc
 8009a54:	20000cf0 	.word	0x20000cf0
 8009a58:	20000d08 	.word	0x20000d08
 8009a5c:	20000cd4 	.word	0x20000cd4
 8009a60:	20000cd8 	.word	0x20000cd8

08009a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a6a:	e019      	b.n	8009aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a6c:	f000 feee 	bl	800a84c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a70:	4b0f      	ldr	r3, [pc, #60]	; (8009ab0 <prvCheckTasksWaitingTermination+0x4c>)
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe f93d 	bl	8007cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a82:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <prvCheckTasksWaitingTermination+0x50>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	4a0a      	ldr	r2, [pc, #40]	; (8009ab4 <prvCheckTasksWaitingTermination+0x50>)
 8009a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <prvCheckTasksWaitingTermination+0x54>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	4a09      	ldr	r2, [pc, #36]	; (8009ab8 <prvCheckTasksWaitingTermination+0x54>)
 8009a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a96:	f000 ff07 	bl	800a8a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f846 	bl	8009b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <prvCheckTasksWaitingTermination+0x54>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e1      	bne.n	8009a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	20000cf0 	.word	0x20000cf0
 8009ab4:	20000d1c 	.word	0x20000d1c
 8009ab8:	20000d04 	.word	0x20000d04

08009abc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009ac8:	e005      	b.n	8009ad6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3301      	adds	r3, #1
 8009ace:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2ba5      	cmp	r3, #165	; 0xa5
 8009adc:	d0f5      	beq.n	8009aca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	089b      	lsrs	r3, r3, #2
 8009ae2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	b29b      	uxth	r3, r3
	}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <uxTaskGetStackHighWaterMark+0x14>
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <uxTaskGetStackHighWaterMark+0x34>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	e000      	b.n	8009b0a <uxTaskGetStackHighWaterMark+0x16>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009b12:	6938      	ldr	r0, [r7, #16]
 8009b14:	f7ff ffd2 	bl	8009abc <prvTaskCheckFreeStackSpace>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
	}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20000848 	.word	0x20000848

08009b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d108      	bne.n	8009b50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 f866 	bl	800ac14 <vPortFree>
				vPortFree( pxTCB );
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 f863 	bl	800ac14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b4e:	e017      	b.n	8009b80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d103      	bne.n	8009b62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f001 f85a 	bl	800ac14 <vPortFree>
	}
 8009b60:	e00e      	b.n	8009b80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d009      	beq.n	8009b80 <prvDeleteTCB+0x54>
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	e7fe      	b.n	8009b7e <prvDeleteTCB+0x52>
	}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8e:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <prvResetNextTaskUnblockTime+0x44>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <prvResetNextTaskUnblockTime+0x14>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e000      	b.n	8009b9e <prvResetNextTaskUnblockTime+0x16>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d004      	beq.n	8009bac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <prvResetNextTaskUnblockTime+0x48>)
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009baa:	e008      	b.n	8009bbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <prvResetNextTaskUnblockTime+0x44>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	4a05      	ldr	r2, [pc, #20]	; (8009bd0 <prvResetNextTaskUnblockTime+0x48>)
 8009bbc:	6013      	str	r3, [r2, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	20000cd4 	.word	0x20000cd4
 8009bd0:	20000d3c 	.word	0x20000d3c

08009bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <xTaskGetSchedulerState+0x34>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009be2:	2301      	movs	r3, #1
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	e008      	b.n	8009bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be8:	4b08      	ldr	r3, [pc, #32]	; (8009c0c <xTaskGetSchedulerState+0x38>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	e001      	b.n	8009bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bfa:	687b      	ldr	r3, [r7, #4]
	}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20000d28 	.word	0x20000d28
 8009c0c:	20000d44 	.word	0x20000d44

08009c10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d05b      	beq.n	8009cde <xTaskPriorityInherit+0xce>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ce8 <xTaskPriorityInherit+0xd8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d24b      	bcs.n	8009ccc <xTaskPriorityInherit+0xbc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	db06      	blt.n	8009c4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ce8 <xTaskPriorityInherit+0xd8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6959      	ldr	r1, [r3, #20]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4a24      	ldr	r2, [pc, #144]	; (8009cec <xTaskPriorityInherit+0xdc>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	4299      	cmp	r1, r3
 8009c60:	d101      	bne.n	8009c66 <xTaskPriorityInherit+0x56>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e000      	b.n	8009c68 <xTaskPriorityInherit+0x58>
 8009c66:	2300      	movs	r3, #0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d022      	beq.n	8009cb2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe f843 	bl	8007cfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c76:	4b1c      	ldr	r3, [pc, #112]	; (8009ce8 <xTaskPriorityInherit+0xd8>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c84:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <xTaskPriorityInherit+0xe0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d903      	bls.n	8009c94 <xTaskPriorityInherit+0x84>
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	4a17      	ldr	r2, [pc, #92]	; (8009cf0 <xTaskPriorityInherit+0xe0>)
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4a12      	ldr	r2, [pc, #72]	; (8009cec <xTaskPriorityInherit+0xdc>)
 8009ca2:	441a      	add	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f7fd ffc9 	bl	8007c42 <vListInsertEnd>
 8009cb0:	e004      	b.n	8009cbc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <xTaskPriorityInherit+0xd8>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	2049      	movs	r0, #73	; 0x49
 8009cc2:	f001 fe9f 	bl	800ba04 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e008      	b.n	8009cde <xTaskPriorityInherit+0xce>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <xTaskPriorityInherit+0xd8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d201      	bcs.n	8009cde <xTaskPriorityInherit+0xce>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cde:	68fb      	ldr	r3, [r7, #12]
	}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20000848 	.word	0x20000848
 8009cec:	2000084c 	.word	0x2000084c
 8009cf0:	20000d24 	.word	0x20000d24

08009cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d059      	beq.n	8009dbe <xTaskPriorityDisinherit+0xca>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d0a:	4b2f      	ldr	r3, [pc, #188]	; (8009dc8 <xTaskPriorityDisinherit+0xd4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d009      	beq.n	8009d28 <xTaskPriorityDisinherit+0x34>
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	e7fe      	b.n	8009d26 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d109      	bne.n	8009d44 <xTaskPriorityDisinherit+0x50>
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60bb      	str	r3, [r7, #8]
 8009d42:	e7fe      	b.n	8009d42 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d48:	1e5a      	subs	r2, r3, #1
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d031      	beq.n	8009dbe <xTaskPriorityDisinherit+0xca>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d12d      	bne.n	8009dbe <xTaskPriorityDisinherit+0xca>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	3304      	adds	r3, #4
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd ffc8 	bl	8007cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	204a      	movs	r0, #74	; 0x4a
 8009d72:	f001 fe47 	bl	800ba04 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <xTaskPriorityDisinherit+0xd8>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d903      	bls.n	8009d9e <xTaskPriorityDisinherit+0xaa>
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <xTaskPriorityDisinherit+0xd8>)
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4a09      	ldr	r2, [pc, #36]	; (8009dd0 <xTaskPriorityDisinherit+0xdc>)
 8009dac:	441a      	add	r2, r3
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fd ff44 	bl	8007c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dbe:	697b      	ldr	r3, [r7, #20]
	}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000848 	.word	0x20000848
 8009dcc:	20000d24 	.word	0x20000d24
 8009dd0:	2000084c 	.word	0x2000084c

08009dd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009de2:	2301      	movs	r3, #1
 8009de4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d076      	beq.n	8009eda <vTaskPriorityDisinheritAfterTimeout+0x106>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	e7fe      	b.n	8009e06 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d902      	bls.n	8009e18 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	61fb      	str	r3, [r7, #28]
 8009e16:	e002      	b.n	8009e1e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d058      	beq.n	8009eda <vTaskPriorityDisinheritAfterTimeout+0x106>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d153      	bne.n	8009eda <vTaskPriorityDisinheritAfterTimeout+0x106>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e32:	4b2c      	ldr	r3, [pc, #176]	; (8009ee4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d109      	bne.n	8009e50 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60bb      	str	r3, [r7, #8]
 8009e4e:	e7fe      	b.n	8009e4e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4619      	mov	r1, r3
 8009e54:	204a      	movs	r0, #74	; 0x4a
 8009e56:	f001 fdd5 	bl	800ba04 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	db04      	blt.n	8009e78 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	6959      	ldr	r1, [r3, #20]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4a18      	ldr	r2, [pc, #96]	; (8009ee8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e88:	4413      	add	r3, r2
 8009e8a:	4299      	cmp	r1, r3
 8009e8c:	d101      	bne.n	8009e92 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e000      	b.n	8009e94 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8009e92:	2300      	movs	r3, #0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d020      	beq.n	8009eda <vTaskPriorityDisinheritAfterTimeout+0x106>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fd ff2d 	bl	8007cfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f002 fb33 	bl	800c510 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eae:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d903      	bls.n	8009ebe <vTaskPriorityDisinheritAfterTimeout+0xea>
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	4a0c      	ldr	r2, [pc, #48]	; (8009eec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4a07      	ldr	r2, [pc, #28]	; (8009ee8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009ecc:	441a      	add	r2, r3
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f7fd feb4 	bl	8007c42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009eda:	bf00      	nop
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000848 	.word	0x20000848
 8009ee8:	2000084c 	.word	0x2000084c
 8009eec:	20000d24 	.word	0x20000d24

08009ef0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ef4:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009efc:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f02:	3201      	adds	r2, #1
 8009f04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009f06:	4b03      	ldr	r3, [pc, #12]	; (8009f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f08:	681b      	ldr	r3, [r3, #0]
	}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	20000848 	.word	0x20000848

08009f18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f22:	4b2a      	ldr	r3, [pc, #168]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f28:	4b29      	ldr	r3, [pc, #164]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fd fee4 	bl	8007cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d110      	bne.n	8009f5e <prvAddCurrentTaskToDelayedList+0x46>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00d      	beq.n	8009f5e <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8009f42:	4b23      	ldr	r3, [pc, #140]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	211b      	movs	r1, #27
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f002 fb25 	bl	800c598 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f4e:	4b20      	ldr	r3, [pc, #128]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	481f      	ldr	r0, [pc, #124]	; (8009fd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f58:	f7fd fe73 	bl	8007c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f5c:	e032      	b.n	8009fc4 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4413      	add	r3, r2
 8009f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f66:	4b1a      	ldr	r3, [pc, #104]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d20f      	bcs.n	8009f96 <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8009f76:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f002 fb0b 	bl	800c598 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7fd fe7b 	bl	8007c8a <vListInsert>
}
 8009f94:	e016      	b.n	8009fc4 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8009f96:	4b0e      	ldr	r3, [pc, #56]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2104      	movs	r1, #4
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f002 fafb 	bl	800c598 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f7fd fe6b 	bl	8007c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d202      	bcs.n	8009fc4 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 8009fbe:	4a08      	ldr	r2, [pc, #32]	; (8009fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	6013      	str	r3, [r2, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20000d20 	.word	0x20000d20
 8009fd0:	20000848 	.word	0x20000848
 8009fd4:	20000d08 	.word	0x20000d08
 8009fd8:	20000cd8 	.word	0x20000cd8
 8009fdc:	20000cd4 	.word	0x20000cd4
 8009fe0:	20000d3c 	.word	0x20000d3c

08009fe4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08a      	sub	sp, #40	; 0x28
 8009fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fee:	f000 fac3 	bl	800a578 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <xTimerCreateTimerTask+0x80>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d021      	beq.n	800a03e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a002:	1d3a      	adds	r2, r7, #4
 800a004:	f107 0108 	add.w	r1, r7, #8
 800a008:	f107 030c 	add.w	r3, r7, #12
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fd fdd1 	bl	8007bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	9202      	str	r2, [sp, #8]
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	2302      	movs	r3, #2
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	460a      	mov	r2, r1
 800a024:	4910      	ldr	r1, [pc, #64]	; (800a068 <xTimerCreateTimerTask+0x84>)
 800a026:	4811      	ldr	r0, [pc, #68]	; (800a06c <xTimerCreateTimerTask+0x88>)
 800a028:	f7fe ff6e 	bl	8008f08 <xTaskCreateStatic>
 800a02c:	4602      	mov	r2, r0
 800a02e:	4b10      	ldr	r3, [pc, #64]	; (800a070 <xTimerCreateTimerTask+0x8c>)
 800a030:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a032:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <xTimerCreateTimerTask+0x8c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a03a:	2301      	movs	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d109      	bne.n	800a058 <xTimerCreateTimerTask+0x74>
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	613b      	str	r3, [r7, #16]
 800a056:	e7fe      	b.n	800a056 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a058:	697b      	ldr	r3, [r7, #20]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000d78 	.word	0x20000d78
 800a068:	0801e78c 	.word	0x0801e78c
 800a06c:	0800a18d 	.word	0x0800a18d
 800a070:	20000d7c 	.word	0x20000d7c

0800a074 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a082:	2300      	movs	r3, #0
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <xTimerGenericCommand+0x2c>
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	623b      	str	r3, [r7, #32]
 800a09e:	e7fe      	b.n	800a09e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0a0:	4b19      	ldr	r3, [pc, #100]	; (800a108 <xTimerGenericCommand+0x94>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d02a      	beq.n	800a0fe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b05      	cmp	r3, #5
 800a0b8:	dc18      	bgt.n	800a0ec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0ba:	f7ff fd8b 	bl	8009bd4 <xTaskGetSchedulerState>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d109      	bne.n	800a0d8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0c4:	4b10      	ldr	r3, [pc, #64]	; (800a108 <xTimerGenericCommand+0x94>)
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	f107 0110 	add.w	r1, r7, #16
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0d0:	f7fd ffe4 	bl	800809c <xQueueGenericSend>
 800a0d4:	6278      	str	r0, [r7, #36]	; 0x24
 800a0d6:	e012      	b.n	800a0fe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0d8:	4b0b      	ldr	r3, [pc, #44]	; (800a108 <xTimerGenericCommand+0x94>)
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	f107 0110 	add.w	r1, r7, #16
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f7fd ffda 	bl	800809c <xQueueGenericSend>
 800a0e8:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ea:	e008      	b.n	800a0fe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <xTimerGenericCommand+0x94>)
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	f107 0110 	add.w	r1, r7, #16
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	f7fe f8f2 	bl	80082e0 <xQueueGenericSendFromISR>
 800a0fc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a100:	4618      	mov	r0, r3
 800a102:	3728      	adds	r7, #40	; 0x28
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000d78 	.word	0x20000d78

0800a10c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af02      	add	r7, sp, #8
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a116:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <prvProcessExpiredTimer+0x7c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	3304      	adds	r3, #4
 800a124:	4618      	mov	r0, r3
 800a126:	f7fd fde9 	bl	8007cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d121      	bne.n	800a176 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	699a      	ldr	r2, [r3, #24]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	18d1      	adds	r1, r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	6978      	ldr	r0, [r7, #20]
 800a140:	f000 f8c8 	bl	800a2d4 <prvInsertTimerInActiveList>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d015      	beq.n	800a176 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a14a:	2300      	movs	r3, #0
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	2300      	movs	r3, #0
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	2100      	movs	r1, #0
 800a154:	6978      	ldr	r0, [r7, #20]
 800a156:	f7ff ff8d 	bl	800a074 <xTimerGenericCommand>
 800a15a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <prvProcessExpiredTimer+0x6a>
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	e7fe      	b.n	800a174 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	4798      	blx	r3
}
 800a17e:	bf00      	nop
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20000d70 	.word	0x20000d70

0800a18c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a194:	f107 0308 	add.w	r3, r7, #8
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f857 	bl	800a24c <prvGetNextExpireTime>
 800a19e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f803 	bl	800a1b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1aa:	f000 f8d5 	bl	800a358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1ae:	e7f1      	b.n	800a194 <prvTimerTask+0x8>

0800a1b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ba:	f7ff f8bf 	bl	800933c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f866 	bl	800a294 <prvSampleTimeNow>
 800a1c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d130      	bne.n	800a232 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <prvProcessTimerOrBlockTask+0x3c>
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d806      	bhi.n	800a1ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1de:	f7ff f8bb 	bl	8009358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1e2:	68f9      	ldr	r1, [r7, #12]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff ff91 	bl	800a10c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ea:	e024      	b.n	800a236 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d008      	beq.n	800a204 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1f2:	4b13      	ldr	r3, [pc, #76]	; (800a240 <prvProcessTimerOrBlockTask+0x90>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2301      	moveq	r3, #1
 800a1fe:	2300      	movne	r3, #0
 800a200:	b2db      	uxtb	r3, r3
 800a202:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a204:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <prvProcessTimerOrBlockTask+0x94>)
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	f7fe fe45 	bl	8008ea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a216:	f7ff f89f 	bl	8009358 <xTaskResumeAll>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a220:	4b09      	ldr	r3, [pc, #36]	; (800a248 <prvProcessTimerOrBlockTask+0x98>)
 800a222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
}
 800a230:	e001      	b.n	800a236 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a232:	f7ff f891 	bl	8009358 <xTaskResumeAll>
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000d74 	.word	0x20000d74
 800a244:	20000d78 	.word	0x20000d78
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <prvGetNextExpireTime+0x44>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bf0c      	ite	eq
 800a25e:	2301      	moveq	r3, #1
 800a260:	2300      	movne	r3, #0
 800a262:	b2db      	uxtb	r3, r3
 800a264:	461a      	mov	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d105      	bne.n	800a27e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <prvGetNextExpireTime+0x44>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e001      	b.n	800a282 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a282:	68fb      	ldr	r3, [r7, #12]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	20000d70 	.word	0x20000d70

0800a294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a29c:	f7ff f8fc 	bl	8009498 <xTaskGetTickCount>
 800a2a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <prvSampleTimeNow+0x3c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d205      	bcs.n	800a2b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2ac:	f000 f904 	bl	800a4b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	e002      	b.n	800a2be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2be:	4a04      	ldr	r2, [pc, #16]	; (800a2d0 <prvSampleTimeNow+0x3c>)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000d80 	.word	0x20000d80

0800a2d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d812      	bhi.n	800a320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	1ad2      	subs	r2, r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	429a      	cmp	r2, r3
 800a306:	d302      	bcc.n	800a30e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e01b      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a30e:	4b10      	ldr	r3, [pc, #64]	; (800a350 <prvInsertTimerInActiveList+0x7c>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3304      	adds	r3, #4
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f7fd fcb6 	bl	8007c8a <vListInsert>
 800a31e:	e012      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d206      	bcs.n	800a336 <prvInsertTimerInActiveList+0x62>
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d302      	bcc.n	800a336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a330:	2301      	movs	r3, #1
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	e007      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <prvInsertTimerInActiveList+0x80>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7fd fca2 	bl	8007c8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a346:	697b      	ldr	r3, [r7, #20]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000d74 	.word	0x20000d74
 800a354:	20000d70 	.word	0x20000d70

0800a358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	; 0x38
 800a35c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a35e:	e099      	b.n	800a494 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	da17      	bge.n	800a396 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a366:	1d3b      	adds	r3, r7, #4
 800a368:	3304      	adds	r3, #4
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d109      	bne.n	800a386 <prvProcessReceivedCommands+0x2e>
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	e7fe      	b.n	800a384 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38c:	6850      	ldr	r0, [r2, #4]
 800a38e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a390:	6892      	ldr	r2, [r2, #8]
 800a392:	4611      	mov	r1, r2
 800a394:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	db7a      	blt.n	800a492 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fca5 	bl	8007cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff ff6d 	bl	800a294 <prvSampleTimeNow>
 800a3ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b09      	cmp	r3, #9
 800a3c0:	d868      	bhi.n	800a494 <prvProcessReceivedCommands+0x13c>
 800a3c2:	a201      	add	r2, pc, #4	; (adr r2, 800a3c8 <prvProcessReceivedCommands+0x70>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f1 	.word	0x0800a3f1
 800a3d0:	0800a3f1 	.word	0x0800a3f1
 800a3d4:	0800a495 	.word	0x0800a495
 800a3d8:	0800a44b 	.word	0x0800a44b
 800a3dc:	0800a481 	.word	0x0800a481
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a3f1 	.word	0x0800a3f1
 800a3e8:	0800a495 	.word	0x0800a495
 800a3ec:	0800a44b 	.word	0x0800a44b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	18d1      	adds	r1, r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fe:	f7ff ff69 	bl	800a2d4 <prvInsertTimerInActiveList>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d045      	beq.n	800a494 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a40e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d13d      	bne.n	800a494 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	441a      	add	r2, r3
 800a420:	2300      	movs	r3, #0
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	2100      	movs	r1, #0
 800a428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42a:	f7ff fe23 	bl	800a074 <xTimerGenericCommand>
 800a42e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d12e      	bne.n	800a494 <prvProcessReceivedCommands+0x13c>
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	61bb      	str	r3, [r7, #24]
 800a448:	e7fe      	b.n	800a448 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <prvProcessReceivedCommands+0x114>
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	e7fe      	b.n	800a46a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	699a      	ldr	r2, [r3, #24]
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	18d1      	adds	r1, r2, r3
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47a:	f7ff ff2b 	bl	800a2d4 <prvInsertTimerInActiveList>
					break;
 800a47e:	e009      	b.n	800a494 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d104      	bne.n	800a494 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48c:	f000 fbc2 	bl	800ac14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a490:	e000      	b.n	800a494 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a492:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a494:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <prvProcessReceivedCommands+0x15c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	1d39      	adds	r1, r7, #4
 800a49a:	2200      	movs	r2, #0
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe f865 	bl	800856c <xQueueReceive>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f47f af5b 	bne.w	800a360 <prvProcessReceivedCommands+0x8>
	}
}
 800a4aa:	bf00      	nop
 800a4ac:	3730      	adds	r7, #48	; 0x30
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000d78 	.word	0x20000d78

0800a4b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b088      	sub	sp, #32
 800a4bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4be:	e044      	b.n	800a54a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4c0:	4b2b      	ldr	r3, [pc, #172]	; (800a570 <prvSwitchTimerLists+0xb8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4ca:	4b29      	ldr	r3, [pc, #164]	; (800a570 <prvSwitchTimerLists+0xb8>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fd fc0f 	bl	8007cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d12d      	bne.n	800a54a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d90e      	bls.n	800a51e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a50c:	4b18      	ldr	r3, [pc, #96]	; (800a570 <prvSwitchTimerLists+0xb8>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3304      	adds	r3, #4
 800a514:	4619      	mov	r1, r3
 800a516:	4610      	mov	r0, r2
 800a518:	f7fd fbb7 	bl	8007c8a <vListInsert>
 800a51c:	e015      	b.n	800a54a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a51e:	2300      	movs	r3, #0
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	2300      	movs	r3, #0
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fda3 	bl	800a074 <xTimerGenericCommand>
 800a52e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <prvSwitchTimerLists+0x92>
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	e7fe      	b.n	800a548 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a54a:	4b09      	ldr	r3, [pc, #36]	; (800a570 <prvSwitchTimerLists+0xb8>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1b5      	bne.n	800a4c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <prvSwitchTimerLists+0xb8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a55a:	4b06      	ldr	r3, [pc, #24]	; (800a574 <prvSwitchTimerLists+0xbc>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a04      	ldr	r2, [pc, #16]	; (800a570 <prvSwitchTimerLists+0xb8>)
 800a560:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a562:	4a04      	ldr	r2, [pc, #16]	; (800a574 <prvSwitchTimerLists+0xbc>)
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	6013      	str	r3, [r2, #0]
}
 800a568:	bf00      	nop
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20000d70 	.word	0x20000d70
 800a574:	20000d74 	.word	0x20000d74

0800a578 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a57e:	f000 f965 	bl	800a84c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a582:	4b15      	ldr	r3, [pc, #84]	; (800a5d8 <prvCheckForValidListAndQueue+0x60>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d120      	bne.n	800a5cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a58a:	4814      	ldr	r0, [pc, #80]	; (800a5dc <prvCheckForValidListAndQueue+0x64>)
 800a58c:	f7fd fb2c 	bl	8007be8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a590:	4813      	ldr	r0, [pc, #76]	; (800a5e0 <prvCheckForValidListAndQueue+0x68>)
 800a592:	f7fd fb29 	bl	8007be8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a596:	4b13      	ldr	r3, [pc, #76]	; (800a5e4 <prvCheckForValidListAndQueue+0x6c>)
 800a598:	4a10      	ldr	r2, [pc, #64]	; (800a5dc <prvCheckForValidListAndQueue+0x64>)
 800a59a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a59c:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <prvCheckForValidListAndQueue+0x70>)
 800a59e:	4a10      	ldr	r2, [pc, #64]	; (800a5e0 <prvCheckForValidListAndQueue+0x68>)
 800a5a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <prvCheckForValidListAndQueue+0x74>)
 800a5a8:	4a11      	ldr	r2, [pc, #68]	; (800a5f0 <prvCheckForValidListAndQueue+0x78>)
 800a5aa:	2110      	movs	r1, #16
 800a5ac:	200a      	movs	r0, #10
 800a5ae:	f7fd fc37 	bl	8007e20 <xQueueGenericCreateStatic>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b08      	ldr	r3, [pc, #32]	; (800a5d8 <prvCheckForValidListAndQueue+0x60>)
 800a5b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <prvCheckForValidListAndQueue+0x60>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <prvCheckForValidListAndQueue+0x60>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	490b      	ldr	r1, [pc, #44]	; (800a5f4 <prvCheckForValidListAndQueue+0x7c>)
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fc10 	bl	8008dec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5cc:	f000 f96c 	bl	800a8a8 <vPortExitCritical>
}
 800a5d0:	bf00      	nop
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20000d78 	.word	0x20000d78
 800a5dc:	20000d48 	.word	0x20000d48
 800a5e0:	20000d5c 	.word	0x20000d5c
 800a5e4:	20000d70 	.word	0x20000d70
 800a5e8:	20000d74 	.word	0x20000d74
 800a5ec:	20000e24 	.word	0x20000e24
 800a5f0:	20000d84 	.word	0x20000d84
 800a5f4:	0801e794 	.word	0x0801e794

0800a5f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3b04      	subs	r3, #4
 800a608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3b04      	subs	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f023 0201 	bic.w	r2, r3, #1
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b04      	subs	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a628:	4a0c      	ldr	r2, [pc, #48]	; (800a65c <pxPortInitialiseStack+0x64>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3b14      	subs	r3, #20
 800a632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3b04      	subs	r3, #4
 800a63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f06f 0202 	mvn.w	r2, #2
 800a646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3b20      	subs	r3, #32
 800a64c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a64e:	68fb      	ldr	r3, [r7, #12]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	0800a661 	.word	0x0800a661

0800a660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a66a:	4b11      	ldr	r3, [pc, #68]	; (800a6b0 <prvTaskExitError+0x50>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a672:	d009      	beq.n	800a688 <prvTaskExitError+0x28>
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	e7fe      	b.n	800a686 <prvTaskExitError+0x26>
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a69a:	bf00      	nop
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d0fc      	beq.n	800a69c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	20000088 	.word	0x20000088
	...

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f3af 8000 	nop.w

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6e8:	4808      	ldr	r0, [pc, #32]	; (800a70c <prvPortStartFirstTask+0x24>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	f04f 0000 	mov.w	r0, #0
 800a6f6:	f380 8814 	msr	CONTROL, r0
 800a6fa:	b662      	cpsie	i
 800a6fc:	b661      	cpsie	f
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	df00      	svc	0
 800a708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a70a:	bf00      	nop
 800a70c:	e000ed08 	.word	0xe000ed08

0800a710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a716:	4b44      	ldr	r3, [pc, #272]	; (800a828 <xPortStartScheduler+0x118>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a44      	ldr	r2, [pc, #272]	; (800a82c <xPortStartScheduler+0x11c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d109      	bne.n	800a734 <xPortStartScheduler+0x24>
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	e7fe      	b.n	800a732 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a734:	4b3c      	ldr	r3, [pc, #240]	; (800a828 <xPortStartScheduler+0x118>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a3d      	ldr	r2, [pc, #244]	; (800a830 <xPortStartScheduler+0x120>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d109      	bne.n	800a752 <xPortStartScheduler+0x42>
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	e7fe      	b.n	800a750 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a752:	4b38      	ldr	r3, [pc, #224]	; (800a834 <xPortStartScheduler+0x124>)
 800a754:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	22ff      	movs	r2, #255	; 0xff
 800a762:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a774:	b2da      	uxtb	r2, r3
 800a776:	4b30      	ldr	r3, [pc, #192]	; (800a838 <xPortStartScheduler+0x128>)
 800a778:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a77a:	4b30      	ldr	r3, [pc, #192]	; (800a83c <xPortStartScheduler+0x12c>)
 800a77c:	2207      	movs	r2, #7
 800a77e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a780:	e009      	b.n	800a796 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a782:	4b2e      	ldr	r3, [pc, #184]	; (800a83c <xPortStartScheduler+0x12c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3b01      	subs	r3, #1
 800a788:	4a2c      	ldr	r2, [pc, #176]	; (800a83c <xPortStartScheduler+0x12c>)
 800a78a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	b2db      	uxtb	r3, r3
 800a794:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79e:	2b80      	cmp	r3, #128	; 0x80
 800a7a0:	d0ef      	beq.n	800a782 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7a2:	4b26      	ldr	r3, [pc, #152]	; (800a83c <xPortStartScheduler+0x12c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f1c3 0307 	rsb	r3, r3, #7
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	d009      	beq.n	800a7c2 <xPortStartScheduler+0xb2>
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	60bb      	str	r3, [r7, #8]
 800a7c0:	e7fe      	b.n	800a7c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7c2:	4b1e      	ldr	r3, [pc, #120]	; (800a83c <xPortStartScheduler+0x12c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	4a1c      	ldr	r2, [pc, #112]	; (800a83c <xPortStartScheduler+0x12c>)
 800a7ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7cc:	4b1b      	ldr	r3, [pc, #108]	; (800a83c <xPortStartScheduler+0x12c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7d4:	4a19      	ldr	r2, [pc, #100]	; (800a83c <xPortStartScheduler+0x12c>)
 800a7d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7e0:	4b17      	ldr	r3, [pc, #92]	; (800a840 <xPortStartScheduler+0x130>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a16      	ldr	r2, [pc, #88]	; (800a840 <xPortStartScheduler+0x130>)
 800a7e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7ec:	4b14      	ldr	r3, [pc, #80]	; (800a840 <xPortStartScheduler+0x130>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a13      	ldr	r2, [pc, #76]	; (800a840 <xPortStartScheduler+0x130>)
 800a7f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7f8:	f000 f8de 	bl	800a9b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7fc:	4b11      	ldr	r3, [pc, #68]	; (800a844 <xPortStartScheduler+0x134>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a802:	f000 f8fd 	bl	800aa00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a806:	4b10      	ldr	r3, [pc, #64]	; (800a848 <xPortStartScheduler+0x138>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a0f      	ldr	r2, [pc, #60]	; (800a848 <xPortStartScheduler+0x138>)
 800a80c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a810:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a812:	f7ff ff69 	bl	800a6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a816:	f7fe ff23 	bl	8009660 <vTaskSwitchContext>
	prvTaskExitError();
 800a81a:	f7ff ff21 	bl	800a660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed00 	.word	0xe000ed00
 800a82c:	410fc271 	.word	0x410fc271
 800a830:	410fc270 	.word	0x410fc270
 800a834:	e000e400 	.word	0xe000e400
 800a838:	20000e74 	.word	0x20000e74
 800a83c:	20000e78 	.word	0x20000e78
 800a840:	e000ed20 	.word	0xe000ed20
 800a844:	20000088 	.word	0x20000088
 800a848:	e000ef34 	.word	0xe000ef34

0800a84c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a864:	4b0e      	ldr	r3, [pc, #56]	; (800a8a0 <vPortEnterCritical+0x54>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3301      	adds	r3, #1
 800a86a:	4a0d      	ldr	r2, [pc, #52]	; (800a8a0 <vPortEnterCritical+0x54>)
 800a86c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a86e:	4b0c      	ldr	r3, [pc, #48]	; (800a8a0 <vPortEnterCritical+0x54>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d10e      	bne.n	800a894 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a876:	4b0b      	ldr	r3, [pc, #44]	; (800a8a4 <vPortEnterCritical+0x58>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d009      	beq.n	800a894 <vPortEnterCritical+0x48>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	603b      	str	r3, [r7, #0]
 800a892:	e7fe      	b.n	800a892 <vPortEnterCritical+0x46>
	}
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	20000088 	.word	0x20000088
 800a8a4:	e000ed04 	.word	0xe000ed04

0800a8a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8ae:	4b11      	ldr	r3, [pc, #68]	; (800a8f4 <vPortExitCritical+0x4c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d109      	bne.n	800a8ca <vPortExitCritical+0x22>
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	607b      	str	r3, [r7, #4]
 800a8c8:	e7fe      	b.n	800a8c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <vPortExitCritical+0x4c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	4a08      	ldr	r2, [pc, #32]	; (800a8f4 <vPortExitCritical+0x4c>)
 800a8d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8d4:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <vPortExitCritical+0x4c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <vPortExitCritical+0x3e>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	20000088 	.word	0x20000088
	...

0800a900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a900:	f3ef 8009 	mrs	r0, PSP
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4b15      	ldr	r3, [pc, #84]	; (800a960 <pxCurrentTCBConst>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	f01e 0f10 	tst.w	lr, #16
 800a910:	bf08      	it	eq
 800a912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	6010      	str	r0, [r2, #0]
 800a91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a920:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a924:	f380 8811 	msr	BASEPRI, r0
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f7fe fe96 	bl	8009660 <vTaskSwitchContext>
 800a934:	f04f 0000 	mov.w	r0, #0
 800a938:	f380 8811 	msr	BASEPRI, r0
 800a93c:	bc09      	pop	{r0, r3}
 800a93e:	6819      	ldr	r1, [r3, #0]
 800a940:	6808      	ldr	r0, [r1, #0]
 800a942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a946:	f01e 0f10 	tst.w	lr, #16
 800a94a:	bf08      	it	eq
 800a94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a950:	f380 8809 	msr	PSP, r0
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	f3af 8000 	nop.w

0800a960 <pxCurrentTCBConst>:
 800a960:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop

0800a968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 800a980:	f001 fca8 	bl	800c2d4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a984:	f7fe fdaa 	bl	80094dc <xTaskIncrementTick>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d006      	beq.n	800a99c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800a98e:	f001 fcff 	bl	800c390 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a992:	4b08      	ldr	r3, [pc, #32]	; (800a9b4 <SysTick_Handler+0x4c>)
 800a994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	e001      	b.n	800a9a0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800a99c:	f001 fcdc 	bl	800c358 <SEGGER_SYSVIEW_RecordExitISR>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	e000ed04 	.word	0xe000ed04

0800a9b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <vPortSetupTimerInterrupt+0x34>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9c2:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <vPortSetupTimerInterrupt+0x38>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	; (800a9f4 <vPortSetupTimerInterrupt+0x3c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a0a      	ldr	r2, [pc, #40]	; (800a9f8 <vPortSetupTimerInterrupt+0x40>)
 800a9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d2:	099b      	lsrs	r3, r3, #6
 800a9d4:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <vPortSetupTimerInterrupt+0x44>)
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9da:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <vPortSetupTimerInterrupt+0x34>)
 800a9dc:	2207      	movs	r2, #7
 800a9de:	601a      	str	r2, [r3, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	e000e010 	.word	0xe000e010
 800a9f0:	e000e018 	.word	0xe000e018
 800a9f4:	20000004 	.word	0x20000004
 800a9f8:	10624dd3 	.word	0x10624dd3
 800a9fc:	e000e014 	.word	0xe000e014

0800aa00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa10 <vPortEnableVFP+0x10>
 800aa04:	6801      	ldr	r1, [r0, #0]
 800aa06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa0a:	6001      	str	r1, [r0, #0]
 800aa0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa0e:	bf00      	nop
 800aa10:	e000ed88 	.word	0xe000ed88

0800aa14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa1a:	f3ef 8305 	mrs	r3, IPSR
 800aa1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b0f      	cmp	r3, #15
 800aa24:	d913      	bls.n	800aa4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa26:	4a16      	ldr	r2, [pc, #88]	; (800aa80 <vPortValidateInterruptPriority+0x6c>)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa30:	4b14      	ldr	r3, [pc, #80]	; (800aa84 <vPortValidateInterruptPriority+0x70>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	7afa      	ldrb	r2, [r7, #11]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d209      	bcs.n	800aa4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	607b      	str	r3, [r7, #4]
 800aa4c:	e7fe      	b.n	800aa4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa4e:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <vPortValidateInterruptPriority+0x74>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa56:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <vPortValidateInterruptPriority+0x78>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d909      	bls.n	800aa72 <vPortValidateInterruptPriority+0x5e>
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	e7fe      	b.n	800aa70 <vPortValidateInterruptPriority+0x5c>
	}
 800aa72:	bf00      	nop
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	e000e3f0 	.word	0xe000e3f0
 800aa84:	20000e74 	.word	0x20000e74
 800aa88:	e000ed0c 	.word	0xe000ed0c
 800aa8c:	20000e78 	.word	0x20000e78

0800aa90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08a      	sub	sp, #40	; 0x28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa9c:	f7fe fc4e 	bl	800933c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aaa0:	4b57      	ldr	r3, [pc, #348]	; (800ac00 <pvPortMalloc+0x170>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aaa8:	f000 f90c 	bl	800acc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aaac:	4b55      	ldr	r3, [pc, #340]	; (800ac04 <pvPortMalloc+0x174>)
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4013      	ands	r3, r2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 808c 	bne.w	800abd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01c      	beq.n	800aafa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aac0:	2208      	movs	r2, #8
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4413      	add	r3, r2
 800aac6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f003 0307 	and.w	r3, r3, #7
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d013      	beq.n	800aafa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f023 0307 	bic.w	r3, r3, #7
 800aad8:	3308      	adds	r3, #8
 800aada:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <pvPortMalloc+0x6a>
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e7fe      	b.n	800aaf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d068      	beq.n	800abd2 <pvPortMalloc+0x142>
 800ab00:	4b41      	ldr	r3, [pc, #260]	; (800ac08 <pvPortMalloc+0x178>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d863      	bhi.n	800abd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab0a:	4b40      	ldr	r3, [pc, #256]	; (800ac0c <pvPortMalloc+0x17c>)
 800ab0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab0e:	4b3f      	ldr	r3, [pc, #252]	; (800ac0c <pvPortMalloc+0x17c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab14:	e004      	b.n	800ab20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d903      	bls.n	800ab32 <pvPortMalloc+0xa2>
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f1      	bne.n	800ab16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab32:	4b33      	ldr	r3, [pc, #204]	; (800ac00 <pvPortMalloc+0x170>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d04a      	beq.n	800abd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2208      	movs	r2, #8
 800ab42:	4413      	add	r3, r2
 800ab44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	1ad2      	subs	r2, r2, r3
 800ab56:	2308      	movs	r3, #8
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d91e      	bls.n	800ab9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4413      	add	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	f003 0307 	and.w	r3, r3, #7
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d009      	beq.n	800ab84 <pvPortMalloc+0xf4>
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	613b      	str	r3, [r7, #16]
 800ab82:	e7fe      	b.n	800ab82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	1ad2      	subs	r2, r2, r3
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab96:	69b8      	ldr	r0, [r7, #24]
 800ab98:	f000 f8f6 	bl	800ad88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab9c:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <pvPortMalloc+0x178>)
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	4a18      	ldr	r2, [pc, #96]	; (800ac08 <pvPortMalloc+0x178>)
 800aba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abaa:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <pvPortMalloc+0x178>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	4b18      	ldr	r3, [pc, #96]	; (800ac10 <pvPortMalloc+0x180>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d203      	bcs.n	800abbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abb6:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <pvPortMalloc+0x178>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a15      	ldr	r2, [pc, #84]	; (800ac10 <pvPortMalloc+0x180>)
 800abbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <pvPortMalloc+0x174>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	431a      	orrs	r2, r3
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abd2:	f7fe fbc1 	bl	8009358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d009      	beq.n	800abf4 <pvPortMalloc+0x164>
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	e7fe      	b.n	800abf2 <pvPortMalloc+0x162>
	return pvReturn;
 800abf4:	69fb      	ldr	r3, [r7, #28]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3728      	adds	r7, #40	; 0x28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20004e84 	.word	0x20004e84
 800ac04:	20004e90 	.word	0x20004e90
 800ac08:	20004e88 	.word	0x20004e88
 800ac0c:	20004e7c 	.word	0x20004e7c
 800ac10:	20004e8c 	.word	0x20004e8c

0800ac14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d046      	beq.n	800acb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac26:	2308      	movs	r3, #8
 800ac28:	425b      	negs	r3, r3
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	4b20      	ldr	r3, [pc, #128]	; (800acbc <vPortFree+0xa8>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d109      	bne.n	800ac56 <vPortFree+0x42>
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e7fe      	b.n	800ac54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d009      	beq.n	800ac72 <vPortFree+0x5e>
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	60bb      	str	r3, [r7, #8]
 800ac70:	e7fe      	b.n	800ac70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	4b11      	ldr	r3, [pc, #68]	; (800acbc <vPortFree+0xa8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d019      	beq.n	800acb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d115      	bne.n	800acb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <vPortFree+0xa8>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	43db      	mvns	r3, r3
 800ac92:	401a      	ands	r2, r3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac98:	f7fe fb50 	bl	800933c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <vPortFree+0xac>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4413      	add	r3, r2
 800aca6:	4a06      	ldr	r2, [pc, #24]	; (800acc0 <vPortFree+0xac>)
 800aca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acaa:	6938      	ldr	r0, [r7, #16]
 800acac:	f000 f86c 	bl	800ad88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800acb0:	f7fe fb52 	bl	8009358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20004e90 	.word	0x20004e90
 800acc0:	20004e88 	.word	0x20004e88

0800acc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acd0:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <prvHeapInit+0xac>)
 800acd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3307      	adds	r3, #7
 800ace2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	4a1f      	ldr	r2, [pc, #124]	; (800ad70 <prvHeapInit+0xac>)
 800acf4:	4413      	add	r3, r2
 800acf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acfc:	4a1d      	ldr	r2, [pc, #116]	; (800ad74 <prvHeapInit+0xb0>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad02:	4b1c      	ldr	r3, [pc, #112]	; (800ad74 <prvHeapInit+0xb0>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad10:	2208      	movs	r2, #8
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0307 	bic.w	r3, r3, #7
 800ad1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a15      	ldr	r2, [pc, #84]	; (800ad78 <prvHeapInit+0xb4>)
 800ad24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <prvHeapInit+0xb4>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad2e:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <prvHeapInit+0xb4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	1ad2      	subs	r2, r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad44:	4b0c      	ldr	r3, [pc, #48]	; (800ad78 <prvHeapInit+0xb4>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4a0a      	ldr	r2, [pc, #40]	; (800ad7c <prvHeapInit+0xb8>)
 800ad52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4a09      	ldr	r2, [pc, #36]	; (800ad80 <prvHeapInit+0xbc>)
 800ad5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad5c:	4b09      	ldr	r3, [pc, #36]	; (800ad84 <prvHeapInit+0xc0>)
 800ad5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad62:	601a      	str	r2, [r3, #0]
}
 800ad64:	bf00      	nop
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20000e7c 	.word	0x20000e7c
 800ad74:	20004e7c 	.word	0x20004e7c
 800ad78:	20004e84 	.word	0x20004e84
 800ad7c:	20004e8c 	.word	0x20004e8c
 800ad80:	20004e88 	.word	0x20004e88
 800ad84:	20004e90 	.word	0x20004e90

0800ad88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad90:	4b28      	ldr	r3, [pc, #160]	; (800ae34 <prvInsertBlockIntoFreeList+0xac>)
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	e002      	b.n	800ad9c <prvInsertBlockIntoFreeList+0x14>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d8f7      	bhi.n	800ad96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	4413      	add	r3, r2
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d108      	bne.n	800adca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	441a      	add	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	441a      	add	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d118      	bne.n	800ae10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <prvInsertBlockIntoFreeList+0xb0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d00d      	beq.n	800ae06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	441a      	add	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e008      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae06:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <prvInsertBlockIntoFreeList+0xb0>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	e003      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d002      	beq.n	800ae26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20004e7c 	.word	0x20004e7c
 800ae38:	20004e84 	.word	0x20004e84

0800ae3c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800ae40:	4803      	ldr	r0, [pc, #12]	; (800ae50 <_cbSendSystemDesc+0x14>)
 800ae42:	f001 f9f3 	bl	800c22c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800ae46:	4803      	ldr	r0, [pc, #12]	; (800ae54 <_cbSendSystemDesc+0x18>)
 800ae48:	f001 f9f0 	bl	800c22c <SEGGER_SYSVIEW_SendSysDesc>
}
 800ae4c:	bf00      	nop
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	0801e79c 	.word	0x0801e79c
 800ae54:	0801e7e0 	.word	0x0801e7e0

0800ae58 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800ae5c:	4b06      	ldr	r3, [pc, #24]	; (800ae78 <SEGGER_SYSVIEW_Conf+0x20>)
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <SEGGER_SYSVIEW_Conf+0x20>)
 800ae62:	6819      	ldr	r1, [r3, #0]
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <SEGGER_SYSVIEW_Conf+0x24>)
 800ae66:	4a06      	ldr	r2, [pc, #24]	; (800ae80 <SEGGER_SYSVIEW_Conf+0x28>)
 800ae68:	f000 fd60 	bl	800b92c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800ae6c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800ae70:	f000 fd9a 	bl	800b9a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800ae74:	bf00      	nop
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20000004 	.word	0x20000004
 800ae7c:	0800ae3d 	.word	0x0800ae3d
 800ae80:	0801ee64 	.word	0x0801ee64

0800ae84 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800ae84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	e048      	b.n	800af22 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800ae90:	4928      	ldr	r1, [pc, #160]	; (800af34 <_cbSendTaskList+0xb0>)
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	440b      	add	r3, r1
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fe27 	bl	8009af4 <uxTaskGetStackHighWaterMark>
 800aea6:	4923      	ldr	r1, [pc, #140]	; (800af34 <_cbSendTaskList+0xb0>)
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	3310      	adds	r3, #16
 800aeb6:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800aeb8:	491e      	ldr	r1, [pc, #120]	; (800af34 <_cbSendTaskList+0xb0>)
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	440b      	add	r3, r1
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	491a      	ldr	r1, [pc, #104]	; (800af34 <_cbSendTaskList+0xb0>)
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	3304      	adds	r3, #4
 800aed8:	681c      	ldr	r4, [r3, #0]
 800aeda:	4916      	ldr	r1, [pc, #88]	; (800af34 <_cbSendTaskList+0xb0>)
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	440b      	add	r3, r1
 800aee8:	3308      	adds	r3, #8
 800aeea:	681d      	ldr	r5, [r3, #0]
 800aeec:	4911      	ldr	r1, [pc, #68]	; (800af34 <_cbSendTaskList+0xb0>)
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	440b      	add	r3, r1
 800aefa:	330c      	adds	r3, #12
 800aefc:	681e      	ldr	r6, [r3, #0]
 800aefe:	490d      	ldr	r1, [pc, #52]	; (800af34 <_cbSendTaskList+0xb0>)
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	440b      	add	r3, r1
 800af0c:	3310      	adds	r3, #16
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	4633      	mov	r3, r6
 800af14:	462a      	mov	r2, r5
 800af16:	4621      	mov	r1, r4
 800af18:	f000 f8b4 	bl	800b084 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3301      	adds	r3, #1
 800af20:	607b      	str	r3, [r7, #4]
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <_cbSendTaskList+0xb4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d3b1      	bcc.n	800ae90 <_cbSendTaskList+0xc>
  }
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af34:	20004e94 	.word	0x20004e94
 800af38:	20004f34 	.word	0x20004f34

0800af3c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800af3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800af42:	f7fe fab9 	bl	80094b8 <xTaskGetTickCountFromISR>
 800af46:	4603      	mov	r3, r0
 800af48:	f04f 0400 	mov.w	r4, #0
 800af4c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800af50:	e9d7 5600 	ldrd	r5, r6, [r7]
 800af54:	462b      	mov	r3, r5
 800af56:	4634      	mov	r4, r6
 800af58:	f04f 0100 	mov.w	r1, #0
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	0162      	lsls	r2, r4, #5
 800af62:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800af66:	0159      	lsls	r1, r3, #5
 800af68:	460b      	mov	r3, r1
 800af6a:	4614      	mov	r4, r2
 800af6c:	1b5b      	subs	r3, r3, r5
 800af6e:	eb64 0406 	sbc.w	r4, r4, r6
 800af72:	f04f 0100 	mov.w	r1, #0
 800af76:	f04f 0200 	mov.w	r2, #0
 800af7a:	00a2      	lsls	r2, r4, #2
 800af7c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800af80:	0099      	lsls	r1, r3, #2
 800af82:	460b      	mov	r3, r1
 800af84:	4614      	mov	r4, r2
 800af86:	195b      	adds	r3, r3, r5
 800af88:	eb44 0406 	adc.w	r4, r4, r6
 800af8c:	f04f 0100 	mov.w	r1, #0
 800af90:	f04f 0200 	mov.w	r2, #0
 800af94:	00e2      	lsls	r2, r4, #3
 800af96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800af9a:	00d9      	lsls	r1, r3, #3
 800af9c:	460b      	mov	r3, r1
 800af9e:	4614      	mov	r4, r2
 800afa0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800afa4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	4621      	mov	r1, r4
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800afb4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af02      	add	r7, sp, #8
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800afc2:	2205      	movs	r2, #5
 800afc4:	492b      	ldr	r1, [pc, #172]	; (800b074 <SYSVIEW_AddTask+0xc0>)
 800afc6:	68b8      	ldr	r0, [r7, #8]
 800afc8:	f012 fc30 	bl	801d82c <memcmp>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d04b      	beq.n	800b06a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800afd2:	4b29      	ldr	r3, [pc, #164]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b07      	cmp	r3, #7
 800afd8:	d903      	bls.n	800afe2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800afda:	4828      	ldr	r0, [pc, #160]	; (800b07c <SYSVIEW_AddTask+0xc8>)
 800afdc:	f001 fc2a 	bl	800c834 <SEGGER_SYSVIEW_Warn>
    return;
 800afe0:	e044      	b.n	800b06c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800afe2:	4b25      	ldr	r3, [pc, #148]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	4926      	ldr	r1, [pc, #152]	; (800b080 <SYSVIEW_AddTask+0xcc>)
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800aff6:	4b20      	ldr	r3, [pc, #128]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4921      	ldr	r1, [pc, #132]	; (800b080 <SYSVIEW_AddTask+0xcc>)
 800affc:	4613      	mov	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	440b      	add	r3, r1
 800b006:	3304      	adds	r3, #4
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b00c:	4b1a      	ldr	r3, [pc, #104]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	491b      	ldr	r1, [pc, #108]	; (800b080 <SYSVIEW_AddTask+0xcc>)
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	3308      	adds	r3, #8
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b022:	4b15      	ldr	r3, [pc, #84]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4916      	ldr	r1, [pc, #88]	; (800b080 <SYSVIEW_AddTask+0xcc>)
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	330c      	adds	r3, #12
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b038:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	4910      	ldr	r1, [pc, #64]	; (800b080 <SYSVIEW_AddTask+0xcc>)
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	440b      	add	r3, r1
 800b048:	3310      	adds	r3, #16
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b04e:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3301      	adds	r3, #1
 800b054:	4a08      	ldr	r2, [pc, #32]	; (800b078 <SYSVIEW_AddTask+0xc4>)
 800b056:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 f80e 	bl	800b084 <SYSVIEW_SendTaskInfo>
 800b068:	e000      	b.n	800b06c <SYSVIEW_AddTask+0xb8>
    return;
 800b06a:	bf00      	nop

}
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	0801e7f0 	.word	0x0801e7f0
 800b078:	20004f34 	.word	0x20004f34
 800b07c:	0801e7f8 	.word	0x0801e7f8
 800b080:	20004e94 	.word	0x20004e94

0800b084 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b084:	b580      	push	{r7, lr}
 800b086:	b08a      	sub	sp, #40	; 0x28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b092:	f107 0314 	add.w	r3, r7, #20
 800b096:	2214      	movs	r2, #20
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f012 fbe0 	bl	801d860 <memset>
  TaskInfo.TaskID     = TaskID;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b0b4:	f107 0314 	add.w	r3, r7, #20
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 ffbd 	bl	800c038 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b0be:	bf00      	nop
 800b0c0:	3728      	adds	r7, #40	; 0x28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800b0ce:	4b21      	ldr	r3, [pc, #132]	; (800b154 <_DoInit+0x8c>)
 800b0d0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2203      	movs	r2, #3
 800b0dc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a1d      	ldr	r2, [pc, #116]	; (800b158 <_DoInit+0x90>)
 800b0e2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a1d      	ldr	r2, [pc, #116]	; (800b15c <_DoInit+0x94>)
 800b0e8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0f0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a14      	ldr	r2, [pc, #80]	; (800b158 <_DoInit+0x90>)
 800b108:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a14      	ldr	r2, [pc, #80]	; (800b160 <_DoInit+0x98>)
 800b10e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2210      	movs	r2, #16
 800b114:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3307      	adds	r3, #7
 800b12c:	4a0d      	ldr	r2, [pc, #52]	; (800b164 <_DoInit+0x9c>)
 800b12e:	6810      	ldr	r0, [r2, #0]
 800b130:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a0c      	ldr	r2, [pc, #48]	; (800b168 <_DoInit+0xa0>)
 800b136:	6810      	ldr	r0, [r2, #0]
 800b138:	6018      	str	r0, [r3, #0]
 800b13a:	8891      	ldrh	r1, [r2, #4]
 800b13c:	7992      	ldrb	r2, [r2, #6]
 800b13e:	8099      	strh	r1, [r3, #4]
 800b140:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	719a      	strb	r2, [r3, #6]
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	20008a24 	.word	0x20008a24
 800b158:	0801e848 	.word	0x0801e848
 800b15c:	20004f38 	.word	0x20004f38
 800b160:	20005338 	.word	0x20005338
 800b164:	0801e854 	.word	0x0801e854
 800b168:	0801e858 	.word	0x0801e858

0800b16c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08a      	sub	sp, #40	; 0x28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800b178:	4b3c      	ldr	r3, [pc, #240]	; (800b26c <SEGGER_RTT_ReadNoLock+0x100>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <SEGGER_RTT_ReadNoLock+0x18>
 800b180:	f7ff ffa2 	bl	800b0c8 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4613      	mov	r3, r2
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4413      	add	r3, r2
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	3360      	adds	r3, #96	; 0x60
 800b190:	4a36      	ldr	r2, [pc, #216]	; (800b26c <SEGGER_RTT_ReadNoLock+0x100>)
 800b192:	4413      	add	r3, r2
 800b194:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b1aa:	6a3a      	ldr	r2, [r7, #32]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d92a      	bls.n	800b208 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	689a      	ldr	r2, [r3, #8]
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	bf28      	it	cs
 800b1c4:	4613      	movcs	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	69f8      	ldr	r0, [r7, #28]
 800b1d6:	f012 fb38 	bl	801d84a <memcpy>
    NumBytesRead += NumBytesRem;
 800b1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b1f2:	6a3a      	ldr	r2, [r7, #32]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	6a3a      	ldr	r2, [r7, #32]
 800b200:	429a      	cmp	r2, r3
 800b202:	d101      	bne.n	800b208 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800b204:	2300      	movs	r3, #0
 800b206:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4293      	cmp	r3, r2
 800b216:	bf28      	it	cs
 800b218:	4613      	movcs	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d018      	beq.n	800b254 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	4413      	add	r3, r2
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	4619      	mov	r1, r3
 800b22e:	69f8      	ldr	r0, [r7, #28]
 800b230:	f012 fb0b 	bl	801d84a <memcpy>
    NumBytesRead += NumBytesRem;
 800b234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	4413      	add	r3, r2
 800b23a:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800b23c:	69fa      	ldr	r2, [r7, #28]
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	4413      	add	r3, r2
 800b242:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b24c:	6a3a      	ldr	r2, [r7, #32]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	4413      	add	r3, r2
 800b252:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	6a3a      	ldr	r2, [r7, #32]
 800b25e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b262:	4618      	mov	r0, r3
 800b264:	3728      	adds	r7, #40	; 0x28
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20008a24 	.word	0x20008a24

0800b270 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	; 0x28
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	4613      	mov	r3, r2
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	4413      	add	r3, r2
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	4a3f      	ldr	r2, [pc, #252]	; (800b38c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800b28e:	4413      	add	r3, r2
 800b290:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800b29e:	69fa      	ldr	r2, [r7, #28]
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d854      	bhi.n	800b350 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d30f      	bcc.n	800b2da <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f012 fabf 	bl	801d84a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	441a      	add	r2, r3
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e054      	b.n	800b384 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d34b      	bcc.n	800b382 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d90e      	bls.n	800b31a <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	4413      	add	r3, r2
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b308:	4618      	mov	r0, r3
 800b30a:	f012 fa9e 	bl	801d84a <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	441a      	add	r2, r3
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	60da      	str	r2, [r3, #12]
 800b318:	e018      	b.n	800b34c <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	4413      	add	r3, r2
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b326:	4618      	mov	r0, r3
 800b328:	f012 fa8f 	bl	801d84a <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	6858      	ldr	r0, [r3, #4]
 800b330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	18d1      	adds	r1, r2, r3
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	461a      	mov	r2, r3
 800b33e:	f012 fa84 	bl	801d84a <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	1ad2      	subs	r2, r2, r3
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e019      	b.n	800b384 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800b350:	69fa      	ldr	r2, [r7, #28]
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	3b01      	subs	r3, #1
 800b358:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d30f      	bcc.n	800b382 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	4413      	add	r3, r2
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b36e:	4618      	mov	r0, r3
 800b370:	f012 fa6b 	bl	801d84a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	441a      	add	r2, r3
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800b37e:	2301      	movs	r3, #1
 800b380:	e000      	b.n	800b384 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3728      	adds	r7, #40	; 0x28
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20008a24 	.word	0x20008a24

0800b390 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800b39e:	4b30      	ldr	r3, [pc, #192]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800b3a6:	f7ff fe8f 	bl	800b0c8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800b3aa:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d24c      	bcs.n	800b450 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800b3b6:	f3ef 8311 	mrs	r3, BASEPRI
 800b3ba:	f04f 0120 	mov.w	r1, #32
 800b3be:	f381 8811 	msr	BASEPRI, r1
 800b3c2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d032      	beq.n	800b430 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800b3ca:	4925      	ldr	r1, [pc, #148]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	4413      	add	r3, r2
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	440b      	add	r3, r1
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b3de:	4920      	ldr	r1, [pc, #128]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	4413      	add	r3, r2
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	440b      	add	r3, r1
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b3f4:	491a      	ldr	r1, [pc, #104]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	4413      	add	r3, r2
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	440b      	add	r3, r1
 800b402:	3320      	adds	r3, #32
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800b408:	4915      	ldr	r1, [pc, #84]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	440b      	add	r3, r1
 800b416:	3328      	adds	r3, #40	; 0x28
 800b418:	2200      	movs	r2, #0
 800b41a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800b41c:	4910      	ldr	r1, [pc, #64]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4613      	mov	r3, r2
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	4413      	add	r3, r2
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	440b      	add	r3, r1
 800b42a:	3324      	adds	r3, #36	; 0x24
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800b430:	490b      	ldr	r1, [pc, #44]	; (800b460 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	4613      	mov	r3, r2
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	4413      	add	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	440b      	add	r3, r1
 800b43e:	332c      	adds	r3, #44	; 0x2c
 800b440:	6a3a      	ldr	r2, [r7, #32]
 800b442:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	617b      	str	r3, [r7, #20]
 800b44e:	e002      	b.n	800b456 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800b450:	f04f 33ff 	mov.w	r3, #4294967295
 800b454:	617b      	str	r3, [r7, #20]
  }
  return r;
 800b456:	697b      	ldr	r3, [r7, #20]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20008a24 	.word	0x20008a24

0800b464 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800b472:	4b30      	ldr	r3, [pc, #192]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800b47a:	f7ff fe25 	bl	800b0c8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800b47e:	4b2d      	ldr	r3, [pc, #180]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	461a      	mov	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	4293      	cmp	r3, r2
 800b488:	d24b      	bcs.n	800b522 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800b48a:	f3ef 8311 	mrs	r3, BASEPRI
 800b48e:	f04f 0120 	mov.w	r1, #32
 800b492:	f381 8811 	msr	BASEPRI, r1
 800b496:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d031      	beq.n	800b502 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800b49e:	4925      	ldr	r1, [pc, #148]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	4413      	add	r3, r2
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3360      	adds	r3, #96	; 0x60
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800b4b2:	4920      	ldr	r1, [pc, #128]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	4413      	add	r3, r2
 800b4bc:	00db      	lsls	r3, r3, #3
 800b4be:	440b      	add	r3, r1
 800b4c0:	3364      	adds	r3, #100	; 0x64
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800b4c6:	491b      	ldr	r1, [pc, #108]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	4413      	add	r3, r2
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	440b      	add	r3, r1
 800b4d4:	3368      	adds	r3, #104	; 0x68
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800b4da:	4916      	ldr	r1, [pc, #88]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	4413      	add	r3, r2
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	440b      	add	r3, r1
 800b4e8:	3370      	adds	r3, #112	; 0x70
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800b4ee:	4911      	ldr	r1, [pc, #68]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	4413      	add	r3, r2
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	440b      	add	r3, r1
 800b4fc:	336c      	adds	r3, #108	; 0x6c
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800b502:	490c      	ldr	r1, [pc, #48]	; (800b534 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4613      	mov	r3, r2
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	4413      	add	r3, r2
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	440b      	add	r3, r1
 800b510:	3374      	adds	r3, #116	; 0x74
 800b512:	6a3a      	ldr	r2, [r7, #32]
 800b514:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	e002      	b.n	800b528 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	617b      	str	r3, [r7, #20]
  }
  return r;
 800b528:	697b      	ldr	r3, [r7, #20]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20008a24 	.word	0x20008a24

0800b538 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b548:	e002      	b.n	800b550 <_EncodeStr+0x18>
    Len++;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3301      	adds	r3, #1
 800b54e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	4413      	add	r3, r2
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f6      	bne.n	800b54a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	d901      	bls.n	800b568 <_EncodeStr+0x30>
    Len = Limit;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2bfe      	cmp	r3, #254	; 0xfe
 800b56c:	d806      	bhi.n	800b57c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	60fa      	str	r2, [r7, #12]
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	e011      	b.n	800b5a0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	60fa      	str	r2, [r7, #12]
 800b582:	22ff      	movs	r2, #255	; 0xff
 800b584:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	60fa      	str	r2, [r7, #12]
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	0a19      	lsrs	r1, r3, #8
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	60fa      	str	r2, [r7, #12]
 800b59c:	b2ca      	uxtb	r2, r1
 800b59e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b5a4:	e00a      	b.n	800b5bc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	1c53      	adds	r3, r2, #1
 800b5aa:	60bb      	str	r3, [r7, #8]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	1c59      	adds	r1, r3, #1
 800b5b0:	60f9      	str	r1, [r7, #12]
 800b5b2:	7812      	ldrb	r2, [r2, #0]
 800b5b4:	701a      	strb	r2, [r3, #0]
    n++;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d3f0      	bcc.n	800b5a6 <_EncodeStr+0x6e>
  }
  return pPayload;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3304      	adds	r3, #4
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b5f0:	1cfb      	adds	r3, r7, #3
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	f7ff fdb8 	bl	800b16c <SEGGER_RTT_ReadNoLock>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	dd44      	ble.n	800b690 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d01a      	beq.n	800b642 <_HandleIncomingPacket+0x58>
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	dc06      	bgt.n	800b61e <_HandleIncomingPacket+0x34>
 800b610:	2b02      	cmp	r3, #2
 800b612:	d010      	beq.n	800b636 <_HandleIncomingPacket+0x4c>
 800b614:	2b02      	cmp	r3, #2
 800b616:	dc11      	bgt.n	800b63c <_HandleIncomingPacket+0x52>
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d009      	beq.n	800b630 <_HandleIncomingPacket+0x46>
 800b61c:	e02d      	b.n	800b67a <_HandleIncomingPacket+0x90>
 800b61e:	2b06      	cmp	r3, #6
 800b620:	d015      	beq.n	800b64e <_HandleIncomingPacket+0x64>
 800b622:	2b06      	cmp	r3, #6
 800b624:	db10      	blt.n	800b648 <_HandleIncomingPacket+0x5e>
 800b626:	2b07      	cmp	r3, #7
 800b628:	d014      	beq.n	800b654 <_HandleIncomingPacket+0x6a>
 800b62a:	2b80      	cmp	r3, #128	; 0x80
 800b62c:	d015      	beq.n	800b65a <_HandleIncomingPacket+0x70>
 800b62e:	e024      	b.n	800b67a <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b630:	f000 fb86 	bl	800bd40 <SEGGER_SYSVIEW_Start>
      break;
 800b634:	e031      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b636:	f000 fc3f 	bl	800beb8 <SEGGER_SYSVIEW_Stop>
      break;
 800b63a:	e02e      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b63c:	f000 fe1a 	bl	800c274 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b640:	e02b      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b642:	f000 fddf 	bl	800c204 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b646:	e028      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b648:	f000 fc5c 	bl	800bf04 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b64c:	e025      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b64e:	f001 f8b3 	bl	800c7b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b652:	e022      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b654:	f001 f892 	bl	800c77c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b658:	e01f      	b.n	800b69a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b65a:	1cfb      	adds	r3, r7, #3
 800b65c:	2201      	movs	r2, #1
 800b65e:	4619      	mov	r1, r3
 800b660:	2001      	movs	r0, #1
 800b662:	f7ff fd83 	bl	800b16c <SEGGER_RTT_ReadNoLock>
 800b666:	4603      	mov	r3, r0
 800b668:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dd11      	ble.n	800b694 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b670:	78fb      	ldrb	r3, [r7, #3]
 800b672:	4618      	mov	r0, r3
 800b674:	f001 f802 	bl	800c67c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b678:	e00c      	b.n	800b694 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	b25b      	sxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	da0a      	bge.n	800b698 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b682:	1cfb      	adds	r3, r7, #3
 800b684:	2201      	movs	r2, #1
 800b686:	4619      	mov	r1, r3
 800b688:	2001      	movs	r0, #1
 800b68a:	f7ff fd6f 	bl	800b16c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b68e:	e003      	b.n	800b698 <_HandleIncomingPacket+0xae>
    }
  }
 800b690:	bf00      	nop
 800b692:	e002      	b.n	800b69a <_HandleIncomingPacket+0xb0>
      break;
 800b694:	bf00      	nop
 800b696:	e000      	b.n	800b69a <_HandleIncomingPacket+0xb0>
      break;
 800b698:	bf00      	nop
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08c      	sub	sp, #48	; 0x30
 800b6a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b6ae:	1d3b      	adds	r3, r7, #4
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6b8:	4b30      	ldr	r3, [pc, #192]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6be:	e00b      	b.n	800b6d8 <_TrySendOverflowPacket+0x34>
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c6:	1c59      	adds	r1, r3, #1
 800b6c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b6ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6ce:	b2d2      	uxtb	r2, r2
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	09db      	lsrs	r3, r3, #7
 800b6d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	2b7f      	cmp	r3, #127	; 0x7f
 800b6dc:	d8f0      	bhi.n	800b6c0 <_TrySendOverflowPacket+0x1c>
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e6:	b2d2      	uxtb	r2, r2
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b6ee:	4b24      	ldr	r3, [pc, #144]	; (800b780 <_TrySendOverflowPacket+0xdc>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b6f4:	4b21      	ldr	r3, [pc, #132]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	69ba      	ldr	r2, [r7, #24]
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	627b      	str	r3, [r7, #36]	; 0x24
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	623b      	str	r3, [r7, #32]
 800b706:	e00b      	b.n	800b720 <_TrySendOverflowPacket+0x7c>
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	1c59      	adds	r1, r3, #1
 800b710:	6279      	str	r1, [r7, #36]	; 0x24
 800b712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b716:	b2d2      	uxtb	r2, r2
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	09db      	lsrs	r3, r3, #7
 800b71e:	623b      	str	r3, [r7, #32]
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	2b7f      	cmp	r3, #127	; 0x7f
 800b724:	d8f0      	bhi.n	800b708 <_TrySendOverflowPacket+0x64>
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	627a      	str	r2, [r7, #36]	; 0x24
 800b72c:	6a3a      	ldr	r2, [r7, #32]
 800b72e:	b2d2      	uxtb	r2, r2
 800b730:	701a      	strb	r2, [r3, #0]
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	1d3b      	adds	r3, r7, #4
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	1d3b      	adds	r3, r7, #4
 800b740:	4619      	mov	r1, r3
 800b742:	2001      	movs	r0, #1
 800b744:	f7ff fd94 	bl	800b270 <SEGGER_RTT_WriteSkipNoLock>
 800b748:	4603      	mov	r3, r0
 800b74a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d009      	beq.n	800b766 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b752:	4a0a      	ldr	r2, [pc, #40]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b758:	4b08      	ldr	r3, [pc, #32]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	4b06      	ldr	r3, [pc, #24]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b762:	701a      	strb	r2, [r3, #0]
 800b764:	e004      	b.n	800b770 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b766:	4b05      	ldr	r3, [pc, #20]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	3301      	adds	r3, #1
 800b76c:	4a03      	ldr	r2, [pc, #12]	; (800b77c <_TrySendOverflowPacket+0xd8>)
 800b76e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b770:	693b      	ldr	r3, [r7, #16]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3730      	adds	r7, #48	; 0x30
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20007350 	.word	0x20007350
 800b780:	e0001004 	.word	0xe0001004

0800b784 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b08a      	sub	sp, #40	; 0x28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b790:	4b63      	ldr	r3, [pc, #396]	; (800b920 <_SendPacket+0x19c>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d010      	beq.n	800b7ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b798:	4b61      	ldr	r3, [pc, #388]	; (800b920 <_SendPacket+0x19c>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 80a1 	beq.w	800b8e4 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b7a2:	4b5f      	ldr	r3, [pc, #380]	; (800b920 <_SendPacket+0x19c>)
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d109      	bne.n	800b7be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b7aa:	f7ff ff7b 	bl	800b6a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b7ae:	4b5c      	ldr	r3, [pc, #368]	; (800b920 <_SendPacket+0x19c>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	f040 8098 	bne.w	800b8e8 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800b7b8:	e001      	b.n	800b7be <_SendPacket+0x3a>
    goto Send;
 800b7ba:	bf00      	nop
 800b7bc:	e000      	b.n	800b7c0 <_SendPacket+0x3c>
Send:
 800b7be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b1f      	cmp	r3, #31
 800b7c4:	d809      	bhi.n	800b7da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b7c6:	4b56      	ldr	r3, [pc, #344]	; (800b920 <_SendPacket+0x19c>)
 800b7c8:	69da      	ldr	r2, [r3, #28]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f040 8089 	bne.w	800b8ec <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b17      	cmp	r3, #23
 800b7de:	d807      	bhi.n	800b7f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	60fb      	str	r3, [r7, #12]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	e03d      	b.n	800b86c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	2b7f      	cmp	r3, #127	; 0x7f
 800b7fc:	d912      	bls.n	800b824 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	09da      	lsrs	r2, r3, #7
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b01      	subs	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	b2d2      	uxtb	r2, r2
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	3a01      	subs	r2, #1
 800b816:	60fa      	str	r2, [r7, #12]
 800b818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	701a      	strb	r2, [r3, #0]
 800b822:	e006      	b.n	800b832 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3b01      	subs	r3, #1
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b7f      	cmp	r3, #127	; 0x7f
 800b836:	d912      	bls.n	800b85e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	09da      	lsrs	r2, r3, #7
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3b01      	subs	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	b2d2      	uxtb	r2, r2
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	3a01      	subs	r2, #1
 800b850:	60fa      	str	r2, [r7, #12]
 800b852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b856:	b2da      	uxtb	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	701a      	strb	r2, [r3, #0]
 800b85c:	e006      	b.n	800b86c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3b01      	subs	r3, #1
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b86c:	4b2d      	ldr	r3, [pc, #180]	; (800b924 <_SendPacket+0x1a0>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b872:	4b2b      	ldr	r3, [pc, #172]	; (800b920 <_SendPacket+0x19c>)
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	69ba      	ldr	r2, [r7, #24]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	623b      	str	r3, [r7, #32]
 800b884:	e00b      	b.n	800b89e <_SendPacket+0x11a>
 800b886:	6a3b      	ldr	r3, [r7, #32]
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	1c59      	adds	r1, r3, #1
 800b88e:	6279      	str	r1, [r7, #36]	; 0x24
 800b890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b894:	b2d2      	uxtb	r2, r2
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	09db      	lsrs	r3, r3, #7
 800b89c:	623b      	str	r3, [r7, #32]
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	2b7f      	cmp	r3, #127	; 0x7f
 800b8a2:	d8f0      	bhi.n	800b886 <_SendPacket+0x102>
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	627a      	str	r2, [r7, #36]	; 0x24
 800b8aa:	6a3a      	ldr	r2, [r7, #32]
 800b8ac:	b2d2      	uxtb	r2, r2
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	68f9      	ldr	r1, [r7, #12]
 800b8be:	2001      	movs	r0, #1
 800b8c0:	f7ff fcd6 	bl	800b270 <SEGGER_RTT_WriteSkipNoLock>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	613b      	str	r3, [r7, #16]
  if (Status) {
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b8ce:	4a14      	ldr	r2, [pc, #80]	; (800b920 <_SendPacket+0x19c>)
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	60d3      	str	r3, [r2, #12]
 800b8d4:	e00b      	b.n	800b8ee <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b8d6:	4b12      	ldr	r3, [pc, #72]	; (800b920 <_SendPacket+0x19c>)
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	4b10      	ldr	r3, [pc, #64]	; (800b920 <_SendPacket+0x19c>)
 800b8e0:	701a      	strb	r2, [r3, #0]
 800b8e2:	e004      	b.n	800b8ee <_SendPacket+0x16a>
    goto SendDone;
 800b8e4:	bf00      	nop
 800b8e6:	e002      	b.n	800b8ee <_SendPacket+0x16a>
      goto SendDone;
 800b8e8:	bf00      	nop
 800b8ea:	e000      	b.n	800b8ee <_SendPacket+0x16a>
      goto SendDone;
 800b8ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	; (800b928 <_SendPacket+0x1a4>)
 800b8f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <_SendPacket+0x1a4>)
 800b8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d00b      	beq.n	800b916 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b8fe:	4b08      	ldr	r3, [pc, #32]	; (800b920 <_SendPacket+0x19c>)
 800b900:	789b      	ldrb	r3, [r3, #2]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d107      	bne.n	800b916 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b906:	4b06      	ldr	r3, [pc, #24]	; (800b920 <_SendPacket+0x19c>)
 800b908:	2201      	movs	r2, #1
 800b90a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b90c:	f7ff fe6d 	bl	800b5ea <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b910:	4b03      	ldr	r3, [pc, #12]	; (800b920 <_SendPacket+0x19c>)
 800b912:	2200      	movs	r2, #0
 800b914:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b916:	bf00      	nop
 800b918:	3728      	adds	r7, #40	; 0x28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20007350 	.word	0x20007350
 800b924:	e0001004 	.word	0xe0001004
 800b928:	20008a24 	.word	0x20008a24

0800b92c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af02      	add	r7, sp, #8
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b93a:	2300      	movs	r3, #0
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b942:	4a14      	ldr	r2, [pc, #80]	; (800b994 <SEGGER_SYSVIEW_Init+0x68>)
 800b944:	4914      	ldr	r1, [pc, #80]	; (800b998 <SEGGER_SYSVIEW_Init+0x6c>)
 800b946:	2001      	movs	r0, #1
 800b948:	f7ff fd22 	bl	800b390 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b94c:	2300      	movs	r3, #0
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	2308      	movs	r3, #8
 800b952:	4a12      	ldr	r2, [pc, #72]	; (800b99c <SEGGER_SYSVIEW_Init+0x70>)
 800b954:	4910      	ldr	r1, [pc, #64]	; (800b998 <SEGGER_SYSVIEW_Init+0x6c>)
 800b956:	2001      	movs	r0, #1
 800b958:	f7ff fd84 	bl	800b464 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b95c:	4b10      	ldr	r3, [pc, #64]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b95e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b962:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b964:	4b0f      	ldr	r3, [pc, #60]	; (800b9a4 <SEGGER_SYSVIEW_Init+0x78>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a0d      	ldr	r2, [pc, #52]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b96a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b96c:	4a0c      	ldr	r2, [pc, #48]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b972:	4a0b      	ldr	r2, [pc, #44]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b978:	4a09      	ldr	r2, [pc, #36]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b97e:	4a08      	ldr	r2, [pc, #32]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800b986:	2200      	movs	r2, #0
 800b988:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b98a:	bf00      	nop
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20005348 	.word	0x20005348
 800b998:	0801e860 	.word	0x0801e860
 800b99c:	20007348 	.word	0x20007348
 800b9a0:	20007350 	.word	0x20007350
 800b9a4:	e0001004 	.word	0xe0001004

0800b9a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b9b0:	4a04      	ldr	r2, [pc, #16]	; (800b9c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6113      	str	r3, [r2, #16]
}
 800b9b6:	bf00      	nop
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	20007350 	.word	0x20007350

0800b9c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b9d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b9d4:	f04f 0120 	mov.w	r1, #32
 800b9d8:	f381 8811 	msr	BASEPRI, r1
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	4808      	ldr	r0, [pc, #32]	; (800ba00 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b9e0:	f7ff fdf7 	bl	800b5d2 <_PreparePacket>
 800b9e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	68b9      	ldr	r1, [r7, #8]
 800b9ea:	68b8      	ldr	r0, [r7, #8]
 800b9ec:	f7ff feca 	bl	800b784 <_SendPacket>
  RECORD_END();
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f383 8811 	msr	BASEPRI, r3
}
 800b9f6:	bf00      	nop
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20007380 	.word	0x20007380

0800ba04 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ba0e:	f3ef 8311 	mrs	r3, BASEPRI
 800ba12:	f04f 0120 	mov.w	r1, #32
 800ba16:	f381 8811 	msr	BASEPRI, r1
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	4816      	ldr	r0, [pc, #88]	; (800ba78 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ba1e:	f7ff fdd8 	bl	800b5d2 <_PreparePacket>
 800ba22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	61fb      	str	r3, [r7, #28]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	e00b      	b.n	800ba4a <SEGGER_SYSVIEW_RecordU32+0x46>
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	1c59      	adds	r1, r3, #1
 800ba3a:	61f9      	str	r1, [r7, #28]
 800ba3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba40:	b2d2      	uxtb	r2, r2
 800ba42:	701a      	strb	r2, [r3, #0]
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	09db      	lsrs	r3, r3, #7
 800ba48:	61bb      	str	r3, [r7, #24]
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	2b7f      	cmp	r3, #127	; 0x7f
 800ba4e:	d8f0      	bhi.n	800ba32 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	61fa      	str	r2, [r7, #28]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	b2d2      	uxtb	r2, r2
 800ba5a:	701a      	strb	r2, [r3, #0]
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	68f9      	ldr	r1, [r7, #12]
 800ba64:	6938      	ldr	r0, [r7, #16]
 800ba66:	f7ff fe8d 	bl	800b784 <_SendPacket>
  RECORD_END();
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f383 8811 	msr	BASEPRI, r3
}
 800ba70:	bf00      	nop
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20007380 	.word	0x20007380

0800ba7c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08c      	sub	sp, #48	; 0x30
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ba88:	f3ef 8311 	mrs	r3, BASEPRI
 800ba8c:	f04f 0120 	mov.w	r1, #32
 800ba90:	f381 8811 	msr	BASEPRI, r1
 800ba94:	61fb      	str	r3, [r7, #28]
 800ba96:	4825      	ldr	r0, [pc, #148]	; (800bb2c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800ba98:	f7ff fd9b 	bl	800b5d2 <_PreparePacket>
 800ba9c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800baaa:	e00b      	b.n	800bac4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	1c59      	adds	r1, r3, #1
 800bab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	09db      	lsrs	r3, r3, #7
 800bac2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	2b7f      	cmp	r3, #127	; 0x7f
 800bac8:	d8f0      	bhi.n	800baac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	1c5a      	adds	r2, r3, #1
 800bace:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bad2:	b2d2      	uxtb	r2, r2
 800bad4:	701a      	strb	r2, [r3, #0]
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	623b      	str	r3, [r7, #32]
 800bae2:	e00b      	b.n	800bafc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	1c59      	adds	r1, r3, #1
 800baec:	6279      	str	r1, [r7, #36]	; 0x24
 800baee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	09db      	lsrs	r3, r3, #7
 800bafa:	623b      	str	r3, [r7, #32]
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	2b7f      	cmp	r3, #127	; 0x7f
 800bb00:	d8f0      	bhi.n	800bae4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	627a      	str	r2, [r7, #36]	; 0x24
 800bb08:	6a3a      	ldr	r2, [r7, #32]
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	6979      	ldr	r1, [r7, #20]
 800bb16:	69b8      	ldr	r0, [r7, #24]
 800bb18:	f7ff fe34 	bl	800b784 <_SendPacket>
  RECORD_END();
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	f383 8811 	msr	BASEPRI, r3
}
 800bb22:	bf00      	nop
 800bb24:	3730      	adds	r7, #48	; 0x30
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20007380 	.word	0x20007380

0800bb30 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08e      	sub	sp, #56	; 0x38
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800bb3e:	f3ef 8311 	mrs	r3, BASEPRI
 800bb42:	f04f 0120 	mov.w	r1, #32
 800bb46:	f381 8811 	msr	BASEPRI, r1
 800bb4a:	61fb      	str	r3, [r7, #28]
 800bb4c:	4832      	ldr	r0, [pc, #200]	; (800bc18 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800bb4e:	f7ff fd40 	bl	800b5d2 <_PreparePacket>
 800bb52:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	633b      	str	r3, [r7, #48]	; 0x30
 800bb60:	e00b      	b.n	800bb7a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	1c59      	adds	r1, r3, #1
 800bb6a:	6379      	str	r1, [r7, #52]	; 0x34
 800bb6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb70:	b2d2      	uxtb	r2, r2
 800bb72:	701a      	strb	r2, [r3, #0]
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	09db      	lsrs	r3, r3, #7
 800bb78:	633b      	str	r3, [r7, #48]	; 0x30
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	2b7f      	cmp	r3, #127	; 0x7f
 800bb7e:	d8f0      	bhi.n	800bb62 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800bb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	637a      	str	r2, [r7, #52]	; 0x34
 800bb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]
 800bb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb98:	e00b      	b.n	800bbb2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba0:	1c59      	adds	r1, r3, #1
 800bba2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bba8:	b2d2      	uxtb	r2, r2
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	09db      	lsrs	r3, r3, #7
 800bbb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	2b7f      	cmp	r3, #127	; 0x7f
 800bbb6:	d8f0      	bhi.n	800bb9a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	701a      	strb	r2, [r3, #0]
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	627b      	str	r3, [r7, #36]	; 0x24
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	623b      	str	r3, [r7, #32]
 800bbd0:	e00b      	b.n	800bbea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	1c59      	adds	r1, r3, #1
 800bbda:	6279      	str	r1, [r7, #36]	; 0x24
 800bbdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbe0:	b2d2      	uxtb	r2, r2
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	09db      	lsrs	r3, r3, #7
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	2b7f      	cmp	r3, #127	; 0x7f
 800bbee:	d8f0      	bhi.n	800bbd2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	627a      	str	r2, [r7, #36]	; 0x24
 800bbf6:	6a3a      	ldr	r2, [r7, #32]
 800bbf8:	b2d2      	uxtb	r2, r2
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	6979      	ldr	r1, [r7, #20]
 800bc04:	69b8      	ldr	r0, [r7, #24]
 800bc06:	f7ff fdbd 	bl	800b784 <_SendPacket>
  RECORD_END();
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	f383 8811 	msr	BASEPRI, r3
}
 800bc10:	bf00      	nop
 800bc12:	3738      	adds	r7, #56	; 0x38
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20007380 	.word	0x20007380

0800bc1c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b090      	sub	sp, #64	; 0x40
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bc2a:	f3ef 8311 	mrs	r3, BASEPRI
 800bc2e:	f04f 0120 	mov.w	r1, #32
 800bc32:	f381 8811 	msr	BASEPRI, r1
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	4840      	ldr	r0, [pc, #256]	; (800bd3c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bc3a:	f7ff fcca 	bl	800b5d2 <_PreparePacket>
 800bc3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc4c:	e00b      	b.n	800bc66 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc54:	1c59      	adds	r1, r3, #1
 800bc56:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bc58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc5c:	b2d2      	uxtb	r2, r2
 800bc5e:	701a      	strb	r2, [r3, #0]
 800bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc62:	09db      	lsrs	r3, r3, #7
 800bc64:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	2b7f      	cmp	r3, #127	; 0x7f
 800bc6a:	d8f0      	bhi.n	800bc4e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	633b      	str	r3, [r7, #48]	; 0x30
 800bc84:	e00b      	b.n	800bc9e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8c:	1c59      	adds	r1, r3, #1
 800bc8e:	6379      	str	r1, [r7, #52]	; 0x34
 800bc90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc94:	b2d2      	uxtb	r2, r2
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	09db      	lsrs	r3, r3, #7
 800bc9c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca0:	2b7f      	cmp	r3, #127	; 0x7f
 800bca2:	d8f0      	bhi.n	800bc86 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	637a      	str	r2, [r7, #52]	; 0x34
 800bcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]
 800bcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcbc:	e00b      	b.n	800bcd6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	1c59      	adds	r1, r3, #1
 800bcc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bcc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	09db      	lsrs	r3, r3, #7
 800bcd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcda:	d8f0      	bhi.n	800bcbe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800bcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	627b      	str	r3, [r7, #36]	; 0x24
 800bcf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcf2:	623b      	str	r3, [r7, #32]
 800bcf4:	e00b      	b.n	800bd0e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	1c59      	adds	r1, r3, #1
 800bcfe:	6279      	str	r1, [r7, #36]	; 0x24
 800bd00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	09db      	lsrs	r3, r3, #7
 800bd0c:	623b      	str	r3, [r7, #32]
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	2b7f      	cmp	r3, #127	; 0x7f
 800bd12:	d8f0      	bhi.n	800bcf6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	627a      	str	r2, [r7, #36]	; 0x24
 800bd1a:	6a3a      	ldr	r2, [r7, #32]
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	701a      	strb	r2, [r3, #0]
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	6979      	ldr	r1, [r7, #20]
 800bd28:	69b8      	ldr	r0, [r7, #24]
 800bd2a:	f7ff fd2b 	bl	800b784 <_SendPacket>
  RECORD_END();
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	f383 8811 	msr	BASEPRI, r3
}
 800bd34:	bf00      	nop
 800bd36:	3740      	adds	r7, #64	; 0x40
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20007380 	.word	0x20007380

0800bd40 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08c      	sub	sp, #48	; 0x30
 800bd44:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bd46:	4b59      	ldr	r3, [pc, #356]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f040 80aa 	bne.w	800bea4 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800bd50:	4b56      	ldr	r3, [pc, #344]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800bd56:	f3ef 8311 	mrs	r3, BASEPRI
 800bd5a:	f04f 0120 	mov.w	r1, #32
 800bd5e:	f381 8811 	msr	BASEPRI, r1
 800bd62:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800bd64:	220a      	movs	r2, #10
 800bd66:	4952      	ldr	r1, [pc, #328]	; (800beb0 <SEGGER_SYSVIEW_Start+0x170>)
 800bd68:	2001      	movs	r0, #1
 800bd6a:	f7ff fa81 	bl	800b270 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800bd74:	200a      	movs	r0, #10
 800bd76:	f7ff fe27 	bl	800b9c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bd7a:	f3ef 8311 	mrs	r3, BASEPRI
 800bd7e:	f04f 0120 	mov.w	r1, #32
 800bd82:	f381 8811 	msr	BASEPRI, r1
 800bd86:	60bb      	str	r3, [r7, #8]
 800bd88:	484a      	ldr	r0, [pc, #296]	; (800beb4 <SEGGER_SYSVIEW_Start+0x174>)
 800bd8a:	f7ff fc22 	bl	800b5d2 <_PreparePacket>
 800bd8e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd98:	4b44      	ldr	r3, [pc, #272]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd9e:	e00b      	b.n	800bdb8 <SEGGER_SYSVIEW_Start+0x78>
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	1c59      	adds	r1, r3, #1
 800bda8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bdaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bdae:	b2d2      	uxtb	r2, r2
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	09db      	lsrs	r3, r3, #7
 800bdb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	2b7f      	cmp	r3, #127	; 0x7f
 800bdbc:	d8f0      	bhi.n	800bda0 <SEGGER_SYSVIEW_Start+0x60>
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	1c5a      	adds	r2, r3, #1
 800bdc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd2:	4b36      	ldr	r3, [pc, #216]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	623b      	str	r3, [r7, #32]
 800bdd8:	e00b      	b.n	800bdf2 <SEGGER_SYSVIEW_Start+0xb2>
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	1c59      	adds	r1, r3, #1
 800bde2:	6279      	str	r1, [r7, #36]	; 0x24
 800bde4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bde8:	b2d2      	uxtb	r2, r2
 800bdea:	701a      	strb	r2, [r3, #0]
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	09db      	lsrs	r3, r3, #7
 800bdf0:	623b      	str	r3, [r7, #32]
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	2b7f      	cmp	r3, #127	; 0x7f
 800bdf6:	d8f0      	bhi.n	800bdda <SEGGER_SYSVIEW_Start+0x9a>
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	627a      	str	r2, [r7, #36]	; 0x24
 800bdfe:	6a3a      	ldr	r2, [r7, #32]
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	701a      	strb	r2, [r3, #0]
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	61fb      	str	r3, [r7, #28]
 800be0c:	4b27      	ldr	r3, [pc, #156]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	61bb      	str	r3, [r7, #24]
 800be12:	e00b      	b.n	800be2c <SEGGER_SYSVIEW_Start+0xec>
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	b2da      	uxtb	r2, r3
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	1c59      	adds	r1, r3, #1
 800be1c:	61f9      	str	r1, [r7, #28]
 800be1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	09db      	lsrs	r3, r3, #7
 800be2a:	61bb      	str	r3, [r7, #24]
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	2b7f      	cmp	r3, #127	; 0x7f
 800be30:	d8f0      	bhi.n	800be14 <SEGGER_SYSVIEW_Start+0xd4>
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	1c5a      	adds	r2, r3, #1
 800be36:	61fa      	str	r2, [r7, #28]
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	617b      	str	r3, [r7, #20]
 800be46:	2302      	movs	r3, #2
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	e00b      	b.n	800be64 <SEGGER_SYSVIEW_Start+0x124>
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	6179      	str	r1, [r7, #20]
 800be56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	09db      	lsrs	r3, r3, #7
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b7f      	cmp	r3, #127	; 0x7f
 800be68:	d8f0      	bhi.n	800be4c <SEGGER_SYSVIEW_Start+0x10c>
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	1c5a      	adds	r2, r3, #1
 800be6e:	617a      	str	r2, [r7, #20]
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	b2d2      	uxtb	r2, r2
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800be7a:	2218      	movs	r2, #24
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fc80 	bl	800b784 <_SendPacket>
      RECORD_END();
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800be8a:	4b08      	ldr	r3, [pc, #32]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800be92:	4b06      	ldr	r3, [pc, #24]	; (800beac <SEGGER_SYSVIEW_Start+0x16c>)
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800be98:	f000 f9ec 	bl	800c274 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800be9c:	f000 f9b2 	bl	800c204 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800bea0:	f000 fc8a 	bl	800c7b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800bea4:	bf00      	nop
 800bea6:	3730      	adds	r7, #48	; 0x30
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20007350 	.word	0x20007350
 800beb0:	0801ee6c 	.word	0x0801ee6c
 800beb4:	20007380 	.word	0x20007380

0800beb8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bebe:	f3ef 8311 	mrs	r3, BASEPRI
 800bec2:	f04f 0120 	mov.w	r1, #32
 800bec6:	f381 8811 	msr	BASEPRI, r1
 800beca:	607b      	str	r3, [r7, #4]
 800becc:	480b      	ldr	r0, [pc, #44]	; (800befc <SEGGER_SYSVIEW_Stop+0x44>)
 800bece:	f7ff fb80 	bl	800b5d2 <_PreparePacket>
 800bed2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800bed4:	4b0a      	ldr	r3, [pc, #40]	; (800bf00 <SEGGER_SYSVIEW_Stop+0x48>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d007      	beq.n	800beec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800bedc:	220b      	movs	r2, #11
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6838      	ldr	r0, [r7, #0]
 800bee2:	f7ff fc4f 	bl	800b784 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800bee6:	4b06      	ldr	r3, [pc, #24]	; (800bf00 <SEGGER_SYSVIEW_Stop+0x48>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f383 8811 	msr	BASEPRI, r3
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20007380 	.word	0x20007380
 800bf00:	20007350 	.word	0x20007350

0800bf04 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08c      	sub	sp, #48	; 0x30
 800bf08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bf0a:	f3ef 8311 	mrs	r3, BASEPRI
 800bf0e:	f04f 0120 	mov.w	r1, #32
 800bf12:	f381 8811 	msr	BASEPRI, r1
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	4845      	ldr	r0, [pc, #276]	; (800c030 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800bf1a:	f7ff fb5a 	bl	800b5d2 <_PreparePacket>
 800bf1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf28:	4b42      	ldr	r3, [pc, #264]	; (800c034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf2e:	e00b      	b.n	800bf48 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	1c59      	adds	r1, r3, #1
 800bf38:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bf3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf3e:	b2d2      	uxtb	r2, r2
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	09db      	lsrs	r3, r3, #7
 800bf46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	2b7f      	cmp	r3, #127	; 0x7f
 800bf4c:	d8f0      	bhi.n	800bf30 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf56:	b2d2      	uxtb	r2, r2
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
 800bf62:	4b34      	ldr	r3, [pc, #208]	; (800c034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	623b      	str	r3, [r7, #32]
 800bf68:	e00b      	b.n	800bf82 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf70:	1c59      	adds	r1, r3, #1
 800bf72:	6279      	str	r1, [r7, #36]	; 0x24
 800bf74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf78:	b2d2      	uxtb	r2, r2
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	09db      	lsrs	r3, r3, #7
 800bf80:	623b      	str	r3, [r7, #32]
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	2b7f      	cmp	r3, #127	; 0x7f
 800bf86:	d8f0      	bhi.n	800bf6a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	627a      	str	r2, [r7, #36]	; 0x24
 800bf8e:	6a3a      	ldr	r2, [r7, #32]
 800bf90:	b2d2      	uxtb	r2, r2
 800bf92:	701a      	strb	r2, [r3, #0]
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	61fb      	str	r3, [r7, #28]
 800bf9c:	4b25      	ldr	r3, [pc, #148]	; (800c034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	e00b      	b.n	800bfbc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	1c59      	adds	r1, r3, #1
 800bfac:	61f9      	str	r1, [r7, #28]
 800bfae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfb2:	b2d2      	uxtb	r2, r2
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	09db      	lsrs	r3, r3, #7
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	2b7f      	cmp	r3, #127	; 0x7f
 800bfc0:	d8f0      	bhi.n	800bfa4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	61fa      	str	r2, [r7, #28]
 800bfc8:	69ba      	ldr	r2, [r7, #24]
 800bfca:	b2d2      	uxtb	r2, r2
 800bfcc:	701a      	strb	r2, [r3, #0]
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	617b      	str	r3, [r7, #20]
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	e00b      	b.n	800bff4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	1c59      	adds	r1, r3, #1
 800bfe4:	6179      	str	r1, [r7, #20]
 800bfe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	701a      	strb	r2, [r3, #0]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	09db      	lsrs	r3, r3, #7
 800bff2:	613b      	str	r3, [r7, #16]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	2b7f      	cmp	r3, #127	; 0x7f
 800bff8:	d8f0      	bhi.n	800bfdc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	617a      	str	r2, [r7, #20]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	b2d2      	uxtb	r2, r2
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c00a:	2218      	movs	r2, #24
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	68b8      	ldr	r0, [r7, #8]
 800c010:	f7ff fbb8 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c01a:	4b06      	ldr	r3, [pc, #24]	; (800c034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c022:	4b04      	ldr	r3, [pc, #16]	; (800c034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c026:	4798      	blx	r3
  }
}
 800c028:	bf00      	nop
 800c02a:	3730      	adds	r7, #48	; 0x30
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	20007380 	.word	0x20007380
 800c034:	20007350 	.word	0x20007350

0800c038 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c038:	b580      	push	{r7, lr}
 800c03a:	b092      	sub	sp, #72	; 0x48
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c040:	f3ef 8311 	mrs	r3, BASEPRI
 800c044:	f04f 0120 	mov.w	r1, #32
 800c048:	f381 8811 	msr	BASEPRI, r1
 800c04c:	617b      	str	r3, [r7, #20]
 800c04e:	486b      	ldr	r0, [pc, #428]	; (800c1fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c050:	f7ff fabf 	bl	800b5d2 <_PreparePacket>
 800c054:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	647b      	str	r3, [r7, #68]	; 0x44
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	4b67      	ldr	r3, [pc, #412]	; (800c200 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	1ad3      	subs	r3, r2, r3
 800c068:	089b      	lsrs	r3, r3, #2
 800c06a:	643b      	str	r3, [r7, #64]	; 0x40
 800c06c:	e00b      	b.n	800c086 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800c06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c070:	b2da      	uxtb	r2, r3
 800c072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c074:	1c59      	adds	r1, r3, #1
 800c076:	6479      	str	r1, [r7, #68]	; 0x44
 800c078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]
 800c080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c082:	09db      	lsrs	r3, r3, #7
 800c084:	643b      	str	r3, [r7, #64]	; 0x40
 800c086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c088:	2b7f      	cmp	r3, #127	; 0x7f
 800c08a:	d8f0      	bhi.n	800c06e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800c08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	647a      	str	r2, [r7, #68]	; 0x44
 800c092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c094:	b2d2      	uxtb	r2, r2
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c09a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0a6:	e00b      	b.n	800c0c0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ae:	1c59      	adds	r1, r3, #1
 800c0b0:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c0b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0b6:	b2d2      	uxtb	r2, r2
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	09db      	lsrs	r3, r3, #7
 800c0be:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0c4:	d8f0      	bhi.n	800c0a8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ce:	b2d2      	uxtb	r2, r2
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	2220      	movs	r2, #32
 800c0dc:	4619      	mov	r1, r3
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7ff fa2a 	bl	800b538 <_EncodeStr>
 800c0e4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c0e6:	2209      	movs	r2, #9
 800c0e8:	68f9      	ldr	r1, [r7, #12]
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f7ff fb4a 	bl	800b784 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	4b40      	ldr	r3, [pc, #256]	; (800c200 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	089b      	lsrs	r3, r3, #2
 800c104:	633b      	str	r3, [r7, #48]	; 0x30
 800c106:	e00b      	b.n	800c120 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800c108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	1c59      	adds	r1, r3, #1
 800c110:	6379      	str	r1, [r7, #52]	; 0x34
 800c112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c116:	b2d2      	uxtb	r2, r2
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	09db      	lsrs	r3, r3, #7
 800c11e:	633b      	str	r3, [r7, #48]	; 0x30
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	2b7f      	cmp	r3, #127	; 0x7f
 800c124:	d8f0      	bhi.n	800c108 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	637a      	str	r2, [r7, #52]	; 0x34
 800c12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c140:	e00b      	b.n	800c15a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	b2da      	uxtb	r2, r3
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	1c59      	adds	r1, r3, #1
 800c14a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c14c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c150:	b2d2      	uxtb	r2, r2
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	09db      	lsrs	r3, r3, #7
 800c158:	62bb      	str	r3, [r7, #40]	; 0x28
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	2b7f      	cmp	r3, #127	; 0x7f
 800c15e:	d8f0      	bhi.n	800c142 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c168:	b2d2      	uxtb	r2, r2
 800c16a:	701a      	strb	r2, [r3, #0]
 800c16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	627b      	str	r3, [r7, #36]	; 0x24
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	623b      	str	r3, [r7, #32]
 800c17a:	e00b      	b.n	800c194 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	1c59      	adds	r1, r3, #1
 800c184:	6279      	str	r1, [r7, #36]	; 0x24
 800c186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c18a:	b2d2      	uxtb	r2, r2
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	09db      	lsrs	r3, r3, #7
 800c192:	623b      	str	r3, [r7, #32]
 800c194:	6a3b      	ldr	r3, [r7, #32]
 800c196:	2b7f      	cmp	r3, #127	; 0x7f
 800c198:	d8f0      	bhi.n	800c17c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	627a      	str	r2, [r7, #36]	; 0x24
 800c1a0:	6a3a      	ldr	r2, [r7, #32]
 800c1a2:	b2d2      	uxtb	r2, r2
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	61fb      	str	r3, [r7, #28]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	61bb      	str	r3, [r7, #24]
 800c1b2:	e00b      	b.n	800c1cc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	1c59      	adds	r1, r3, #1
 800c1bc:	61f9      	str	r1, [r7, #28]
 800c1be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	701a      	strb	r2, [r3, #0]
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	09db      	lsrs	r3, r3, #7
 800c1ca:	61bb      	str	r3, [r7, #24]
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c1d0:	d8f0      	bhi.n	800c1b4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	61fa      	str	r2, [r7, #28]
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	b2d2      	uxtb	r2, r2
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c1e2:	2215      	movs	r2, #21
 800c1e4:	68f9      	ldr	r1, [r7, #12]
 800c1e6:	6938      	ldr	r0, [r7, #16]
 800c1e8:	f7ff facc 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f383 8811 	msr	BASEPRI, r3
}
 800c1f2:	bf00      	nop
 800c1f4:	3748      	adds	r7, #72	; 0x48
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20007380 	.word	0x20007380
 800c200:	20007350 	.word	0x20007350

0800c204 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c204:	b580      	push	{r7, lr}
 800c206:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d008      	beq.n	800c222 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c210:	4b05      	ldr	r3, [pc, #20]	; (800c228 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c212:	6a1b      	ldr	r3, [r3, #32]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c21a:	4b03      	ldr	r3, [pc, #12]	; (800c228 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	4798      	blx	r3
  }
}
 800c222:	bf00      	nop
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20007350 	.word	0x20007350

0800c22c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c234:	f3ef 8311 	mrs	r3, BASEPRI
 800c238:	f04f 0120 	mov.w	r1, #32
 800c23c:	f381 8811 	msr	BASEPRI, r1
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	480b      	ldr	r0, [pc, #44]	; (800c270 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c244:	f7ff f9c5 	bl	800b5d2 <_PreparePacket>
 800c248:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c24a:	2280      	movs	r2, #128	; 0x80
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	6938      	ldr	r0, [r7, #16]
 800c250:	f7ff f972 	bl	800b538 <_EncodeStr>
 800c254:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c256:	220e      	movs	r2, #14
 800c258:	68f9      	ldr	r1, [r7, #12]
 800c25a:	6938      	ldr	r0, [r7, #16]
 800c25c:	f7ff fa92 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f383 8811 	msr	BASEPRI, r3
}
 800c266:	bf00      	nop
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20007380 	.word	0x20007380

0800c274 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c274:	b590      	push	{r4, r7, lr}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c27a:	4b14      	ldr	r3, [pc, #80]	; (800c2cc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d019      	beq.n	800c2b6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800c282:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d014      	beq.n	800c2b6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800c28e:	6a1b      	ldr	r3, [r3, #32]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4798      	blx	r3
 800c294:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c298:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c29a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c29e:	f04f 0300 	mov.w	r3, #0
 800c2a2:	f04f 0400 	mov.w	r4, #0
 800c2a6:	0013      	movs	r3, r2
 800c2a8:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	4601      	mov	r1, r0
 800c2ae:	200d      	movs	r0, #13
 800c2b0:	f7ff fbe4 	bl	800ba7c <SEGGER_SYSVIEW_RecordU32x2>
 800c2b4:	e005      	b.n	800c2c2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c2b6:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	200c      	movs	r0, #12
 800c2be:	f7ff fba1 	bl	800ba04 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd90      	pop	{r4, r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20007350 	.word	0x20007350
 800c2d0:	e0001004 	.word	0xe0001004

0800c2d4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c2da:	f3ef 8311 	mrs	r3, BASEPRI
 800c2de:	f04f 0120 	mov.w	r1, #32
 800c2e2:	f381 8811 	msr	BASEPRI, r1
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	4819      	ldr	r0, [pc, #100]	; (800c350 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c2ea:	f7ff f972 	bl	800b5d2 <_PreparePacket>
 800c2ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c2f4:	4b17      	ldr	r3, [pc, #92]	; (800c354 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	617b      	str	r3, [r7, #20]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	613b      	str	r3, [r7, #16]
 800c306:	e00b      	b.n	800c320 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	1c59      	adds	r1, r3, #1
 800c310:	6179      	str	r1, [r7, #20]
 800c312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c316:	b2d2      	uxtb	r2, r2
 800c318:	701a      	strb	r2, [r3, #0]
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	09db      	lsrs	r3, r3, #7
 800c31e:	613b      	str	r3, [r7, #16]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2b7f      	cmp	r3, #127	; 0x7f
 800c324:	d8f0      	bhi.n	800c308 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	617a      	str	r2, [r7, #20]
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c336:	2202      	movs	r2, #2
 800c338:	6879      	ldr	r1, [r7, #4]
 800c33a:	68b8      	ldr	r0, [r7, #8]
 800c33c:	f7ff fa22 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f383 8811 	msr	BASEPRI, r3
}
 800c346:	bf00      	nop
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20007380 	.word	0x20007380
 800c354:	e000ed04 	.word	0xe000ed04

0800c358 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c35e:	f3ef 8311 	mrs	r3, BASEPRI
 800c362:	f04f 0120 	mov.w	r1, #32
 800c366:	f381 8811 	msr	BASEPRI, r1
 800c36a:	607b      	str	r3, [r7, #4]
 800c36c:	4807      	ldr	r0, [pc, #28]	; (800c38c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c36e:	f7ff f930 	bl	800b5d2 <_PreparePacket>
 800c372:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c374:	2203      	movs	r2, #3
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6838      	ldr	r0, [r7, #0]
 800c37a:	f7ff fa03 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f383 8811 	msr	BASEPRI, r3
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	20007380 	.word	0x20007380

0800c390 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c396:	f3ef 8311 	mrs	r3, BASEPRI
 800c39a:	f04f 0120 	mov.w	r1, #32
 800c39e:	f381 8811 	msr	BASEPRI, r1
 800c3a2:	607b      	str	r3, [r7, #4]
 800c3a4:	4807      	ldr	r0, [pc, #28]	; (800c3c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c3a6:	f7ff f914 	bl	800b5d2 <_PreparePacket>
 800c3aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c3ac:	2212      	movs	r2, #18
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6838      	ldr	r0, [r7, #0]
 800c3b2:	f7ff f9e7 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f383 8811 	msr	BASEPRI, r3
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20007380 	.word	0x20007380

0800c3c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c3ce:	f3ef 8311 	mrs	r3, BASEPRI
 800c3d2:	f04f 0120 	mov.w	r1, #32
 800c3d6:	f381 8811 	msr	BASEPRI, r1
 800c3da:	607b      	str	r3, [r7, #4]
 800c3dc:	4807      	ldr	r0, [pc, #28]	; (800c3fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c3de:	f7ff f8f8 	bl	800b5d2 <_PreparePacket>
 800c3e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c3e4:	2211      	movs	r2, #17
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6838      	ldr	r0, [r7, #0]
 800c3ea:	f7ff f9cb 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f383 8811 	msr	BASEPRI, r3
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20007380 	.word	0x20007380

0800c400 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c408:	f3ef 8311 	mrs	r3, BASEPRI
 800c40c:	f04f 0120 	mov.w	r1, #32
 800c410:	f381 8811 	msr	BASEPRI, r1
 800c414:	617b      	str	r3, [r7, #20]
 800c416:	481a      	ldr	r0, [pc, #104]	; (800c480 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c418:	f7ff f8db 	bl	800b5d2 <_PreparePacket>
 800c41c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c422:	4b18      	ldr	r3, [pc, #96]	; (800c484 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	089b      	lsrs	r3, r3, #2
 800c42c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	61bb      	str	r3, [r7, #24]
 800c436:	e00b      	b.n	800c450 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	1c59      	adds	r1, r3, #1
 800c440:	61f9      	str	r1, [r7, #28]
 800c442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	09db      	lsrs	r3, r3, #7
 800c44e:	61bb      	str	r3, [r7, #24]
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2b7f      	cmp	r3, #127	; 0x7f
 800c454:	d8f0      	bhi.n	800c438 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	61fa      	str	r2, [r7, #28]
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	701a      	strb	r2, [r3, #0]
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c466:	2208      	movs	r2, #8
 800c468:	68f9      	ldr	r1, [r7, #12]
 800c46a:	6938      	ldr	r0, [r7, #16]
 800c46c:	f7ff f98a 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f383 8811 	msr	BASEPRI, r3
}
 800c476:	bf00      	nop
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20007380 	.word	0x20007380
 800c484:	20007350 	.word	0x20007350

0800c488 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c490:	f3ef 8311 	mrs	r3, BASEPRI
 800c494:	f04f 0120 	mov.w	r1, #32
 800c498:	f381 8811 	msr	BASEPRI, r1
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	481a      	ldr	r0, [pc, #104]	; (800c508 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c4a0:	f7ff f897 	bl	800b5d2 <_PreparePacket>
 800c4a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c4aa:	4b18      	ldr	r3, [pc, #96]	; (800c50c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	089b      	lsrs	r3, r3, #2
 800c4b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	61fb      	str	r3, [r7, #28]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	61bb      	str	r3, [r7, #24]
 800c4be:	e00b      	b.n	800c4d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	1c59      	adds	r1, r3, #1
 800c4c8:	61f9      	str	r1, [r7, #28]
 800c4ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4ce:	b2d2      	uxtb	r2, r2
 800c4d0:	701a      	strb	r2, [r3, #0]
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	09db      	lsrs	r3, r3, #7
 800c4d6:	61bb      	str	r3, [r7, #24]
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	2b7f      	cmp	r3, #127	; 0x7f
 800c4dc:	d8f0      	bhi.n	800c4c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	61fa      	str	r2, [r7, #28]
 800c4e4:	69ba      	ldr	r2, [r7, #24]
 800c4e6:	b2d2      	uxtb	r2, r2
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	68f9      	ldr	r1, [r7, #12]
 800c4f2:	6938      	ldr	r0, [r7, #16]
 800c4f4:	f7ff f946 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f383 8811 	msr	BASEPRI, r3
}
 800c4fe:	bf00      	nop
 800c500:	3720      	adds	r7, #32
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20007380 	.word	0x20007380
 800c50c:	20007350 	.word	0x20007350

0800c510 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c518:	f3ef 8311 	mrs	r3, BASEPRI
 800c51c:	f04f 0120 	mov.w	r1, #32
 800c520:	f381 8811 	msr	BASEPRI, r1
 800c524:	617b      	str	r3, [r7, #20]
 800c526:	481a      	ldr	r0, [pc, #104]	; (800c590 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c528:	f7ff f853 	bl	800b5d2 <_PreparePacket>
 800c52c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c532:	4b18      	ldr	r3, [pc, #96]	; (800c594 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	089b      	lsrs	r3, r3, #2
 800c53c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	61fb      	str	r3, [r7, #28]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	e00b      	b.n	800c560 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	1c59      	adds	r1, r3, #1
 800c550:	61f9      	str	r1, [r7, #28]
 800c552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c556:	b2d2      	uxtb	r2, r2
 800c558:	701a      	strb	r2, [r3, #0]
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	09db      	lsrs	r3, r3, #7
 800c55e:	61bb      	str	r3, [r7, #24]
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	2b7f      	cmp	r3, #127	; 0x7f
 800c564:	d8f0      	bhi.n	800c548 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	61fa      	str	r2, [r7, #28]
 800c56c:	69ba      	ldr	r2, [r7, #24]
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	701a      	strb	r2, [r3, #0]
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c576:	2206      	movs	r2, #6
 800c578:	68f9      	ldr	r1, [r7, #12]
 800c57a:	6938      	ldr	r0, [r7, #16]
 800c57c:	f7ff f902 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f383 8811 	msr	BASEPRI, r3
}
 800c586:	bf00      	nop
 800c588:	3720      	adds	r7, #32
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20007380 	.word	0x20007380
 800c594:	20007350 	.word	0x20007350

0800c598 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08a      	sub	sp, #40	; 0x28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c5a2:	f3ef 8311 	mrs	r3, BASEPRI
 800c5a6:	f04f 0120 	mov.w	r1, #32
 800c5aa:	f381 8811 	msr	BASEPRI, r1
 800c5ae:	617b      	str	r3, [r7, #20]
 800c5b0:	4827      	ldr	r0, [pc, #156]	; (800c650 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c5b2:	f7ff f80e 	bl	800b5d2 <_PreparePacket>
 800c5b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c5bc:	4b25      	ldr	r3, [pc, #148]	; (800c654 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	089b      	lsrs	r3, r3, #2
 800c5c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	623b      	str	r3, [r7, #32]
 800c5d0:	e00b      	b.n	800c5ea <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	1c59      	adds	r1, r3, #1
 800c5da:	6279      	str	r1, [r7, #36]	; 0x24
 800c5dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5e0:	b2d2      	uxtb	r2, r2
 800c5e2:	701a      	strb	r2, [r3, #0]
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	09db      	lsrs	r3, r3, #7
 800c5e8:	623b      	str	r3, [r7, #32]
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c5ee:	d8f0      	bhi.n	800c5d2 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	627a      	str	r2, [r7, #36]	; 0x24
 800c5f6:	6a3a      	ldr	r2, [r7, #32]
 800c5f8:	b2d2      	uxtb	r2, r2
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	61fb      	str	r3, [r7, #28]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	61bb      	str	r3, [r7, #24]
 800c608:	e00b      	b.n	800c622 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	1c59      	adds	r1, r3, #1
 800c612:	61f9      	str	r1, [r7, #28]
 800c614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	09db      	lsrs	r3, r3, #7
 800c620:	61bb      	str	r3, [r7, #24]
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	2b7f      	cmp	r3, #127	; 0x7f
 800c626:	d8f0      	bhi.n	800c60a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	61fa      	str	r2, [r7, #28]
 800c62e:	69ba      	ldr	r2, [r7, #24]
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c638:	2207      	movs	r2, #7
 800c63a:	68f9      	ldr	r1, [r7, #12]
 800c63c:	6938      	ldr	r0, [r7, #16]
 800c63e:	f7ff f8a1 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	f383 8811 	msr	BASEPRI, r3
}
 800c648:	bf00      	nop
 800c64a:	3728      	adds	r7, #40	; 0x28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20007380 	.word	0x20007380
 800c654:	20007350 	.word	0x20007350

0800c658 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c660:	4b05      	ldr	r3, [pc, #20]	; (800c678 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	089b      	lsrs	r3, r3, #2
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	20007350 	.word	0x20007350

0800c67c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08c      	sub	sp, #48	; 0x30
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c686:	4b3b      	ldr	r3, [pc, #236]	; (800c774 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d06d      	beq.n	800c76a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c68e:	4b39      	ldr	r3, [pc, #228]	; (800c774 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c694:	2300      	movs	r3, #0
 800c696:	62bb      	str	r3, [r7, #40]	; 0x28
 800c698:	e008      	b.n	800c6ac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d007      	beq.n	800c6b6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d3f2      	bcc.n	800c69a <SEGGER_SYSVIEW_SendModule+0x1e>
 800c6b4:	e000      	b.n	800c6b8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c6b6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d055      	beq.n	800c76a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c6be:	f3ef 8311 	mrs	r3, BASEPRI
 800c6c2:	f04f 0120 	mov.w	r1, #32
 800c6c6:	f381 8811 	msr	BASEPRI, r1
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	482a      	ldr	r0, [pc, #168]	; (800c778 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c6ce:	f7fe ff80 	bl	800b5d2 <_PreparePacket>
 800c6d2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	627b      	str	r3, [r7, #36]	; 0x24
 800c6dc:	79fb      	ldrb	r3, [r7, #7]
 800c6de:	623b      	str	r3, [r7, #32]
 800c6e0:	e00b      	b.n	800c6fa <SEGGER_SYSVIEW_SendModule+0x7e>
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	1c59      	adds	r1, r3, #1
 800c6ea:	6279      	str	r1, [r7, #36]	; 0x24
 800c6ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6f0:	b2d2      	uxtb	r2, r2
 800c6f2:	701a      	strb	r2, [r3, #0]
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	09db      	lsrs	r3, r3, #7
 800c6f8:	623b      	str	r3, [r7, #32]
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c6fe:	d8f0      	bhi.n	800c6e2 <SEGGER_SYSVIEW_SendModule+0x66>
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	627a      	str	r2, [r7, #36]	; 0x24
 800c706:	6a3a      	ldr	r2, [r7, #32]
 800c708:	b2d2      	uxtb	r2, r2
 800c70a:	701a      	strb	r2, [r3, #0]
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	61bb      	str	r3, [r7, #24]
 800c71a:	e00b      	b.n	800c734 <SEGGER_SYSVIEW_SendModule+0xb8>
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	1c59      	adds	r1, r3, #1
 800c724:	61f9      	str	r1, [r7, #28]
 800c726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	09db      	lsrs	r3, r3, #7
 800c732:	61bb      	str	r3, [r7, #24]
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	2b7f      	cmp	r3, #127	; 0x7f
 800c738:	d8f0      	bhi.n	800c71c <SEGGER_SYSVIEW_SendModule+0xa0>
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	1c5a      	adds	r2, r3, #1
 800c73e:	61fa      	str	r2, [r7, #28]
 800c740:	69ba      	ldr	r2, [r7, #24]
 800c742:	b2d2      	uxtb	r2, r2
 800c744:	701a      	strb	r2, [r3, #0]
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2280      	movs	r2, #128	; 0x80
 800c750:	4619      	mov	r1, r3
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7fe fef0 	bl	800b538 <_EncodeStr>
 800c758:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c75a:	2216      	movs	r2, #22
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	6938      	ldr	r0, [r7, #16]
 800c760:	f7ff f810 	bl	800b784 <_SendPacket>
      RECORD_END();
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c76a:	bf00      	nop
 800c76c:	3730      	adds	r7, #48	; 0x30
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20007378 	.word	0x20007378
 800c778:	20007380 	.word	0x20007380

0800c77c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c782:	4b0c      	ldr	r3, [pc, #48]	; (800c7b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00f      	beq.n	800c7aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c78a:	4b0a      	ldr	r3, [pc, #40]	; (800c7b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f2      	bne.n	800c790 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20007378 	.word	0x20007378

0800c7b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c7be:	f3ef 8311 	mrs	r3, BASEPRI
 800c7c2:	f04f 0120 	mov.w	r1, #32
 800c7c6:	f381 8811 	msr	BASEPRI, r1
 800c7ca:	60fb      	str	r3, [r7, #12]
 800c7cc:	4817      	ldr	r0, [pc, #92]	; (800c82c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c7ce:	f7fe ff00 	bl	800b5d2 <_PreparePacket>
 800c7d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	617b      	str	r3, [r7, #20]
 800c7dc:	4b14      	ldr	r3, [pc, #80]	; (800c830 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	e00b      	b.n	800c7fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	1c59      	adds	r1, r3, #1
 800c7ec:	6179      	str	r1, [r7, #20]
 800c7ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	701a      	strb	r2, [r3, #0]
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	09db      	lsrs	r3, r3, #7
 800c7fa:	613b      	str	r3, [r7, #16]
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c800:	d8f0      	bhi.n	800c7e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	1c5a      	adds	r2, r3, #1
 800c806:	617a      	str	r2, [r7, #20]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	b2d2      	uxtb	r2, r2
 800c80c:	701a      	strb	r2, [r3, #0]
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c812:	221b      	movs	r2, #27
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	68b8      	ldr	r0, [r7, #8]
 800c818:	f7fe ffb4 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f383 8811 	msr	BASEPRI, r3
}
 800c822:	bf00      	nop
 800c824:	3718      	adds	r7, #24
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	20007380 	.word	0x20007380
 800c830:	2000737c 	.word	0x2000737c

0800c834 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c834:	b580      	push	{r7, lr}
 800c836:	b08a      	sub	sp, #40	; 0x28
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c83c:	f3ef 8311 	mrs	r3, BASEPRI
 800c840:	f04f 0120 	mov.w	r1, #32
 800c844:	f381 8811 	msr	BASEPRI, r1
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	4827      	ldr	r0, [pc, #156]	; (800c8e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c84c:	f7fe fec1 	bl	800b5d2 <_PreparePacket>
 800c850:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c852:	2280      	movs	r2, #128	; 0x80
 800c854:	6879      	ldr	r1, [r7, #4]
 800c856:	6938      	ldr	r0, [r7, #16]
 800c858:	f7fe fe6e 	bl	800b538 <_EncodeStr>
 800c85c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
 800c862:	2301      	movs	r3, #1
 800c864:	623b      	str	r3, [r7, #32]
 800c866:	e00b      	b.n	800c880 <SEGGER_SYSVIEW_Warn+0x4c>
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	1c59      	adds	r1, r3, #1
 800c870:	6279      	str	r1, [r7, #36]	; 0x24
 800c872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	6a3b      	ldr	r3, [r7, #32]
 800c87c:	09db      	lsrs	r3, r3, #7
 800c87e:	623b      	str	r3, [r7, #32]
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	2b7f      	cmp	r3, #127	; 0x7f
 800c884:	d8f0      	bhi.n	800c868 <SEGGER_SYSVIEW_Warn+0x34>
 800c886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	627a      	str	r2, [r7, #36]	; 0x24
 800c88c:	6a3a      	ldr	r2, [r7, #32]
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	701a      	strb	r2, [r3, #0]
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	61fb      	str	r3, [r7, #28]
 800c89a:	2300      	movs	r3, #0
 800c89c:	61bb      	str	r3, [r7, #24]
 800c89e:	e00b      	b.n	800c8b8 <SEGGER_SYSVIEW_Warn+0x84>
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	1c59      	adds	r1, r3, #1
 800c8a8:	61f9      	str	r1, [r7, #28]
 800c8aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	09db      	lsrs	r3, r3, #7
 800c8b6:	61bb      	str	r3, [r7, #24]
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c8bc:	d8f0      	bhi.n	800c8a0 <SEGGER_SYSVIEW_Warn+0x6c>
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	61fa      	str	r2, [r7, #28]
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	b2d2      	uxtb	r2, r2
 800c8c8:	701a      	strb	r2, [r3, #0]
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c8ce:	221a      	movs	r2, #26
 800c8d0:	68f9      	ldr	r1, [r7, #12]
 800c8d2:	6938      	ldr	r0, [r7, #16]
 800c8d4:	f7fe ff56 	bl	800b784 <_SendPacket>
  RECORD_END();
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f383 8811 	msr	BASEPRI, r3
}
 800c8de:	bf00      	nop
 800c8e0:	3728      	adds	r7, #40	; 0x28
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20007380 	.word	0x20007380

0800c8ec <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800c8f0:	f003 ff58 	bl	80107a4 <touchgfx_init>
}
 800c8f4:	bf00      	nop
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800c900:	f003 ff7a 	bl	80107f8 <touchgfx_taskEntry>
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
    {
 800c914:	4a04      	ldr	r2, [pc, #16]	; (800c928 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	601a      	str	r2, [r3, #0]
    }
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr
 800c928:	0801ee94 	.word	0x0801ee94

0800c92c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
    }
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff ffe9 	bl	800c90c <_ZN8touchgfx12FontProviderD1Ev>
 800c93a:	2104      	movs	r1, #4
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f010 fecb 	bl	801d6d8 <_ZdlPvj>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4618      	mov	r0, r3
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800c958:	887b      	ldrh	r3, [r7, #2]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d008      	beq.n	800c970 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d00b      	beq.n	800c97a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10e      	bne.n	800c984 <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c966:	f001 fff9 	bl	800e95c <_ZN17TypedTextDatabase8getFontsEv>
 800c96a:	4603      	mov	r3, r0
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	e00a      	b.n	800c986 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c970:	f001 fff4 	bl	800e95c <_ZN17TypedTextDatabase8getFontsEv>
 800c974:	4603      	mov	r3, r0
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	e005      	b.n	800c986 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c97a:	f001 ffef 	bl	800e95c <_ZN17TypedTextDatabase8getFontsEv>
 800c97e:	4603      	mov	r3, r0
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	e000      	b.n	800c986 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800c984:	2300      	movs	r3, #0
    }
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
	...

0800c990 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	4a05      	ldr	r2, [pc, #20]	; (800c9b0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7ff ffb3 	bl	800c90c <_ZN8touchgfx12FontProviderD1Ev>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	0801ee80 	.word	0x0801ee80

0800c9b4 <_ZN23ApplicationFontProviderD0Ev>:
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff ffe7 	bl	800c990 <_ZN23ApplicationFontProviderD1Ev>
 800c9c2:	2104      	movs	r1, #4
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f010 fe87 	bl	801d6d8 <_ZdlPvj>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
    {
 800c9dc:	4a04      	ldr	r2, [pc, #16]	; (800c9f0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	601a      	str	r2, [r3, #0]
    }
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	0801f2e8 	.word	0x0801f2e8

0800c9f4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
    }
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7ff ffe9 	bl	800c9d4 <_ZN8touchgfx4FontD1Ev>
 800ca02:	2110      	movs	r1, #16
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f010 fe67 	bl	801d6d8 <_ZdlPvj>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800ca14:	b590      	push	{r4, r7, lr}
 800ca16:	b087      	sub	sp, #28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800ca20:	887b      	ldrh	r3, [r7, #2]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	e010      	b.n	800ca4c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3308      	adds	r3, #8
 800ca38:	681c      	ldr	r4, [r3, #0]
 800ca3a:	f107 030f 	add.w	r3, r7, #15
 800ca3e:	f107 0210 	add.w	r2, r7, #16
 800ca42:	8879      	ldrh	r1, [r7, #2]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	47a0      	blx	r4
 800ca48:	6178      	str	r0, [r7, #20]
        return glyph;
 800ca4a:	697b      	ldr	r3, [r7, #20]
    }
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd90      	pop	{r4, r7, pc}

0800ca54 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	895b      	ldrh	r3, [r3, #10]
    }
 800ca60:	4618      	mov	r0, r3
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	899b      	ldrh	r3, [r3, #12]
    }
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	889b      	ldrh	r3, [r3, #4]
    }
 800ca90:	4618      	mov	r0, r3
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	889a      	ldrh	r2, [r3, #4]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	799b      	ldrb	r3, [r3, #6]
 800caac:	b29b      	uxth	r3, r3
 800caae:	4413      	add	r3, r2
 800cab0:	b29b      	uxth	r3, r3
    }
 800cab2:	4618      	mov	r0, r3
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800cabe:	b480      	push	{r7}
 800cac0:	b083      	sub	sp, #12
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	79db      	ldrb	r3, [r3, #7]
 800caca:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800cace:	b2db      	uxtb	r3, r3
    }
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	79db      	ldrb	r3, [r3, #7]
 800cae8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800caec:	b2db      	uxtb	r3, r3
    }
 800caee:	4618      	mov	r0, r3
 800caf0:	370c      	adds	r7, #12
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
	...

0800cafc <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	4a05      	ldr	r2, [pc, #20]	; (800cb1c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff ff61 	bl	800c9d4 <_ZN8touchgfx4FontD1Ev>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	08020abc 	.word	0x08020abc

0800cb20 <_ZN8touchgfx9ConstFontD0Ev>:
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff ffe7 	bl	800cafc <_ZN8touchgfx9ConstFontD1Ev>
 800cb2e:	2118      	movs	r1, #24
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f010 fdd1 	bl	801d6d8 <_ZdlPvj>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	4a05      	ldr	r2, [pc, #20]	; (800cb60 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff ffd3 	bl	800cafc <_ZN8touchgfx9ConstFontD1Ev>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	0801eeb8 	.word	0x0801eeb8

0800cb64 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff ffe7 	bl	800cb40 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cb72:	2124      	movs	r1, #36	; 0x24
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f010 fdaf 	bl	801d6d8 <_ZdlPvj>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
    {
 800cb8c:	4a04      	ldr	r2, [pc, #16]	; (800cba0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	601a      	str	r2, [r3, #0]
    }
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	0801eea8 	.word	0x0801eea8

0800cba4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
    }
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff ffe9 	bl	800cb84 <_ZN8touchgfx9TypedTextD1Ev>
 800cbb2:	2108      	movs	r1, #8
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f010 fd8f 	bl	801d6d8 <_ZdlPvj>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a1b      	ldr	r3, [r3, #32]
    }
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08c      	sub	sp, #48	; 0x30
 800cbe0:	af08      	add	r7, sp, #32
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	461a      	mov	r2, r3
 800cbea:	460b      	mov	r3, r1
 800cbec:	80fb      	strh	r3, [r7, #6]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	88b9      	ldrh	r1, [r7, #4]
 800cbf6:	88fa      	ldrh	r2, [r7, #6]
 800cbf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cbfa:	9306      	str	r3, [sp, #24]
 800cbfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cbfe:	9305      	str	r3, [sp, #20]
 800cc00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc04:	9304      	str	r3, [sp, #16]
 800cc06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cc0a:	9303      	str	r3, [sp, #12]
 800cc0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc10:	9302      	str	r3, [sp, #8]
 800cc12:	7f3b      	ldrb	r3, [r7, #28]
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	7e3b      	ldrb	r3, [r7, #24]
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	68b9      	ldr	r1, [r7, #8]
 800cc1e:	f007 f8f3 	bl	8013e08 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800cc22:	4a08      	ldr	r2, [pc, #32]	; (800cc44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc2c:	619a      	str	r2, [r3, #24]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc32:	61da      	str	r2, [r3, #28]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc38:	621a      	str	r2, [r3, #32]
{
}
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	0801eeb8 	.word	0x0801eeb8

0800cc48 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	889b      	ldrh	r3, [r3, #4]
 800cc5c:	0adb      	lsrs	r3, r3, #11
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	4413      	add	r3, r2
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4413      	add	r3, r2
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b089      	sub	sp, #36	; 0x24
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	60f8      	str	r0, [r7, #12]
 800cc82:	460b      	mov	r3, r1
 800cc84:	607a      	str	r2, [r7, #4]
 800cc86:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	7b1b      	ldrb	r3, [r3, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e030      	b.n	800ccfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	69da      	ldr	r2, [r3, #28]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	7b5b      	ldrb	r3, [r3, #13]
 800cca6:	021b      	lsls	r3, r3, #8
 800cca8:	b21b      	sxth	r3, r3
 800ccaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccae:	b219      	sxth	r1, r3
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	7adb      	ldrb	r3, [r3, #11]
 800ccb4:	b21b      	sxth	r3, r3
 800ccb6:	430b      	orrs	r3, r1
 800ccb8:	b21b      	sxth	r3, r3
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	7b1b      	ldrb	r3, [r3, #12]
 800ccc6:	837b      	strh	r3, [r7, #26]
 800ccc8:	8b7b      	ldrh	r3, [r7, #26]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d015      	beq.n	800ccfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	897a      	ldrh	r2, [r7, #10]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d103      	bne.n	800cce0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ccde:	e00d      	b.n	800ccfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	897a      	ldrh	r2, [r7, #10]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d306      	bcc.n	800ccf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800ccea:	8b7b      	ldrh	r3, [r7, #26]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	837b      	strh	r3, [r7, #26]
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	61fb      	str	r3, [r7, #28]
 800ccf6:	e7e7      	b.n	800ccc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800ccf8:	bf00      	nop
        }
    }
    return 0;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3724      	adds	r7, #36	; 0x24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	4801      	ldr	r0, [pc, #4]	; (800cd14 <__tcf_0+0xc>)
 800cd0e:	f7ff ff17 	bl	800cb40 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20007464 	.word	0x20007464

0800cd18 <_Z23getFont_verdana_10_4bppv>:
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08a      	sub	sp, #40	; 0x28
 800cd1c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800cd1e:	4b15      	ldr	r3, [pc, #84]	; (800cd74 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d11f      	bne.n	800cd6a <_Z23getFont_verdana_10_4bppv+0x52>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9308      	str	r3, [sp, #32]
 800cd32:	233f      	movs	r3, #63	; 0x3f
 800cd34:	9307      	str	r3, [sp, #28]
 800cd36:	4b10      	ldr	r3, [pc, #64]	; (800cd78 <_Z23getFont_verdana_10_4bppv+0x60>)
 800cd38:	9306      	str	r3, [sp, #24]
 800cd3a:	4b10      	ldr	r3, [pc, #64]	; (800cd7c <_Z23getFont_verdana_10_4bppv+0x64>)
 800cd3c:	9305      	str	r3, [sp, #20]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	9304      	str	r3, [sp, #16]
 800cd42:	2300      	movs	r3, #0
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	2301      	movs	r3, #1
 800cd48:	9302      	str	r3, [sp, #8]
 800cd4a:	2304      	movs	r3, #4
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	230a      	movs	r3, #10
 800cd54:	2201      	movs	r2, #1
 800cd56:	490a      	ldr	r1, [pc, #40]	; (800cd80 <_Z23getFont_verdana_10_4bppv+0x68>)
 800cd58:	480a      	ldr	r0, [pc, #40]	; (800cd84 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800cd5a:	f7ff ff3f 	bl	800cbdc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800cd5e:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	4808      	ldr	r0, [pc, #32]	; (800cd88 <_Z23getFont_verdana_10_4bppv+0x70>)
 800cd66:	f010 fd01 	bl	801d76c <atexit>
    return verdana_10_4bpp;
 800cd6a:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20007488 	.word	0x20007488
 800cd78:	0802224c 	.word	0x0802224c
 800cd7c:	0801ef04 	.word	0x0801ef04
 800cd80:	08022264 	.word	0x08022264
 800cd84:	20007464 	.word	0x20007464
 800cd88:	0800cd09 	.word	0x0800cd09

0800cd8c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	4801      	ldr	r0, [pc, #4]	; (800cd98 <__tcf_0+0xc>)
 800cd92:	f7ff fed5 	bl	800cb40 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	2000748c 	.word	0x2000748c

0800cd9c <_Z23getFont_verdana_20_4bppv>:
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b08a      	sub	sp, #40	; 0x28
 800cda0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800cda2:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f003 0301 	and.w	r3, r3, #1
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d11f      	bne.n	800cdee <_Z23getFont_verdana_20_4bppv+0x52>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	9308      	str	r3, [sp, #32]
 800cdb6:	233f      	movs	r3, #63	; 0x3f
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	4b10      	ldr	r3, [pc, #64]	; (800cdfc <_Z23getFont_verdana_20_4bppv+0x60>)
 800cdbc:	9306      	str	r3, [sp, #24]
 800cdbe:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <_Z23getFont_verdana_20_4bppv+0x64>)
 800cdc0:	9305      	str	r3, [sp, #20]
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9303      	str	r3, [sp, #12]
 800cdca:	2301      	movs	r3, #1
 800cdcc:	9302      	str	r3, [sp, #8]
 800cdce:	2304      	movs	r3, #4
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	2314      	movs	r3, #20
 800cdd8:	2208      	movs	r2, #8
 800cdda:	490a      	ldr	r1, [pc, #40]	; (800ce04 <_Z23getFont_verdana_20_4bppv+0x68>)
 800cddc:	480a      	ldr	r0, [pc, #40]	; (800ce08 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800cdde:	f7ff fefd 	bl	800cbdc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800cde2:	4b05      	ldr	r3, [pc, #20]	; (800cdf8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800cde4:	2201      	movs	r2, #1
 800cde6:	601a      	str	r2, [r3, #0]
 800cde8:	4808      	ldr	r0, [pc, #32]	; (800ce0c <_Z23getFont_verdana_20_4bppv+0x70>)
 800cdea:	f010 fcbf 	bl	801d76c <atexit>
    return verdana_20_4bpp;
 800cdee:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	200074b0 	.word	0x200074b0
 800cdfc:	08022250 	.word	0x08022250
 800ce00:	0801ef08 	.word	0x0801ef08
 800ce04:	08022274 	.word	0x08022274
 800ce08:	2000748c 	.word	0x2000748c
 800ce0c:	0800cd8d 	.word	0x0800cd8d

0800ce10 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	4801      	ldr	r0, [pc, #4]	; (800ce1c <__tcf_0+0xc>)
 800ce16:	f7ff fe93 	bl	800cb40 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	200074b4 	.word	0x200074b4

0800ce20 <_Z23getFont_verdana_40_4bppv>:
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08a      	sub	sp, #40	; 0x28
 800ce24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800ce26:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <_Z23getFont_verdana_40_4bppv+0x5c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d11f      	bne.n	800ce72 <_Z23getFont_verdana_40_4bppv+0x52>
 800ce32:	2300      	movs	r3, #0
 800ce34:	9309      	str	r3, [sp, #36]	; 0x24
 800ce36:	2300      	movs	r3, #0
 800ce38:	9308      	str	r3, [sp, #32]
 800ce3a:	233f      	movs	r3, #63	; 0x3f
 800ce3c:	9307      	str	r3, [sp, #28]
 800ce3e:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <_Z23getFont_verdana_40_4bppv+0x60>)
 800ce40:	9306      	str	r3, [sp, #24]
 800ce42:	4b10      	ldr	r3, [pc, #64]	; (800ce84 <_Z23getFont_verdana_40_4bppv+0x64>)
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	2300      	movs	r3, #0
 800ce48:	9304      	str	r3, [sp, #16]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9303      	str	r3, [sp, #12]
 800ce4e:	2301      	movs	r3, #1
 800ce50:	9302      	str	r3, [sp, #8]
 800ce52:	2304      	movs	r3, #4
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	2300      	movs	r3, #0
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	2328      	movs	r3, #40	; 0x28
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	490a      	ldr	r1, [pc, #40]	; (800ce88 <_Z23getFont_verdana_40_4bppv+0x68>)
 800ce60:	480a      	ldr	r0, [pc, #40]	; (800ce8c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800ce62:	f7ff febb 	bl	800cbdc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ce66:	4b05      	ldr	r3, [pc, #20]	; (800ce7c <_Z23getFont_verdana_40_4bppv+0x5c>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	4808      	ldr	r0, [pc, #32]	; (800ce90 <_Z23getFont_verdana_40_4bppv+0x70>)
 800ce6e:	f010 fc7d 	bl	801d76c <atexit>
    return verdana_40_4bpp;
 800ce72:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200074d8 	.word	0x200074d8
 800ce80:	08022260 	.word	0x08022260
 800ce84:	0801ef0c 	.word	0x0801ef0c
 800ce88:	080222e4 	.word	0x080222e4
 800ce8c:	200074b4 	.word	0x200074b4
 800ce90:	0800ce11 	.word	0x0800ce11

0800ce94 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	4618      	mov	r0, r3
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
    {
    }
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
    {
    }
 800cecc:	bf00      	nop
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
    {
    }
 800cee2:	bf00      	nop
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
    {
    }
 800cefa:	bf00      	nop
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
    {
    }
 800cf0e:	bf00      	nop
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800cf1a:	b480      	push	{r7}
 800cf1c:	b083      	sub	sp, #12
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
    {
    }
 800cf22:	bf00      	nop
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
	...

0800cf30 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
    {
 800cf38:	4a04      	ldr	r2, [pc, #16]	; (800cf4c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
    }
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	0801f010 	.word	0x0801f010

0800cf50 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
    }
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff ffe9 	bl	800cf30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800cf5e:	2104      	movs	r1, #4
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f010 fbb9 	bl	801d6d8 <_ZdlPvj>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800cf78:	4a07      	ldr	r2, [pc, #28]	; (800cf98 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	605a      	str	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	721a      	strb	r2, [r3, #8]
    {
    }
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	0801eff0 	.word	0x0801eff0

0800cf9c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
    {
 800cfa4:	4a04      	ldr	r2, [pc, #16]	; (800cfb8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	601a      	str	r2, [r3, #0]
    }
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	0801eff0 	.word	0x0801eff0

0800cfbc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
    }
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff ffe9 	bl	800cf9c <_ZN8touchgfx10TransitionD1Ev>
 800cfca:	210c      	movs	r1, #12
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f010 fb83 	bl	801d6d8 <_ZdlPvj>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
    {
    }
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
    {
    }
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
    {
    }
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	605a      	str	r2, [r3, #4]
    }
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	683a      	ldr	r2, [r7, #0]
 800d05a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d05e:	6810      	ldr	r0, [r2, #0]
 800d060:	6851      	ldr	r1, [r2, #4]
 800d062:	c303      	stmia	r3!, {r0, r1}
    };
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
    {
 800d078:	4a04      	ldr	r2, [pc, #16]	; (800d08c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	601a      	str	r2, [r3, #0]
    }
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4618      	mov	r0, r3
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	0801efd8 	.word	0x0801efd8

0800d090 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
    }
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff ffe9 	bl	800d070 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d09e:	2104      	movs	r1, #4
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f010 fb19 	bl	801d6d8 <_ZdlPvj>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
    {
        return instance;
 800d0b4:	4b03      	ldr	r3, [pc, #12]	; (800d0c4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
    }
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	200084ec 	.word	0x200084ec

0800d0c8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d0c8:	b480      	push	{r7}
 800d0ca:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d0cc:	4b0b      	ldr	r3, [pc, #44]	; (800d0fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d008      	beq.n	800d0ea <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d0d8:	4b08      	ldr	r3, [pc, #32]	; (800d0fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d003      	beq.n	800d0ea <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d0e2:	4b06      	ldr	r3, [pc, #24]	; (800d0fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0e8:	e002      	b.n	800d0f0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800d0ea:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	689b      	ldr	r3, [r3, #8]
        }
    }
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	200084ec 	.word	0x200084ec

0800d100 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	4a05      	ldr	r2, [pc, #20]	; (800d120 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4618      	mov	r0, r3
 800d112:	f7ff ff0d 	bl	800cf30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4618      	mov	r0, r3
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	08020964 	.word	0x08020964

0800d124 <_ZN8touchgfx11ApplicationD0Ev>:
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff ffe7 	bl	800d100 <_ZN8touchgfx11ApplicationD1Ev>
 800d132:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f010 face 	bl	801d6d8 <_ZdlPvj>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4618      	mov	r0, r3
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
	...

0800d148 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4618      	mov	r0, r3
 800d154:	f006 f9b4 	bl	80134c0 <_ZN8touchgfx11ApplicationC1Ev>
 800d158:	4a09      	ldr	r2, [pc, #36]	; (800d180 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4a04      	ldr	r2, [pc, #16]	; (800d184 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d172:	6013      	str	r3, [r2, #0]
    }
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4618      	mov	r0, r3
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	0801ef94 	.word	0x0801ef94
 800d184:	20008558 	.word	0x20008558

0800d188 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f804 	bl	800d19e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b082      	sub	sp, #8
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00f      	beq.n	800d1d0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	330c      	adds	r3, #12
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4610      	mov	r0, r2
 800d1c4:	4798      	blx	r3
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d001      	beq.n	800d1d0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e000      	b.n	800d1d2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00e      	beq.n	800d1f4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	601a      	str	r2, [r3, #0]
    }
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	4a05      	ldr	r2, [pc, #20]	; (800d238 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4618      	mov	r0, r3
 800d22a:	f7ff ff69 	bl	800d100 <_ZN8touchgfx11ApplicationD1Ev>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	0801ef94 	.word	0x0801ef94

0800d23c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff ffe7 	bl	800d218 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d24a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f010 fa42 	bl	801d6d8 <_ZdlPvj>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
	...

0800d260 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	4a08      	ldr	r2, [pc, #32]	; (800d28c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d274:	4618      	mov	r0, r3
 800d276:	f000 facd 	bl	800d814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff ffcb 	bl	800d218 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	0801ef38 	.word	0x0801ef38

0800d290 <_ZN23FrontendApplicationBaseD0Ev>:
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ffe1 	bl	800d260 <_ZN23FrontendApplicationBaseD1Ev>
 800d29e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f010 fa18 	bl	801d6d8 <_ZdlPvj>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	721a      	strb	r2, [r3, #8]
    }
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	605a      	str	r2, [r3, #4]
    }
 800d2dc:	bf00      	nop
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff ff26 	bl	800d148 <_ZN8touchgfx14MVPApplicationC1Ev>
 800d2fc:	4a13      	ldr	r2, [pc, #76]	; (800d34c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 f89f 	bl	800d44c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800d31e:	f7ff fec7 	bl	800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800d322:	4602      	mov	r2, r0
 800d324:	6813      	ldr	r3, [r2, #0]
 800d326:	3308      	adds	r3, #8
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2100      	movs	r1, #0
 800d32c:	4610      	mov	r0, r2
 800d32e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800d330:	2000      	movs	r0, #0
 800d332:	f001 fa9b 	bl	800e86c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800d336:	f7ff fec7 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 800d33a:	4603      	mov	r3, r0
 800d33c:	4618      	mov	r0, r3
 800d33e:	f00b fac6 	bl	80188ce <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	0801ef38 	.word	0x0801ef38

0800d350 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4618      	mov	r0, r3
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	683a      	ldr	r2, [r7, #0]
 800d376:	4611      	mov	r1, r2
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff ffe9 	bl	800d350 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	605a      	str	r2, [r3, #4]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	3308      	adds	r3, #8
 800d38c:	3208      	adds	r2, #8
 800d38e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d392:	e883 0003 	stmia.w	r3, {r0, r1}
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800d3a0:	b590      	push	{r4, r7, lr}
 800d3a2:	b089      	sub	sp, #36	; 0x24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800d3ae:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800d3b0:	61bb      	str	r3, [r7, #24]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	61fb      	str	r3, [r7, #28]
 800d3b6:	f107 0008 	add.w	r0, r7, #8
 800d3ba:	f107 0318 	add.w	r3, r7, #24
 800d3be:	cb0c      	ldmia	r3, {r2, r3}
 800d3c0:	6879      	ldr	r1, [r7, #4]
 800d3c2:	f000 f85f 	bl	800d484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800d3c6:	f107 0308 	add.w	r3, r7, #8
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f7ff ffcb 	bl	800d368 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800d3d2:	f107 0308 	add.w	r3, r7, #8
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fa1c 	bl	800d814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800d3e8:	bf00      	nop
 800d3ea:	3724      	adds	r7, #36	; 0x24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd90      	pop	{r4, r7, pc}
 800d3f0:	0800d3f5 	.word	0x0800d3f5

0800d3f4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d408:	461a      	mov	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	4b04      	ldr	r3, [pc, #16]	; (800d424 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800d414:	4804      	ldr	r0, [pc, #16]	; (800d428 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800d416:	f000 f867 	bl	800d4e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800d41a:	bf00      	nop
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	2000854c 	.word	0x2000854c
 800d428:	20008548 	.word	0x20008548

0800d42c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	4a04      	ldr	r2, [pc, #16]	; (800d448 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4618      	mov	r0, r3
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr
 800d448:	0801efd8 	.word	0x0801efd8

0800d44c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff ffe8 	bl	800d42c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d45c:	4a08      	ldr	r2, [pc, #32]	; (800d480 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	605a      	str	r2, [r3, #4]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	609a      	str	r2, [r3, #8]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	60da      	str	r2, [r3, #12]
    {
    }
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	0801ef7c 	.word	0x0801ef7c

0800d484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4639      	mov	r1, r7
 800d490:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff ffc8 	bl	800d42c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d49c:	4a08      	ldr	r2, [pc, #32]	; (800d4c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	68ba      	ldr	r2, [r7, #8]
 800d4a6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	463a      	mov	r2, r7
 800d4ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	0801ef7c 	.word	0x0801ef7c

0800d4c4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff fd4e 	bl	800cf70 <_ZN8touchgfx10TransitionC1Ev>
 800d4d4:	4a03      	ldr	r2, [pc, #12]	; (800d4e4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	0801ef18 	.word	0x0801ef18

0800d4e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d4e8:	b590      	push	{r4, r7, lr}
 800d4ea:	b08f      	sub	sp, #60	; 0x3c
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	689a      	ldr	r2, [r3, #8]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3320      	adds	r3, #32
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4610      	mov	r0, r2
 800d506:	4798      	blx	r3
 800d508:	4603      	mov	r3, r0
 800d50a:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800d50e:	d205      	bcs.n	800d51c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d510:	4b86      	ldr	r3, [pc, #536]	; (800d72c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d512:	4a87      	ldr	r2, [pc, #540]	; (800d730 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d514:	21a7      	movs	r1, #167	; 0xa7
 800d516:	4887      	ldr	r0, [pc, #540]	; (800d734 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d518:	f010 f90a 	bl	801d730 <__assert_func>
 800d51c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3320      	adds	r3, #32
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4610      	mov	r0, r2
 800d52e:	4798      	blx	r3
 800d530:	4603      	mov	r3, r0
 800d532:	2b0f      	cmp	r3, #15
 800d534:	d805      	bhi.n	800d542 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d536:	4b80      	ldr	r3, [pc, #512]	; (800d738 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d538:	4a7d      	ldr	r2, [pc, #500]	; (800d730 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d53a:	21a8      	movs	r1, #168	; 0xa8
 800d53c:	487d      	ldr	r0, [pc, #500]	; (800d734 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d53e:	f010 f8f7 	bl	801d730 <__assert_func>
 800d542:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3320      	adds	r3, #32
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4610      	mov	r0, r2
 800d554:	4798      	blx	r3
 800d556:	4603      	mov	r3, r0
 800d558:	2b0b      	cmp	r3, #11
 800d55a:	d805      	bhi.n	800d568 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d55c:	4b77      	ldr	r3, [pc, #476]	; (800d73c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d55e:	4a74      	ldr	r2, [pc, #464]	; (800d730 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d560:	21a9      	movs	r1, #169	; 0xa9
 800d562:	4874      	ldr	r0, [pc, #464]	; (800d734 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d564:	f010 f8e4 	bl	801d730 <__assert_func>
 800d568:	bf00      	nop
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	627b      	str	r3, [r7, #36]	; 0x24
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d576:	f005 ff83 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 800d57a:	4603      	mov	r3, r0
 800d57c:	4618      	mov	r0, r3
 800d57e:	f005 ff85 	bl	801348c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d008      	beq.n	800d59c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	330c      	adds	r3, #12
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4610      	mov	r0, r2
 800d59a:	4798      	blx	r3
    if (*currentTrans)
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d007      	beq.n	800d5b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4798      	blx	r3
    if (*currentScreen)
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d008      	beq.n	800d5ce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3314      	adds	r3, #20
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4798      	blx	r3
    if (*currentPresenter)
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d008      	beq.n	800d5e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4798      	blx	r3
    if (*currentScreen)
 800d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d007      	beq.n	800d600 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	4798      	blx	r3
    if (*currentPresenter)
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d008      	beq.n	800d61a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3308      	adds	r3, #8
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4610      	mov	r0, r2
 800d618:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	2100      	movs	r1, #0
 800d620:	4618      	mov	r0, r3
 800d622:	f000 f88d 	bl	800d740 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d626:	4603      	mov	r3, r0
 800d628:	4619      	mov	r1, r3
 800d62a:	200c      	movs	r0, #12
 800d62c:	f7ff fc32 	bl	800ce94 <_ZnwjPv>
 800d630:	4604      	mov	r4, r0
 800d632:	2c00      	cmp	r4, #0
 800d634:	d004      	beq.n	800d640 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff ff44 	bl	800d4c4 <_ZN8touchgfx12NoTransitionC1Ev>
 800d63c:	4623      	mov	r3, r4
 800d63e:	e000      	b.n	800d642 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d640:	4623      	mov	r3, r4
 800d642:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	2100      	movs	r1, #0
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 f88b 	bl	800d766 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d650:	4603      	mov	r3, r0
 800d652:	4619      	mov	r1, r3
 800d654:	f44f 7090 	mov.w	r0, #288	; 0x120
 800d658:	f7ff fc1c 	bl	800ce94 <_ZnwjPv>
 800d65c:	4604      	mov	r4, r0
 800d65e:	2c00      	cmp	r4, #0
 800d660:	d004      	beq.n	800d66c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d662:	4620      	mov	r0, r4
 800d664:	f001 fb16 	bl	800ec94 <_ZN10screenViewC1Ev>
 800d668:	4623      	mov	r3, r4
 800d66a:	e000      	b.n	800d66e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d66c:	4623      	mov	r3, r4
 800d66e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	2100      	movs	r1, #0
 800d676:	4618      	mov	r0, r3
 800d678:	f000 f888 	bl	800d78c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d67c:	4603      	mov	r3, r0
 800d67e:	4619      	mov	r1, r3
 800d680:	2010      	movs	r0, #16
 800d682:	f7ff fc07 	bl	800ce94 <_ZnwjPv>
 800d686:	4604      	mov	r4, r0
 800d688:	2c00      	cmp	r4, #0
 800d68a:	d005      	beq.n	800d698 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d68c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d68e:	4620      	mov	r0, r4
 800d690:	f001 faa8 	bl	800ebe4 <_ZN15screenPresenterC1ER10screenView>
 800d694:	4623      	mov	r3, r4
 800d696:	e000      	b.n	800d69a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d698:	4623      	mov	r3, r4
 800d69a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6a0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6a6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ac:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	e000      	b.n	800d6bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d6c0:	f7ff fd9c 	bl	800d1fc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff fdfe 	bl	800d2cc <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 f86c 	bl	800d7b2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	61fb      	str	r3, [r7, #28]
 800d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e0:	61bb      	str	r3, [r7, #24]
 800d6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	330c      	adds	r3, #12
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	69f8      	ldr	r0, [r7, #28]
 800d6f0:	4798      	blx	r3
    newPresenter->activate();
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	69b8      	ldr	r0, [r7, #24]
 800d6fa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d6fc:	6979      	ldr	r1, [r7, #20]
 800d6fe:	69f8      	ldr	r0, [r7, #28]
 800d700:	f006 ff76 	bl	80145f0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3310      	adds	r3, #16
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6978      	ldr	r0, [r7, #20]
 800d70e:	4798      	blx	r3
    Application::getInstance()->draw();
 800d710:	f005 feb6 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 800d714:	4602      	mov	r2, r0
 800d716:	6813      	ldr	r3, [r2, #0]
 800d718:	3330      	adds	r3, #48	; 0x30
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4610      	mov	r0, r2
 800d71e:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d722:	4618      	mov	r0, r3
 800d724:	373c      	adds	r7, #60	; 0x3c
 800d726:	46bd      	mov	sp, r7
 800d728:	bd90      	pop	{r4, r7, pc}
 800d72a:	bf00      	nop
 800d72c:	0801e868 	.word	0x0801e868
 800d730:	0801f030 	.word	0x0801f030
 800d734:	0801e8f8 	.word	0x0801e8f8
 800d738:	0801e93c 	.word	0x0801e93c
 800d73c:	0801e9e0 	.word	0x0801e9e0

0800d740 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	460b      	mov	r3, r1
 800d74a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3324      	adds	r3, #36	; 0x24
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	887a      	ldrh	r2, [r7, #2]
 800d756:	4611      	mov	r1, r2
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	4798      	blx	r3
 800d75c:	4603      	mov	r3, r0
    }
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	460b      	mov	r3, r1
 800d770:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	3324      	adds	r3, #36	; 0x24
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	887a      	ldrh	r2, [r7, #2]
 800d77c:	4611      	mov	r1, r2
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	4798      	blx	r3
 800d782:	4603      	mov	r3, r0
    }
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	460b      	mov	r3, r1
 800d796:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3324      	adds	r3, #36	; 0x24
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	887a      	ldrh	r2, [r7, #2]
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	4798      	blx	r3
 800d7a8:	4603      	mov	r3, r0
    }
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800d7b2:	b480      	push	{r7}
 800d7b4:	b083      	sub	sp, #12
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d7c2:	bf00      	nop
 800d7c4:	370c      	adds	r7, #12
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
	...

0800d7d0 <_ZN8touchgfx12NoTransitionD1Ev>:
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	4a05      	ldr	r2, [pc, #20]	; (800d7f0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff fbdb 	bl	800cf9c <_ZN8touchgfx10TransitionD1Ev>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	0801ef18 	.word	0x0801ef18

0800d7f4 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7ff ffe7 	bl	800d7d0 <_ZN8touchgfx12NoTransitionD1Ev>
 800d802:	210c      	movs	r1, #12
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f00f ff67 	bl	801d6d8 <_ZdlPvj>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4618      	mov	r0, r3
 800d80e:	3708      	adds	r7, #8
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	4a05      	ldr	r2, [pc, #20]	; (800d834 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff fc23 	bl	800d070 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	0801ef7c 	.word	0x0801ef7c

0800d838 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff ffe7 	bl	800d814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d846:	2110      	movs	r1, #16
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f00f ff45 	bl	801d6d8 <_ZdlPvj>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	68d2      	ldr	r2, [r2, #12]
 800d868:	1052      	asrs	r2, r2, #1
 800d86a:	1899      	adds	r1, r3, r2
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	d102      	bne.n	800d87e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	e00a      	b.n	800d894 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	68d2      	ldr	r2, [r2, #12]
 800d886:	1052      	asrs	r2, r2, #1
 800d888:	4413      	add	r3, r2
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	6892      	ldr	r2, [r2, #8]
 800d890:	4413      	add	r3, r2
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4608      	mov	r0, r1
 800d896:	4798      	blx	r3
    }
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d010      	beq.n	800d8d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d107      	bne.n	800d8c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d001      	beq.n	800d8d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e000      	b.n	800d8d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800d8d2:	2300      	movs	r3, #0
    }
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	601a      	str	r2, [r3, #0]
    }
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800d8fe:	b480      	push	{r7}
 800d900:	b083      	sub	sp, #12
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	80da      	strh	r2, [r3, #6]
    }
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	4608      	mov	r0, r1
 800d936:	4611      	mov	r1, r2
 800d938:	461a      	mov	r2, r3
 800d93a:	4603      	mov	r3, r0
 800d93c:	817b      	strh	r3, [r7, #10]
 800d93e:	460b      	mov	r3, r1
 800d940:	813b      	strh	r3, [r7, #8]
 800d942:	4613      	mov	r3, r2
 800d944:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	897a      	ldrh	r2, [r7, #10]
 800d94a:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	893a      	ldrh	r2, [r7, #8]
 800d950:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	88fa      	ldrh	r2, [r7, #6]
 800d956:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	8b3a      	ldrh	r2, [r7, #24]
 800d95c:	80da      	strh	r2, [r3, #6]
    }
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	4618      	mov	r0, r3
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	887a      	ldrh	r2, [r7, #2]
 800d97c:	801a      	strh	r2, [r3, #0]
    {
    }
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af02      	add	r7, sp, #8
 800d992:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800d994:	4a13      	ldr	r2, [pc, #76]	; (800d9e4 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	1d18      	adds	r0, r3, #4
 800d99e:	2300      	movs	r3, #0
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	f7ff ffc0 	bl	800d92c <_ZN8touchgfx4RectC1Essss>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	330c      	adds	r3, #12
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff ffa4 	bl	800d8fe <_ZN8touchgfx4RectC1Ev>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	615a      	str	r2, [r3, #20]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	619a      	str	r2, [r3, #24]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	61da      	str	r2, [r3, #28]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	08020a54 	.word	0x08020a54

0800d9e8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    {
 800d9f0:	4a04      	ldr	r2, [pc, #16]	; (800da04 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	601a      	str	r2, [r3, #0]
    }
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	08020a54 	.word	0x08020a54

0800da08 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
    }
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ffe9 	bl	800d9e8 <_ZN8touchgfx8DrawableD1Ev>
 800da16:	2128      	movs	r1, #40	; 0x28
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f00f fe5d 	bl	801d6d8 <_ZdlPvj>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4618      	mov	r0, r3
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	4608      	mov	r0, r1
 800da32:	4611      	mov	r1, r2
 800da34:	461a      	mov	r2, r3
 800da36:	4603      	mov	r3, r0
 800da38:	817b      	strh	r3, [r7, #10]
 800da3a:	460b      	mov	r3, r1
 800da3c:	813b      	strh	r3, [r7, #8]
 800da3e:	4613      	mov	r3, r2
 800da40:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	3334      	adds	r3, #52	; 0x34
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800da4e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	4798      	blx	r3
        setWidth(width);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3338      	adds	r3, #56	; 0x38
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800da62:	4611      	mov	r1, r2
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	4798      	blx	r3
        setHeight(height);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	333c      	adds	r3, #60	; 0x3c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800da74:	4611      	mov	r1, r2
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	4798      	blx	r3
    }
 800da7a:	bf00      	nop
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800da82:	b480      	push	{r7}
 800da84:	b083      	sub	sp, #12
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	460b      	mov	r3, r1
 800da8c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	887a      	ldrh	r2, [r7, #2]
 800da92:	809a      	strh	r2, [r3, #4]
    }
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	460b      	mov	r3, r1
 800daaa:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	887a      	ldrh	r2, [r7, #2]
 800dab0:	80da      	strh	r2, [r3, #6]
    }
 800dab2:	bf00      	nop
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b082      	sub	sp, #8
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	460b      	mov	r3, r1
 800dac8:	807b      	strh	r3, [r7, #2]
 800daca:	4613      	mov	r3, r2
 800dacc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	332c      	adds	r3, #44	; 0x2c
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dada:	4611      	mov	r1, r2
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	4798      	blx	r3
        setY(y);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3330      	adds	r3, #48	; 0x30
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800daec:	4611      	mov	r1, r2
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	4798      	blx	r3
    }
 800daf2:	bf00      	nop
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	460b      	mov	r3, r1
 800db04:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	887a      	ldrh	r2, [r7, #2]
 800db0a:	811a      	strh	r2, [r3, #8]
    }
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	887a      	ldrh	r2, [r7, #2]
 800db28:	815a      	strh	r2, [r3, #10]
    }
 800db2a:	bf00      	nop
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800db36:	b480      	push	{r7}
 800db38:	b083      	sub	sp, #12
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
    {
    }
 800db3e:	bf00      	nop
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
    {
    }
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
    {
    }
 800db6a:	bf00      	nop
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	6039      	str	r1, [r7, #0]
    {
    }
 800db80:	bf00      	nop
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
    {
    }
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	78fa      	ldrb	r2, [r7, #3]
 800dbb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800dbce:	4618      	mov	r0, r3
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800dbe8:	4618      	mov	r0, r3
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	807b      	strh	r3, [r7, #2]
 800dc00:	4613      	mov	r3, r2
 800dc02:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3354      	adds	r3, #84	; 0x54
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	8879      	ldrh	r1, [r7, #2]
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800dc14:	b292      	uxth	r2, r2
 800dc16:	1a8a      	subs	r2, r1, r2
 800dc18:	b292      	uxth	r2, r2
 800dc1a:	b210      	sxth	r0, r2
 800dc1c:	8839      	ldrh	r1, [r7, #0]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800dc24:	b292      	uxth	r2, r2
 800dc26:	1a8a      	subs	r2, r1, r2
 800dc28:	b292      	uxth	r2, r2
 800dc2a:	b212      	sxth	r2, r2
 800dc2c:	4601      	mov	r1, r0
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	4798      	blx	r3
    }
 800dc32:	bf00      	nop
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800dc3a:	b480      	push	{r7}
 800dc3c:	b083      	sub	sp, #12
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc48:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc50:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc58:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800dc5a:	bf00      	nop
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f7ff ffe1 	bl	800dc3a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	601a      	str	r2, [r3, #0]
    }
 800dc86:	bf00      	nop
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
    {
 800dc98:	4a06      	ldr	r2, [pc, #24]	; (800dcb4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	3304      	adds	r3, #4
 800dca2:	4618      	mov	r0, r3
 800dca4:	f000 fc12 	bl	800e4cc <_ZN8touchgfx9ContainerD1Ev>
    }
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	08020b4c 	.word	0x08020b4c

0800dcb8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
    }
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff ffe5 	bl	800dc90 <_ZN8touchgfx6ScreenD1Ev>
 800dcc6:	213c      	movs	r1, #60	; 0x3c
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f00f fd05 	bl	801d6d8 <_ZdlPvj>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
    {
    }
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    {
    }
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
    {
    }
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
    {
    }
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	460b      	mov	r3, r1
 800dd32:	70fb      	strb	r3, [r7, #3]
    {
    }
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f003 f9d5 	bl	8011100 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800dd56:	bf00      	nop
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b084      	sub	sp, #16
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	60f8      	str	r0, [r7, #12]
 800dd66:	607b      	str	r3, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	817b      	strh	r3, [r7, #10]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7ff ff24 	bl	800dbc0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff ff2a 	bl	800dbda <_ZNK8touchgfx8Drawable11isTouchableEv>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e000      	b.n	800dd92 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800dd90:	2300      	movs	r3, #0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	601a      	str	r2, [r3, #0]
        }
    }
 800dd9c:	bf00      	nop
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff fdec 	bl	800d98c <_ZN8touchgfx8DrawableC1Ev>
 800ddb4:	4a03      	ldr	r2, [pc, #12]	; (800ddc4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	0801f1a4 	.word	0x0801f1a4

0800ddc8 <_ZN8touchgfx6WidgetD1Ev>:
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	4a05      	ldr	r2, [pc, #20]	; (800dde8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff fe05 	bl	800d9e8 <_ZN8touchgfx8DrawableD1Ev>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	0801f1a4 	.word	0x0801f1a4

0800ddec <_ZN8touchgfx6WidgetD0Ev>:
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ffe7 	bl	800ddc8 <_ZN8touchgfx6WidgetD1Ev>
 800ddfa:	2128      	movs	r1, #40	; 0x28
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f00f fc6b 	bl	801d6d8 <_ZdlPvj>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4618      	mov	r0, r3
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	2326      	movs	r3, #38	; 0x26
 800de1a:	461a      	mov	r2, r3
 800de1c:	2100      	movs	r1, #0
 800de1e:	f00f fd1f 	bl	801d860 <memset>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff ffbd 	bl	800dda4 <_ZN8touchgfx6WidgetC1Ev>
 800de2a:	4a0a      	ldr	r2, [pc, #40]	; (800de54 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	601a      	str	r2, [r3, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	629a      	str	r2, [r3, #40]	; 0x28
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2101      	movs	r1, #1
 800de42:	4618      	mov	r0, r3
 800de44:	f7ff feac 	bl	800dba0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4618      	mov	r0, r3
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	080204e4 	.word	0x080204e4

0800de58 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	4a05      	ldr	r2, [pc, #20]	; (800de78 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	601a      	str	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff ffad 	bl	800ddc8 <_ZN8touchgfx6WidgetD1Ev>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	080204e4 	.word	0x080204e4

0800de7c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff ffe7 	bl	800de58 <_ZN8touchgfx14AbstractButtonD1Ev>
 800de8a:	2130      	movs	r1, #48	; 0x30
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f00f fc23 	bl	801d6d8 <_ZdlPvj>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff ffb0 	bl	800de0c <_ZN8touchgfx14AbstractButtonC1Ev>
 800deac:	4a0c      	ldr	r2, [pc, #48]	; (800dee0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	332e      	adds	r3, #46	; 0x2e
 800deb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800deba:	4618      	mov	r0, r3
 800debc:	f7ff fd56 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3330      	adds	r3, #48	; 0x30
 800dec4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dec8:	4618      	mov	r0, r3
 800deca:	f7ff fd4f 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	22ff      	movs	r2, #255	; 0xff
 800ded2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4618      	mov	r0, r3
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	0802068c 	.word	0x0802068c

0800dee4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	2326      	movs	r3, #38	; 0x26
 800def2:	461a      	mov	r2, r3
 800def4:	2100      	movs	r1, #0
 800def6:	f00f fcb3 	bl	801d860 <memset>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff ff51 	bl	800dda4 <_ZN8touchgfx6WidgetC1Ev>
 800df02:	4a0b      	ldr	r2, [pc, #44]	; (800df30 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	22ff      	movs	r2, #255	; 0xff
 800df0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3328      	adds	r3, #40	; 0x28
 800df14:	2100      	movs	r1, #0
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff fce2 	bl	800d8e0 <_ZN8touchgfx9colortypeC1Em>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4618      	mov	r0, r3
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	080205c0 	.word	0x080205c0

0800df34 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 */
class ToggleButton : public Button
{
public:

    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	8812      	ldrh	r2, [r2, #0]
 800df62:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	68b9      	ldr	r1, [r7, #8]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f004 f920 	bl	80121b0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800df70:	bf00      	nop
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	460b      	mov	r3, r1
 800df82:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800df84:	4a06      	ldr	r2, [pc, #24]	; (800dfa0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	887a      	ldrh	r2, [r7, #2]
 800df8e:	809a      	strh	r2, [r3, #4]
    }
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4618      	mov	r0, r3
 800df94:	370c      	adds	r7, #12
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	0801eea8 	.word	0x0801eea8

0800dfa4 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	889a      	ldrh	r2, [r3, #4]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	809a      	strh	r2, [r3, #4]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	3334      	adds	r3, #52	; 0x34
 800dfd2:	6839      	ldr	r1, [r7, #0]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff ffe5 	bl	800dfa4 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f820 	bl	800e020 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800dff8:	bf00      	nop
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800e020:	b590      	push	{r4, r7, lr}
 800e022:	b08b      	sub	sp, #44	; 0x2c
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3334      	adds	r3, #52	; 0x34
 800e02c:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	889b      	ldrh	r3, [r3, #4]
 800e032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e036:	4293      	cmp	r3, r2
 800e038:	bf14      	ite	ne
 800e03a:	2301      	movne	r3, #1
 800e03c:	2300      	moveq	r3, #0
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b00      	cmp	r3, #0
 800e042:	d06f      	beq.n	800e124 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3334      	adds	r3, #52	; 0x34
 800e048:	613b      	str	r3, [r7, #16]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e04e:	4b39      	ldr	r3, [pc, #228]	; (800e134 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d105      	bne.n	800e062 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 800e056:	4b38      	ldr	r3, [pc, #224]	; (800e138 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800e058:	4a38      	ldr	r2, [pc, #224]	; (800e13c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800e05a:	21b1      	movs	r1, #177	; 0xb1
 800e05c:	4838      	ldr	r0, [pc, #224]	; (800e140 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800e05e:	f00f fb67 	bl	801d730 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	889a      	ldrh	r2, [r3, #4]
 800e066:	4b37      	ldr	r3, [pc, #220]	; (800e144 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d305      	bcc.n	800e07a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 800e06e:	4b36      	ldr	r3, [pc, #216]	; (800e148 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800e070:	4a32      	ldr	r2, [pc, #200]	; (800e13c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800e072:	21b2      	movs	r1, #178	; 0xb2
 800e074:	4832      	ldr	r0, [pc, #200]	; (800e140 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800e076:	f00f fb5b 	bl	801d730 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e07a:	4b34      	ldr	r3, [pc, #208]	; (800e14c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	4b2d      	ldr	r3, [pc, #180]	; (800e134 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800e080:	6819      	ldr	r1, [r3, #0]
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	889b      	ldrh	r3, [r3, #4]
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	440b      	add	r3, r1
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3334      	adds	r3, #52	; 0x34
 800e098:	61bb      	str	r3, [r7, #24]
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e09e:	4b25      	ldr	r3, [pc, #148]	; (800e134 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d105      	bne.n	800e0b2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 800e0a6:	4b24      	ldr	r3, [pc, #144]	; (800e138 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800e0a8:	4a24      	ldr	r2, [pc, #144]	; (800e13c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800e0aa:	21b1      	movs	r1, #177	; 0xb1
 800e0ac:	4824      	ldr	r0, [pc, #144]	; (800e140 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800e0ae:	f00f fb3f 	bl	801d730 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	889a      	ldrh	r2, [r3, #4]
 800e0b6:	4b23      	ldr	r3, [pc, #140]	; (800e144 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800e0b8:	881b      	ldrh	r3, [r3, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d305      	bcc.n	800e0ca <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 800e0be:	4b22      	ldr	r3, [pc, #136]	; (800e148 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800e0c0:	4a1e      	ldr	r2, [pc, #120]	; (800e13c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800e0c2:	21b2      	movs	r1, #178	; 0xb2
 800e0c4:	481e      	ldr	r0, [pc, #120]	; (800e140 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800e0c6:	f00f fb33 	bl	801d730 <__assert_func>
        return texts->getText(typedTextId);
 800e0ca:	4b21      	ldr	r3, [pc, #132]	; (800e150 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	889b      	ldrh	r3, [r3, #4]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	f000 fc1f 	bl	800e918 <_ZNK8touchgfx5Texts7getTextEt>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3328      	adds	r3, #40	; 0x28
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6a39      	ldr	r1, [r7, #32]
 800e0e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0ea:	4798      	blx	r3
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	b2dc      	uxtb	r4, r3
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3340      	adds	r3, #64	; 0x40
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	6a39      	ldr	r1, [r7, #32]
 800e0fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0fc:	4798      	blx	r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	b2db      	uxtb	r3, r3
 800e102:	fb14 f303 	smulbb	r3, r4, r3
 800e106:	b2dc      	uxtb	r4, r3
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3324      	adds	r3, #36	; 0x24
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6a39      	ldr	r1, [r7, #32]
 800e112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e114:	4798      	blx	r3
 800e116:	4603      	mov	r3, r0
 800e118:	4423      	add	r3, r4
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800e122:	e003      	b.n	800e12c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 800e12c:	bf00      	nop
 800e12e:	372c      	adds	r7, #44	; 0x2c
 800e130:	46bd      	mov	sp, r7
 800e132:	bd90      	pop	{r4, r7, pc}
 800e134:	2000855c 	.word	0x2000855c
 800e138:	0801ea84 	.word	0x0801ea84
 800e13c:	0801f204 	.word	0x0801f204
 800e140:	0801eac8 	.word	0x0801eac8
 800e144:	20008560 	.word	0x20008560
 800e148:	0801eb0c 	.word	0x0801eb0c
 800e14c:	20008564 	.word	0x20008564
 800e150:	20008568 	.word	0x20008568

0800e154 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	4a05      	ldr	r2, [pc, #20]	; (800e174 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff fd93 	bl	800dc90 <_ZN8touchgfx6ScreenD1Ev>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	0801f170 	.word	0x0801f170

0800e178 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7ff ffe7 	bl	800e154 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800e186:	2140      	movs	r1, #64	; 0x40
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f00f faa5 	bl	801d6d8 <_ZdlPvj>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4618      	mov	r0, r3
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	4a0f      	ldr	r2, [pc, #60]	; (800e1e0 <_ZN14screenViewBaseD1Ev+0x48>)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	33d8      	adds	r3, #216	; 0xd8
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f000 f9f4 	bl	800e598 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	33a0      	adds	r3, #160	; 0xa0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 f9cd 	bl	800e554 <_ZN8touchgfx12ToggleButtonD1Ev>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3370      	adds	r3, #112	; 0x70
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 f9a6 	bl	800e510 <_ZN8touchgfx3BoxD1Ev>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3340      	adds	r3, #64	; 0x40
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 f9a1 	bl	800e510 <_ZN8touchgfx3BoxD1Ev>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7ff ffbf 	bl	800e154 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	0801f13c 	.word	0x0801f13c

0800e1e4 <_ZN14screenViewBaseD0Ev>:
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff ffd3 	bl	800e198 <_ZN14screenViewBaseD1Ev>
 800e1f2:	f44f 7190 	mov.w	r1, #288	; 0x120
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f00f fa6e 	bl	801d6d8 <_ZdlPvj>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800e208:	b590      	push	{r4, r7, lr}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	71fb      	strb	r3, [r7, #7]
 800e212:	460b      	mov	r3, r1
 800e214:	71bb      	strb	r3, [r7, #6]
 800e216:	4613      	mov	r3, r2
 800e218:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800e21a:	f7fe ff49 	bl	800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d105      	bne.n	800e230 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800e226:	4a0b      	ldr	r2, [pc, #44]	; (800e254 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800e228:	2135      	movs	r1, #53	; 0x35
 800e22a:	480b      	ldr	r0, [pc, #44]	; (800e258 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800e22c:	f00f fa80 	bl	801d730 <__assert_func>
 800e230:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800e232:	f7fe ff49 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 800e236:	6803      	ldr	r3, [r0, #0]
 800e238:	3328      	adds	r3, #40	; 0x28
 800e23a:	681c      	ldr	r4, [r3, #0]
 800e23c:	797b      	ldrb	r3, [r7, #5]
 800e23e:	79ba      	ldrb	r2, [r7, #6]
 800e240:	79f9      	ldrb	r1, [r7, #7]
 800e242:	47a0      	blx	r4
 800e244:	4603      	mov	r3, r0
    }
 800e246:	4618      	mov	r0, r3
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd90      	pop	{r4, r7, pc}
 800e24e:	bf00      	nop
 800e250:	0801eb60 	.word	0x0801eb60
 800e254:	0801f234 	.word	0x0801f234
 800e258:	0801eba4 	.word	0x0801eba4

0800e25c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	4a05      	ldr	r2, [pc, #20]	; (800e27c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff fdf3 	bl	800de58 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	0802068c 	.word	0x0802068c

0800e280 <_ZN8touchgfx6ButtonD0Ev>:
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff ffe7 	bl	800e25c <_ZN8touchgfx6ButtonD1Ev>
 800e28e:	2134      	movs	r1, #52	; 0x34
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f00f fa21 	bl	801d6d8 <_ZdlPvj>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fdf6 	bl	800de9c <_ZN8touchgfx6ButtonC1Ev>
 800e2b0:	4a07      	ldr	r2, [pc, #28]	; (800e2d0 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	3334      	adds	r3, #52	; 0x34
 800e2ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7ff fb54 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08020550 	.word	0x08020550

0800e2d4 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase()
 800e2d4:	b590      	push	{r4, r7, lr}
 800e2d6:	b08b      	sub	sp, #44	; 0x2c
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f8de 	bl	800e4a0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800e2e4:	4a68      	ldr	r2, [pc, #416]	; (800e488 <_ZN14screenViewBaseC1Ev+0x1b4>)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	3340      	adds	r3, #64	; 0x40
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff fdf8 	bl	800dee4 <_ZN8touchgfx3BoxC1Ev>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3370      	adds	r3, #112	; 0x70
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7ff fdf3 	bl	800dee4 <_ZN8touchgfx3BoxC1Ev>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	33a0      	adds	r3, #160	; 0xa0
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff ffcc 	bl	800e2a0 <_ZN8touchgfx12ToggleButtonC1Ev>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	33d8      	adds	r3, #216	; 0xd8
 800e30c:	4618      	mov	r0, r3
 800e30e:	f004 f8d3 	bl	80124b8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
{

    box1.setPosition(0, 0, 240, 272);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e318:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	23f0      	movs	r3, #240	; 0xf0
 800e320:	2200      	movs	r2, #0
 800e322:	2100      	movs	r1, #0
 800e324:	f7ff fb80 	bl	800da28 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(198, 6, 6));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e32e:	2206      	movs	r2, #6
 800e330:	2106      	movs	r1, #6
 800e332:	20c6      	movs	r0, #198	; 0xc6
 800e334:	f7ff ff68 	bl	800e208 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e338:	4603      	mov	r3, r0
 800e33a:	4619      	mov	r1, r3
 800e33c:	4620      	mov	r0, r4
 800e33e:	f7ff fdf9 	bl	800df34 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1_1.setPosition(240, 0, 240, 272);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800e348:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	23f0      	movs	r3, #240	; 0xf0
 800e350:	2200      	movs	r2, #0
 800e352:	21f0      	movs	r1, #240	; 0xf0
 800e354:	f7ff fb68 	bl	800da28 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 198, 52));
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800e35e:	2234      	movs	r2, #52	; 0x34
 800e360:	21c6      	movs	r1, #198	; 0xc6
 800e362:	2006      	movs	r0, #6
 800e364:	f7ff ff50 	bl	800e208 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e368:	4603      	mov	r3, r0
 800e36a:	4619      	mov	r1, r3
 800e36c:	4620      	mov	r0, r4
 800e36e:	f7ff fde1 	bl	800df34 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    toggleButton1.setXY(176, 20);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	33a0      	adds	r3, #160	; 0xa0
 800e376:	2214      	movs	r2, #20
 800e378:	21b0      	movs	r1, #176	; 0xb0
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff fb9f 	bl	800dabe <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800e386:	f107 0308 	add.w	r3, r7, #8
 800e38a:	2102      	movs	r1, #2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7ff faed 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800e392:	f107 030c 	add.w	r3, r7, #12
 800e396:	2103      	movs	r1, #3
 800e398:	4618      	mov	r0, r3
 800e39a:	f7ff fae7 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800e39e:	f107 020c 	add.w	r2, r7, #12
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f7ff fdd1 	bl	800df50 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    buttonWithLabel1.setXY(155, 148);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	33d8      	adds	r3, #216	; 0xd8
 800e3b2:	2294      	movs	r2, #148	; 0x94
 800e3b4:	219b      	movs	r1, #155	; 0x9b
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7ff fb81 	bl	800dabe <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800e3c2:	f107 0310 	add.w	r3, r7, #16
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff facf 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800e3ce:	f107 0314 	add.w	r3, r7, #20
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7ff fac9 	bl	800d96c <_ZN8touchgfx6BitmapC1Et>
 800e3da:	f107 0214 	add.w	r2, r7, #20
 800e3de:	f107 0310 	add.w	r3, r7, #16
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f003 fee3 	bl	80121b0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800e3f0:	f107 0318 	add.w	r3, r7, #24
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff fdbe 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 800e3fc:	f107 0318 	add.w	r3, r7, #24
 800e400:	4619      	mov	r1, r3
 800e402:	4620      	mov	r0, r4
 800e404:	f7ff fdde 	bl	800dfc4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800e408:	f107 0318 	add.w	r3, r7, #24
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe fbb9 	bl	800cb84 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800e418:	22ff      	movs	r2, #255	; 0xff
 800e41a:	21ff      	movs	r1, #255	; 0xff
 800e41c:	20ff      	movs	r0, #255	; 0xff
 800e41e:	f7ff fef3 	bl	800e208 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e422:	4603      	mov	r3, r0
 800e424:	4619      	mov	r1, r3
 800e426:	4620      	mov	r0, r4
 800e428:	f7ff fdde 	bl	800dfe8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800e432:	22ff      	movs	r2, #255	; 0xff
 800e434:	21ff      	movs	r1, #255	; 0xff
 800e436:	20ff      	movs	r0, #255	; 0xff
 800e438:	f7ff fee6 	bl	800e208 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e43c:	4603      	mov	r3, r0
 800e43e:	4619      	mov	r1, r3
 800e440:	4620      	mov	r0, r4
 800e442:	f7ff fddf 	bl	800e004 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    add(box1);
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3340      	adds	r3, #64	; 0x40
 800e44c:	4619      	mov	r1, r3
 800e44e:	4610      	mov	r0, r2
 800e450:	f7ff fc76 	bl	800dd40 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1_1);
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	3370      	adds	r3, #112	; 0x70
 800e45a:	4619      	mov	r1, r3
 800e45c:	4610      	mov	r0, r2
 800e45e:	f7ff fc6f 	bl	800dd40 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1);
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	33a0      	adds	r3, #160	; 0xa0
 800e468:	4619      	mov	r1, r3
 800e46a:	4610      	mov	r0, r2
 800e46c:	f7ff fc68 	bl	800dd40 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	33d8      	adds	r3, #216	; 0xd8
 800e476:	4619      	mov	r1, r3
 800e478:	4610      	mov	r0, r2
 800e47a:	f7ff fc61 	bl	800dd40 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	4618      	mov	r0, r3
 800e482:	3724      	adds	r7, #36	; 0x24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd90      	pop	{r4, r7, pc}
 800e488:	0801f13c 	.word	0x0801f13c

0800e48c <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]

}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f005 ff24 	bl	80142f8 <_ZN8touchgfx6ScreenC1Ev>
 800e4b0:	4a05      	ldr	r2, [pc, #20]	; (800e4c8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	0801f170 	.word	0x0801f170

0800e4cc <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	4a05      	ldr	r2, [pc, #20]	; (800e4ec <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	601a      	str	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff fa83 	bl	800d9e8 <_ZN8touchgfx8DrawableD1Ev>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	0801fcd4 	.word	0x0801fcd4

0800e4f0 <_ZN8touchgfx9ContainerD0Ev>:
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ffe7 	bl	800e4cc <_ZN8touchgfx9ContainerD1Ev>
 800e4fe:	212c      	movs	r1, #44	; 0x2c
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f00f f8e9 	bl	801d6d8 <_ZdlPvj>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	4a05      	ldr	r2, [pc, #20]	; (800e530 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fc51 	bl	800ddc8 <_ZN8touchgfx6WidgetD1Ev>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	080205c0 	.word	0x080205c0

0800e534 <_ZN8touchgfx3BoxD0Ev>:
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff ffe7 	bl	800e510 <_ZN8touchgfx3BoxD1Ev>
 800e542:	2130      	movs	r1, #48	; 0x30
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f00f f8c7 	bl	801d6d8 <_ZdlPvj>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	4a05      	ldr	r2, [pc, #20]	; (800e574 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff fe79 	bl	800e25c <_ZN8touchgfx6ButtonD1Ev>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	08020550 	.word	0x08020550

0800e578 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ffe7 	bl	800e554 <_ZN8touchgfx12ToggleButtonD1Ev>
 800e586:	2138      	movs	r1, #56	; 0x38
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f00f f8a5 	bl	801d6d8 <_ZdlPvj>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	4a08      	ldr	r2, [pc, #32]	; (800e5c4 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	3334      	adds	r3, #52	; 0x34
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe faea 	bl	800cb84 <_ZN8touchgfx9TypedTextD1Ev>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff fe52 	bl	800e25c <_ZN8touchgfx6ButtonD1Ev>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	080207ec 	.word	0x080207ec

0800e5c8 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7ff ffe1 	bl	800e598 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800e5d6:	2148      	movs	r1, #72	; 0x48
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f00f f87d 	bl	801d6d8 <_ZdlPvj>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	af00      	add	r7, sp, #0
    return bitmap_database;
 800e5ec:	4b02      	ldr	r3, [pc, #8]	; (800e5f8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	0801f290 	.word	0x0801f290

0800e5fc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800e600:	2304      	movs	r3, #4
}
 800e602:	4618      	mov	r0, r3
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e60c:	b480      	push	{r7}
 800e60e:	b085      	sub	sp, #20
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	460b      	mov	r3, r1
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800e61a:	2300      	movs	r3, #0
    }
 800e61c:	4618      	mov	r0, r3
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e630:	2300      	movs	r3, #0
    }
 800e632:	4618      	mov	r0, r3
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	4613      	mov	r3, r2
 800e64c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800e64e:	4a07      	ldr	r2, [pc, #28]	; (800e66c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e654:	4a06      	ldr	r2, [pc, #24]	; (800e670 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e65a:	4a06      	ldr	r2, [pc, #24]	; (800e674 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e65c:	88fb      	ldrh	r3, [r7, #6]
 800e65e:	8013      	strh	r3, [r2, #0]
    }
 800e660:	bf00      	nop
 800e662:	3714      	adds	r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	2000855c 	.word	0x2000855c
 800e670:	20008564 	.word	0x20008564
 800e674:	20008560 	.word	0x20008560

0800e678 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e678:	b40e      	push	{r1, r2, r3}
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b085      	sub	sp, #20
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e682:	f107 0320 	add.w	r3, r7, #32
 800e686:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	69fa      	ldr	r2, [r7, #28]
 800e68c:	2100      	movs	r1, #0
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f005 f9f6 	bl	8013a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e694:	4603      	mov	r3, r0
 800e696:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e698:	89fb      	ldrh	r3, [r7, #14]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3714      	adds	r7, #20
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6a4:	b003      	add	sp, #12
 800e6a6:	4770      	bx	lr

0800e6a8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e6a8:	b40c      	push	{r2, r3}
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b084      	sub	sp, #16
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e6b6:	f107 031c 	add.w	r3, r7, #28
 800e6ba:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e6bc:	78f9      	ldrb	r1, [r7, #3]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	69ba      	ldr	r2, [r7, #24]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f005 f9dc 	bl	8013a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e6cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6d8:	b002      	add	sp, #8
 800e6da:	4770      	bx	lr

0800e6dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08a      	sub	sp, #40	; 0x28
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d016      	beq.n	800e71e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	331a      	adds	r3, #26
 800e6f4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f8:	8adb      	ldrh	r3, [r3, #22]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d105      	bne.n	800e70a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e6fe:	4b42      	ldr	r3, [pc, #264]	; (800e808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800e700:	4a42      	ldr	r2, [pc, #264]	; (800e80c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e702:	21c0      	movs	r1, #192	; 0xc0
 800e704:	4842      	ldr	r0, [pc, #264]	; (800e810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e706:	f00f f813 	bl	801d730 <__assert_func>
            return buffer[pos];
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	8a9b      	ldrh	r3, [r3, #20]
 800e70e:	461a      	mov	r2, r3
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e71e:	2300      	movs	r3, #0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d068      	beq.n	800e7f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f006 fcb5 	bl	8015094 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	331a      	adds	r3, #26
 800e72e:	623b      	str	r3, [r7, #32]
 800e730:	2301      	movs	r3, #1
 800e732:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	8adb      	ldrh	r3, [r3, #22]
 800e738:	8bfa      	ldrh	r2, [r7, #30]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d305      	bcc.n	800e74a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e73e:	4b35      	ldr	r3, [pc, #212]	; (800e814 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e740:	4a35      	ldr	r2, [pc, #212]	; (800e818 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e742:	21c5      	movs	r1, #197	; 0xc5
 800e744:	4832      	ldr	r0, [pc, #200]	; (800e810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e746:	f00e fff3 	bl	801d730 <__assert_func>
            const uint16_t index = pos + offset;
 800e74a:	6a3b      	ldr	r3, [r7, #32]
 800e74c:	8a9a      	ldrh	r2, [r3, #20]
 800e74e:	8bfb      	ldrh	r3, [r7, #30]
 800e750:	4413      	add	r3, r2
 800e752:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e754:	8bbb      	ldrh	r3, [r7, #28]
 800e756:	2b09      	cmp	r3, #9
 800e758:	d801      	bhi.n	800e75e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e75a:	8bbb      	ldrh	r3, [r7, #28]
 800e75c:	e001      	b.n	800e762 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e75e:	8bbb      	ldrh	r3, [r7, #28]
 800e760:	3b0a      	subs	r3, #10
 800e762:	6a3a      	ldr	r2, [r7, #32]
 800e764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e768:	f640 123f 	movw	r2, #2367	; 0x93f
 800e76c:	4293      	cmp	r3, r2
 800e76e:	bf0c      	ite	eq
 800e770:	2301      	moveq	r3, #1
 800e772:	2300      	movne	r3, #0
 800e774:	b2db      	uxtb	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d03d      	beq.n	800e7f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	331a      	adds	r3, #26
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	321a      	adds	r2, #26
 800e782:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	8ad2      	ldrh	r2, [r2, #22]
 800e788:	2a00      	cmp	r2, #0
 800e78a:	d105      	bne.n	800e798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e78c:	4b1e      	ldr	r3, [pc, #120]	; (800e808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800e78e:	4a1f      	ldr	r2, [pc, #124]	; (800e80c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e790:	21c0      	movs	r1, #192	; 0xc0
 800e792:	481f      	ldr	r0, [pc, #124]	; (800e810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e794:	f00e ffcc 	bl	801d730 <__assert_func>
            return buffer[pos];
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	8a92      	ldrh	r2, [r2, #20]
 800e79c:	4611      	mov	r1, r2
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e7a4:	613b      	str	r3, [r7, #16]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	8adb      	ldrh	r3, [r3, #22]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d806      	bhi.n	800e7c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e7b2:	4b1a      	ldr	r3, [pc, #104]	; (800e81c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e7b4:	4a1a      	ldr	r2, [pc, #104]	; (800e820 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e7b6:	f240 110d 	movw	r1, #269	; 0x10d
 800e7ba:	4815      	ldr	r0, [pc, #84]	; (800e810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e7bc:	f00e ffb8 	bl	801d730 <__assert_func>
            const uint16_t index = pos + 1;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	8a9b      	ldrh	r3, [r3, #20]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e7c8:	89bb      	ldrh	r3, [r7, #12]
 800e7ca:	2b09      	cmp	r3, #9
 800e7cc:	d801      	bhi.n	800e7d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e7ce:	89bb      	ldrh	r3, [r7, #12]
 800e7d0:	e000      	b.n	800e7d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	89f9      	ldrh	r1, [r7, #14]
 800e7d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	331a      	adds	r3, #26
 800e7e0:	61bb      	str	r3, [r7, #24]
 800e7e2:	f640 133f 	movw	r3, #2367	; 0x93f
 800e7e6:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	8a9b      	ldrh	r3, [r3, #20]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	8afa      	ldrh	r2, [r7, #22]
 800e7f2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f006 fb30 	bl	8014e5c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e7fc:	4603      	mov	r3, r0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3728      	adds	r7, #40	; 0x28
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	0801ebe4 	.word	0x0801ebe4
 800e80c:	0801f404 	.word	0x0801f404
 800e810:	0801ebf0 	.word	0x0801ebf0
 800e814:	0801ec38 	.word	0x0801ec38
 800e818:	0801f330 	.word	0x0801f330
 800e81c:	0801ec48 	.word	0x0801ec48
 800e820:	0801f4b0 	.word	0x0801f4b0

0800e824 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f006 facf 	bl	8014dd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e832:	bf00      	nop
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b088      	sub	sp, #32
 800e83e:	af02      	add	r7, sp, #8
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	1d38      	adds	r0, r7, #4
 800e844:	e880 0006 	stmia.w	r0, {r1, r2}
 800e848:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800e84a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e84e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800e850:	1d39      	adds	r1, r7, #4
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	9301      	str	r3, [sp, #4]
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	683a      	ldr	r2, [r7, #0]
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f004 fa28 	bl	8012cb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800e864:	bf00      	nop
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800e86c:	b590      	push	{r4, r7, lr}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	4603      	mov	r3, r0
 800e874:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800e87a:	88fb      	ldrh	r3, [r7, #6]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d127      	bne.n	800e8d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800e880:	88fb      	ldrh	r3, [r7, #6]
 800e882:	4a1e      	ldr	r2, [pc, #120]	; (800e8fc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d016      	beq.n	800e8ba <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800e88c:	88fb      	ldrh	r3, [r7, #6]
 800e88e:	4a1b      	ldr	r2, [pc, #108]	; (800e8fc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e894:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	4413      	add	r3, r2
 800e89e:	4a18      	ldr	r2, [pc, #96]	; (800e900 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e8a0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	4a16      	ldr	r2, [pc, #88]	; (800e904 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e8ac:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	60fb      	str	r3, [r7, #12]
 800e8b8:	e00a      	b.n	800e8d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800e8ba:	4b11      	ldr	r3, [pc, #68]	; (800e900 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e8bc:	4a12      	ldr	r2, [pc, #72]	; (800e908 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800e8be:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800e8c0:	4a12      	ldr	r2, [pc, #72]	; (800e90c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800e8c2:	4b10      	ldr	r3, [pc, #64]	; (800e904 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e8c4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800e8c6:	88fb      	ldrh	r3, [r7, #6]
 800e8c8:	4a11      	ldr	r2, [pc, #68]	; (800e910 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800e8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ce:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00d      	beq.n	800e8f2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800e8d6:	4a0f      	ldr	r2, [pc, #60]	; (800e914 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800e8d8:	88fb      	ldrh	r3, [r7, #6]
 800e8da:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800e8dc:	f000 f83e 	bl	800e95c <_ZN17TypedTextDatabase8getFontsEv>
 800e8e0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800e8e2:	f000 f833 	bl	800e94c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7ff fea7 	bl	800e640 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800e8f2:	bf00      	nop
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd90      	pop	{r4, r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	200074dc 	.word	0x200074dc
 800e900:	200074e4 	.word	0x200074e4
 800e904:	200074e8 	.word	0x200074e8
 800e908:	0803f9b8 	.word	0x0803f9b8
 800e90c:	0803f9b4 	.word	0x0803f9b4
 800e910:	0803f9d0 	.word	0x0803f9d0
 800e914:	200074e0 	.word	0x200074e0

0800e918 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800e924:	4b07      	ldr	r3, [pc, #28]	; (800e944 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	4b07      	ldr	r3, [pc, #28]	; (800e948 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800e92a:	6819      	ldr	r1, [r3, #0]
 800e92c:	887b      	ldrh	r3, [r7, #2]
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	440b      	add	r3, r1
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	4413      	add	r3, r2
}
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	200074e4 	.word	0x200074e4
 800e948:	200074e8 	.word	0x200074e8

0800e94c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800e950:	2301      	movs	r3, #1
}
 800e952:	4618      	mov	r0, r3
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800e95c:	b480      	push	{r7}
 800e95e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800e962:	4618      	mov	r0, r3
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	200074ec 	.word	0x200074ec

0800e970 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d113      	bne.n	800e9a8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e986:	4293      	cmp	r3, r2
 800e988:	d10e      	bne.n	800e9a8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800e98a:	f7fe fa07 	bl	800cd9c <_Z23getFont_verdana_20_4bppv>
 800e98e:	4602      	mov	r2, r0
};
 800e990:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e992:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800e994:	f7fe fa44 	bl	800ce20 <_Z23getFont_verdana_40_4bppv>
 800e998:	4602      	mov	r2, r0
};
 800e99a:	4b05      	ldr	r3, [pc, #20]	; (800e9b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e99c:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800e99e:	f7fe f9bb 	bl	800cd18 <_Z23getFont_verdana_10_4bppv>
 800e9a2:	4602      	mov	r2, r0
};
 800e9a4:	4b02      	ldr	r3, [pc, #8]	; (800e9b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e9a6:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	200074ec 	.word	0x200074ec

0800e9b4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e9bc:	2001      	movs	r0, #1
 800e9be:	f7ff ffd7 	bl	800e970 <_Z41__static_initialization_and_destruction_0ii>
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	4a05      	ldr	r2, [pc, #20]	; (800e9e4 <_ZN19FrontendApplicationD1Ev+0x20>)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7fe fc43 	bl	800d260 <_ZN23FrontendApplicationBaseD1Ev>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	0801f56c 	.word	0x0801f56c

0800e9e8 <_ZN19FrontendApplicationD0Ev>:
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7ff ffe7 	bl	800e9c4 <_ZN19FrontendApplicationD1Ev>
 800e9f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f00e fe6c 	bl	801d6d8 <_ZdlPvj>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 f82d 	bl	800ea78 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f004 fc0f 	bl	8013244 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
	...

0800ea30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	68b9      	ldr	r1, [r7, #8]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fe fc50 	bl	800d2e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800ea48:	4a03      	ldr	r2, [pc, #12]	; (800ea58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	601a      	str	r2, [r3, #0]
{

}
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	0801f56c 	.word	0x0801f56c

0800ea5c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]
{

}
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <_ZN5Model4tickEv>:

void Model::tick()
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]

}
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
    {
    }
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
    {
    }
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
    {
 800eabc:	4a04      	ldr	r2, [pc, #16]	; (800ead0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	601a      	str	r2, [r3, #0]
    }
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	0801f5e8 	.word	0x0801f5e8

0800ead4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
    }
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7ff ffe9 	bl	800eab4 <_ZN8touchgfx9PresenterD1Ev>
 800eae2:	2104      	movs	r1, #4
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f00e fdf7 	bl	801d6d8 <_ZdlPvj>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4618      	mov	r0, r3
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
    {
 800eafc:	4a04      	ldr	r2, [pc, #16]	; (800eb10 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	601a      	str	r2, [r3, #0]
    }
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	0801f5e8 	.word	0x0801f5e8

0800eb14 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	4a06      	ldr	r2, [pc, #24]	; (800eb38 <_ZN13ModelListenerC1Ev+0x24>)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	605a      	str	r2, [r3, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	0801f5d8 	.word	0x0801f5d8

0800eb3c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	4a04      	ldr	r2, [pc, #16]	; (800eb58 <_ZN13ModelListenerD1Ev+0x1c>)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	601a      	str	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	0801f5d8 	.word	0x0801f5d8

0800eb5c <_ZN13ModelListenerD0Ev>:
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7ff ffe9 	bl	800eb3c <_ZN13ModelListenerD1Ev>
 800eb6a:	2108      	movs	r1, #8
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f00e fdb3 	bl	801d6d8 <_ZdlPvj>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4618      	mov	r0, r3
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	4a09      	ldr	r2, [pc, #36]	; (800ebac <_ZN15screenPresenterD1Ev+0x30>)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	4a09      	ldr	r2, [pc, #36]	; (800ebb0 <_ZN15screenPresenterD1Ev+0x34>)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	605a      	str	r2, [r3, #4]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff ffd1 	bl	800eb3c <_ZN13ModelListenerD1Ev>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff ff89 	bl	800eab4 <_ZN8touchgfx9PresenterD1Ev>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	0801f5b0 	.word	0x0801f5b0
 800ebb0:	0801f5c8 	.word	0x0801f5c8

0800ebb4 <_ZThn4_N15screenPresenterD1Ev>:
 800ebb4:	f1a0 0004 	sub.w	r0, r0, #4
 800ebb8:	e7e0      	b.n	800eb7c <_ZN15screenPresenterD1Ev>
 800ebba:	bf00      	nop

0800ebbc <_ZN15screenPresenterD0Ev>:
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff ffd9 	bl	800eb7c <_ZN15screenPresenterD1Ev>
 800ebca:	2110      	movs	r1, #16
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f00e fd83 	bl	801d6d8 <_ZdlPvj>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <_ZThn4_N15screenPresenterD0Ev>:
 800ebdc:	f1a0 0004 	sub.w	r0, r0, #4
 800ebe0:	e7ec      	b.n	800ebbc <_ZN15screenPresenterD0Ev>
	...

0800ebe4 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
    : view(v)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff ff7f 	bl	800eaf4 <_ZN8touchgfx9PresenterC1Ev>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff ff8a 	bl	800eb14 <_ZN13ModelListenerC1Ev>
 800ec00:	4a06      	ldr	r2, [pc, #24]	; (800ec1c <_ZN15screenPresenterC1ER10screenView+0x38>)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	4a06      	ldr	r2, [pc, #24]	; (800ec20 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	605a      	str	r2, [r3, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	60da      	str	r2, [r3, #12]
{

}
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	0801f5b0 	.word	0x0801f5b0
 800ec20:	0801f5c8 	.word	0x0801f5c8

0800ec24 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]

}
 800ec2c:	bf00      	nop
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]

}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	4a05      	ldr	r2, [pc, #20]	; (800ec6c <_ZN10screenViewD1Ev+0x20>)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7ff fa9b 	bl	800e198 <_ZN14screenViewBaseD1Ev>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	0801f600 	.word	0x0801f600

0800ec70 <_ZN10screenViewD0Ev>:
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7ff ffe7 	bl	800ec4c <_ZN10screenViewD1Ev>
 800ec7e:	f44f 7190 	mov.w	r1, #288	; 0x120
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f00e fd28 	bl	801d6d8 <_ZdlPvj>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff fb18 	bl	800e2d4 <_ZN14screenViewBaseC1Ev>
 800eca4:	4a03      	ldr	r2, [pc, #12]	; (800ecb4 <_ZN10screenViewC1Ev+0x20>)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
{

}
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	0801f600 	.word	0x0801f600

0800ecb8 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7ff fbe2 	bl	800e48c <_ZN14screenViewBase11setupScreenEv>
}
 800ecc8:	bf00      	nop
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7ff f810 	bl	800dd00 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ece0:	bf00      	nop
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
    {
 800ecf0:	4a04      	ldr	r2, [pc, #16]	; (800ed04 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	601a      	str	r2, [r3, #0]
    }
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	0801f64c 	.word	0x0801f64c

0800ed08 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
    }
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7ff ffe9 	bl	800ece8 <_ZN8touchgfx15TouchControllerD1Ev>
 800ed16:	2104      	movs	r1, #4
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f00e fcdd 	bl	801d6d8 <_ZdlPvj>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4618      	mov	r0, r3
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <_ZN20STM32TouchController4initEv>:
}

using namespace touchgfx;

void STM32TouchController::init()
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    //if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_OK)
    if (BSP_TS_Init(480, 272) == TS_OK)
 800ed30:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ed34:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800ed38:	f000 f830 	bl	800ed9c <BSP_TS_Init>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	bf0c      	ite	eq
 800ed42:	2301      	moveq	r3, #1
 800ed44:	2300      	movne	r3, #0
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <_ZN20STM32TouchController4initEv+0x2a>
    {
        isInitialized = true;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	711a      	strb	r2, [r3, #4]
    }
}
 800ed52:	bf00      	nop
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}

0800ed5a <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	b086      	sub	sp, #24
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	60f8      	str	r0, [r7, #12]
 800ed62:	60b9      	str	r1, [r7, #8]
 800ed64:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (isInitialized)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	791b      	ldrb	r3, [r3, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d011      	beq.n	800ed92 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        TS_StateTypeDef state;
        BSP_TS_GetState(&state);
 800ed6e:	f107 0310 	add.w	r3, r7, #16
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 f87c 	bl	800ee70 <BSP_TS_GetState>
        if (state.TouchDetected)
 800ed78:	8a3b      	ldrh	r3, [r7, #16]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d009      	beq.n	800ed92 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
        {
            x = state.x;
 800ed7e:	8a7b      	ldrh	r3, [r7, #18]
 800ed80:	461a      	mov	r2, r3
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	601a      	str	r2, [r3, #0]
            y = state.y;
 800ed86:	8abb      	ldrh	r3, [r7, #20]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	601a      	str	r2, [r3, #0]

            return true;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e000      	b.n	800ed94 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3a>
        }
    }
    return false;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3718      	adds	r7, #24
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <BSP_TS_Init>:
      * @param  xSize: Maximum X size of the TS area on LCD
      *         ySize: Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    uint8_t BSP_TS_Init(uint16_t xSize, uint16_t ySize)
    {
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	4603      	mov	r3, r0
 800eda4:	460a      	mov	r2, r1
 800eda6:	80fb      	strh	r3, [r7, #6]
 800eda8:	4613      	mov	r3, r2
 800edaa:	80bb      	strh	r3, [r7, #4]
        uint8_t status = TS_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	73fb      	strb	r3, [r7, #15]
        ts_x_boundary = xSize;
 800edb0:	4a27      	ldr	r2, [pc, #156]	; (800ee50 <BSP_TS_Init+0xb4>)
 800edb2:	88fb      	ldrh	r3, [r7, #6]
 800edb4:	8013      	strh	r3, [r2, #0]
        ts_y_boundary = ySize;
 800edb6:	4a27      	ldr	r2, [pc, #156]	; (800ee54 <BSP_TS_Init+0xb8>)
 800edb8:	88bb      	ldrh	r3, [r7, #4]
 800edba:	8013      	strh	r3, [r2, #0]

        /* Read ID and verify if the IO expander is ready */
        if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800edbc:	4b26      	ldr	r3, [pc, #152]	; (800ee58 <BSP_TS_Init+0xbc>)
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	2082      	movs	r0, #130	; 0x82
 800edc2:	4798      	blx	r3
 800edc4:	4603      	mov	r3, r0
 800edc6:	461a      	mov	r2, r3
 800edc8:	f640 0311 	movw	r3, #2065	; 0x811
 800edcc:	429a      	cmp	r2, r3
 800edce:	bf0c      	ite	eq
 800edd0:	2301      	moveq	r3, #1
 800edd2:	2300      	movne	r3, #0
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d009      	beq.n	800edee <BSP_TS_Init+0x52>
        {
            /* Initialize the TS driver structure */
            ts_driver = &stmpe811_ts_drv;
 800edda:	4b20      	ldr	r3, [pc, #128]	; (800ee5c <BSP_TS_Init+0xc0>)
 800eddc:	4a1e      	ldr	r2, [pc, #120]	; (800ee58 <BSP_TS_Init+0xbc>)
 800edde:	601a      	str	r2, [r3, #0]
            I2C_Address = TS_I2C_ADDRESS;
 800ede0:	4b1f      	ldr	r3, [pc, #124]	; (800ee60 <BSP_TS_Init+0xc4>)
 800ede2:	2282      	movs	r2, #130	; 0x82
 800ede4:	701a      	strb	r2, [r3, #0]
            ts_orientation = TS_SWAP_Y;
 800ede6:	4b1f      	ldr	r3, [pc, #124]	; (800ee64 <BSP_TS_Init+0xc8>)
 800ede8:	2202      	movs	r2, #2
 800edea:	701a      	strb	r2, [r3, #0]
 800edec:	e01b      	b.n	800ee26 <BSP_TS_Init+0x8a>
        }
        else
        {
            IOE_Init();
 800edee:	f000 fa3b 	bl	800f268 <IOE_Init>

            /* Check TS3510 touch screen driver presence to determine if TS3510 or
             * EXC7200 driver will be used */
            if (BSP_TS3510_IsDetected() == 0)
 800edf2:	f000 f8e9 	bl	800efc8 <BSP_TS3510_IsDetected>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	bf0c      	ite	eq
 800edfc:	2301      	moveq	r3, #1
 800edfe:	2300      	movne	r3, #0
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d006      	beq.n	800ee14 <BSP_TS_Init+0x78>
            {
                /* Initialize the TS driver structure */
                ts_driver = &ts3510_ts_drv;
 800ee06:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <BSP_TS_Init+0xc0>)
 800ee08:	4a17      	ldr	r2, [pc, #92]	; (800ee68 <BSP_TS_Init+0xcc>)
 800ee0a:	601a      	str	r2, [r3, #0]
                I2C_Address = TS3510_I2C_ADDRESS;
 800ee0c:	4b14      	ldr	r3, [pc, #80]	; (800ee60 <BSP_TS_Init+0xc4>)
 800ee0e:	2280      	movs	r2, #128	; 0x80
 800ee10:	701a      	strb	r2, [r3, #0]
 800ee12:	e005      	b.n	800ee20 <BSP_TS_Init+0x84>
            }
            else
            {
                /* Initialize the TS driver structure */
                ts_driver = &exc7200_ts_drv;
 800ee14:	4b11      	ldr	r3, [pc, #68]	; (800ee5c <BSP_TS_Init+0xc0>)
 800ee16:	4a15      	ldr	r2, [pc, #84]	; (800ee6c <BSP_TS_Init+0xd0>)
 800ee18:	601a      	str	r2, [r3, #0]
                I2C_Address = EXC7200_I2C_ADDRESS;
 800ee1a:	4b11      	ldr	r3, [pc, #68]	; (800ee60 <BSP_TS_Init+0xc4>)
 800ee1c:	2208      	movs	r2, #8
 800ee1e:	701a      	strb	r2, [r3, #0]
            }
            ts_orientation = TS_SWAP_NONE;
 800ee20:	4b10      	ldr	r3, [pc, #64]	; (800ee64 <BSP_TS_Init+0xc8>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	701a      	strb	r2, [r3, #0]
        }

        /* Initialize the TS driver */
        ts_driver->Init(I2C_Address);
 800ee26:	4b0d      	ldr	r3, [pc, #52]	; (800ee5c <BSP_TS_Init+0xc0>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a0c      	ldr	r2, [pc, #48]	; (800ee60 <BSP_TS_Init+0xc4>)
 800ee2e:	7812      	ldrb	r2, [r2, #0]
 800ee30:	b292      	uxth	r2, r2
 800ee32:	4610      	mov	r0, r2
 800ee34:	4798      	blx	r3
        ts_driver->Start(I2C_Address);
 800ee36:	4b09      	ldr	r3, [pc, #36]	; (800ee5c <BSP_TS_Init+0xc0>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	4a08      	ldr	r2, [pc, #32]	; (800ee60 <BSP_TS_Init+0xc4>)
 800ee3e:	7812      	ldrb	r2, [r2, #0]
 800ee40:	b292      	uxth	r2, r2
 800ee42:	4610      	mov	r0, r2
 800ee44:	4798      	blx	r3

        return status;
 800ee46:	7bfb      	ldrb	r3, [r7, #15]
    }
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	200074fc 	.word	0x200074fc
 800ee54:	200074fe 	.word	0x200074fe
 800ee58:	20000030 	.word	0x20000030
 800ee5c:	200074f8 	.word	0x200074f8
 800ee60:	20007501 	.word	0x20007501
 800ee64:	20007500 	.word	0x20007500
 800ee68:	20000058 	.word	0x20000058
 800ee6c:	20000008 	.word	0x20000008

0800ee70 <BSP_TS_GetState>:
      * @brief  Returns status and positions of the touch screen.
      * @param  TS_State: Pointer to touch screen current state structure
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
    {
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
        static uint32_t _x = 0, _y = 0;
        uint16_t xDiff, yDiff, x, y;
        uint16_t swap;

        TS_State->TouchDetected = ts_driver->DetectTouch(I2C_Address);
 800ee78:	4b4c      	ldr	r3, [pc, #304]	; (800efac <BSP_TS_GetState+0x13c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	691b      	ldr	r3, [r3, #16]
 800ee7e:	4a4c      	ldr	r2, [pc, #304]	; (800efb0 <BSP_TS_GetState+0x140>)
 800ee80:	7812      	ldrb	r2, [r2, #0]
 800ee82:	b292      	uxth	r2, r2
 800ee84:	4610      	mov	r0, r2
 800ee86:	4798      	blx	r3
 800ee88:	4603      	mov	r3, r0
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	801a      	strh	r2, [r3, #0]

        if (TS_State->TouchDetected)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 8083 	beq.w	800efa0 <BSP_TS_GetState+0x130>
        {
            ts_driver->GetXY(I2C_Address, &x, &y);
 800ee9a:	4b44      	ldr	r3, [pc, #272]	; (800efac <BSP_TS_GetState+0x13c>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	4a43      	ldr	r2, [pc, #268]	; (800efb0 <BSP_TS_GetState+0x140>)
 800eea2:	7812      	ldrb	r2, [r2, #0]
 800eea4:	b290      	uxth	r0, r2
 800eea6:	f107 020e 	add.w	r2, r7, #14
 800eeaa:	f107 0110 	add.w	r1, r7, #16
 800eeae:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_X)
 800eeb0:	4b40      	ldr	r3, [pc, #256]	; (800efb4 <BSP_TS_GetState+0x144>)
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d004      	beq.n	800eec6 <BSP_TS_GetState+0x56>
            {
                x = 4096 - x;
 800eebc:	8a3b      	ldrh	r3, [r7, #16]
 800eebe:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	823b      	strh	r3, [r7, #16]
            }

            if (ts_orientation & TS_SWAP_Y)
 800eec6:	4b3b      	ldr	r3, [pc, #236]	; (800efb4 <BSP_TS_GetState+0x144>)
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	f003 0302 	and.w	r3, r3, #2
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d004      	beq.n	800eedc <BSP_TS_GetState+0x6c>
            {
                y = 4096 - y;
 800eed2:	89fb      	ldrh	r3, [r7, #14]
 800eed4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	81fb      	strh	r3, [r7, #14]
            }

            if (ts_orientation & TS_SWAP_XY)
 800eedc:	4b35      	ldr	r3, [pc, #212]	; (800efb4 <BSP_TS_GetState+0x144>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	f003 0304 	and.w	r3, r3, #4
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d005      	beq.n	800eef4 <BSP_TS_GetState+0x84>
            {
                swap = y;
 800eee8:	89fb      	ldrh	r3, [r7, #14]
 800eeea:	82fb      	strh	r3, [r7, #22]
                y = x;
 800eeec:	8a3b      	ldrh	r3, [r7, #16]
 800eeee:	81fb      	strh	r3, [r7, #14]
                x = swap;
 800eef0:	8afb      	ldrh	r3, [r7, #22]
 800eef2:	823b      	strh	r3, [r7, #16]
            }

            xDiff = x > _x ? (x - _x) : (_x - x);
 800eef4:	8a3b      	ldrh	r3, [r7, #16]
 800eef6:	461a      	mov	r2, r3
 800eef8:	4b2f      	ldr	r3, [pc, #188]	; (800efb8 <BSP_TS_GetState+0x148>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d906      	bls.n	800ef0e <BSP_TS_GetState+0x9e>
 800ef00:	8a3a      	ldrh	r2, [r7, #16]
 800ef02:	4b2d      	ldr	r3, [pc, #180]	; (800efb8 <BSP_TS_GetState+0x148>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	1ad3      	subs	r3, r2, r3
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	e005      	b.n	800ef1a <BSP_TS_GetState+0xaa>
 800ef0e:	4b2a      	ldr	r3, [pc, #168]	; (800efb8 <BSP_TS_GetState+0x148>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	8a3b      	ldrh	r3, [r7, #16]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	82bb      	strh	r3, [r7, #20]
            yDiff = y > _y ? (y - _y) : (_y - y);
 800ef1c:	89fb      	ldrh	r3, [r7, #14]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	4b26      	ldr	r3, [pc, #152]	; (800efbc <BSP_TS_GetState+0x14c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d906      	bls.n	800ef36 <BSP_TS_GetState+0xc6>
 800ef28:	89fa      	ldrh	r2, [r7, #14]
 800ef2a:	4b24      	ldr	r3, [pc, #144]	; (800efbc <BSP_TS_GetState+0x14c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	1ad3      	subs	r3, r2, r3
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	e005      	b.n	800ef42 <BSP_TS_GetState+0xd2>
 800ef36:	4b21      	ldr	r3, [pc, #132]	; (800efbc <BSP_TS_GetState+0x14c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
 800ef3e:	1ad3      	subs	r3, r2, r3
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	827b      	strh	r3, [r7, #18]

            if (xDiff + yDiff > 5)
 800ef44:	8aba      	ldrh	r2, [r7, #20]
 800ef46:	8a7b      	ldrh	r3, [r7, #18]
 800ef48:	4413      	add	r3, r2
 800ef4a:	2b05      	cmp	r3, #5
 800ef4c:	dd07      	ble.n	800ef5e <BSP_TS_GetState+0xee>
            {
                _x = x;
 800ef4e:	8a3b      	ldrh	r3, [r7, #16]
 800ef50:	461a      	mov	r2, r3
 800ef52:	4b19      	ldr	r3, [pc, #100]	; (800efb8 <BSP_TS_GetState+0x148>)
 800ef54:	601a      	str	r2, [r3, #0]
                _y = y;
 800ef56:	89fb      	ldrh	r3, [r7, #14]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4b18      	ldr	r3, [pc, #96]	; (800efbc <BSP_TS_GetState+0x14c>)
 800ef5c:	601a      	str	r2, [r3, #0]
            }

            if (I2C_Address == EXC7200_I2C_ADDRESS)
 800ef5e:	4b14      	ldr	r3, [pc, #80]	; (800efb0 <BSP_TS_GetState+0x140>)
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	2b08      	cmp	r3, #8
 800ef64:	d106      	bne.n	800ef74 <BSP_TS_GetState+0x104>
            {
                TS_State->x = x;
 800ef66:	8a3a      	ldrh	r2, [r7, #16]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	805a      	strh	r2, [r3, #2]
                TS_State->y = y;
 800ef6c:	89fa      	ldrh	r2, [r7, #14]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	809a      	strh	r2, [r3, #4]
 800ef72:	e015      	b.n	800efa0 <BSP_TS_GetState+0x130>
            }
            else
            {
                TS_State->x = (ts_x_boundary * _x) >> 12;
 800ef74:	4b12      	ldr	r3, [pc, #72]	; (800efc0 <BSP_TS_GetState+0x150>)
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4b0f      	ldr	r3, [pc, #60]	; (800efb8 <BSP_TS_GetState+0x148>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	fb03 f302 	mul.w	r3, r3, r2
 800ef82:	0b1b      	lsrs	r3, r3, #12
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	805a      	strh	r2, [r3, #2]
                TS_State->y = (ts_y_boundary * _y) >> 12;
 800ef8a:	4b0e      	ldr	r3, [pc, #56]	; (800efc4 <BSP_TS_GetState+0x154>)
 800ef8c:	881b      	ldrh	r3, [r3, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	4b0a      	ldr	r3, [pc, #40]	; (800efbc <BSP_TS_GetState+0x14c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	fb03 f302 	mul.w	r3, r3, r2
 800ef98:	0b1b      	lsrs	r3, r3, #12
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	809a      	strh	r2, [r3, #4]
            }
        }
        return TS_OK;
 800efa0:	2300      	movs	r3, #0
    }
 800efa2:	4618      	mov	r0, r3
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	200074f8 	.word	0x200074f8
 800efb0:	20007501 	.word	0x20007501
 800efb4:	20007500 	.word	0x20007500
 800efb8:	20007504 	.word	0x20007504
 800efbc:	20007508 	.word	0x20007508
 800efc0:	200074fc 	.word	0x200074fc
 800efc4:	200074fe 	.word	0x200074fe

0800efc8 <BSP_TS3510_IsDetected>:
    * @brief  Check TS3510 touch screen presence
    * @param  None
    * @retval Return 0 if TS3510 is detected, return 1 if not detected
    */
    uint8_t BSP_TS3510_IsDetected(void)
    {
 800efc8:	b580      	push	{r7, lr}
 800efca:	b088      	sub	sp, #32
 800efcc:	af04      	add	r7, sp, #16
        HAL_StatusTypeDef status = HAL_OK;
 800efce:	2300      	movs	r3, #0
 800efd0:	73fb      	strb	r3, [r7, #15]
        uint32_t error = 0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	60bb      	str	r3, [r7, #8]
        uint8_t a_buffer;

        uint8_t tmp_buffer[2] = {0x81, 0x08};
 800efd6:	4b16      	ldr	r3, [pc, #88]	; (800f030 <BSP_TS3510_IsDetected+0x68>)
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	80bb      	strh	r3, [r7, #4]

        /* Prepare for LCD read data */
        IOE_WriteMultiple(TS3510_I2C_ADDRESS, 0x8A, tmp_buffer, 2);
 800efdc:	1d3a      	adds	r2, r7, #4
 800efde:	2302      	movs	r3, #2
 800efe0:	218a      	movs	r1, #138	; 0x8a
 800efe2:	2080      	movs	r0, #128	; 0x80
 800efe4:	f000 f98d 	bl	800f302 <IOE_WriteMultiple>

        status = HAL_I2C_Mem_Read(&hi2c1, TS3510_I2C_ADDRESS, 0x8A, I2C_MEMADD_SIZE_8BIT, &a_buffer, 1, 1000);
 800efe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efec:	9302      	str	r3, [sp, #8]
 800efee:	2301      	movs	r3, #1
 800eff0:	9301      	str	r3, [sp, #4]
 800eff2:	1dfb      	adds	r3, r7, #7
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	2301      	movs	r3, #1
 800eff8:	228a      	movs	r2, #138	; 0x8a
 800effa:	2180      	movs	r1, #128	; 0x80
 800effc:	480d      	ldr	r0, [pc, #52]	; (800f034 <BSP_TS3510_IsDetected+0x6c>)
 800effe:	f7f4 fde3 	bl	8003bc8 <HAL_I2C_Mem_Read>
 800f002:	4603      	mov	r3, r0
 800f004:	73fb      	strb	r3, [r7, #15]

        /* Check the communication status */
        if (status != HAL_OK)
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d00b      	beq.n	800f024 <BSP_TS3510_IsDetected+0x5c>
        {
            error = (uint32_t)HAL_I2C_GetError(&hi2c1);
 800f00c:	4809      	ldr	r0, [pc, #36]	; (800f034 <BSP_TS3510_IsDetected+0x6c>)
 800f00e:	f7f5 f801 	bl	8004014 <HAL_I2C_GetError>
 800f012:	60b8      	str	r0, [r7, #8]

            /* I2C error occured */
            I2Cx_Error(TS3510_I2C_ADDRESS);
 800f014:	2080      	movs	r0, #128	; 0x80
 800f016:	f000 f80f 	bl	800f038 <I2Cx_Error>

            if (error == HAL_I2C_ERROR_AF)
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b04      	cmp	r3, #4
 800f01e:	d101      	bne.n	800f024 <BSP_TS3510_IsDetected+0x5c>
            {
                return 1;
 800f020:	2301      	movs	r3, #1
 800f022:	e000      	b.n	800f026 <BSP_TS3510_IsDetected+0x5e>
            }
        }
        return 0;
 800f024:	2300      	movs	r3, #0
    }
 800f026:	4618      	mov	r0, r3
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	0801ec54 	.word	0x0801ec54
 800f034:	20008788 	.word	0x20008788

0800f038 <I2Cx_Error>:
    * @brief  Manages error callback by re-initializing I2C.
    * @param  Addr: I2C Address
    * @retval None
    */
    static void I2Cx_Error(uint8_t Addr)
    {
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	71fb      	strb	r3, [r7, #7]
        /* De-initialize the I2C communication bus */
        HAL_I2C_DeInit(&hi2c1);
 800f042:	4805      	ldr	r0, [pc, #20]	; (800f058 <I2Cx_Error+0x20>)
 800f044:	f7f4 fa70 	bl	8003528 <HAL_I2C_DeInit>

        /* Modification, Draupner Graphics: Add delay to avoid BUSY flag error */
        HAL_Delay(2);
 800f048:	2002      	movs	r0, #2
 800f04a:	f7f3 f8fd 	bl	8002248 <HAL_Delay>

        /* Re-Initialize the I2C communication bus */
        //    I2Cx_Init();
    }
 800f04e:	bf00      	nop
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20008788 	.word	0x20008788

0800f05c <I2Cx_ITConfig>:
      * @brief  Configures I2C Interrupt.
      * @param  None
      * @retval None
      */
    static void I2Cx_ITConfig(void)
    {
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
        static uint8_t I2C_IT_Enabled = 0;
        GPIO_InitTypeDef  GPIO_InitStruct;

        if (I2C_IT_Enabled == 0)
 800f062:	4b1f      	ldr	r3, [pc, #124]	; (800f0e0 <I2Cx_ITConfig+0x84>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d135      	bne.n	800f0d6 <I2Cx_ITConfig+0x7a>
        {
            I2C_IT_Enabled = 1;
 800f06a:	4b1d      	ldr	r3, [pc, #116]	; (800f0e0 <I2Cx_ITConfig+0x84>)
 800f06c:	2201      	movs	r2, #1
 800f06e:	701a      	strb	r2, [r3, #0]
            /* Enable the GPIO EXTI clock */
            __GPIOI_CLK_ENABLE();
 800f070:	2300      	movs	r3, #0
 800f072:	60bb      	str	r3, [r7, #8]
 800f074:	4b1b      	ldr	r3, [pc, #108]	; (800f0e4 <I2Cx_ITConfig+0x88>)
 800f076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f078:	4a1a      	ldr	r2, [pc, #104]	; (800f0e4 <I2Cx_ITConfig+0x88>)
 800f07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f07e:	6313      	str	r3, [r2, #48]	; 0x30
 800f080:	4b18      	ldr	r3, [pc, #96]	; (800f0e4 <I2Cx_ITConfig+0x88>)
 800f082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f088:	60bb      	str	r3, [r7, #8]
 800f08a:	68bb      	ldr	r3, [r7, #8]
            __SYSCFG_CLK_ENABLE();
 800f08c:	2300      	movs	r3, #0
 800f08e:	607b      	str	r3, [r7, #4]
 800f090:	4b14      	ldr	r3, [pc, #80]	; (800f0e4 <I2Cx_ITConfig+0x88>)
 800f092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f094:	4a13      	ldr	r2, [pc, #76]	; (800f0e4 <I2Cx_ITConfig+0x88>)
 800f096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f09a:	6453      	str	r3, [r2, #68]	; 0x44
 800f09c:	4b11      	ldr	r3, [pc, #68]	; (800f0e4 <I2Cx_ITConfig+0x88>)
 800f09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0a4:	607b      	str	r3, [r7, #4]
 800f0a6:	687b      	ldr	r3, [r7, #4]

            GPIO_InitStruct.Pin   = GPIO_PIN_8;
 800f0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0ac:	60fb      	str	r3, [r7, #12]
            GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	617b      	str	r3, [r7, #20]
            GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	61bb      	str	r3, [r7, #24]
            GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800f0b6:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <I2Cx_ITConfig+0x8c>)
 800f0b8:	613b      	str	r3, [r7, #16]
            HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f0ba:	f107 030c 	add.w	r3, r7, #12
 800f0be:	4619      	mov	r1, r3
 800f0c0:	480a      	ldr	r0, [pc, #40]	; (800f0ec <I2Cx_ITConfig+0x90>)
 800f0c2:	f7f3 fe2b 	bl	8002d1c <HAL_GPIO_Init>

            /* Enable and set GPIO EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(EXTI9_5_IRQn), 0x0F, 0x0F);
 800f0c6:	220f      	movs	r2, #15
 800f0c8:	210f      	movs	r1, #15
 800f0ca:	2017      	movs	r0, #23
 800f0cc:	f7f3 f9b8 	bl	8002440 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 800f0d0:	2017      	movs	r0, #23
 800f0d2:	f7f3 f9d1 	bl	8002478 <HAL_NVIC_EnableIRQ>
        }
    }
 800f0d6:	bf00      	nop
 800f0d8:	3720      	adds	r7, #32
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	2000750c 	.word	0x2000750c
 800f0e4:	40023800 	.word	0x40023800
 800f0e8:	10210000 	.word	0x10210000
 800f0ec:	40022000 	.word	0x40022000

0800f0f0 <I2Cx_Write>:
      * @param  Reg: Register address
      * @param  Value: Data to be written
      * @retval None
      */
    static void I2Cx_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b088      	sub	sp, #32
 800f0f4:	af04      	add	r7, sp, #16
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	71fb      	strb	r3, [r7, #7]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	71bb      	strb	r3, [r7, #6]
 800f0fe:	4613      	mov	r3, r2
 800f100:	717b      	strb	r3, [r7, #5]
        HAL_StatusTypeDef status = HAL_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	73fb      	strb	r3, [r7, #15]

        status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 800f106:	79fb      	ldrb	r3, [r7, #7]
 800f108:	b299      	uxth	r1, r3
 800f10a:	79bb      	ldrb	r3, [r7, #6]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	2364      	movs	r3, #100	; 0x64
 800f110:	9302      	str	r3, [sp, #8]
 800f112:	2301      	movs	r3, #1
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	1d7b      	adds	r3, r7, #5
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	2301      	movs	r3, #1
 800f11c:	4807      	ldr	r0, [pc, #28]	; (800f13c <I2Cx_Write+0x4c>)
 800f11e:	f7f4 fc59 	bl	80039d4 <HAL_I2C_Mem_Write>
 800f122:	4603      	mov	r3, r0
 800f124:	73fb      	strb	r3, [r7, #15]

        /* Check the communication status */
        if (status != HAL_OK)
 800f126:	7bfb      	ldrb	r3, [r7, #15]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d003      	beq.n	800f134 <I2Cx_Write+0x44>
        {
            /* Execute user timeout callback */
            I2Cx_Error(Addr);
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7ff ff82 	bl	800f038 <I2Cx_Error>
        }
    }
 800f134:	bf00      	nop
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	20008788 	.word	0x20008788

0800f140 <I2Cx_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Register address
      * @retval Read data
      */
    static uint8_t I2Cx_Read(uint8_t Addr, uint8_t Reg)
    {
 800f140:	b580      	push	{r7, lr}
 800f142:	b088      	sub	sp, #32
 800f144:	af04      	add	r7, sp, #16
 800f146:	4603      	mov	r3, r0
 800f148:	460a      	mov	r2, r1
 800f14a:	71fb      	strb	r3, [r7, #7]
 800f14c:	4613      	mov	r3, r2
 800f14e:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef status = HAL_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	73fb      	strb	r3, [r7, #15]
        uint8_t Value = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	73bb      	strb	r3, [r7, #14]

        status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 800f158:	79fb      	ldrb	r3, [r7, #7]
 800f15a:	b299      	uxth	r1, r3
 800f15c:	79bb      	ldrb	r3, [r7, #6]
 800f15e:	b29a      	uxth	r2, r3
 800f160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f164:	9302      	str	r3, [sp, #8]
 800f166:	2301      	movs	r3, #1
 800f168:	9301      	str	r3, [sp, #4]
 800f16a:	f107 030e 	add.w	r3, r7, #14
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	2301      	movs	r3, #1
 800f172:	4808      	ldr	r0, [pc, #32]	; (800f194 <I2Cx_Read+0x54>)
 800f174:	f7f4 fd28 	bl	8003bc8 <HAL_I2C_Mem_Read>
 800f178:	4603      	mov	r3, r0
 800f17a:	73fb      	strb	r3, [r7, #15]

        /* Check the communication status */
        if (status != HAL_OK)
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d003      	beq.n	800f18a <I2Cx_Read+0x4a>
        {
            /* Execute user timeout callback */
            I2Cx_Error(Addr);
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	4618      	mov	r0, r3
 800f186:	f7ff ff57 	bl	800f038 <I2Cx_Error>
        }
        return Value;
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
    }
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	20008788 	.word	0x20008788

0800f198 <I2Cx_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    static HAL_StatusTypeDef I2Cx_ReadMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t* Buffer, uint16_t Length)
    {
 800f198:	b580      	push	{r7, lr}
 800f19a:	b08a      	sub	sp, #40	; 0x28
 800f19c:	af04      	add	r7, sp, #16
 800f19e:	607b      	str	r3, [r7, #4]
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	81bb      	strh	r3, [r7, #12]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	817b      	strh	r3, [r7, #10]
        HAL_StatusTypeDef status = HAL_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	75fb      	strb	r3, [r7, #23]

        if (Addr == EXC7200_I2C_ADDRESS)
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
 800f1b2:	2b08      	cmp	r3, #8
 800f1b4:	d10d      	bne.n	800f1d2 <I2Cx_ReadMultiple+0x3a>
        {
            status = HAL_I2C_Master_Receive(&hi2c1, Addr, Buffer, Length, 1000);
 800f1b6:	7bfb      	ldrb	r3, [r7, #15]
 800f1b8:	b299      	uxth	r1, r3
 800f1ba:	8c3a      	ldrh	r2, [r7, #32]
 800f1bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	4811      	ldr	r0, [pc, #68]	; (800f20c <I2Cx_ReadMultiple+0x74>)
 800f1c8:	f7f4 f9de 	bl	8003588 <HAL_I2C_Master_Receive>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	75fb      	strb	r3, [r7, #23]
 800f1d0:	e010      	b.n	800f1f4 <I2Cx_ReadMultiple+0x5c>
        }
        else
        {
            status = HAL_I2C_Mem_Read(&hi2c1, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	b299      	uxth	r1, r3
 800f1d6:	8978      	ldrh	r0, [r7, #10]
 800f1d8:	89ba      	ldrh	r2, [r7, #12]
 800f1da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1de:	9302      	str	r3, [sp, #8]
 800f1e0:	8c3b      	ldrh	r3, [r7, #32]
 800f1e2:	9301      	str	r3, [sp, #4]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	9300      	str	r3, [sp, #0]
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	4808      	ldr	r0, [pc, #32]	; (800f20c <I2Cx_ReadMultiple+0x74>)
 800f1ec:	f7f4 fcec 	bl	8003bc8 <HAL_I2C_Mem_Read>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	75fb      	strb	r3, [r7, #23]
        }

        /* Check the communication status */
        if (status != HAL_OK)
 800f1f4:	7dfb      	ldrb	r3, [r7, #23]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d003      	beq.n	800f202 <I2Cx_ReadMultiple+0x6a>
        {
            /* I2C error occured */
            I2Cx_Error(Addr);
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff ff1b 	bl	800f038 <I2Cx_Error>
        }
        return status;
 800f202:	7dfb      	ldrb	r3, [r7, #23]
    }
 800f204:	4618      	mov	r0, r3
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20008788 	.word	0x20008788

0800f210 <I2Cx_WriteMultiple>:
      * @param  pBuffer: The target register value to be written
      * @param  Length: buffer size to be written
      * @retval HAL status
      */
    static HAL_StatusTypeDef I2Cx_WriteMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t* Buffer, uint16_t Length)
    {
 800f210:	b580      	push	{r7, lr}
 800f212:	b08a      	sub	sp, #40	; 0x28
 800f214:	af04      	add	r7, sp, #16
 800f216:	607b      	str	r3, [r7, #4]
 800f218:	4603      	mov	r3, r0
 800f21a:	73fb      	strb	r3, [r7, #15]
 800f21c:	460b      	mov	r3, r1
 800f21e:	81bb      	strh	r3, [r7, #12]
 800f220:	4613      	mov	r3, r2
 800f222:	817b      	strh	r3, [r7, #10]
        HAL_StatusTypeDef status = HAL_OK;
 800f224:	2300      	movs	r3, #0
 800f226:	75fb      	strb	r3, [r7, #23]

        status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f228:	7bfb      	ldrb	r3, [r7, #15]
 800f22a:	b299      	uxth	r1, r3
 800f22c:	8978      	ldrh	r0, [r7, #10]
 800f22e:	89ba      	ldrh	r2, [r7, #12]
 800f230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f234:	9302      	str	r3, [sp, #8]
 800f236:	8c3b      	ldrh	r3, [r7, #32]
 800f238:	9301      	str	r3, [sp, #4]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	4603      	mov	r3, r0
 800f240:	4808      	ldr	r0, [pc, #32]	; (800f264 <I2Cx_WriteMultiple+0x54>)
 800f242:	f7f4 fbc7 	bl	80039d4 <HAL_I2C_Mem_Write>
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]

        /* Check the communication status */
        if (status != HAL_OK)
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d003      	beq.n	800f258 <I2Cx_WriteMultiple+0x48>
        {
            /* Re-Initialize the I2C Bus */
            I2Cx_Error(Addr);
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fef0 	bl	800f038 <I2Cx_Error>
        }
        return status;
 800f258:	7dfb      	ldrb	r3, [r7, #23]
    }
 800f25a:	4618      	mov	r0, r3
 800f25c:	3718      	adds	r7, #24
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	20008788 	.word	0x20008788

0800f268 <IOE_Init>:
      * @brief  Initializes IOE low level.
      * @param  None
      * @retval None
      */
    void IOE_Init(void)
    {
 800f268:	b480      	push	{r7}
 800f26a:	af00      	add	r7, sp, #0
        //Dummy
    }
 800f26c:	bf00      	nop
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <IOE_ITConfig>:
      * @brief  Configures IOE low level interrupt.
      * @param  None
      * @retval None
      */
    void IOE_ITConfig(void)
    {
 800f276:	b580      	push	{r7, lr}
 800f278:	af00      	add	r7, sp, #0
        I2Cx_ITConfig();
 800f27a:	f7ff feef 	bl	800f05c <I2Cx_ITConfig>
    }
 800f27e:	bf00      	nop
 800f280:	bd80      	pop	{r7, pc}

0800f282 <IOE_Write>:
      * @param  Reg: Register address
      * @param  Value: Data to be written
      * @retval None
      */
    void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 800f282:	b580      	push	{r7, lr}
 800f284:	b082      	sub	sp, #8
 800f286:	af00      	add	r7, sp, #0
 800f288:	4603      	mov	r3, r0
 800f28a:	71fb      	strb	r3, [r7, #7]
 800f28c:	460b      	mov	r3, r1
 800f28e:	71bb      	strb	r3, [r7, #6]
 800f290:	4613      	mov	r3, r2
 800f292:	717b      	strb	r3, [r7, #5]
        I2Cx_Write(Addr, Reg, Value);
 800f294:	797a      	ldrb	r2, [r7, #5]
 800f296:	79b9      	ldrb	r1, [r7, #6]
 800f298:	79fb      	ldrb	r3, [r7, #7]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff ff28 	bl	800f0f0 <I2Cx_Write>
    }
 800f2a0:	bf00      	nop
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <IOE_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Register address
      * @retval Read data
      */
    uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
    {
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	460a      	mov	r2, r1
 800f2b2:	71fb      	strb	r3, [r7, #7]
 800f2b4:	4613      	mov	r3, r2
 800f2b6:	71bb      	strb	r3, [r7, #6]
        return I2Cx_Read(Addr, Reg);
 800f2b8:	79ba      	ldrb	r2, [r7, #6]
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	4611      	mov	r1, r2
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff ff3e 	bl	800f140 <I2Cx_Read>
 800f2c4:	4603      	mov	r3, r0
    }
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <IOE_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b084      	sub	sp, #16
 800f2d2:	af02      	add	r7, sp, #8
 800f2d4:	603a      	str	r2, [r7, #0]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	4603      	mov	r3, r0
 800f2da:	71fb      	strb	r3, [r7, #7]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	71bb      	strb	r3, [r7, #6]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	80bb      	strh	r3, [r7, #4]
        return I2Cx_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800f2e4:	79bb      	ldrb	r3, [r7, #6]
 800f2e6:	b299      	uxth	r1, r3
 800f2e8:	79f8      	ldrb	r0, [r7, #7]
 800f2ea:	88bb      	ldrh	r3, [r7, #4]
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f7ff ff51 	bl	800f198 <I2Cx_ReadMultiple>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	b29b      	uxth	r3, r3
    }
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <IOE_WriteMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval None
      */
    void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 800f302:	b580      	push	{r7, lr}
 800f304:	b084      	sub	sp, #16
 800f306:	af02      	add	r7, sp, #8
 800f308:	603a      	str	r2, [r7, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	4603      	mov	r3, r0
 800f30e:	71fb      	strb	r3, [r7, #7]
 800f310:	460b      	mov	r3, r1
 800f312:	71bb      	strb	r3, [r7, #6]
 800f314:	4613      	mov	r3, r2
 800f316:	80bb      	strh	r3, [r7, #4]
        I2Cx_WriteMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800f318:	79bb      	ldrb	r3, [r7, #6]
 800f31a:	b299      	uxth	r1, r3
 800f31c:	79f8      	ldrb	r0, [r7, #7]
 800f31e:	88bb      	ldrh	r3, [r7, #4]
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2201      	movs	r2, #1
 800f326:	f7ff ff73 	bl	800f210 <I2Cx_WriteMultiple>
    }
 800f32a:	bf00      	nop
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <IOE_Delay>:
      * @brief  IOE delay
      * @param  Delay: Delay in ms
      * @retval None
      */
    void IOE_Delay(uint32_t Delay)
    {
 800f332:	b580      	push	{r7, lr}
 800f334:	b082      	sub	sp, #8
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
        HAL_Delay(Delay);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7f2 ff84 	bl	8002248 <HAL_Delay>
    }
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	4a05      	ldr	r2, [pc, #20]	; (800f368 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4618      	mov	r0, r3
 800f35a:	f7ff fcc5 	bl	800ece8 <_ZN8touchgfx15TouchControllerD1Ev>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	0801f634 	.word	0x0801f634

0800f36c <_ZN20STM32TouchControllerD0Ev>:
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7ff ffe7 	bl	800f348 <_ZN20STM32TouchControllerD1Ev>
 800f37a:	2108      	movs	r1, #8
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f00e f9ab 	bl	801d6d8 <_ZdlPvj>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	4603      	mov	r3, r0
 800f394:	71fb      	strb	r3, [r7, #7]

}
 800f396:	bf00      	nop
 800f398:	370c      	adds	r7, #12
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr

0800f3a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800f3a2:	b480      	push	{r7}
 800f3a4:	b083      	sub	sp, #12
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	71fb      	strb	r3, [r7, #7]

}
 800f3ac:	bf00      	nop
 800f3ae:	370c      	adds	r7, #12
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	71fb      	strb	r3, [r7, #7]

}
 800f3c2:	bf00      	nop
 800f3c4:	370c      	adds	r7, #12
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
    {
 800f3d8:	4a04      	ldr	r2, [pc, #16]	; (800f3ec <_ZN8touchgfx3HALD1Ev+0x1c>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	601a      	str	r2, [r3, #0]
    }
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	0801ff7c 	.word	0x0801ff7c

0800f3f0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
    }
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7ff ffe9 	bl	800f3d0 <_ZN8touchgfx3HALD1Ev>
 800f3fe:	2178      	movs	r1, #120	; 0x78
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f00e f969 	bl	801d6d8 <_ZdlPvj>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	78fa      	ldrb	r2, [r7, #3]
 800f420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     * Function for obtaining the blit capabilities of the concrete HAL implementation. As
     * default, will return whatever blitcaps are reported by the associated DMA object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
 800f450:	4603      	mov	r3, r0
    }
 800f452:	4618      	mov	r0, r3
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b082      	sub	sp, #8
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f002 fd0a 	bl	8011e7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	3390      	adds	r3, #144	; 0x90
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	4798      	blx	r3
    }
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
    {
        return false;
 800f486:	2300      	movs	r3, #0
    }
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b08b      	sub	sp, #44	; 0x2c
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	80fb      	strh	r3, [r7, #6]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	717b      	strb	r3, [r7, #5]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 800f4aa:	f7fd fe0d 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	6813      	ldr	r3, [r2, #0]
 800f4b2:	3324      	adds	r3, #36	; 0x24
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	4798      	blx	r3
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800f4be:	8b7b      	ldrh	r3, [r7, #26]
 800f4c0:	4a3d      	ldr	r2, [pc, #244]	; (800f5b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 800f4c2:	8812      	ldrh	r2, [r2, #0]
 800f4c4:	fb02 f303 	mul.w	r3, r2, r3
 800f4c8:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800f4d6:	797b      	ldrb	r3, [r7, #5]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d005      	beq.n	800f4e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800f4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800f4e8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d005      	beq.n	800f4fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800f4fc:	88fb      	ldrh	r3, [r7, #6]
 800f4fe:	3b01      	subs	r3, #1
 800f500:	2b1f      	cmp	r3, #31
 800f502:	d84d      	bhi.n	800f5a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 800f504:	a201      	add	r2, pc, #4	; (adr r2, 800f50c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800f506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50a:	bf00      	nop
 800f50c:	0800f58d 	.word	0x0800f58d
 800f510:	0800f58d 	.word	0x0800f58d
 800f514:	0800f5a1 	.word	0x0800f5a1
 800f518:	0800f58d 	.word	0x0800f58d
 800f51c:	0800f5a1 	.word	0x0800f5a1
 800f520:	0800f5a1 	.word	0x0800f5a1
 800f524:	0800f5a1 	.word	0x0800f5a1
 800f528:	0800f58d 	.word	0x0800f58d
 800f52c:	0800f5a1 	.word	0x0800f5a1
 800f530:	0800f5a1 	.word	0x0800f5a1
 800f534:	0800f5a1 	.word	0x0800f5a1
 800f538:	0800f5a1 	.word	0x0800f5a1
 800f53c:	0800f5a1 	.word	0x0800f5a1
 800f540:	0800f5a1 	.word	0x0800f5a1
 800f544:	0800f5a1 	.word	0x0800f5a1
 800f548:	0800f58d 	.word	0x0800f58d
 800f54c:	0800f5a1 	.word	0x0800f5a1
 800f550:	0800f5a1 	.word	0x0800f5a1
 800f554:	0800f5a1 	.word	0x0800f5a1
 800f558:	0800f5a1 	.word	0x0800f5a1
 800f55c:	0800f5a1 	.word	0x0800f5a1
 800f560:	0800f5a1 	.word	0x0800f5a1
 800f564:	0800f5a1 	.word	0x0800f5a1
 800f568:	0800f58d 	.word	0x0800f58d
 800f56c:	0800f5a1 	.word	0x0800f5a1
 800f570:	0800f5a1 	.word	0x0800f5a1
 800f574:	0800f5a1 	.word	0x0800f5a1
 800f578:	0800f5a1 	.word	0x0800f5a1
 800f57c:	0800f5a1 	.word	0x0800f5a1
 800f580:	0800f5a1 	.word	0x0800f5a1
 800f584:	0800f5a1 	.word	0x0800f5a1
 800f588:	0800f58d 	.word	0x0800f58d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3374      	adds	r3, #116	; 0x74
 800f592:	681c      	ldr	r4, [r3, #0]
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	6a3a      	ldr	r2, [r7, #32]
 800f598:	68b9      	ldr	r1, [r7, #8]
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	47a0      	blx	r4
            break;
 800f59e:	e006      	b.n	800f5ae <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 800f5a0:	4b06      	ldr	r3, [pc, #24]	; (800f5bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 800f5a2:	4a07      	ldr	r2, [pc, #28]	; (800f5c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 800f5a4:	f240 216f 	movw	r1, #623	; 0x26f
 800f5a8:	4806      	ldr	r0, [pc, #24]	; (800f5c4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 800f5aa:	f00e f8c1 	bl	801d730 <__assert_func>
            break;
        }
    }
 800f5ae:	bf00      	nop
 800f5b0:	372c      	adds	r7, #44	; 0x2c
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd90      	pop	{r4, r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	200084e8 	.word	0x200084e8
 800f5bc:	0801ec58 	.word	0x0801ec58
 800f5c0:	0801f760 	.word	0x0801f760
 800f5c4:	0801ec78 	.word	0x0801ec78

0800f5c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d106      	bne.n	800f5ea <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800f5dc:	4b11      	ldr	r3, [pc, #68]	; (800f624 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800f5de:	4a12      	ldr	r2, [pc, #72]	; (800f628 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800f5e0:	f240 2182 	movw	r1, #642	; 0x282
 800f5e4:	4811      	ldr	r0, [pc, #68]	; (800f62c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800f5e6:	f00e f8a3 	bl	801d730 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	683a      	ldr	r2, [r7, #0]
 800f5fa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	bf14      	ite	ne
 800f602:	2301      	movne	r3, #1
 800f604:	2300      	moveq	r3, #0
 800f606:	b2da      	uxtb	r2, r3
 800f608:	4b09      	ldr	r3, [pc, #36]	; (800f630 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800f60a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bf14      	ite	ne
 800f612:	2301      	movne	r3, #1
 800f614:	2300      	moveq	r3, #0
 800f616:	b2da      	uxtb	r2, r3
 800f618:	4b06      	ldr	r3, [pc, #24]	; (800f634 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800f61a:	701a      	strb	r2, [r3, #0]
    }
 800f61c:	bf00      	nop
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	0801ecbc 	.word	0x0801ecbc
 800f628:	0801f710 	.word	0x0801f710
 800f62c:	0801ec78 	.word	0x0801ec78
 800f630:	200084ea 	.word	0x200084ea
 800f634:	200084eb 	.word	0x200084eb

0800f638 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	460b      	mov	r3, r1
 800f642:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d004      	beq.n	800f656 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f650:	887a      	ldrh	r2, [r7, #2]
 800f652:	4610      	mov	r0, r2
 800f654:	4798      	blx	r3
        }
    }
 800f656:	bf00      	nop
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800f65e:	b480      	push	{r7}
 800f660:	b083      	sub	sp, #12
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800f666:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800f66a:	4618      	mov	r0, r3
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	3318      	adds	r3, #24
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
 800f690:	4603      	mov	r3, r0
    }
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d017      	beq.n	800f6e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800f6b4:	4b1a      	ldr	r3, [pc, #104]	; (800f720 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d12a      	bne.n	800f712 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800f6bc:	4b19      	ldr	r3, [pc, #100]	; (800f724 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f6be:	881a      	ldrh	r2, [r3, #0]
 800f6c0:	4b19      	ldr	r3, [pc, #100]	; (800f728 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f6c2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800f6c4:	4b19      	ldr	r3, [pc, #100]	; (800f72c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f6c6:	881a      	ldrh	r2, [r3, #0]
 800f6c8:	4b19      	ldr	r3, [pc, #100]	; (800f730 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f6ca:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800f6cc:	4b16      	ldr	r3, [pc, #88]	; (800f728 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f6ce:	881a      	ldrh	r2, [r3, #0]
 800f6d0:	4b16      	ldr	r3, [pc, #88]	; (800f72c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f6d2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800f6d4:	4b16      	ldr	r3, [pc, #88]	; (800f730 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f6d6:	881a      	ldrh	r2, [r3, #0]
 800f6d8:	4b12      	ldr	r3, [pc, #72]	; (800f724 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f6da:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800f6dc:	4b10      	ldr	r3, [pc, #64]	; (800f720 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f6de:	2201      	movs	r2, #1
 800f6e0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800f6e2:	e016      	b.n	800f712 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800f6e4:	4b0e      	ldr	r3, [pc, #56]	; (800f720 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d012      	beq.n	800f712 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800f6ec:	4b0f      	ldr	r3, [pc, #60]	; (800f72c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f6ee:	881a      	ldrh	r2, [r3, #0]
 800f6f0:	4b0d      	ldr	r3, [pc, #52]	; (800f728 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f6f2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800f6f4:	4b0b      	ldr	r3, [pc, #44]	; (800f724 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f6f6:	881a      	ldrh	r2, [r3, #0]
 800f6f8:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f6fa:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800f6fc:	4b0c      	ldr	r3, [pc, #48]	; (800f730 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f6fe:	881a      	ldrh	r2, [r3, #0]
 800f700:	4b0a      	ldr	r3, [pc, #40]	; (800f72c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f702:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800f704:	4b08      	ldr	r3, [pc, #32]	; (800f728 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f706:	881a      	ldrh	r2, [r3, #0]
 800f708:	4b06      	ldr	r3, [pc, #24]	; (800f724 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f70a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800f70c:	4b04      	ldr	r3, [pc, #16]	; (800f720 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f70e:	2200      	movs	r2, #0
 800f710:	701a      	strb	r2, [r3, #0]
    }
 800f712:	bf00      	nop
 800f714:	370c      	adds	r7, #12
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	200084e4 	.word	0x200084e4
 800f724:	200084e0 	.word	0x200084e0
 800f728:	200084e6 	.word	0x200084e6
 800f72c:	200084e2 	.word	0x200084e2
 800f730:	200084e8 	.word	0x200084e8

0800f734 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4618      	mov	r0, r3
 800f740:	f001 fe1e 	bl	8011380 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800f744:	bf00      	nop
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	4a05      	ldr	r2, [pc, #20]	; (800f76c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	601a      	str	r2, [r3, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff fe37 	bl	800f3d0 <_ZN8touchgfx3HALD1Ev>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	0801f968 	.word	0x0801f968

0800f770 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7ff ffe7 	bl	800f74c <_ZN20TouchGFXGeneratedHALD1Ev>
 800f77e:	2178      	movs	r1, #120	; 0x78
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f00d ffa9 	bl	801d6d8 <_ZdlPvj>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7ff ffca 	bl	800f734 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800f7a0:	bf00      	nop
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f001 fa8e 	bl	8010cd4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f001 fb00 	bl	8010dd0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800f7d0:	4603      	mov	r3, r0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b082      	sub	sp, #8
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f001 faff 	bl	8010dec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800f7ee:	bf00      	nop
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b082      	sub	sp, #8
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6839      	ldr	r1, [r7, #0]
 800f804:	4618      	mov	r0, r3
 800f806:	f001 fb07 	bl	8010e18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800f80a:	bf00      	nop
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b084      	sub	sp, #16
 800f816:	af00      	add	r7, sp, #0
 800f818:	60f8      	str	r0, [r7, #12]
 800f81a:	60b9      	str	r1, [r7, #8]
 800f81c:	607a      	str	r2, [r7, #4]
 800f81e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68b9      	ldr	r1, [r7, #8]
 800f828:	f001 fee5 	bl	80115f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800f82c:	4603      	mov	r3, r0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b082      	sub	sp, #8
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f001 fa6b 	bl	8010d1c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800f846:	bf00      	nop
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b082      	sub	sp, #8
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4618      	mov	r0, r3
 800f85a:	f001 fa6f 	bl	8010d3c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800f85e:	bf00      	nop
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}

0800f866 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b082      	sub	sp, #8
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4618      	mov	r0, r3
 800f872:	f001 fa71 	bl	8010d58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800f876:	bf00      	nop
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	f001 fa73 	bl	8010d74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800f88e:	bf00      	nop
 800f890:	3708      	adds	r7, #8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
	...

0800f898 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	4a05      	ldr	r2, [pc, #20]	; (800f8b8 <_ZN11TouchGFXHALD1Ev+0x20>)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7ff ff4f 	bl	800f74c <_ZN20TouchGFXGeneratedHALD1Ev>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	0801f664 	.word	0x0801f664

0800f8bc <_ZN11TouchGFXHALD0Ev>:
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff ffe7 	bl	800f898 <_ZN11TouchGFXHALD1Ev>
 800f8ca:	2178      	movs	r1, #120	; 0x78
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f00d ff03 	bl	801d6d8 <_ZdlPvj>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	2101      	movs	r1, #1
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	f7f7 fe7b 	bl	80075e0 <osSemaphoreNew>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	4b0f      	ldr	r3, [pc, #60]	; (800f92c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f8ee:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f8f0:	4b0e      	ldr	r3, [pc, #56]	; (800f92c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d105      	bne.n	800f904 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800f8f8:	4b0d      	ldr	r3, [pc, #52]	; (800f930 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f8fa:	4a0e      	ldr	r2, [pc, #56]	; (800f934 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f8fc:	2125      	movs	r1, #37	; 0x25
 800f8fe:	480e      	ldr	r0, [pc, #56]	; (800f938 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f900:	f00d ff16 	bl	801d730 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800f904:	2200      	movs	r2, #0
 800f906:	2104      	movs	r1, #4
 800f908:	2001      	movs	r0, #1
 800f90a:	f7f7 ffc9 	bl	80078a0 <osMessageQueueNew>
 800f90e:	4602      	mov	r2, r0
 800f910:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f912:	601a      	str	r2, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800f914:	4b09      	ldr	r3, [pc, #36]	; (800f93c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d105      	bne.n	800f928 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800f91c:	4b08      	ldr	r3, [pc, #32]	; (800f940 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f91e:	4a05      	ldr	r2, [pc, #20]	; (800f934 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f920:	2129      	movs	r1, #41	; 0x29
 800f922:	4805      	ldr	r0, [pc, #20]	; (800f938 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f924:	f00d ff04 	bl	801d730 <__assert_func>
}
 800f928:	bf00      	nop
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	20007510 	.word	0x20007510
 800f930:	0801ecf4 	.word	0x0801ecf4
 800f934:	0801f7b4 	.word	0x0801f7b4
 800f938:	0801ed40 	.word	0x0801ed40
 800f93c:	20007514 	.word	0x20007514
 800f940:	0801ed6c 	.word	0x0801ed6c

0800f944 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f944:	b580      	push	{r7, lr}
 800f946:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800f948:	4b04      	ldr	r3, [pc, #16]	; (800f95c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f04f 31ff 	mov.w	r1, #4294967295
 800f950:	4618      	mov	r0, r3
 800f952:	f7f7 fee3 	bl	800771c <osSemaphoreAcquire>
}
 800f956:	bf00      	nop
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	20007510 	.word	0x20007510

0800f960 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800f960:	b580      	push	{r7, lr}
 800f962:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f964:	4b03      	ldr	r3, [pc, #12]	; (800f974 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4618      	mov	r0, r3
 800f96a:	f7f7 ff3f 	bl	80077ec <osSemaphoreRelease>
}
 800f96e:	bf00      	nop
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	20007510 	.word	0x20007510

0800f978 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800f97c:	4b03      	ldr	r3, [pc, #12]	; (800f98c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2100      	movs	r1, #0
 800f982:	4618      	mov	r0, r3
 800f984:	f7f7 feca 	bl	800771c <osSemaphoreAcquire>
}
 800f988:	bf00      	nop
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	20007510 	.word	0x20007510

0800f990 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f994:	4b03      	ldr	r3, [pc, #12]	; (800f9a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4618      	mov	r0, r3
 800f99a:	f7f7 ff27 	bl	80077ec <osSemaphoreRelease>
}
 800f99e:	bf00      	nop
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	20007510 	.word	0x20007510

0800f9a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800f9ac:	4b04      	ldr	r3, [pc, #16]	; (800f9c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800f9ae:	6818      	ldr	r0, [r3, #0]
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	4903      	ldr	r1, [pc, #12]	; (800f9c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800f9b6:	f7f7 fff9 	bl	80079ac <osMessageQueuePut>
}
 800f9ba:	bf00      	nop
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	20007514 	.word	0x20007514
 800f9c4:	2000008c 	.word	0x2000008c

0800f9c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800f9ce:	4b09      	ldr	r3, [pc, #36]	; (800f9f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f9d0:	6818      	ldr	r0, [r3, #0]
 800f9d2:	1d39      	adds	r1, r7, #4
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f7f8 f85e 	bl	8007a98 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800f9dc:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f9de:	6818      	ldr	r0, [r3, #0]
 800f9e0:	1d39      	adds	r1, r7, #4
 800f9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f7f8 f856 	bl	8007a98 <osMessageQueueGet>
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	20007514 	.word	0x20007514

0800f9f8 <__NVIC_EnableIRQ>:
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	4603      	mov	r3, r0
 800fa00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fa02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	db0d      	blt.n	800fa26 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fa0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	f003 021f 	and.w	r2, r3, #31
 800fa14:	4907      	ldr	r1, [pc, #28]	; (800fa34 <__NVIC_EnableIRQ+0x3c>)
 800fa16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa1a:	095b      	lsrs	r3, r3, #5
 800fa1c:	2001      	movs	r0, #1
 800fa1e:	fa00 f202 	lsl.w	r2, r0, r2
 800fa22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fa26:	bf00      	nop
 800fa28:	370c      	adds	r7, #12
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	e000e100 	.word	0xe000e100

0800fa38 <__NVIC_DisableIRQ>:
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	4603      	mov	r3, r0
 800fa40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fa42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	db12      	blt.n	800fa70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fa4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	f003 021f 	and.w	r2, r3, #31
 800fa54:	4909      	ldr	r1, [pc, #36]	; (800fa7c <__NVIC_DisableIRQ+0x44>)
 800fa56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa5a:	095b      	lsrs	r3, r3, #5
 800fa5c:	2001      	movs	r0, #1
 800fa5e:	fa00 f202 	lsl.w	r2, r0, r2
 800fa62:	3320      	adds	r3, #32
 800fa64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800fa68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fa6c:	f3bf 8f6f 	isb	sy
}
 800fa70:	bf00      	nop
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	e000e100 	.word	0xe000e100

0800fa80 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
        : color(0)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	601a      	str	r2, [r3, #0]
    }
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4618      	mov	r0, r3
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
        return color;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
    }
 800faa8:	4618      	mov	r0, r3
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    {
 800fabc:	4a04      	ldr	r2, [pc, #16]	; (800fad0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	601a      	str	r2, [r3, #0]
    }
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	0801f83c 	.word	0x0801f83c

0800fad4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
    }
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff ffe9 	bl	800fab4 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fae2:	2104      	movs	r1, #4
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f00d fdf7 	bl	801d6d8 <_ZdlPvj>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	3344      	adds	r3, #68	; 0x44
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	4798      	blx	r3
    }
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800fb18:	2300      	movs	r3, #0
    }
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
	...

0800fb28 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    {
 800fb30:	4a04      	ldr	r2, [pc, #16]	; (800fb44 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	601a      	str	r2, [r3, #0]
    }
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr
 800fb44:	080203c0 	.word	0x080203c0

0800fb48 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
    }
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff ffe9 	bl	800fb28 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800fb56:	210c      	movs	r1, #12
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f00d fdbd 	bl	801d6d8 <_ZdlPvj>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4618      	mov	r0, r3
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800fb72:	4a09      	ldr	r2, [pc, #36]	; (800fb98 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	601a      	str	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	605a      	str	r2, [r3, #4]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	721a      	strb	r2, [r3, #8]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	725a      	strb	r2, [r3, #9]
    {
    }
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr
 800fb98:	080203c0 	.word	0x080203c0

0800fb9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	685a      	ldr	r2, [r3, #4]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3314      	adds	r3, #20
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4610      	mov	r0, r2
 800fbb4:	4798      	blx	r3
    }
 800fbb6:	bf00      	nop
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b082      	sub	sp, #8
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	3328      	adds	r3, #40	; 0x28
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4610      	mov	r0, r2
 800fbd2:	4798      	blx	r3
    }
 800fbd4:	bf00      	nop
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
 800fbe8:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fbf4:	68ba      	ldr	r2, [r7, #8]
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	430a      	orrs	r2, r1
 800fbfc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc04:	f023 0107 	bic.w	r1, r3, #7
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	430a      	orrs	r2, r1
 800fc10:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800fc1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fc20:	6839      	ldr	r1, [r7, #0]
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	6812      	ldr	r2, [r2, #0]
 800fc26:	430b      	orrs	r3, r1
 800fc28:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3714      	adds	r7, #20
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800fc40:	f7fd fa36 	bl	800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fc44:	4603      	mov	r3, r0
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff ffa8 	bl	800fb9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
    assert(0);
 800fc5c:	4b02      	ldr	r3, [pc, #8]	; (800fc68 <DMA2D_XferErrorCallback+0x14>)
 800fc5e:	4a03      	ldr	r2, [pc, #12]	; (800fc6c <DMA2D_XferErrorCallback+0x18>)
 800fc60:	2136      	movs	r1, #54	; 0x36
 800fc62:	4803      	ldr	r0, [pc, #12]	; (800fc70 <DMA2D_XferErrorCallback+0x1c>)
 800fc64:	f00d fd64 	bl	801d730 <__assert_func>
 800fc68:	0801edb0 	.word	0x0801edb0
 800fc6c:	0801f858 	.word	0x0801f858
 800fc70:	0801edb4 	.word	0x0801edb4

0800fc74 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	3318      	adds	r3, #24
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff fefd 	bl	800fa80 <_ZN8touchgfx9colortypeC1Ev>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 800fc90:	b5b0      	push	{r4, r5, r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	330c      	adds	r3, #12
 800fc9e:	4619      	mov	r1, r3
 800fca0:	4610      	mov	r0, r2
 800fca2:	f7ff ff61 	bl	800fb68 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800fca6:	4a0e      	ldr	r2, [pc, #56]	; (800fce0 <_ZN10STM32F4DMAC1Ev+0x50>)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	601a      	str	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f103 000c 	add.w	r0, r3, #12
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3320      	adds	r3, #32
 800fcb6:	2260      	movs	r2, #96	; 0x60
 800fcb8:	4619      	mov	r1, r3
 800fcba:	f002 fa05 	bl	80120c8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	3320      	adds	r3, #32
 800fcc2:	245f      	movs	r4, #95	; 0x5f
 800fcc4:	461d      	mov	r5, r3
 800fcc6:	2c00      	cmp	r4, #0
 800fcc8:	db05      	blt.n	800fcd6 <_ZN10STM32F4DMAC1Ev+0x46>
 800fcca:	4628      	mov	r0, r5
 800fccc:	f7ff ffd2 	bl	800fc74 <_ZN8touchgfx6BlitOpC1Ev>
 800fcd0:	3520      	adds	r5, #32
 800fcd2:	3c01      	subs	r4, #1
 800fcd4:	e7f7      	b.n	800fcc6 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bdb0      	pop	{r4, r5, r7, pc}
 800fce0:	0801f7ec 	.word	0x0801f7ec

0800fce4 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	4a0b      	ldr	r2, [pc, #44]	; (800fd1c <_ZN10STM32F4DMAD1Ev+0x38>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800fcf2:	480b      	ldr	r0, [pc, #44]	; (800fd20 <_ZN10STM32F4DMAD1Ev+0x3c>)
 800fcf4:	f7f2 fc64 	bl	80025c0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 800fcf8:	205a      	movs	r0, #90	; 0x5a
 800fcfa:	f7ff fe9d 	bl	800fa38 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	330c      	adds	r3, #12
 800fd02:	4618      	mov	r0, r3
 800fd04:	f000 faa4 	bl	8010250 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff ff0c 	bl	800fb28 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4618      	mov	r0, r3
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	0801f7ec 	.word	0x0801f7ec
 800fd20:	20008920 	.word	0x20008920

0800fd24 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
}
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff ffd9 	bl	800fce4 <_ZN10STM32F4DMAD1Ev>
 800fd32:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f00d fcce 	bl	801d6d8 <_ZdlPvj>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
	...

0800fd48 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800fd50:	4b09      	ldr	r3, [pc, #36]	; (800fd78 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800fd52:	4a0a      	ldr	r2, [pc, #40]	; (800fd7c <_ZN10STM32F4DMA10initializeEv+0x34>)
 800fd54:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 800fd56:	4808      	ldr	r0, [pc, #32]	; (800fd78 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800fd58:	f7f2 fbe8 	bl	800252c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800fd5c:	4b06      	ldr	r3, [pc, #24]	; (800fd78 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800fd5e:	4a08      	ldr	r2, [pc, #32]	; (800fd80 <_ZN10STM32F4DMA10initializeEv+0x38>)
 800fd60:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800fd64:	4a07      	ldr	r2, [pc, #28]	; (800fd84 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 800fd66:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 800fd68:	205a      	movs	r0, #90	; 0x5a
 800fd6a:	f7ff fe45 	bl	800f9f8 <__NVIC_EnableIRQ>
}
 800fd6e:	bf00      	nop
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	20008920 	.word	0x20008920
 800fd7c:	4002b000 	.word	0x4002b000
 800fd80:	0800fc39 	.word	0x0800fc39
 800fd84:	0800fc55 	.word	0x0800fc55

0800fd88 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 800fd90:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800fda0:	b590      	push	{r4, r7, lr}
 800fda2:	b08d      	sub	sp, #52	; 0x34
 800fda4:	af02      	add	r7, sp, #8
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800fdaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fdae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800fdb8:	2b20      	cmp	r3, #32
 800fdba:	d007      	beq.n	800fdcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b40      	cmp	r3, #64	; 0x40
 800fdc2:	d003      	beq.n	800fdcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b04      	cmp	r3, #4
 800fdca:	d101      	bne.n	800fdd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e000      	b.n	800fdd2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 800fdd0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800fdd2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800fdd8:	2b80      	cmp	r3, #128	; 0x80
 800fdda:	d004      	beq.n	800fde6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fde4:	d101      	bne.n	800fdea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800fde6:	2301      	movs	r3, #1
 800fde8:	e000      	b.n	800fdec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800fdea:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800fdec:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800fdee:	f7fd f96b 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	6813      	ldr	r3, [r2, #0]
 800fdf6:	331c      	adds	r3, #28
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	4798      	blx	r3
 800fdfe:	4603      	mov	r3, r0
 800fe00:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b40      	cmp	r3, #64	; 0x40
 800fe08:	d01d      	beq.n	800fe46 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800fe0a:	2b40      	cmp	r3, #64	; 0x40
 800fe0c:	d804      	bhi.n	800fe18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800fe0e:	2b04      	cmp	r3, #4
 800fe10:	d00e      	beq.n	800fe30 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800fe12:	2b20      	cmp	r3, #32
 800fe14:	d017      	beq.n	800fe46 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800fe16:	e019      	b.n	800fe4c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800fe18:	2b80      	cmp	r3, #128	; 0x80
 800fe1a:	d003      	beq.n	800fe24 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800fe1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe20:	d003      	beq.n	800fe2a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800fe22:	e013      	b.n	800fe4c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 800fe24:	230a      	movs	r3, #10
 800fe26:	623b      	str	r3, [r7, #32]
        break;
 800fe28:	e01a      	b.n	800fe60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800fe2a:	2309      	movs	r3, #9
 800fe2c:	623b      	str	r3, [r7, #32]
        break;
 800fe2e:	e017      	b.n	800fe60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800fe30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fe34:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800fe36:	7f7b      	ldrb	r3, [r7, #29]
 800fe38:	2b10      	cmp	r3, #16
 800fe3a:	d101      	bne.n	800fe40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	e000      	b.n	800fe42 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800fe40:	2301      	movs	r3, #1
 800fe42:	623b      	str	r3, [r7, #32]
        break;
 800fe44:	e00c      	b.n	800fe60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 800fe46:	2300      	movs	r3, #0
 800fe48:	623b      	str	r3, [r7, #32]
        break;
 800fe4a:	e009      	b.n	800fe60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800fe50:	7f7b      	ldrb	r3, [r7, #29]
 800fe52:	2b10      	cmp	r3, #16
 800fe54:	d101      	bne.n	800fe5a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 800fe56:	2302      	movs	r3, #2
 800fe58:	e000      	b.n	800fe5c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	623b      	str	r3, [r7, #32]
        break;
 800fe5e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800fe60:	4a75      	ldr	r2, [pc, #468]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800fe62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe64:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800fe66:	7f7b      	ldrb	r3, [r7, #29]
 800fe68:	2b10      	cmp	r3, #16
 800fe6a:	d101      	bne.n	800fe70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	e000      	b.n	800fe72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800fe70:	2301      	movs	r3, #1
 800fe72:	4a71      	ldr	r2, [pc, #452]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800fe74:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	8adb      	ldrh	r3, [r3, #22]
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	8a1b      	ldrh	r3, [r3, #16]
 800fe80:	1ad3      	subs	r3, r2, r3
 800fe82:	461a      	mov	r2, r3
 800fe84:	4b6c      	ldr	r3, [pc, #432]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800fe86:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800fe88:	7f7b      	ldrb	r3, [r7, #29]
 800fe8a:	2b10      	cmp	r3, #16
 800fe8c:	d101      	bne.n	800fe92 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800fe8e:	2202      	movs	r2, #2
 800fe90:	e000      	b.n	800fe94 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 800fe92:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	8adb      	ldrh	r3, [r3, #22]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	8a1b      	ldrh	r3, [r3, #16]
 800fe9e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800fea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fea2:	4865      	ldr	r0, [pc, #404]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800fea4:	f7ff fe9a 	bl	800fbdc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800fea8:	4a63      	ldr	r2, [pc, #396]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	8a9b      	ldrh	r3, [r3, #20]
 800feb2:	461a      	mov	r2, r3
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	8a1b      	ldrh	r3, [r3, #16]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	461a      	mov	r2, r3
 800febc:	4b5e      	ldr	r3, [pc, #376]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800febe:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 800fec0:	7ffb      	ldrb	r3, [r7, #31]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d103      	bne.n	800fece <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800fec6:	7fbb      	ldrb	r3, [r7, #30]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 8081 	beq.w	800ffd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	7f1b      	ldrb	r3, [r3, #28]
 800fed2:	2bff      	cmp	r3, #255	; 0xff
 800fed4:	d008      	beq.n	800fee8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800fed6:	4b58      	ldr	r3, [pc, #352]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800fed8:	2202      	movs	r2, #2
 800feda:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	7f1b      	ldrb	r3, [r3, #28]
 800fee0:	461a      	mov	r2, r3
 800fee2:	4b55      	ldr	r3, [pc, #340]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800fee4:	635a      	str	r2, [r3, #52]	; 0x34
 800fee6:	e002      	b.n	800feee <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800fee8:	4b53      	ldr	r3, [pc, #332]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800feea:	2200      	movs	r2, #0
 800feec:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800feee:	7fbb      	ldrb	r3, [r7, #30]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d058      	beq.n	800ffa6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 800fef4:	7f7b      	ldrb	r3, [r7, #29]
 800fef6:	2b10      	cmp	r3, #16
 800fef8:	d14a      	bne.n	800ff90 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	3318      	adds	r3, #24
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7ff fdcc 	bl	800fa9c <_ZNK8touchgfx9colortypecvmEv>
 800ff04:	4603      	mov	r3, r0
 800ff06:	0adb      	lsrs	r3, r3, #11
 800ff08:	f003 021f 	and.w	r2, r3, #31
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	021b      	lsls	r3, r3, #8
 800ff10:	1a9a      	subs	r2, r3, r2
 800ff12:	4b4a      	ldr	r3, [pc, #296]	; (801003c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ff14:	fba3 1302 	umull	r1, r3, r3, r2
 800ff18:	1ad2      	subs	r2, r2, r3
 800ff1a:	0852      	lsrs	r2, r2, #1
 800ff1c:	4413      	add	r3, r2
 800ff1e:	091b      	lsrs	r3, r3, #4
 800ff20:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3318      	adds	r3, #24
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff fdb8 	bl	800fa9c <_ZNK8touchgfx9colortypecvmEv>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	095b      	lsrs	r3, r3, #5
 800ff30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ff34:	4613      	mov	r3, r2
 800ff36:	021b      	lsls	r3, r3, #8
 800ff38:	1a9a      	subs	r2, r3, r2
 800ff3a:	4b41      	ldr	r3, [pc, #260]	; (8010040 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800ff3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ff40:	1ad2      	subs	r2, r2, r3
 800ff42:	0852      	lsrs	r2, r2, #1
 800ff44:	4413      	add	r3, r2
 800ff46:	095b      	lsrs	r3, r3, #5
 800ff48:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	3318      	adds	r3, #24
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7ff fda4 	bl	800fa9c <_ZNK8touchgfx9colortypecvmEv>
 800ff54:	4603      	mov	r3, r0
 800ff56:	f003 021f 	and.w	r2, r3, #31
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	021b      	lsls	r3, r3, #8
 800ff5e:	1a9a      	subs	r2, r3, r2
 800ff60:	4b36      	ldr	r3, [pc, #216]	; (801003c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ff62:	fba3 1302 	umull	r1, r3, r3, r2
 800ff66:	1ad2      	subs	r2, r2, r3
 800ff68:	0852      	lsrs	r2, r2, #1
 800ff6a:	4413      	add	r3, r2
 800ff6c:	091b      	lsrs	r3, r3, #4
 800ff6e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	7f1b      	ldrb	r3, [r3, #28]
 800ff74:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	061a      	lsls	r2, r3, #24
 800ff7a:	69bb      	ldr	r3, [r7, #24]
 800ff7c:	041b      	lsls	r3, r3, #16
 800ff7e:	431a      	orrs	r2, r3
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	021b      	lsls	r3, r3, #8
 800ff84:	431a      	orrs	r2, r3
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	4a2b      	ldr	r2, [pc, #172]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ff8c:	6353      	str	r3, [r2, #52]	; 0x34
 800ff8e:	e00a      	b.n	800ffa6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	3318      	adds	r3, #24
 800ff94:	60bb      	str	r3, [r7, #8]
        return color;
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	7f12      	ldrb	r2, [r2, #28]
 800ff9e:	0612      	lsls	r2, r2, #24
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	4a25      	ldr	r2, [pc, #148]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ffa4:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	8adb      	ldrh	r3, [r3, #22]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	8a1b      	ldrh	r3, [r3, #16]
 800ffb0:	1ad3      	subs	r3, r2, r3
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	4b20      	ldr	r3, [pc, #128]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ffb6:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ffb8:	7f7b      	ldrb	r3, [r7, #29]
 800ffba:	2b10      	cmp	r3, #16
 800ffbc:	d101      	bne.n	800ffc2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	e000      	b.n	800ffc4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	4a1c      	ldr	r2, [pc, #112]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ffc6:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800ffc8:	2100      	movs	r1, #0
 800ffca:	481b      	ldr	r0, [pc, #108]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ffcc:	f7f2 fd78 	bl	8002ac0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800ffd0:	2101      	movs	r1, #1
 800ffd2:	4819      	ldr	r0, [pc, #100]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ffd4:	f7f2 fd74 	bl	8002ac0 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 800ffd8:	7ffb      	ldrb	r3, [r7, #31]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d102      	bne.n	800ffe4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 800ffde:	7fbb      	ldrb	r3, [r7, #30]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d015      	beq.n	8010010 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800ffe8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800ffee:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800fff4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800fffa:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	9200      	str	r2, [sp, #0]
 8010004:	4623      	mov	r3, r4
 8010006:	4602      	mov	r2, r0
 8010008:	480b      	ldr	r0, [pc, #44]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801000a:	f7f2 fb7c 	bl	8002706 <HAL_DMA2D_BlendingStart_IT>
 801000e:	e00f      	b.n	8010030 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010014:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801001a:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010020:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	4603      	mov	r3, r0
 801002a:	4803      	ldr	r0, [pc, #12]	; (8010038 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801002c:	f7f2 fb38 	bl	80026a0 <HAL_DMA2D_Start_IT>
    }
}
 8010030:	bf00      	nop
 8010032:	372c      	adds	r7, #44	; 0x2c
 8010034:	46bd      	mov	sp, r7
 8010036:	bd90      	pop	{r4, r7, pc}
 8010038:	20008920 	.word	0x20008920
 801003c:	08421085 	.word	0x08421085
 8010040:	04104105 	.word	0x04104105

08010044 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8010044:	b590      	push	{r4, r7, lr}
 8010046:	b08f      	sub	sp, #60	; 0x3c
 8010048:	af02      	add	r7, sp, #8
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801004e:	f7fd f83b 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8010052:	4602      	mov	r2, r0
 8010054:	6813      	ldr	r3, [r2, #0]
 8010056:	331c      	adds	r3, #28
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4610      	mov	r0, r2
 801005c:	4798      	blx	r3
 801005e:	4603      	mov	r3, r0
 8010060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8010064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010068:	2b10      	cmp	r3, #16
 801006a:	d101      	bne.n	8010070 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 801006c:	2302      	movs	r3, #2
 801006e:	e000      	b.n	8010072 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8010070:	2301      	movs	r3, #1
 8010072:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8010078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801007c:	2b10      	cmp	r3, #16
 801007e:	d149      	bne.n	8010114 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	3318      	adds	r3, #24
 8010084:	4618      	mov	r0, r3
 8010086:	f7ff fd09 	bl	800fa9c <_ZNK8touchgfx9colortypecvmEv>
 801008a:	4603      	mov	r3, r0
 801008c:	0adb      	lsrs	r3, r3, #11
 801008e:	f003 021f 	and.w	r2, r3, #31
 8010092:	4613      	mov	r3, r2
 8010094:	021b      	lsls	r3, r3, #8
 8010096:	1a9a      	subs	r2, r3, r2
 8010098:	4b6a      	ldr	r3, [pc, #424]	; (8010244 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801009a:	fba3 1302 	umull	r1, r3, r3, r2
 801009e:	1ad2      	subs	r2, r2, r3
 80100a0:	0852      	lsrs	r2, r2, #1
 80100a2:	4413      	add	r3, r2
 80100a4:	091b      	lsrs	r3, r3, #4
 80100a6:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	3318      	adds	r3, #24
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff fcf5 	bl	800fa9c <_ZNK8touchgfx9colortypecvmEv>
 80100b2:	4603      	mov	r3, r0
 80100b4:	095b      	lsrs	r3, r3, #5
 80100b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80100ba:	4613      	mov	r3, r2
 80100bc:	021b      	lsls	r3, r3, #8
 80100be:	1a9a      	subs	r2, r3, r2
 80100c0:	4b61      	ldr	r3, [pc, #388]	; (8010248 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 80100c2:	fba3 1302 	umull	r1, r3, r3, r2
 80100c6:	1ad2      	subs	r2, r2, r3
 80100c8:	0852      	lsrs	r2, r2, #1
 80100ca:	4413      	add	r3, r2
 80100cc:	095b      	lsrs	r3, r3, #5
 80100ce:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	3318      	adds	r3, #24
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7ff fce1 	bl	800fa9c <_ZNK8touchgfx9colortypecvmEv>
 80100da:	4603      	mov	r3, r0
 80100dc:	f003 021f 	and.w	r2, r3, #31
 80100e0:	4613      	mov	r3, r2
 80100e2:	021b      	lsls	r3, r3, #8
 80100e4:	1a9a      	subs	r2, r3, r2
 80100e6:	4b57      	ldr	r3, [pc, #348]	; (8010244 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80100e8:	fba3 1302 	umull	r1, r3, r3, r2
 80100ec:	1ad2      	subs	r2, r2, r3
 80100ee:	0852      	lsrs	r2, r2, #1
 80100f0:	4413      	add	r3, r2
 80100f2:	091b      	lsrs	r3, r3, #4
 80100f4:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	7f1b      	ldrb	r3, [r3, #28]
 80100fa:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	061a      	lsls	r2, r3, #24
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	041b      	lsls	r3, r3, #16
 8010104:	431a      	orrs	r2, r3
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	021b      	lsls	r3, r3, #8
 801010a:	4313      	orrs	r3, r2
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	4313      	orrs	r3, r2
 8010110:	62bb      	str	r3, [r7, #40]	; 0x28
 8010112:	e00a      	b.n	801012a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	7f1b      	ldrb	r3, [r3, #28]
 8010118:	061b      	lsls	r3, r3, #24
 801011a:	461a      	mov	r2, r3
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	3318      	adds	r3, #24
 8010120:	60fb      	str	r3, [r7, #12]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4313      	orrs	r3, r2
 8010128:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b08      	cmp	r3, #8
 8010130:	d103      	bne.n	801013a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8010132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010138:	e003      	b.n	8010142 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801013a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801013e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010140:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8010142:	4a42      	ldr	r2, [pc, #264]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8010144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010146:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8010148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801014c:	2b10      	cmp	r3, #16
 801014e:	d101      	bne.n	8010154 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8010150:	2302      	movs	r3, #2
 8010152:	e000      	b.n	8010156 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8010154:	2301      	movs	r3, #1
 8010156:	4a3d      	ldr	r2, [pc, #244]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8010158:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	8adb      	ldrh	r3, [r3, #22]
 801015e:	461a      	mov	r2, r3
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	8a1b      	ldrh	r3, [r3, #16]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	461a      	mov	r2, r3
 8010168:	4b38      	ldr	r3, [pc, #224]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801016a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801016c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010170:	2b10      	cmp	r3, #16
 8010172:	d101      	bne.n	8010178 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8010174:	2202      	movs	r2, #2
 8010176:	e000      	b.n	801017a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8010178:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	8adb      	ldrh	r3, [r3, #22]
 801017e:	4619      	mov	r1, r3
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	8a1b      	ldrh	r3, [r3, #16]
 8010184:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8010186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010188:	4830      	ldr	r0, [pc, #192]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801018a:	f7ff fd27 	bl	800fbdc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801018e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010194:	d11f      	bne.n	80101d6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8010196:	4b2d      	ldr	r3, [pc, #180]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8010198:	2201      	movs	r2, #1
 801019a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801019c:	4a2b      	ldr	r2, [pc, #172]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801019e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a0:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80101a2:	4b2a      	ldr	r3, [pc, #168]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101a4:	2209      	movs	r2, #9
 80101a6:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	8adb      	ldrh	r3, [r3, #22]
 80101ac:	461a      	mov	r2, r3
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	8a1b      	ldrh	r3, [r3, #16]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	461a      	mov	r2, r3
 80101b6:	4b25      	ldr	r3, [pc, #148]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101b8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80101ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101be:	2b10      	cmp	r3, #16
 80101c0:	d101      	bne.n	80101c6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 80101c2:	2302      	movs	r3, #2
 80101c4:	e000      	b.n	80101c8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 80101c6:	2301      	movs	r3, #1
 80101c8:	4a20      	ldr	r2, [pc, #128]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101ca:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80101cc:	2100      	movs	r1, #0
 80101ce:	481f      	ldr	r0, [pc, #124]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101d0:	f7f2 fc76 	bl	8002ac0 <HAL_DMA2D_ConfigLayer>
 80101d4:	e005      	b.n	80101e2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80101d6:	4a1d      	ldr	r2, [pc, #116]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80101dc:	4b1b      	ldr	r3, [pc, #108]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101de:	2200      	movs	r2, #0
 80101e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80101e2:	2101      	movs	r1, #1
 80101e4:	4819      	ldr	r0, [pc, #100]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80101e6:	f7f2 fc6b 	bl	8002ac0 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80101ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80101f0:	d115      	bne.n	801021e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80101f6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80101fc:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010202:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010208:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	9200      	str	r2, [sp, #0]
 8010212:	4623      	mov	r3, r4
 8010214:	4602      	mov	r2, r0
 8010216:	480d      	ldr	r0, [pc, #52]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8010218:	f7f2 fa75 	bl	8002706 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801021c:	e00d      	b.n	801023a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8010228:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	460b      	mov	r3, r1
 8010232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010234:	4805      	ldr	r0, [pc, #20]	; (801024c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8010236:	f7f2 fa33 	bl	80026a0 <HAL_DMA2D_Start_IT>
}
 801023a:	bf00      	nop
 801023c:	3734      	adds	r7, #52	; 0x34
 801023e:	46bd      	mov	sp, r7
 8010240:	bd90      	pop	{r4, r7, pc}
 8010242:	bf00      	nop
 8010244:	08421085 	.word	0x08421085
 8010248:	04104105 	.word	0x04104105
 801024c:	20008920 	.word	0x20008920

08010250 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	4a05      	ldr	r2, [pc, #20]	; (8010270 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	601a      	str	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fc27 	bl	800fab4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	08020410 	.word	0x08020410

08010274 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff ffe7 	bl	8010250 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010282:	2114      	movs	r1, #20
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f00d fa27 	bl	801d6d8 <_ZdlPvj>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4618      	mov	r0, r3
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
        texts = t;
 801029c:	4a04      	ldr	r2, [pc, #16]	; (80102b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6013      	str	r3, [r2, #0]
    }
 80102a2:	bf00      	nop
 80102a4:	370c      	adds	r7, #12
 80102a6:	46bd      	mov	sp, r7
 80102a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop
 80102b0:	20008568 	.word	0x20008568

080102b4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80102b4:	b480      	push	{r7}
 80102b6:	b085      	sub	sp, #20
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	607a      	str	r2, [r7, #4]
 80102c0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80102c2:	4a0b      	ldr	r2, [pc, #44]	; (80102f0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	601a      	str	r2, [r3, #0]
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	605a      	str	r2, [r3, #4]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	609a      	str	r2, [r3, #8]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	60da      	str	r2, [r3, #12]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	69ba      	ldr	r2, [r7, #24]
 80102de:	611a      	str	r2, [r3, #16]
    {
    }
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	4618      	mov	r0, r3
 80102e4:	3714      	adds	r7, #20
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	0801f958 	.word	0x0801f958

080102f4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    {
 80102fc:	4a04      	ldr	r2, [pc, #16]	; (8010310 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	601a      	str	r2, [r3, #0]
    }
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	0801f958 	.word	0x0801f958

08010314 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
    }
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7ff ffe9 	bl	80102f4 <_ZN8touchgfx7MVPHeapD1Ev>
 8010322:	2114      	movs	r1, #20
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f00d f9d7 	bl	801d6d8 <_ZdlPvj>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
    {
 801033c:	4a04      	ldr	r2, [pc, #16]	; (8010350 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	601a      	str	r2, [r3, #0]
    }
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4618      	mov	r0, r3
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr
 8010350:	0802088c 	.word	0x0802088c

08010354 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
    }
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff ffe9 	bl	8010334 <_ZN8touchgfx3LCDD1Ev>
 8010362:	2108      	movs	r1, #8
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f00d f9b7 	bl	801d6d8 <_ZdlPvj>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4618      	mov	r0, r3
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	801a      	strh	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	805a      	strh	r2, [r3, #2]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	809a      	strh	r2, [r3, #4]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	80da      	strh	r2, [r3, #6]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	811a      	strh	r2, [r3, #8]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	815a      	strh	r2, [r3, #10]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	819a      	strh	r2, [r3, #12]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	739a      	strb	r2, [r3, #14]
        {
        }
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr

080103ba <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7ff ffd5 	bl	8010374 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	611a      	str	r2, [r3, #16]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	829a      	strh	r2, [r3, #20]
    {
    }
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
 80103ec:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 80103ee:	4a44      	ldr	r2, [pc, #272]	; (8010500 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	601a      	str	r2, [r3, #0]
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	68ba      	ldr	r2, [r7, #8]
 80103f8:	605a      	str	r2, [r3, #4]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	609a      	str	r2, [r3, #8]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	611a      	str	r2, [r3, #16]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2200      	movs	r2, #0
 8010410:	615a      	str	r2, [r3, #20]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2200      	movs	r2, #0
 8010416:	619a      	str	r2, [r3, #24]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	331c      	adds	r3, #28
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff ffcc 	bl	80103ba <_ZN8touchgfx8GesturesC1Ev>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2200      	movs	r2, #0
 8010426:	639a      	str	r2, [r3, #56]	; 0x38
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	63da      	str	r2, [r3, #60]	; 0x3c
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2200      	movs	r2, #0
 8010432:	641a      	str	r2, [r3, #64]	; 0x40
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2200      	movs	r2, #0
 8010438:	645a      	str	r2, [r3, #68]	; 0x44
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2200      	movs	r2, #0
 801043e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2201      	movs	r2, #1
 8010446:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2200      	movs	r2, #0
 8010456:	64da      	str	r2, [r3, #76]	; 0x4c
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3350      	adds	r3, #80	; 0x50
 801045c:	4618      	mov	r0, r3
 801045e:	f7fd fa4e 	bl	800d8fe <_ZN8touchgfx4RectC1Ev>
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2201      	movs	r2, #1
 8010466:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2200      	movs	r2, #0
 8010476:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2201      	movs	r2, #1
 801047e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2200      	movs	r2, #0
 8010486:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2200      	movs	r2, #0
 8010496:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2200      	movs	r2, #0
 80104ae:	671a      	str	r2, [r3, #112]	; 0x70
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80104b8:	4a12      	ldr	r2, [pc, #72]	; (8010504 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80104be:	4a12      	ldr	r2, [pc, #72]	; (8010508 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80104c0:	8b3b      	ldrh	r3, [r7, #24]
 80104c2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80104c4:	4a11      	ldr	r2, [pc, #68]	; (801050c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80104c6:	8bbb      	ldrh	r3, [r7, #28]
 80104c8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80104ca:	4b11      	ldr	r3, [pc, #68]	; (8010510 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80104d0:	4b0d      	ldr	r3, [pc, #52]	; (8010508 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80104d2:	881a      	ldrh	r2, [r3, #0]
 80104d4:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80104d6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80104d8:	4b0c      	ldr	r3, [pc, #48]	; (801050c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80104da:	881a      	ldrh	r2, [r3, #0]
 80104dc:	4b0e      	ldr	r3, [pc, #56]	; (8010518 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80104de:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80104e0:	8b3a      	ldrh	r2, [r7, #24]
 80104e2:	8bbb      	ldrh	r3, [r7, #28]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d301      	bcc.n	80104ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80104e8:	2200      	movs	r2, #0
 80104ea:	e000      	b.n	80104ee <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80104ec:	2201      	movs	r2, #1
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	0801ff7c 	.word	0x0801ff7c
 8010504:	200084ec 	.word	0x200084ec
 8010508:	200084e0 	.word	0x200084e0
 801050c:	200084e2 	.word	0x200084e2
 8010510:	200084e4 	.word	0x200084e4
 8010514:	200084e6 	.word	0x200084e6
 8010518:	200084e8 	.word	0x200084e8

0801051c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	4618      	mov	r0, r3
 801052a:	f7fc ff39 	bl	800d3a0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801052e:	bf00      	nop
 8010530:	3708      	adds	r7, #8
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
	...

08010538 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af02      	add	r7, sp, #8
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
 8010544:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	68b9      	ldr	r1, [r7, #8]
 8010552:	f7ff feaf 	bl	80102b4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8010556:	4a04      	ldr	r2, [pc, #16]	; (8010568 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	601a      	str	r2, [r3, #0]
    {

    }
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	0801f944 	.word	0x0801f944

0801056c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801056c:	b580      	push	{r7, lr}
 801056e:	af00      	add	r7, sp, #0
 8010570:	4801      	ldr	r0, [pc, #4]	; (8010578 <__tcf_0+0xc>)
 8010572:	f000 f94b 	bl	801080c <_ZN12FrontendHeapD1Ev>
 8010576:	bd80      	pop	{r7, pc}
 8010578:	20007518 	.word	0x20007518

0801057c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801057c:	b580      	push	{r7, lr}
 801057e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8010580:	4b08      	ldr	r3, [pc, #32]	; (80105a4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	d108      	bne.n	801059e <_ZN12FrontendHeap11getInstanceEv+0x22>
 801058c:	4806      	ldr	r0, [pc, #24]	; (80105a8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801058e:	f000 f867 	bl	8010660 <_ZN12FrontendHeapC1Ev>
 8010592:	4b04      	ldr	r3, [pc, #16]	; (80105a4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8010594:	2201      	movs	r2, #1
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	4804      	ldr	r0, [pc, #16]	; (80105ac <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801059a:	f00d f8e7 	bl	801d76c <atexit>
        return instance;
 801059e:	4b02      	ldr	r3, [pc, #8]	; (80105a8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80105a0:	4618      	mov	r0, r3
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	200077dc 	.word	0x200077dc
 80105a8:	20007518 	.word	0x20007518
 80105ac:	0801056d 	.word	0x0801056d

080105b0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	4a05      	ldr	r2, [pc, #20]	; (80105d0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	601a      	str	r2, [r3, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff fe97 	bl	80102f4 <_ZN8touchgfx7MVPHeapD1Ev>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	0801f944 	.word	0x0801f944

080105d4 <_ZN16FrontendHeapBaseD0Ev>:
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff ffe7 	bl	80105b0 <_ZN16FrontendHeapBaseD1Ev>
 80105e2:	2114      	movs	r1, #20
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f00d f877 	bl	801d6d8 <_ZdlPvj>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4618      	mov	r0, r3
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4618      	mov	r0, r3
 8010600:	f000 fcde 	bl	8010fc0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010604:	4a03      	ldr	r2, [pc, #12]	; (8010614 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	601a      	str	r2, [r3, #0]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	0801f910 	.word	0x0801f910

08010618 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	4618      	mov	r0, r3
 8010624:	f000 fccc 	bl	8010fc0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010628:	4a03      	ldr	r2, [pc, #12]	; (8010638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	0801f8dc 	.word	0x0801f8dc

0801063c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4618      	mov	r0, r3
 8010648:	f000 fcba 	bl	8010fc0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801064c:	4a03      	ldr	r2, [pc, #12]	; (801065c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	0801f8a8 	.word	0x0801f8a8

08010660 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8010660:	b590      	push	{r4, r7, lr}
 8010662:	b085      	sub	sp, #20
 8010664:	af02      	add	r7, sp, #8
 8010666:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f103 0114 	add.w	r1, r3, #20
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4623      	mov	r3, r4
 8010686:	f7ff ff57 	bl	8010538 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801068a:	4a18      	ldr	r2, [pc, #96]	; (80106ec <_ZN12FrontendHeapC1Ev+0x8c>)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	601a      	str	r2, [r3, #0]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	3314      	adds	r3, #20
 8010694:	4618      	mov	r0, r3
 8010696:	f7ff ffad 	bl	80105f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	332c      	adds	r3, #44	; 0x2c
 801069e:	4618      	mov	r0, r3
 80106a0:	f7ff ffba 	bl	8010618 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7ff ffc6 	bl	801063c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe f9d0 	bl	800ea5c <_ZN5ModelC1Ev>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f503 70b6 	add.w	r0, r3, #364	; 0x16c
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	4619      	mov	r1, r3
 80106cc:	f7fe f9b0 	bl	800ea30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80106d8:	4619      	mov	r1, r3
 80106da:	4610      	mov	r0, r2
 80106dc:	f7ff ff1e 	bl	801051c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4618      	mov	r0, r3
 80106e4:	370c      	adds	r7, #12
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd90      	pop	{r4, r7, pc}
 80106ea:	bf00      	nop
 80106ec:	0801f894 	.word	0x0801f894

080106f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b086      	sub	sp, #24
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	607a      	str	r2, [r7, #4]
 80106fc:	603b      	str	r3, [r7, #0]
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	8bbb      	ldrh	r3, [r7, #28]
 8010702:	9301      	str	r3, [sp, #4]
 8010704:	8b3b      	ldrh	r3, [r7, #24]
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	68b9      	ldr	r1, [r7, #8]
 801070e:	f7ff fe67 	bl	80103e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8010712:	4a04      	ldr	r2, [pc, #16]	; (8010724 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	601a      	str	r2, [r3, #0]
    }
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	4618      	mov	r0, r3
 801071c:	3710      	adds	r7, #16
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	0801f968 	.word	0x0801f968

08010728 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8010728:	b580      	push	{r7, lr}
 801072a:	b086      	sub	sp, #24
 801072c:	af02      	add	r7, sp, #8
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	607a      	str	r2, [r7, #4]
 8010734:	603b      	str	r3, [r7, #0]
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	8bbb      	ldrh	r3, [r7, #28]
 801073a:	9301      	str	r3, [sp, #4]
 801073c:	8b3b      	ldrh	r3, [r7, #24]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	68b9      	ldr	r1, [r7, #8]
 8010746:	f7ff ffd3 	bl	80106f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801074a:	4a04      	ldr	r2, [pc, #16]	; (801075c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	601a      	str	r2, [r3, #0]
    }
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	0801f664 	.word	0x0801f664

08010760 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	4a04      	ldr	r2, [pc, #16]	; (801077c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	0801f64c 	.word	0x0801f64c

08010780 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4618      	mov	r0, r3
 801078c:	f7ff ffe8 	bl	8010760 <_ZN8touchgfx15TouchControllerC1Ev>
 8010790:	4a03      	ldr	r2, [pc, #12]	; (80107a0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	601a      	str	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4618      	mov	r0, r3
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	0801f634 	.word	0x0801f634

080107a4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80107a4:	b590      	push	{r4, r7, lr}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80107aa:	f7fd ff1d 	bl	800e5e8 <_ZN14BitmapDatabase11getInstanceEv>
 80107ae:	4604      	mov	r4, r0
 80107b0:	f7fd ff24 	bl	800e5fc <_ZN14BitmapDatabase15getInstanceSizeEv>
 80107b4:	4603      	mov	r3, r0
 80107b6:	4619      	mov	r1, r3
 80107b8:	2300      	movs	r3, #0
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	2300      	movs	r3, #0
 80107be:	2200      	movs	r2, #0
 80107c0:	4620      	mov	r0, r4
 80107c2:	f004 fd4b 	bl	801525c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80107c6:	4809      	ldr	r0, [pc, #36]	; (80107ec <touchgfx_init+0x48>)
 80107c8:	f7ff fd64 	bl	8010294 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80107cc:	2000      	movs	r0, #0
 80107ce:	f7fe f84d 	bl	800e86c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80107d2:	4807      	ldr	r0, [pc, #28]	; (80107f0 <touchgfx_init+0x4c>)
 80107d4:	f004 fc8c 	bl	80150f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80107d8:	f7ff fed0 	bl	801057c <_ZN12FrontendHeap11getInstanceEv>
 80107dc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80107de:	4805      	ldr	r0, [pc, #20]	; (80107f4 <touchgfx_init+0x50>)
 80107e0:	f7fe ffe2 	bl	800f7a8 <_ZN11TouchGFXHAL10initializeEv>
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd90      	pop	{r4, r7, pc}
 80107ec:	20008460 	.word	0x20008460
 80107f0:	20000090 	.word	0x20000090
 80107f4:	20008464 	.word	0x20008464

080107f8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80107fc:	4802      	ldr	r0, [pc, #8]	; (8010808 <touchgfx_taskEntry+0x10>)
 80107fe:	f000 fdf0 	bl	80113e2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8010802:	bf00      	nop
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	20008464 	.word	0x20008464

0801080c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	4a10      	ldr	r2, [pc, #64]	; (8010858 <_ZN12FrontendHeapD1Ev+0x4c>)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	601a      	str	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8010820:	4618      	mov	r0, r3
 8010822:	f7fe f8cf 	bl	800e9c4 <_ZN19FrontendApplicationD1Ev>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801082c:	4618      	mov	r0, r3
 801082e:	f000 f827 	bl	8010880 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	332c      	adds	r3, #44	; 0x2c
 8010836:	4618      	mov	r0, r3
 8010838:	f000 f844 	bl	80108c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	3314      	adds	r3, #20
 8010840:	4618      	mov	r0, r3
 8010842:	f000 f863 	bl	801090c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff feb1 	bl	80105b0 <_ZN16FrontendHeapBaseD1Ev>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	0801f894 	.word	0x0801f894

0801085c <_ZN12FrontendHeapD0Ev>:
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7ff ffd1 	bl	801080c <_ZN12FrontendHeapD1Ev>
 801086a:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f00c ff32 	bl	801d6d8 <_ZdlPvj>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4618      	mov	r0, r3
 8010878:	3708      	adds	r7, #8
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
	...

08010880 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	4a05      	ldr	r2, [pc, #20]	; (80108a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	601a      	str	r2, [r3, #0]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	f000 fb93 	bl	8010fbc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	0801f8a8 	.word	0x0801f8a8

080108a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7ff ffe7 	bl	8010880 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80108b2:	2114      	movs	r1, #20
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f00c ff0f 	bl	801d6d8 <_ZdlPvj>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	4a05      	ldr	r2, [pc, #20]	; (80108e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	601a      	str	r2, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 fb71 	bl	8010fbc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	0801f8dc 	.word	0x0801f8dc

080108e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7ff ffe7 	bl	80108c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80108f6:	f44f 7194 	mov.w	r1, #296	; 0x128
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f00c feec 	bl	801d6d8 <_ZdlPvj>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
	...

0801090c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	4a05      	ldr	r2, [pc, #20]	; (801092c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	f000 fb4d 	bl	8010fbc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	0801f910 	.word	0x0801f910

08010930 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7ff ffe7 	bl	801090c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801093e:	2118      	movs	r1, #24
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f00c fec9 	bl	801d6d8 <_ZdlPvj>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	4a05      	ldr	r2, [pc, #20]	; (8010970 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	601a      	str	r2, [r3, #0]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	f7ff fce7 	bl	8010334 <_ZN8touchgfx3LCDD1Ev>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	08021960 	.word	0x08021960

08010974 <_ZN8touchgfx8LCD24bppD0Ev>:
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f7ff ffe7 	bl	8010950 <_ZN8touchgfx8LCD24bppD1Ev>
 8010982:	2158      	movs	r1, #88	; 0x58
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f00c fea7 	bl	801d6d8 <_ZdlPvj>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <_Z41__static_initialization_and_destruction_0ii>:
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af02      	add	r7, sp, #8
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d119      	bne.n	80109d8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d114      	bne.n	80109d8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80109ae:	4818      	ldr	r0, [pc, #96]	; (8010a10 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80109b0:	f7ff fee6 	bl	8010780 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 80109b4:	4817      	ldr	r0, [pc, #92]	; (8010a14 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80109b6:	f7ff f96b 	bl	800fc90 <_ZN10STM32F4DMAC1Ev>
static LCD24bpp display;
 80109ba:	4817      	ldr	r0, [pc, #92]	; (8010a18 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80109bc:	f006 fe3c 	bl	8017638 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80109c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	4b10      	ldr	r3, [pc, #64]	; (8010a10 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80109ce:	4a12      	ldr	r2, [pc, #72]	; (8010a18 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80109d0:	4910      	ldr	r1, [pc, #64]	; (8010a14 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80109d2:	4812      	ldr	r0, [pc, #72]	; (8010a1c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80109d4:	f7ff fea8 	bl	8010728 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d113      	bne.n	8010a06 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d10e      	bne.n	8010a06 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80109e8:	480c      	ldr	r0, [pc, #48]	; (8010a1c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80109ea:	f7fe ff55 	bl	800f898 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80109ee:	480c      	ldr	r0, [pc, #48]	; (8010a20 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80109f0:	f7fb ffce 	bl	800c990 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80109f4:	4808      	ldr	r0, [pc, #32]	; (8010a18 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80109f6:	f7ff ffab 	bl	8010950 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F4DMA dma;
 80109fa:	4806      	ldr	r0, [pc, #24]	; (8010a14 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80109fc:	f7ff f972 	bl	800fce4 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 8010a00:	4803      	ldr	r0, [pc, #12]	; (8010a10 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010a02:	f7fe fca1 	bl	800f348 <_ZN20STM32TouchControllerD1Ev>
}
 8010a06:	bf00      	nop
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	200077e0 	.word	0x200077e0
 8010a14:	200077e8 	.word	0x200077e8
 8010a18:	20008408 	.word	0x20008408
 8010a1c:	20008464 	.word	0x20008464
 8010a20:	20000090 	.word	0x20000090

08010a24 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8010a2c:	2301      	movs	r3, #1
    }
 8010a2e:	4618      	mov	r0, r3
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8010a42:	230c      	movs	r3, #12
    }
 8010a44:	4618      	mov	r0, r3
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	460b      	mov	r3, r1
 8010a5a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010a5c:	887a      	ldrh	r2, [r7, #2]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	4413      	add	r3, r2
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	3308      	adds	r3, #8
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	4413      	add	r3, r2
    }
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	460b      	mov	r3, r1
 8010a82:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010a84:	887a      	ldrh	r2, [r7, #2]
 8010a86:	4613      	mov	r3, r2
 8010a88:	005b      	lsls	r3, r3, #1
 8010a8a:	4413      	add	r3, r2
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	3308      	adds	r3, #8
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	4413      	add	r3, r2
    }
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010aa8:	2301      	movs	r3, #1
    }
 8010aaa:	4618      	mov	r0, r3
 8010aac:	370c      	adds	r7, #12
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr

08010ab6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010ab6:	b480      	push	{r7}
 8010ab8:	b083      	sub	sp, #12
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010abe:	f44f 7390 	mov.w	r3, #288	; 0x120
    }
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	370c      	adds	r7, #12
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010ace:	b480      	push	{r7}
 8010ad0:	b083      	sub	sp, #12
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010ada:	887a      	ldrh	r2, [r7, #2]
 8010adc:	4613      	mov	r3, r2
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	4413      	add	r3, r2
 8010ae2:	015b      	lsls	r3, r3, #5
 8010ae4:	3308      	adds	r3, #8
 8010ae6:	687a      	ldr	r2, [r7, #4]
 8010ae8:	4413      	add	r3, r2
    }
 8010aea:	4618      	mov	r0, r3
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010af6:	b480      	push	{r7}
 8010af8:	b083      	sub	sp, #12
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	460b      	mov	r3, r1
 8010b00:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010b02:	887a      	ldrh	r2, [r7, #2]
 8010b04:	4613      	mov	r3, r2
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	4413      	add	r3, r2
 8010b0a:	015b      	lsls	r3, r3, #5
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	4413      	add	r3, r2
    }
 8010b12:	4618      	mov	r0, r3
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010b1e:	b480      	push	{r7}
 8010b20:	b083      	sub	sp, #12
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010b26:	2301      	movs	r3, #1
    }
 8010b28:	4618      	mov	r0, r3
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010b3c:	2310      	movs	r3, #16
    }
 8010b3e:	4618      	mov	r0, r3
 8010b40:	370c      	adds	r7, #12
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr

08010b4a <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010b4a:	b480      	push	{r7}
 8010b4c:	b083      	sub	sp, #12
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
 8010b52:	460b      	mov	r3, r1
 8010b54:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010b56:	887b      	ldrh	r3, [r7, #2]
 8010b58:	011b      	lsls	r3, r3, #4
 8010b5a:	3308      	adds	r3, #8
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	4413      	add	r3, r2
    }
 8010b60:	4618      	mov	r0, r3
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010b78:	887b      	ldrh	r3, [r7, #2]
 8010b7a:	011b      	lsls	r3, r3, #4
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	4413      	add	r3, r2
    }
 8010b82:	4618      	mov	r0, r3
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <_GLOBAL__sub_I_touchgfx_init>:
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010b96:	2001      	movs	r0, #1
 8010b98:	f7ff fefc 	bl	8010994 <_Z41__static_initialization_and_destruction_0ii>
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <_GLOBAL__sub_D_touchgfx_init>:
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	f7ff fef4 	bl	8010994 <_Z41__static_initialization_and_destruction_0ii>
 8010bac:	bd80      	pop	{r7, pc}

08010bae <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	3318      	adds	r3, #24
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	4798      	blx	r3
    }
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8010bca:	b480      	push	{r7}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8010bd8:	3301      	adds	r3, #1
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8010be2:	bf00      	nop
 8010be4:	370c      	adds	r7, #12
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
	...

08010bf0 <__NVIC_EnableIRQ>:
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	db0d      	blt.n	8010c1e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	f003 021f 	and.w	r2, r3, #31
 8010c0c:	4907      	ldr	r1, [pc, #28]	; (8010c2c <__NVIC_EnableIRQ+0x3c>)
 8010c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c12:	095b      	lsrs	r3, r3, #5
 8010c14:	2001      	movs	r0, #1
 8010c16:	fa00 f202 	lsl.w	r2, r0, r2
 8010c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010c1e:	bf00      	nop
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop
 8010c2c:	e000e100 	.word	0xe000e100

08010c30 <__NVIC_DisableIRQ>:
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	4603      	mov	r3, r0
 8010c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	db12      	blt.n	8010c68 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	f003 021f 	and.w	r2, r3, #31
 8010c4c:	4909      	ldr	r1, [pc, #36]	; (8010c74 <__NVIC_DisableIRQ+0x44>)
 8010c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c52:	095b      	lsrs	r3, r3, #5
 8010c54:	2001      	movs	r0, #1
 8010c56:	fa00 f202 	lsl.w	r2, r0, r2
 8010c5a:	3320      	adds	r3, #32
 8010c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010c60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010c64:	f3bf 8f6f 	isb	sy
}
 8010c68:	bf00      	nop
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr
 8010c74:	e000e100 	.word	0xe000e100

08010c78 <__NVIC_SetPriority>:
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	4603      	mov	r3, r0
 8010c80:	6039      	str	r1, [r7, #0]
 8010c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	db0c      	blt.n	8010ca6 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	4a0e      	ldr	r2, [pc, #56]	; (8010ccc <__NVIC_SetPriority+0x54>)
 8010c92:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8010c96:	4608      	mov	r0, r1
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	b2d9      	uxtb	r1, r3
 8010c9c:	1813      	adds	r3, r2, r0
 8010c9e:	460a      	mov	r2, r1
 8010ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010ca4:	e00c      	b.n	8010cc0 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	4909      	ldr	r1, [pc, #36]	; (8010cd0 <__NVIC_SetPriority+0x58>)
 8010cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	f003 030f 	and.w	r3, r3, #15
 8010cb6:	3b04      	subs	r3, #4
 8010cb8:	0112      	lsls	r2, r2, #4
 8010cba:	b2d2      	uxtb	r2, r2
 8010cbc:	440b      	add	r3, r1
 8010cbe:	761a      	strb	r2, [r3, #24]
}
 8010cc0:	bf00      	nop
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr
 8010ccc:	e000e100 	.word	0xe000e100
 8010cd0:	e000ed00 	.word	0xe000ed00

08010cd4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8010cd4:	b5b0      	push	{r4, r5, r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 fe44 	bl	801196c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8010ce4:	687d      	ldr	r5, [r7, #4]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	334c      	adds	r3, #76	; 0x4c
 8010cec:	681c      	ldr	r4, [r3, #0]
 8010cee:	f002 fbc7 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA01, (void*)0);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3374      	adds	r3, #116	; 0x74
 8010d02:	681c      	ldr	r4, [r3, #0]
 8010d04:	2300      	movs	r3, #0
 8010d06:	4a04      	ldr	r2, [pc, #16]	; (8010d18 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8010d08:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8010d0c:	47a0      	blx	r4
}
 8010d0e:	bf00      	nop
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bdb0      	pop	{r4, r5, r7, pc}
 8010d16:	bf00      	nop
 8010d18:	c005fa01 	.word	0xc005fa01

08010d1c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8010d24:	2109      	movs	r1, #9
 8010d26:	205a      	movs	r0, #90	; 0x5a
 8010d28:	f7ff ffa6 	bl	8010c78 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8010d2c:	2109      	movs	r1, #9
 8010d2e:	2058      	movs	r0, #88	; 0x58
 8010d30:	f7ff ffa2 	bl	8010c78 <__NVIC_SetPriority>
}
 8010d34:	bf00      	nop
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8010d44:	205a      	movs	r0, #90	; 0x5a
 8010d46:	f7ff ff53 	bl	8010bf0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8010d4a:	2058      	movs	r0, #88	; 0x58
 8010d4c:	f7ff ff50 	bl	8010bf0 <__NVIC_EnableIRQ>
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8010d60:	205a      	movs	r0, #90	; 0x5a
 8010d62:	f7ff ff65 	bl	8010c30 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8010d66:	2058      	movs	r0, #88	; 0x58
 8010d68:	f7ff ff62 	bl	8010c30 <__NVIC_DisableIRQ>
}
 8010d6c:	bf00      	nop
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8010d7c:	4b11      	ldr	r3, [pc, #68]	; (8010dc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	4b0e      	ldr	r3, [pc, #56]	; (8010dc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8010d8e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8010d90:	4b0c      	ldr	r3, [pc, #48]	; (8010dc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8010da2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8010da4:	4b08      	ldr	r3, [pc, #32]	; (8010dc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8010da6:	881a      	ldrh	r2, [r3, #0]
 8010da8:	4b06      	ldr	r3, [pc, #24]	; (8010dc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010daa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8010dac:	4b05      	ldr	r3, [pc, #20]	; (8010dc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db0:	4a04      	ldr	r2, [pc, #16]	; (8010dc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010db2:	f043 0301 	orr.w	r3, r3, #1
 8010db6:	6353      	str	r3, [r2, #52]	; 0x34
}
 8010db8:	bf00      	nop
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr
 8010dc4:	40016800 	.word	0x40016800
 8010dc8:	200084dc 	.word	0x200084dc
 8010dcc:	200084de 	.word	0x200084de

08010dd0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8010dd8:	4b03      	ldr	r3, [pc, #12]	; (8010de8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8010dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	370c      	adds	r7, #12
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr
 8010de8:	40016884 	.word	0x40016884

08010dec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8010df6:	4a06      	ldr	r2, [pc, #24]	; (8010e10 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8010dfe:	2201      	movs	r2, #1
 8010e00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010e02:	bf00      	nop
 8010e04:	370c      	adds	r7, #12
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	40016884 	.word	0x40016884
 8010e14:	40016800 	.word	0x40016800

08010e18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f000 fab0 	bl	801138c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8010e3c:	4b1a      	ldr	r3, [pc, #104]	; (8010ea8 <HAL_LTDC_LineEventCallback+0x74>)
 8010e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e40:	4a1a      	ldr	r2, [pc, #104]	; (8010eac <HAL_LTDC_LineEventCallback+0x78>)
 8010e42:	8812      	ldrh	r2, [r2, #0]
 8010e44:	4293      	cmp	r3, r2
 8010e46:	bf0c      	ite	eq
 8010e48:	2301      	moveq	r3, #1
 8010e4a:	2300      	movne	r3, #0
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d017      	beq.n	8010e82 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8010e52:	4b17      	ldr	r3, [pc, #92]	; (8010eb0 <HAL_LTDC_LineEventCallback+0x7c>)
 8010e54:	881b      	ldrh	r3, [r3, #0]
 8010e56:	4619      	mov	r1, r3
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7f3 ff4b 	bl	8004cf4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8010e5e:	f7fc f927 	bl	800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010e62:	4603      	mov	r3, r0
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff feb0 	bl	8010bca <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8010e6a:	f7fe fd9d 	bl	800f9a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8010e6e:	f7fc f91f 	bl	800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010e72:	4603      	mov	r3, r0
 8010e74:	4618      	mov	r0, r3
 8010e76:	f001 f801 	bl	8011e7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8010e7a:	2000      	movs	r0, #0
 8010e7c:	f7fe fa86 	bl	800f38c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8010e80:	e00e      	b.n	8010ea0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8010e82:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <HAL_LTDC_LineEventCallback+0x78>)
 8010e84:	881b      	ldrh	r3, [r3, #0]
 8010e86:	4619      	mov	r1, r3
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7f3 ff33 	bl	8004cf4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8010e8e:	2000      	movs	r0, #0
 8010e90:	f7fe fa87 	bl	800f3a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8010e94:	f7fc f90c 	bl	800d0b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff fe87 	bl	8010bae <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8010ea0:	bf00      	nop
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	40016800 	.word	0x40016800
 8010eac:	200084dc 	.word	0x200084dc
 8010eb0:	200084de 	.word	0x200084de

08010eb4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010eb4:	8880      	ldrh	r0, [r0, #4]
 8010eb6:	4770      	bx	lr

08010eb8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010eb8:	2300      	movs	r3, #0
 8010eba:	8083      	strh	r3, [r0, #4]
 8010ebc:	4770      	bx	lr
	...

08010ec0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8010ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ec2:	6803      	ldr	r3, [r0, #0]
 8010ec4:	4605      	mov	r5, r0
 8010ec6:	460e      	mov	r6, r1
 8010ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eca:	2100      	movs	r1, #0
 8010ecc:	4798      	blx	r3
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	6a1b      	ldr	r3, [r3, #32]
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	4798      	blx	r3
 8010ed8:	88ab      	ldrh	r3, [r5, #4]
 8010eda:	1b34      	subs	r4, r6, r4
 8010edc:	b2a4      	uxth	r4, r4
 8010ede:	fbb4 f4f0 	udiv	r4, r4, r0
 8010ee2:	42a3      	cmp	r3, r4
 8010ee4:	d805      	bhi.n	8010ef2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8010ee6:	4b0e      	ldr	r3, [pc, #56]	; (8010f20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8010ee8:	4a0e      	ldr	r2, [pc, #56]	; (8010f24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8010eea:	2120      	movs	r1, #32
 8010eec:	480e      	ldr	r0, [pc, #56]	; (8010f28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8010eee:	f00c fc1f 	bl	801d730 <__assert_func>
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef8:	4628      	mov	r0, r5
 8010efa:	4798      	blx	r3
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	4607      	mov	r7, r0
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	4628      	mov	r0, r5
 8010f04:	4798      	blx	r3
 8010f06:	1bf3      	subs	r3, r6, r7
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	fbb3 f2f0 	udiv	r2, r3, r0
 8010f0e:	fb02 3010 	mls	r0, r2, r0, r3
 8010f12:	b118      	cbz	r0, 8010f1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8010f14:	4b05      	ldr	r3, [pc, #20]	; (8010f2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8010f16:	4a03      	ldr	r2, [pc, #12]	; (8010f24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8010f18:	2121      	movs	r1, #33	; 0x21
 8010f1a:	e7e7      	b.n	8010eec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f20:	0801fa14 	.word	0x0801fa14
 8010f24:	0801fb82 	.word	0x0801fb82
 8010f28:	0801fa29 	.word	0x0801fa29
 8010f2c:	0801fa57 	.word	0x0801fa57

08010f30 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	6803      	ldr	r3, [r0, #0]
 8010f34:	6a1b      	ldr	r3, [r3, #32]
 8010f36:	460d      	mov	r5, r1
 8010f38:	4604      	mov	r4, r0
 8010f3a:	4798      	blx	r3
 8010f3c:	4285      	cmp	r5, r0
 8010f3e:	d905      	bls.n	8010f4c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8010f40:	4b0c      	ldr	r3, [pc, #48]	; (8010f74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8010f42:	4a0d      	ldr	r2, [pc, #52]	; (8010f78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8010f44:	2132      	movs	r1, #50	; 0x32
 8010f46:	480d      	ldr	r0, [pc, #52]	; (8010f7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8010f48:	f00c fbf2 	bl	801d730 <__assert_func>
 8010f4c:	6823      	ldr	r3, [r4, #0]
 8010f4e:	88a5      	ldrh	r5, [r4, #4]
 8010f50:	69db      	ldr	r3, [r3, #28]
 8010f52:	4620      	mov	r0, r4
 8010f54:	4798      	blx	r3
 8010f56:	4285      	cmp	r5, r0
 8010f58:	d303      	bcc.n	8010f62 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8010f5a:	4b09      	ldr	r3, [pc, #36]	; (8010f80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8010f5c:	4a06      	ldr	r2, [pc, #24]	; (8010f78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8010f5e:	2133      	movs	r1, #51	; 0x33
 8010f60:	e7f1      	b.n	8010f46 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	88a1      	ldrh	r1, [r4, #4]
 8010f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f68:	4620      	mov	r0, r4
 8010f6a:	4798      	blx	r3
 8010f6c:	88a3      	ldrh	r3, [r4, #4]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	80a3      	strh	r3, [r4, #4]
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	0801fad1 	.word	0x0801fad1
 8010f78:	0801fbc5 	.word	0x0801fbc5
 8010f7c:	0801fa29 	.word	0x0801fa29
 8010f80:	0801fae8 	.word	0x0801fae8

08010f84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8010f84:	b570      	push	{r4, r5, r6, lr}
 8010f86:	6803      	ldr	r3, [r0, #0]
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	4616      	mov	r6, r2
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	460d      	mov	r5, r1
 8010f90:	4798      	blx	r3
 8010f92:	4286      	cmp	r6, r0
 8010f94:	d905      	bls.n	8010fa2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8010f96:	4b06      	ldr	r3, [pc, #24]	; (8010fb0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8010f98:	4a06      	ldr	r2, [pc, #24]	; (8010fb4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8010f9a:	4807      	ldr	r0, [pc, #28]	; (8010fb8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8010f9c:	213c      	movs	r1, #60	; 0x3c
 8010f9e:	f00c fbc7 	bl	801d730 <__assert_func>
 8010fa2:	6823      	ldr	r3, [r4, #0]
 8010fa4:	4629      	mov	r1, r5
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fae:	4718      	bx	r3
 8010fb0:	0801fad1 	.word	0x0801fad1
 8010fb4:	0801fb38 	.word	0x0801fb38
 8010fb8:	0801fa29 	.word	0x0801fa29

08010fbc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8010fbc:	4770      	bx	lr
	...

08010fc0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8010fc0:	4a02      	ldr	r2, [pc, #8]	; (8010fcc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8010fc2:	6002      	str	r2, [r0, #0]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	8082      	strh	r2, [r0, #4]
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	0801fb0c 	.word	0x0801fb0c

08010fd0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010fd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	b12b      	cbz	r3, 8010fe2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010fd6:	b920      	cbnz	r0, 8010fe2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010fd8:	1a5a      	subs	r2, r3, r1
 8010fda:	4250      	negs	r0, r2
 8010fdc:	4150      	adcs	r0, r2
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	e7f8      	b.n	8010fd4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8010fe2:	4770      	bx	lr

08010fe4 <_ZN8touchgfx9Container9removeAllEv>:
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010fe8:	b123      	cbz	r3, 8010ff4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8010fea:	6999      	ldr	r1, [r3, #24]
 8010fec:	6281      	str	r1, [r0, #40]	; 0x28
 8010fee:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8010ff2:	e7f8      	b.n	8010fe6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8010ff4:	4770      	bx	lr

08010ff6 <_ZN8touchgfx9Container6unlinkEv>:
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	6283      	str	r3, [r0, #40]	; 0x28
 8010ffa:	4770      	bx	lr

08010ffc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011000:	461f      	mov	r7, r3
 8011002:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011006:	460d      	mov	r5, r1
 8011008:	4616      	mov	r6, r2
 801100a:	b103      	cbz	r3, 801100e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801100c:	6038      	str	r0, [r7, #0]
 801100e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011010:	b314      	cbz	r4, 8011058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011012:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011016:	b1eb      	cbz	r3, 8011054 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011018:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801101c:	428d      	cmp	r5, r1
 801101e:	db19      	blt.n	8011054 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011020:	8923      	ldrh	r3, [r4, #8]
 8011022:	b289      	uxth	r1, r1
 8011024:	440b      	add	r3, r1
 8011026:	b21b      	sxth	r3, r3
 8011028:	429d      	cmp	r5, r3
 801102a:	da13      	bge.n	8011054 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801102c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011030:	4296      	cmp	r6, r2
 8011032:	db0f      	blt.n	8011054 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011034:	8963      	ldrh	r3, [r4, #10]
 8011036:	b292      	uxth	r2, r2
 8011038:	4413      	add	r3, r2
 801103a:	b21b      	sxth	r3, r3
 801103c:	429e      	cmp	r6, r3
 801103e:	da09      	bge.n	8011054 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	1ab2      	subs	r2, r6, r2
 8011044:	1a69      	subs	r1, r5, r1
 8011046:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801104a:	b212      	sxth	r2, r2
 801104c:	463b      	mov	r3, r7
 801104e:	b209      	sxth	r1, r1
 8011050:	4620      	mov	r0, r4
 8011052:	47c0      	blx	r8
 8011054:	69a4      	ldr	r4, [r4, #24]
 8011056:	e7db      	b.n	8011010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801105c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801105c:	2200      	movs	r2, #0
 801105e:	8002      	strh	r2, [r0, #0]
 8011060:	8042      	strh	r2, [r0, #2]
 8011062:	8082      	strh	r2, [r0, #4]
 8011064:	80c2      	strh	r2, [r0, #6]
 8011066:	4770      	bx	lr

08011068 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801106c:	460d      	mov	r5, r1
 801106e:	4616      	mov	r6, r2
 8011070:	b13c      	cbz	r4, 8011082 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	4620      	mov	r0, r4
 8011076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011078:	4632      	mov	r2, r6
 801107a:	4629      	mov	r1, r5
 801107c:	4798      	blx	r3
 801107e:	69a4      	ldr	r4, [r4, #24]
 8011080:	e7f6      	b.n	8011070 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011082:	bd70      	pop	{r4, r5, r6, pc}

08011084 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011084:	b538      	push	{r3, r4, r5, lr}
 8011086:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011088:	460d      	mov	r5, r1
 801108a:	b134      	cbz	r4, 801109a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	4621      	mov	r1, r4
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	4628      	mov	r0, r5
 8011094:	4798      	blx	r3
 8011096:	69a4      	ldr	r4, [r4, #24]
 8011098:	e7f7      	b.n	801108a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801109a:	bd38      	pop	{r3, r4, r5, pc}

0801109c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801109c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801109e:	b19b      	cbz	r3, 80110c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80110a0:	428b      	cmp	r3, r1
 80110a2:	d109      	bne.n	80110b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80110a4:	699a      	ldr	r2, [r3, #24]
 80110a6:	2100      	movs	r1, #0
 80110a8:	6159      	str	r1, [r3, #20]
 80110aa:	6282      	str	r2, [r0, #40]	; 0x28
 80110ac:	b902      	cbnz	r2, 80110b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80110ae:	4770      	bx	lr
 80110b0:	6199      	str	r1, [r3, #24]
 80110b2:	4770      	bx	lr
 80110b4:	4613      	mov	r3, r2
 80110b6:	b13a      	cbz	r2, 80110c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80110b8:	699a      	ldr	r2, [r3, #24]
 80110ba:	428a      	cmp	r2, r1
 80110bc:	d1fa      	bne.n	80110b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80110be:	698a      	ldr	r2, [r1, #24]
 80110c0:	619a      	str	r2, [r3, #24]
 80110c2:	2300      	movs	r3, #0
 80110c4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80110c8:	4770      	bx	lr

080110ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80110ca:	b410      	push	{r4}
 80110cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110ce:	4604      	mov	r4, r0
 80110d0:	b92b      	cbnz	r3, 80110de <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80110d2:	6803      	ldr	r3, [r0, #0]
 80110d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110da:	4611      	mov	r1, r2
 80110dc:	4718      	bx	r3
 80110de:	b941      	cbnz	r1, 80110f2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80110e0:	6193      	str	r3, [r2, #24]
 80110e2:	6282      	str	r2, [r0, #40]	; 0x28
 80110e4:	6154      	str	r4, [r2, #20]
 80110e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110ea:	4770      	bx	lr
 80110ec:	4603      	mov	r3, r0
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d0f9      	beq.n	80110e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80110f2:	4299      	cmp	r1, r3
 80110f4:	6998      	ldr	r0, [r3, #24]
 80110f6:	d1f9      	bne.n	80110ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80110f8:	6190      	str	r0, [r2, #24]
 80110fa:	618a      	str	r2, [r1, #24]
 80110fc:	e7f2      	b.n	80110e4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08011100 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011100:	4288      	cmp	r0, r1
 8011102:	b508      	push	{r3, lr}
 8011104:	d105      	bne.n	8011112 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8011106:	4b11      	ldr	r3, [pc, #68]	; (801114c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8011108:	4a11      	ldr	r2, [pc, #68]	; (8011150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801110a:	2123      	movs	r1, #35	; 0x23
 801110c:	4811      	ldr	r0, [pc, #68]	; (8011154 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801110e:	f00c fb0f 	bl	801d730 <__assert_func>
 8011112:	694b      	ldr	r3, [r1, #20]
 8011114:	b11b      	cbz	r3, 801111e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8011116:	4b10      	ldr	r3, [pc, #64]	; (8011158 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8011118:	4a0d      	ldr	r2, [pc, #52]	; (8011150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801111a:	2124      	movs	r1, #36	; 0x24
 801111c:	e7f6      	b.n	801110c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801111e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8011122:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011124:	b913      	cbnz	r3, 801112c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8011126:	6281      	str	r1, [r0, #40]	; 0x28
 8011128:	bd08      	pop	{r3, pc}
 801112a:	4613      	mov	r3, r2
 801112c:	699a      	ldr	r2, [r3, #24]
 801112e:	b12a      	cbz	r2, 801113c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8011130:	428b      	cmp	r3, r1
 8011132:	d1fa      	bne.n	801112a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8011134:	4b09      	ldr	r3, [pc, #36]	; (801115c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8011136:	4a06      	ldr	r2, [pc, #24]	; (8011150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011138:	2135      	movs	r1, #53	; 0x35
 801113a:	e7e7      	b.n	801110c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801113c:	428b      	cmp	r3, r1
 801113e:	d103      	bne.n	8011148 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8011140:	4b06      	ldr	r3, [pc, #24]	; (801115c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8011142:	4a03      	ldr	r2, [pc, #12]	; (8011150 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011144:	2138      	movs	r1, #56	; 0x38
 8011146:	e7e1      	b.n	801110c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011148:	6199      	str	r1, [r3, #24]
 801114a:	e7ed      	b.n	8011128 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801114c:	0801fc03 	.word	0x0801fc03
 8011150:	0801fd58 	.word	0x0801fd58
 8011154:	0801fc2f 	.word	0x0801fc2f
 8011158:	0801fc62 	.word	0x0801fc62
 801115c:	0801fc98 	.word	0x0801fc98

08011160 <_ZN8touchgfx4RectaNERKS0_>:
 8011160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011164:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011168:	888c      	ldrh	r4, [r1, #4]
 801116a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801116e:	443c      	add	r4, r7
 8011170:	b2a4      	uxth	r4, r4
 8011172:	fa0f f884 	sxth.w	r8, r4
 8011176:	45c1      	cmp	r9, r8
 8011178:	da2f      	bge.n	80111da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801117a:	8882      	ldrh	r2, [r0, #4]
 801117c:	444a      	add	r2, r9
 801117e:	b292      	uxth	r2, r2
 8011180:	fa0f fe82 	sxth.w	lr, r2
 8011184:	4577      	cmp	r7, lr
 8011186:	da28      	bge.n	80111da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011188:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801118c:	88cb      	ldrh	r3, [r1, #6]
 801118e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011192:	442b      	add	r3, r5
 8011194:	b21b      	sxth	r3, r3
 8011196:	429e      	cmp	r6, r3
 8011198:	da1f      	bge.n	80111da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801119a:	88c3      	ldrh	r3, [r0, #6]
 801119c:	4433      	add	r3, r6
 801119e:	b29b      	uxth	r3, r3
 80111a0:	fa0f fc83 	sxth.w	ip, r3
 80111a4:	4565      	cmp	r5, ip
 80111a6:	da18      	bge.n	80111da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80111a8:	454f      	cmp	r7, r9
 80111aa:	bfb8      	it	lt
 80111ac:	464f      	movlt	r7, r9
 80111ae:	42b5      	cmp	r5, r6
 80111b0:	bfb8      	it	lt
 80111b2:	4635      	movlt	r5, r6
 80111b4:	45f0      	cmp	r8, lr
 80111b6:	bfd8      	it	le
 80111b8:	4622      	movle	r2, r4
 80111ba:	1bd2      	subs	r2, r2, r7
 80111bc:	8082      	strh	r2, [r0, #4]
 80111be:	884a      	ldrh	r2, [r1, #2]
 80111c0:	88c9      	ldrh	r1, [r1, #6]
 80111c2:	8007      	strh	r7, [r0, #0]
 80111c4:	440a      	add	r2, r1
 80111c6:	b292      	uxth	r2, r2
 80111c8:	b211      	sxth	r1, r2
 80111ca:	458c      	cmp	ip, r1
 80111cc:	bfa8      	it	ge
 80111ce:	4613      	movge	r3, r2
 80111d0:	1b5b      	subs	r3, r3, r5
 80111d2:	80c3      	strh	r3, [r0, #6]
 80111d4:	8045      	strh	r5, [r0, #2]
 80111d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111da:	2300      	movs	r3, #0
 80111dc:	8003      	strh	r3, [r0, #0]
 80111de:	8043      	strh	r3, [r0, #2]
 80111e0:	8083      	strh	r3, [r0, #4]
 80111e2:	80c3      	strh	r3, [r0, #6]
 80111e4:	e7f7      	b.n	80111d6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080111e6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80111e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dd06      	ble.n	80111fc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80111ee:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80111f2:	2800      	cmp	r0, #0
 80111f4:	bfcc      	ite	gt
 80111f6:	2000      	movgt	r0, #0
 80111f8:	2001      	movle	r0, #1
 80111fa:	4770      	bx	lr
 80111fc:	2001      	movs	r0, #1
 80111fe:	4770      	bx	lr

08011200 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011204:	2300      	movs	r3, #0
 8011206:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011208:	8003      	strh	r3, [r0, #0]
 801120a:	4604      	mov	r4, r0
 801120c:	8043      	strh	r3, [r0, #2]
 801120e:	8083      	strh	r3, [r0, #4]
 8011210:	80c3      	strh	r3, [r0, #6]
 8011212:	2d00      	cmp	r5, #0
 8011214:	d040      	beq.n	8011298 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011216:	1d28      	adds	r0, r5, #4
 8011218:	f7ff ffe5 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801121c:	b988      	cbnz	r0, 8011242 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801121e:	4620      	mov	r0, r4
 8011220:	f7ff ffe1 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011224:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011228:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801122c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011230:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011234:	b138      	cbz	r0, 8011246 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011236:	8022      	strh	r2, [r4, #0]
 8011238:	8063      	strh	r3, [r4, #2]
 801123a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801123e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011242:	69ad      	ldr	r5, [r5, #24]
 8011244:	e7e5      	b.n	8011212 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011246:	f9b4 0000 	ldrsh.w	r0, [r4]
 801124a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801124e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011252:	4290      	cmp	r0, r2
 8011254:	4607      	mov	r7, r0
 8011256:	bfa8      	it	ge
 8011258:	4617      	movge	r7, r2
 801125a:	4472      	add	r2, lr
 801125c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011260:	8027      	strh	r7, [r4, #0]
 8011262:	4299      	cmp	r1, r3
 8011264:	460e      	mov	r6, r1
 8011266:	4440      	add	r0, r8
 8011268:	bfa8      	it	ge
 801126a:	461e      	movge	r6, r3
 801126c:	4471      	add	r1, lr
 801126e:	4463      	add	r3, ip
 8011270:	b200      	sxth	r0, r0
 8011272:	b212      	sxth	r2, r2
 8011274:	b209      	sxth	r1, r1
 8011276:	b21b      	sxth	r3, r3
 8011278:	4290      	cmp	r0, r2
 801127a:	bfac      	ite	ge
 801127c:	ebc7 0200 	rsbge	r2, r7, r0
 8011280:	ebc7 0202 	rsblt	r2, r7, r2
 8011284:	4299      	cmp	r1, r3
 8011286:	bfac      	ite	ge
 8011288:	ebc6 0301 	rsbge	r3, r6, r1
 801128c:	ebc6 0303 	rsblt	r3, r6, r3
 8011290:	8066      	strh	r6, [r4, #2]
 8011292:	80a2      	strh	r2, [r4, #4]
 8011294:	80e3      	strh	r3, [r4, #6]
 8011296:	e7d4      	b.n	8011242 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011298:	4620      	mov	r0, r4
 801129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801129e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801129e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80112a2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80112a6:	b383      	cbz	r3, 801130a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80112a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80112aa:	b374      	cbz	r4, 801130a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80112ac:	f9b1 5000 	ldrsh.w	r5, [r1]
 80112b0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80112b4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80112b8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80112bc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80112c0:	b303      	cbz	r3, 8011304 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80112c2:	4668      	mov	r0, sp
 80112c4:	1d21      	adds	r1, r4, #4
 80112c6:	f8ad 5000 	strh.w	r5, [sp]
 80112ca:	f8ad 6002 	strh.w	r6, [sp, #2]
 80112ce:	f8ad 7004 	strh.w	r7, [sp, #4]
 80112d2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80112d6:	f7ff ff43 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 80112da:	4668      	mov	r0, sp
 80112dc:	f7ff ff83 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80112e0:	b980      	cbnz	r0, 8011304 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80112e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80112e6:	88a2      	ldrh	r2, [r4, #4]
 80112e8:	1a9b      	subs	r3, r3, r2
 80112ea:	f8ad 3000 	strh.w	r3, [sp]
 80112ee:	88e2      	ldrh	r2, [r4, #6]
 80112f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80112f4:	1a9b      	subs	r3, r3, r2
 80112f6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	4669      	mov	r1, sp
 80112fe:	689b      	ldr	r3, [r3, #8]
 8011300:	4620      	mov	r0, r4
 8011302:	4798      	blx	r3
 8011304:	69a4      	ldr	r4, [r4, #24]
 8011306:	2c00      	cmp	r4, #0
 8011308:	d1d8      	bne.n	80112bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801130a:	b002      	add	sp, #8
 801130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011310 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011312:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011316:	460d      	mov	r5, r1
 8011318:	4616      	mov	r6, r2
 801131a:	b323      	cbz	r3, 8011366 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801131c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801131e:	b314      	cbz	r4, 8011366 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011320:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011324:	b1eb      	cbz	r3, 8011362 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011326:	6828      	ldr	r0, [r5, #0]
 8011328:	6869      	ldr	r1, [r5, #4]
 801132a:	466b      	mov	r3, sp
 801132c:	c303      	stmia	r3!, {r0, r1}
 801132e:	4668      	mov	r0, sp
 8011330:	1d21      	adds	r1, r4, #4
 8011332:	f7ff ff15 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8011336:	4668      	mov	r0, sp
 8011338:	f7ff ff55 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801133c:	b988      	cbnz	r0, 8011362 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801133e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011342:	88a2      	ldrh	r2, [r4, #4]
 8011344:	1a9b      	subs	r3, r3, r2
 8011346:	f8ad 3000 	strh.w	r3, [sp]
 801134a:	88e2      	ldrh	r2, [r4, #6]
 801134c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011350:	1a9b      	subs	r3, r3, r2
 8011352:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	4632      	mov	r2, r6
 801135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801135c:	4669      	mov	r1, sp
 801135e:	4620      	mov	r0, r4
 8011360:	4798      	blx	r3
 8011362:	69a4      	ldr	r4, [r4, #24]
 8011364:	e7db      	b.n	801131e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8011366:	b002      	add	sp, #8
 8011368:	bd70      	pop	{r4, r5, r6, pc}

0801136a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801136a:	b513      	push	{r0, r1, r4, lr}
 801136c:	6803      	ldr	r3, [r0, #0]
 801136e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8011372:	2300      	movs	r3, #0
 8011374:	e9cd 3300 	strd	r3, r3, [sp]
 8011378:	466b      	mov	r3, sp
 801137a:	47a0      	blx	r4
 801137c:	b002      	add	sp, #8
 801137e:	bd10      	pop	{r4, pc}

08011380 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011380:	2301      	movs	r3, #1
 8011382:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011386:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801138a:	4770      	bx	lr

0801138c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801138c:	2301      	movs	r3, #1
 801138e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011392:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8011396:	4770      	bx	lr

08011398 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011398:	6843      	ldr	r3, [r0, #4]
 801139a:	2201      	movs	r2, #1
 801139c:	725a      	strb	r2, [r3, #9]
 801139e:	6840      	ldr	r0, [r0, #4]
 80113a0:	6803      	ldr	r3, [r0, #0]
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	4718      	bx	r3

080113a6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80113a6:	6840      	ldr	r0, [r0, #4]
 80113a8:	6803      	ldr	r3, [r0, #0]
 80113aa:	689b      	ldr	r3, [r3, #8]
 80113ac:	4718      	bx	r3
	...

080113b0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80113b0:	4b04      	ldr	r3, [pc, #16]	; (80113c4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	b123      	cbz	r3, 80113c0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80113b6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80113ba:	f080 0001 	eor.w	r0, r0, #1
 80113be:	4770      	bx	lr
 80113c0:	2001      	movs	r0, #1
 80113c2:	4770      	bx	lr
 80113c4:	200084ea 	.word	0x200084ea

080113c8 <_ZN8touchgfx3HAL8endFrameEv>:
 80113c8:	b510      	push	{r4, lr}
 80113ca:	4604      	mov	r4, r0
 80113cc:	6840      	ldr	r0, [r0, #4]
 80113ce:	6803      	ldr	r3, [r0, #0]
 80113d0:	689b      	ldr	r3, [r3, #8]
 80113d2:	4798      	blx	r3
 80113d4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80113d8:	b113      	cbz	r3, 80113e0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80113da:	2301      	movs	r3, #1
 80113dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80113e0:	bd10      	pop	{r4, pc}

080113e2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80113e2:	b508      	push	{r3, lr}
 80113e4:	6803      	ldr	r3, [r0, #0]
 80113e6:	4604      	mov	r4, r0
 80113e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113ea:	4798      	blx	r3
 80113ec:	6823      	ldr	r3, [r4, #0]
 80113ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113f0:	4620      	mov	r0, r4
 80113f2:	4798      	blx	r3
 80113f4:	f7fe fae8 	bl	800f9c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113fc:	e7f8      	b.n	80113f0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08011400 <_ZN8touchgfx3HAL4tickEv>:
 8011400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011402:	6803      	ldr	r3, [r0, #0]
 8011404:	4d5c      	ldr	r5, [pc, #368]	; (8011578 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801140a:	4604      	mov	r4, r0
 801140c:	4798      	blx	r3
 801140e:	2800      	cmp	r0, #0
 8011410:	f000 8097 	beq.w	8011542 <_ZN8touchgfx3HAL4tickEv+0x142>
 8011414:	2001      	movs	r0, #1
 8011416:	f7fd ffb9 	bl	800f38c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801141a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801141e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011422:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8011426:	2600      	movs	r6, #0
 8011428:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801142c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8011430:	b133      	cbz	r3, 8011440 <_ZN8touchgfx3HAL4tickEv+0x40>
 8011432:	6823      	ldr	r3, [r4, #0]
 8011434:	4620      	mov	r0, r4
 8011436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801143a:	4798      	blx	r3
 801143c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8011440:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011444:	6862      	ldr	r2, [r4, #4]
 8011446:	f083 0301 	eor.w	r3, r3, #1
 801144a:	7253      	strb	r3, [r2, #9]
 801144c:	2601      	movs	r6, #1
 801144e:	702e      	strb	r6, [r5, #0]
 8011450:	f002 f816 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 8011454:	6803      	ldr	r3, [r0, #0]
 8011456:	4631      	mov	r1, r6
 8011458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801145a:	4798      	blx	r3
 801145c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011460:	b90b      	cbnz	r3, 8011466 <_ZN8touchgfx3HAL4tickEv+0x66>
 8011462:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8011466:	f002 f80b 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 801146a:	6803      	ldr	r3, [r0, #0]
 801146c:	695b      	ldr	r3, [r3, #20]
 801146e:	4798      	blx	r3
 8011470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011472:	6803      	ldr	r3, [r0, #0]
 8011474:	691b      	ldr	r3, [r3, #16]
 8011476:	4798      	blx	r3
 8011478:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801147c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8011480:	3b01      	subs	r3, #1
 8011482:	b2db      	uxtb	r3, r3
 8011484:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011488:	b10a      	cbz	r2, 801148e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1eb      	bne.n	8011466 <_ZN8touchgfx3HAL4tickEv+0x66>
 801148e:	4a3b      	ldr	r2, [pc, #236]	; (801157c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8011490:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8011494:	7813      	ldrb	r3, [r2, #0]
 8011496:	3301      	adds	r3, #1
 8011498:	b25b      	sxtb	r3, r3
 801149a:	4299      	cmp	r1, r3
 801149c:	7013      	strb	r3, [r2, #0]
 801149e:	dc10      	bgt.n	80114c2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80114a0:	68e0      	ldr	r0, [r4, #12]
 80114a2:	2300      	movs	r3, #0
 80114a4:	7013      	strb	r3, [r2, #0]
 80114a6:	6803      	ldr	r3, [r0, #0]
 80114a8:	aa03      	add	r2, sp, #12
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	a902      	add	r1, sp, #8
 80114ae:	4798      	blx	r3
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	2800      	cmp	r0, #0
 80114b4:	d051      	beq.n	801155a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80114b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80114ba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80114be:	4620      	mov	r0, r4
 80114c0:	4798      	blx	r3
 80114c2:	6960      	ldr	r0, [r4, #20]
 80114c4:	2300      	movs	r3, #0
 80114c6:	f88d 3007 	strb.w	r3, [sp, #7]
 80114ca:	b158      	cbz	r0, 80114e4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80114cc:	6803      	ldr	r3, [r0, #0]
 80114ce:	f10d 0107 	add.w	r1, sp, #7
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	4798      	blx	r3
 80114d6:	b128      	cbz	r0, 80114e4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80114d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80114de:	6803      	ldr	r3, [r0, #0]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	4798      	blx	r3
 80114e4:	f104 001c 	add.w	r0, r4, #28
 80114e8:	f00c f83e 	bl	801d568 <_ZN8touchgfx8Gestures4tickEv>
 80114ec:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80114f0:	b30b      	cbz	r3, 8011536 <_ZN8touchgfx3HAL4tickEv+0x136>
 80114f2:	6920      	ldr	r0, [r4, #16]
 80114f4:	6803      	ldr	r3, [r0, #0]
 80114f6:	691b      	ldr	r3, [r3, #16]
 80114f8:	4798      	blx	r3
 80114fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80114fc:	4606      	mov	r6, r0
 80114fe:	b903      	cbnz	r3, 8011502 <_ZN8touchgfx3HAL4tickEv+0x102>
 8011500:	6720      	str	r0, [r4, #112]	; 0x70
 8011502:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011504:	4a1e      	ldr	r2, [pc, #120]	; (8011580 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8011506:	1af3      	subs	r3, r6, r3
 8011508:	4293      	cmp	r3, r2
 801150a:	d914      	bls.n	8011536 <_ZN8touchgfx3HAL4tickEv+0x136>
 801150c:	6920      	ldr	r0, [r4, #16]
 801150e:	6803      	ldr	r3, [r0, #0]
 8011510:	699b      	ldr	r3, [r3, #24]
 8011512:	4798      	blx	r3
 8011514:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011516:	2264      	movs	r2, #100	; 0x64
 8011518:	1af3      	subs	r3, r6, r3
 801151a:	fbb3 f3f2 	udiv	r3, r3, r2
 801151e:	fbb0 f0f3 	udiv	r0, r0, r3
 8011522:	2800      	cmp	r0, #0
 8011524:	dc1e      	bgt.n	8011564 <_ZN8touchgfx3HAL4tickEv+0x164>
 8011526:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801152a:	6920      	ldr	r0, [r4, #16]
 801152c:	6803      	ldr	r3, [r0, #0]
 801152e:	2100      	movs	r1, #0
 8011530:	69db      	ldr	r3, [r3, #28]
 8011532:	4798      	blx	r3
 8011534:	6726      	str	r6, [r4, #112]	; 0x70
 8011536:	f001 ffa3 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 801153a:	6803      	ldr	r3, [r0, #0]
 801153c:	2100      	movs	r1, #0
 801153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011540:	4798      	blx	r3
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	4620      	mov	r0, r4
 8011546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801154a:	4798      	blx	r3
 801154c:	2001      	movs	r0, #1
 801154e:	f7fd ff28 	bl	800f3a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011552:	2300      	movs	r3, #0
 8011554:	702b      	strb	r3, [r5, #0]
 8011556:	b004      	add	sp, #16
 8011558:	bd70      	pop	{r4, r5, r6, pc}
 801155a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801155e:	4620      	mov	r0, r4
 8011560:	4798      	blx	r3
 8011562:	e7ae      	b.n	80114c2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8011564:	2863      	cmp	r0, #99	; 0x63
 8011566:	bfcb      	itete	gt
 8011568:	2300      	movgt	r3, #0
 801156a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801156e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8011572:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8011576:	e7d8      	b.n	801152a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8011578:	200084f0 	.word	0x200084f0
 801157c:	200084f1 	.word	0x200084f1
 8011580:	05f5e100 	.word	0x05f5e100

08011584 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011584:	f7fe b9ec 	b.w	800f960 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011588 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011588:	6581      	str	r1, [r0, #88]	; 0x58
 801158a:	301c      	adds	r0, #28
 801158c:	f00b bfea 	b.w	801d564 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08011590 <_ZN8touchgfx3HAL5touchEll>:
 8011590:	b530      	push	{r4, r5, lr}
 8011592:	b087      	sub	sp, #28
 8011594:	4604      	mov	r4, r0
 8011596:	a804      	add	r0, sp, #16
 8011598:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801159c:	f001 fd2a 	bl	8012ff4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80115a0:	9b04      	ldr	r3, [sp, #16]
 80115a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80115a6:	a906      	add	r1, sp, #24
 80115a8:	9b05      	ldr	r3, [sp, #20]
 80115aa:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80115ae:	a803      	add	r0, sp, #12
 80115b0:	f001 fd6e 	bl	8013090 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80115b4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80115b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80115bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80115c0:	f104 001c 	add.w	r0, r4, #28
 80115c4:	b189      	cbz	r1, 80115ea <_ZN8touchgfx3HAL5touchEll+0x5a>
 80115c6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80115d0:	4613      	mov	r3, r2
 80115d2:	462a      	mov	r2, r5
 80115d4:	f00b ffd6 	bl	801d584 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80115d8:	b128      	cbz	r0, 80115e6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80115da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80115de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80115e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80115e4:	6623      	str	r3, [r4, #96]	; 0x60
 80115e6:	b007      	add	sp, #28
 80115e8:	bd30      	pop	{r4, r5, pc}
 80115ea:	f00c f80f 	bl	801d60c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80115ee:	2301      	movs	r3, #1
 80115f0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80115f4:	e7f1      	b.n	80115da <_ZN8touchgfx3HAL5touchEll+0x4a>

080115f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80115f6:	b570      	push	{r4, r5, r6, lr}
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d050      	beq.n	801169e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80115fc:	ea81 0002 	eor.w	r0, r1, r2
 8011600:	07c6      	lsls	r6, r0, #31
 8011602:	d508      	bpl.n	8011616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8011604:	3a01      	subs	r2, #1
 8011606:	18cc      	adds	r4, r1, r3
 8011608:	42a1      	cmp	r1, r4
 801160a:	d048      	beq.n	801169e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801160c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011610:	f801 0b01 	strb.w	r0, [r1], #1
 8011614:	e7f8      	b.n	8011608 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8011616:	07d5      	lsls	r5, r2, #31
 8011618:	bf42      	ittt	mi
 801161a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801161e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8011622:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8011626:	2b01      	cmp	r3, #1
 8011628:	d915      	bls.n	8011656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801162a:	ea82 0001 	eor.w	r0, r2, r1
 801162e:	0784      	lsls	r4, r0, #30
 8011630:	d02d      	beq.n	801168e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8011632:	1e94      	subs	r4, r2, #2
 8011634:	4608      	mov	r0, r1
 8011636:	18ce      	adds	r6, r1, r3
 8011638:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801163c:	f820 5b02 	strh.w	r5, [r0], #2
 8011640:	1a35      	subs	r5, r6, r0
 8011642:	2d01      	cmp	r5, #1
 8011644:	d8f8      	bhi.n	8011638 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8011646:	1e98      	subs	r0, r3, #2
 8011648:	f020 0001 	bic.w	r0, r0, #1
 801164c:	3002      	adds	r0, #2
 801164e:	4401      	add	r1, r0
 8011650:	4402      	add	r2, r0
 8011652:	f003 0301 	and.w	r3, r3, #1
 8011656:	1f14      	subs	r4, r2, #4
 8011658:	4608      	mov	r0, r1
 801165a:	18ce      	adds	r6, r1, r3
 801165c:	1a35      	subs	r5, r6, r0
 801165e:	2d03      	cmp	r5, #3
 8011660:	d810      	bhi.n	8011684 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8011662:	089c      	lsrs	r4, r3, #2
 8011664:	00a0      	lsls	r0, r4, #2
 8011666:	4401      	add	r1, r0
 8011668:	3801      	subs	r0, #1
 801166a:	4402      	add	r2, r0
 801166c:	f06f 0003 	mvn.w	r0, #3
 8011670:	fb00 3404 	mla	r4, r0, r4, r3
 8011674:	440c      	add	r4, r1
 8011676:	42a1      	cmp	r1, r4
 8011678:	d011      	beq.n	801169e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801167a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801167e:	f801 3b01 	strb.w	r3, [r1], #1
 8011682:	e7f8      	b.n	8011676 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8011684:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8011688:	f840 5b04 	str.w	r5, [r0], #4
 801168c:	e7e6      	b.n	801165c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801168e:	0790      	lsls	r0, r2, #30
 8011690:	d0e1      	beq.n	8011656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8011692:	f832 0b02 	ldrh.w	r0, [r2], #2
 8011696:	f821 0b02 	strh.w	r0, [r1], #2
 801169a:	3b02      	subs	r3, #2
 801169c:	e7db      	b.n	8011656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801169e:	2001      	movs	r0, #1
 80116a0:	bd70      	pop	{r4, r5, r6, pc}

080116a2 <_ZN8touchgfx3HAL7noTouchEv>:
 80116a2:	b510      	push	{r4, lr}
 80116a4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80116a8:	4604      	mov	r4, r0
 80116aa:	b153      	cbz	r3, 80116c2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80116ac:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80116b0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80116b4:	2101      	movs	r1, #1
 80116b6:	301c      	adds	r0, #28
 80116b8:	f00b ffa8 	bl	801d60c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80116bc:	2300      	movs	r3, #0
 80116be:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80116c2:	bd10      	pop	{r4, pc}

080116c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80116c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116c8:	4605      	mov	r5, r0
 80116ca:	6980      	ldr	r0, [r0, #24]
 80116cc:	b085      	sub	sp, #20
 80116ce:	460f      	mov	r7, r1
 80116d0:	4690      	mov	r8, r2
 80116d2:	4699      	mov	r9, r3
 80116d4:	b930      	cbnz	r0, 80116e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80116d6:	4b1f      	ldr	r3, [pc, #124]	; (8011754 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80116d8:	4a1f      	ldr	r2, [pc, #124]	; (8011758 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80116da:	f44f 7198 	mov.w	r1, #304	; 0x130
 80116de:	481f      	ldr	r0, [pc, #124]	; (801175c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80116e0:	f00c f826 	bl	801d730 <__assert_func>
 80116e4:	ac04      	add	r4, sp, #16
 80116e6:	2600      	movs	r6, #0
 80116e8:	f844 6d04 	str.w	r6, [r4, #-4]!
 80116ec:	6806      	ldr	r6, [r0, #0]
 80116ee:	9401      	str	r4, [sp, #4]
 80116f0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80116f4:	9400      	str	r4, [sp, #0]
 80116f6:	6834      	ldr	r4, [r6, #0]
 80116f8:	47a0      	blx	r4
 80116fa:	4c19      	ldr	r4, [pc, #100]	; (8011760 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80116fc:	4606      	mov	r6, r0
 80116fe:	f8a4 9000 	strh.w	r9, [r4]
 8011702:	f7fb fce1 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011706:	6803      	ldr	r3, [r0, #0]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	4798      	blx	r3
 801170c:	280c      	cmp	r0, #12
 801170e:	d80f      	bhi.n	8011730 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8011710:	e8df f000 	tbb	[pc, r0]
 8011714:	1b1b1207 	.word	0x1b1b1207
 8011718:	1b1b1b1b 	.word	0x1b1b1b1b
 801171c:	1b1b1b1b 	.word	0x1b1b1b1b
 8011720:	1b          	.byte	0x1b
 8011721:	00          	.byte	0x00
 8011722:	8823      	ldrh	r3, [r4, #0]
 8011724:	fb08 7203 	mla	r2, r8, r3, r7
 8011728:	9b03      	ldr	r3, [sp, #12]
 801172a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801172e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8011730:	4630      	mov	r0, r6
 8011732:	b005      	add	sp, #20
 8011734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011738:	8822      	ldrh	r2, [r4, #0]
 801173a:	9b03      	ldr	r3, [sp, #12]
 801173c:	fb08 7202 	mla	r2, r8, r2, r7
 8011740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011744:	1a9a      	subs	r2, r3, r2
 8011746:	63ea      	str	r2, [r5, #60]	; 0x3c
 8011748:	e7f2      	b.n	8011730 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801174a:	4b06      	ldr	r3, [pc, #24]	; (8011764 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801174c:	4a02      	ldr	r2, [pc, #8]	; (8011758 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801174e:	f240 114d 	movw	r1, #333	; 0x14d
 8011752:	e7c4      	b.n	80116de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8011754:	0801fe01 	.word	0x0801fe01
 8011758:	08020112 	.word	0x08020112
 801175c:	0801fe46 	.word	0x0801fe46
 8011760:	200084e6 	.word	0x200084e6
 8011764:	0801fe6c 	.word	0x0801fe6c

08011768 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8011768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801176c:	4698      	mov	r8, r3
 801176e:	6803      	ldr	r3, [r0, #0]
 8011770:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8011772:	4b0f      	ldr	r3, [pc, #60]	; (80117b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8011774:	b087      	sub	sp, #28
 8011776:	f8b3 9000 	ldrh.w	r9, [r3]
 801177a:	460e      	mov	r6, r1
 801177c:	4617      	mov	r7, r2
 801177e:	4604      	mov	r4, r0
 8011780:	f7fb fca2 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011784:	6803      	ldr	r3, [r0, #0]
 8011786:	6a1b      	ldr	r3, [r3, #32]
 8011788:	4798      	blx	r3
 801178a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801178e:	9302      	str	r3, [sp, #8]
 8011790:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011794:	9301      	str	r3, [sp, #4]
 8011796:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80117a0:	4643      	mov	r3, r8
 80117a2:	463a      	mov	r2, r7
 80117a4:	4631      	mov	r1, r6
 80117a6:	4620      	mov	r0, r4
 80117a8:	47a8      	blx	r5
 80117aa:	b007      	add	sp, #28
 80117ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117b0:	200084e6 	.word	0x200084e6

080117b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80117b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b8:	4606      	mov	r6, r0
 80117ba:	b089      	sub	sp, #36	; 0x24
 80117bc:	4610      	mov	r0, r2
 80117be:	460c      	mov	r4, r1
 80117c0:	4691      	mov	r9, r2
 80117c2:	4698      	mov	r8, r3
 80117c4:	f003 fc9a 	bl	80150fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	f000 8093 	beq.w	80118f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80117ce:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801190c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80117d2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8011910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80117d6:	f8da 0000 	ldr.w	r0, [sl]
 80117da:	4f4b      	ldr	r7, [pc, #300]	; (8011908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80117dc:	6802      	ldr	r2, [r0, #0]
 80117de:	6a12      	ldr	r2, [r2, #32]
 80117e0:	4790      	blx	r2
 80117e2:	f8da 0000 	ldr.w	r0, [sl]
 80117e6:	6802      	ldr	r2, [r0, #0]
 80117e8:	ad08      	add	r5, sp, #32
 80117ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80117ec:	4790      	blx	r2
 80117ee:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80117f2:	f8bb 3000 	ldrh.w	r3, [fp]
 80117f6:	9300      	str	r3, [sp, #0]
 80117f8:	4628      	mov	r0, r5
 80117fa:	883b      	ldrh	r3, [r7, #0]
 80117fc:	9301      	str	r3, [sp, #4]
 80117fe:	f003 fd41 	bl	8015284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011802:	f8ab 0000 	strh.w	r0, [fp]
 8011806:	4628      	mov	r0, r5
 8011808:	f003 fd76 	bl	80152f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801180c:	f8da b000 	ldr.w	fp, [sl]
 8011810:	8038      	strh	r0, [r7, #0]
 8011812:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8011816:	9302      	str	r3, [sp, #8]
 8011818:	4648      	mov	r0, r9
 801181a:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801181e:	f003 fc6d 	bl	80150fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011822:	f8da 2000 	ldr.w	r2, [sl]
 8011826:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801182a:	63d0      	str	r0, [r2, #60]	; 0x3c
 801182c:	6822      	ldr	r2, [r4, #0]
 801182e:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8011832:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011834:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8011838:	2200      	movs	r2, #0
 801183a:	4611      	mov	r1, r2
 801183c:	4620      	mov	r0, r4
 801183e:	4798      	blx	r3
 8011840:	2201      	movs	r2, #1
 8011842:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8011846:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801184a:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801184e:	2a00      	cmp	r2, #0
 8011850:	f104 0204 	add.w	r2, r4, #4
 8011854:	dd51      	ble.n	80118fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8011856:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801185a:	2900      	cmp	r1, #0
 801185c:	dd4d      	ble.n	80118fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801185e:	6810      	ldr	r0, [r2, #0]
 8011860:	6851      	ldr	r1, [r2, #4]
 8011862:	f10d 0c18 	add.w	ip, sp, #24
 8011866:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801186a:	4641      	mov	r1, r8
 801186c:	a806      	add	r0, sp, #24
 801186e:	f7ff fc77 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8011872:	4628      	mov	r0, r5
 8011874:	f003 fe58 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011878:	4680      	mov	r8, r0
 801187a:	f7fb fc25 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 801187e:	6802      	ldr	r2, [r0, #0]
 8011880:	6a12      	ldr	r2, [r2, #32]
 8011882:	4790      	blx	r2
 8011884:	4580      	cmp	r8, r0
 8011886:	d03d      	beq.n	8011904 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 8011888:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801188a:	b150      	cbz	r0, 80118a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 801188c:	4628      	mov	r0, r5
 801188e:	f003 fe4b 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011892:	4605      	mov	r5, r0
 8011894:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8011896:	6803      	ldr	r3, [r0, #0]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	4798      	blx	r3
 801189c:	1a2b      	subs	r3, r5, r0
 801189e:	4258      	negs	r0, r3
 80118a0:	4158      	adcs	r0, r3
 80118a2:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80118a6:	6822      	ldr	r2, [r4, #0]
 80118a8:	6963      	ldr	r3, [r4, #20]
 80118aa:	9303      	str	r3, [sp, #12]
 80118ac:	2500      	movs	r5, #0
 80118ae:	6165      	str	r5, [r4, #20]
 80118b0:	4620      	mov	r0, r4
 80118b2:	6892      	ldr	r2, [r2, #8]
 80118b4:	a906      	add	r1, sp, #24
 80118b6:	4790      	blx	r2
 80118b8:	9b03      	ldr	r3, [sp, #12]
 80118ba:	6163      	str	r3, [r4, #20]
 80118bc:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80118c0:	6823      	ldr	r3, [r4, #0]
 80118c2:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80118c6:	4620      	mov	r0, r4
 80118c8:	4c10      	ldr	r4, [pc, #64]	; (801190c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80118ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118cc:	4652      	mov	r2, sl
 80118ce:	4649      	mov	r1, r9
 80118d0:	4798      	blx	r3
 80118d2:	6820      	ldr	r0, [r4, #0]
 80118d4:	9b02      	ldr	r3, [sp, #8]
 80118d6:	9a00      	ldr	r2, [sp, #0]
 80118d8:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80118dc:	4b0c      	ldr	r3, [pc, #48]	; (8011910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80118de:	801a      	strh	r2, [r3, #0]
 80118e0:	4b09      	ldr	r3, [pc, #36]	; (8011908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80118e2:	9a01      	ldr	r2, [sp, #4]
 80118e4:	801a      	strh	r2, [r3, #0]
 80118e6:	6803      	ldr	r3, [r0, #0]
 80118e8:	6a1b      	ldr	r3, [r3, #32]
 80118ea:	4798      	blx	r3
 80118ec:	6820      	ldr	r0, [r4, #0]
 80118ee:	6803      	ldr	r3, [r0, #0]
 80118f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f2:	4798      	blx	r3
 80118f4:	b009      	add	sp, #36	; 0x24
 80118f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118fa:	6810      	ldr	r0, [r2, #0]
 80118fc:	6851      	ldr	r1, [r2, #4]
 80118fe:	ab06      	add	r3, sp, #24
 8011900:	c303      	stmia	r3!, {r0, r1}
 8011902:	e7b6      	b.n	8011872 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 8011904:	2000      	movs	r0, #0
 8011906:	e7cc      	b.n	80118a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8011908:	200084e8 	.word	0x200084e8
 801190c:	200084ec 	.word	0x200084ec
 8011910:	200084e6 	.word	0x200084e6

08011914 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011914:	b510      	push	{r4, lr}
 8011916:	4b07      	ldr	r3, [pc, #28]	; (8011934 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	4604      	mov	r4, r0
 801191c:	b13b      	cbz	r3, 801192e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801191e:	6803      	ldr	r3, [r0, #0]
 8011920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011922:	4798      	blx	r3
 8011924:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011926:	4283      	cmp	r3, r0
 8011928:	d101      	bne.n	801192e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801192a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801192c:	bd10      	pop	{r4, pc}
 801192e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011930:	e7fc      	b.n	801192c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8011932:	bf00      	nop
 8011934:	200084ea 	.word	0x200084ea

08011938 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011938:	b510      	push	{r4, lr}
 801193a:	4b0b      	ldr	r3, [pc, #44]	; (8011968 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	4604      	mov	r4, r0
 8011940:	b95b      	cbnz	r3, 801195a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011942:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8011946:	2b02      	cmp	r3, #2
 8011948:	d007      	beq.n	801195a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801194a:	6840      	ldr	r0, [r0, #4]
 801194c:	f000 fbc8 	bl	80120e0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011950:	b118      	cbz	r0, 801195a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011952:	6862      	ldr	r2, [r4, #4]
 8011954:	7a53      	ldrb	r3, [r2, #9]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d0fc      	beq.n	8011954 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801195a:	f7fd fff3 	bl	800f944 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801195e:	4620      	mov	r0, r4
 8011960:	f7ff ffd8 	bl	8011914 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011964:	bd10      	pop	{r4, pc}
 8011966:	bf00      	nop
 8011968:	200084ea 	.word	0x200084ea

0801196c <_ZN8touchgfx3HAL10initializeEv>:
 801196c:	b510      	push	{r4, lr}
 801196e:	4604      	mov	r4, r0
 8011970:	f7fd ffb4 	bl	800f8dc <_ZN8touchgfx10OSWrappers10initializeEv>
 8011974:	6860      	ldr	r0, [r4, #4]
 8011976:	6803      	ldr	r3, [r0, #0]
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	4798      	blx	r3
 801197c:	68e0      	ldr	r0, [r4, #12]
 801197e:	6803      	ldr	r3, [r0, #0]
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	4798      	blx	r3
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	4620      	mov	r0, r4
 8011988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801198a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801198e:	4718      	bx	r3

08011990 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8011990:	b508      	push	{r3, lr}
 8011992:	290c      	cmp	r1, #12
 8011994:	d817      	bhi.n	80119c6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8011996:	e8df f001 	tbb	[pc, r1]
 801199a:	090b      	.short	0x090b
 801199c:	0d0d0d07 	.word	0x0d0d0d07
 80119a0:	1414140d 	.word	0x1414140d
 80119a4:	1414      	.short	0x1414
 80119a6:	0d          	.byte	0x0d
 80119a7:	00          	.byte	0x00
 80119a8:	2020      	movs	r0, #32
 80119aa:	bd08      	pop	{r3, pc}
 80119ac:	2018      	movs	r0, #24
 80119ae:	e7fc      	b.n	80119aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119b0:	2010      	movs	r0, #16
 80119b2:	e7fa      	b.n	80119aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119b4:	4b05      	ldr	r3, [pc, #20]	; (80119cc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80119b6:	4a06      	ldr	r2, [pc, #24]	; (80119d0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80119b8:	4806      	ldr	r0, [pc, #24]	; (80119d4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80119ba:	f44f 710c 	mov.w	r1, #560	; 0x230
 80119be:	f00b feb7 	bl	801d730 <__assert_func>
 80119c2:	2008      	movs	r0, #8
 80119c4:	e7f1      	b.n	80119aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119c6:	2000      	movs	r0, #0
 80119c8:	e7ef      	b.n	80119aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119ca:	bf00      	nop
 80119cc:	0801ff3f 	.word	0x0801ff3f
 80119d0:	080202d4 	.word	0x080202d4
 80119d4:	0801fe46 	.word	0x0801fe46

080119d8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80119d8:	b570      	push	{r4, r5, r6, lr}
 80119da:	460d      	mov	r5, r1
 80119dc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80119e0:	4616      	mov	r6, r2
 80119e2:	461c      	mov	r4, r3
 80119e4:	f7ff ffd4 	bl	8011990 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80119e8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80119ec:	10c0      	asrs	r0, r0, #3
 80119ee:	fb06 5101 	mla	r1, r6, r1, r5
 80119f2:	fb00 4001 	mla	r0, r0, r1, r4
 80119f6:	bd70      	pop	{r4, r5, r6, pc}

080119f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80119f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119fc:	b08a      	sub	sp, #40	; 0x28
 80119fe:	f04f 0c00 	mov.w	ip, #0
 8011a02:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8011a06:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011a0a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8011a0e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8011a12:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8011a16:	f8cd c020 	str.w	ip, [sp, #32]
 8011a1a:	f1b8 0f02 	cmp.w	r8, #2
 8011a1e:	4604      	mov	r4, r0
 8011a20:	469a      	mov	sl, r3
 8011a22:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8011a26:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011a2a:	d030      	beq.n	8011a8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8011a2c:	2bff      	cmp	r3, #255	; 0xff
 8011a2e:	d12c      	bne.n	8011a8a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8011a30:	4560      	cmp	r0, ip
 8011a32:	bf14      	ite	ne
 8011a34:	2004      	movne	r0, #4
 8011a36:	2001      	moveq	r0, #1
 8011a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a3c:	9204      	str	r2, [sp, #16]
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8011a44:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011a48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011a4c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011a50:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011a54:	f7ff ff5e 	bl	8011914 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011a58:	e9cd 9700 	strd	r9, r7, [sp]
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8011a62:	4651      	mov	r1, sl
 8011a64:	4620      	mov	r0, r4
 8011a66:	f7ff ffb7 	bl	80119d8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8011a6a:	f8ad 901e 	strh.w	r9, [sp, #30]
 8011a6e:	9005      	str	r0, [sp, #20]
 8011a70:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8011a74:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8011a78:	b106      	cbz	r6, 8011a7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8011a7a:	b98d      	cbnz	r5, 8011aa0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8011a7c:	4b12      	ldr	r3, [pc, #72]	; (8011ac8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8011a7e:	4a13      	ldr	r2, [pc, #76]	; (8011acc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8011a80:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8011a84:	4812      	ldr	r0, [pc, #72]	; (8011ad0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8011a86:	f00b fe53 	bl	801d730 <__assert_func>
 8011a8a:	2004      	movs	r0, #4
 8011a8c:	e7d4      	b.n	8011a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8011a8e:	2bff      	cmp	r3, #255	; 0xff
 8011a90:	d104      	bne.n	8011a9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	bf14      	ite	ne
 8011a96:	2040      	movne	r0, #64	; 0x40
 8011a98:	2020      	moveq	r0, #32
 8011a9a:	e7cd      	b.n	8011a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8011a9c:	2040      	movs	r0, #64	; 0x40
 8011a9e:	e7cb      	b.n	8011a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8011aa0:	6823      	ldr	r3, [r4, #0]
 8011aa2:	9d02      	ldr	r5, [sp, #8]
 8011aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	4798      	blx	r3
 8011aaa:	4228      	tst	r0, r5
 8011aac:	d104      	bne.n	8011ab8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8011aae:	4b09      	ldr	r3, [pc, #36]	; (8011ad4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8011ab0:	4a06      	ldr	r2, [pc, #24]	; (8011acc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8011ab2:	f240 11b1 	movw	r1, #433	; 0x1b1
 8011ab6:	e7e5      	b.n	8011a84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8011ab8:	6860      	ldr	r0, [r4, #4]
 8011aba:	6803      	ldr	r3, [r0, #0]
 8011abc:	a902      	add	r1, sp, #8
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	4798      	blx	r3
 8011ac2:	b00a      	add	sp, #40	; 0x28
 8011ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac8:	0801fec2 	.word	0x0801fec2
 8011acc:	08020176 	.word	0x08020176
 8011ad0:	0801fe46 	.word	0x0801fe46
 8011ad4:	0801fefa 	.word	0x0801fefa

08011ad8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8011ad8:	b510      	push	{r4, lr}
 8011ada:	b08a      	sub	sp, #40	; 0x28
 8011adc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8011ae0:	9408      	str	r4, [sp, #32]
 8011ae2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8011ae6:	9407      	str	r4, [sp, #28]
 8011ae8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8011aec:	9406      	str	r4, [sp, #24]
 8011aee:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8011af2:	9405      	str	r4, [sp, #20]
 8011af4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8011af8:	9404      	str	r4, [sp, #16]
 8011afa:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8011afe:	9403      	str	r4, [sp, #12]
 8011b00:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8011b04:	9402      	str	r4, [sp, #8]
 8011b06:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8011b0a:	e9cd 3400 	strd	r3, r4, [sp]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	2200      	movs	r2, #0
 8011b12:	f7ff ff71 	bl	80119f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011b16:	b00a      	add	sp, #40	; 0x28
 8011b18:	bd10      	pop	{r4, pc}
	...

08011b1c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8011b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b1e:	b08b      	sub	sp, #44	; 0x2c
 8011b20:	4616      	mov	r6, r2
 8011b22:	460d      	mov	r5, r1
 8011b24:	461f      	mov	r7, r3
 8011b26:	4604      	mov	r4, r0
 8011b28:	f7fb face 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011b2c:	6803      	ldr	r3, [r0, #0]
 8011b2e:	6a1b      	ldr	r3, [r3, #32]
 8011b30:	4798      	blx	r3
 8011b32:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011b36:	4b0d      	ldr	r3, [pc, #52]	; (8011b6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	9306      	str	r3, [sp, #24]
 8011b3c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011b40:	9305      	str	r3, [sp, #20]
 8011b42:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011b46:	9304      	str	r3, [sp, #16]
 8011b48:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011b4c:	9303      	str	r3, [sp, #12]
 8011b4e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011b52:	9302      	str	r3, [sp, #8]
 8011b54:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011b58:	2200      	movs	r2, #0
 8011b5a:	e9cd 7300 	strd	r7, r3, [sp]
 8011b5e:	4629      	mov	r1, r5
 8011b60:	4633      	mov	r3, r6
 8011b62:	4620      	mov	r0, r4
 8011b64:	f7ff ff48 	bl	80119f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011b68:	b00b      	add	sp, #44	; 0x2c
 8011b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6c:	200084e6 	.word	0x200084e6

08011b70 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8011b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b74:	461f      	mov	r7, r3
 8011b76:	4b14      	ldr	r3, [pc, #80]	; (8011bc8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8011b78:	b08a      	sub	sp, #40	; 0x28
 8011b7a:	4616      	mov	r6, r2
 8011b7c:	f8b3 8000 	ldrh.w	r8, [r3]
 8011b80:	460d      	mov	r5, r1
 8011b82:	4604      	mov	r4, r0
 8011b84:	f7fb faa0 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011b88:	6803      	ldr	r3, [r0, #0]
 8011b8a:	6a1b      	ldr	r3, [r3, #32]
 8011b8c:	4798      	blx	r3
 8011b8e:	2302      	movs	r3, #2
 8011b90:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8011b94:	2301      	movs	r3, #1
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011b9c:	9304      	str	r3, [sp, #16]
 8011b9e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011ba2:	9303      	str	r3, [sp, #12]
 8011ba4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011ba8:	9302      	str	r3, [sp, #8]
 8011baa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011bae:	9008      	str	r0, [sp, #32]
 8011bb0:	e9cd 7300 	strd	r7, r3, [sp]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	4633      	mov	r3, r6
 8011bb8:	4629      	mov	r1, r5
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff ff1c 	bl	80119f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011bc0:	b00a      	add	sp, #40	; 0x28
 8011bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc6:	bf00      	nop
 8011bc8:	200084e6 	.word	0x200084e6

08011bcc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8011bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd0:	b08b      	sub	sp, #44	; 0x2c
 8011bd2:	469b      	mov	fp, r3
 8011bd4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8011bd8:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8011bdc:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8011be0:	2fff      	cmp	r7, #255	; 0xff
 8011be2:	bf14      	ite	ne
 8011be4:	2308      	movne	r3, #8
 8011be6:	2302      	moveq	r3, #2
 8011be8:	2600      	movs	r6, #0
 8011bea:	4604      	mov	r4, r0
 8011bec:	4689      	mov	r9, r1
 8011bee:	4692      	mov	sl, r2
 8011bf0:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8011bf4:	9608      	str	r6, [sp, #32]
 8011bf6:	f7ff fe8d 	bl	8011914 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011bfa:	e9cd 8500 	strd	r8, r5, [sp]
 8011bfe:	4603      	mov	r3, r0
 8011c00:	465a      	mov	r2, fp
 8011c02:	4651      	mov	r1, sl
 8011c04:	4620      	mov	r0, r4
 8011c06:	f7ff fee7 	bl	80119d8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8011c0a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011c0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011c12:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011c16:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	9005      	str	r0, [sp, #20]
 8011c1e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8011c22:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8011c26:	f8ad 601c 	strh.w	r6, [sp, #28]
 8011c2a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8011c2e:	f8cd 9020 	str.w	r9, [sp, #32]
 8011c32:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8011c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c38:	9d02      	ldr	r5, [sp, #8]
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	4798      	blx	r3
 8011c3e:	4228      	tst	r0, r5
 8011c40:	d106      	bne.n	8011c50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8011c42:	4b07      	ldr	r3, [pc, #28]	; (8011c60 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8011c44:	4a07      	ldr	r2, [pc, #28]	; (8011c64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8011c46:	4808      	ldr	r0, [pc, #32]	; (8011c68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8011c48:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8011c4c:	f00b fd70 	bl	801d730 <__assert_func>
 8011c50:	6860      	ldr	r0, [r4, #4]
 8011c52:	6803      	ldr	r3, [r0, #0]
 8011c54:	a902      	add	r1, sp, #8
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	4798      	blx	r3
 8011c5a:	b00b      	add	sp, #44	; 0x2c
 8011c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c60:	0801fefa 	.word	0x0801fefa
 8011c64:	0802023f 	.word	0x0802023f
 8011c68:	0801fe46 	.word	0x0801fe46

08011c6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011c6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011c70:	461f      	mov	r7, r3
 8011c72:	4b0b      	ldr	r3, [pc, #44]	; (8011ca0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011c74:	460d      	mov	r5, r1
 8011c76:	f8b3 8000 	ldrh.w	r8, [r3]
 8011c7a:	4616      	mov	r6, r2
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	f7fb fa23 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011c82:	6803      	ldr	r3, [r0, #0]
 8011c84:	6a1b      	ldr	r3, [r3, #32]
 8011c86:	4798      	blx	r3
 8011c88:	463b      	mov	r3, r7
 8011c8a:	e9cd 8000 	strd	r8, r0, [sp]
 8011c8e:	4632      	mov	r2, r6
 8011c90:	4629      	mov	r1, r5
 8011c92:	4620      	mov	r0, r4
 8011c94:	f7ff fea0 	bl	80119d8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8011c98:	b002      	add	sp, #8
 8011c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9e:	bf00      	nop
 8011ca0:	200084e6 	.word	0x200084e6

08011ca4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8011ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca8:	b088      	sub	sp, #32
 8011caa:	4698      	mov	r8, r3
 8011cac:	2300      	movs	r3, #0
 8011cae:	9306      	str	r3, [sp, #24]
 8011cb0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011cb4:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8011cb8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8011cbc:	f8ad 6010 	strh.w	r6, [sp, #16]
 8011cc0:	e9cd 3100 	strd	r3, r1, [sp]
 8011cc4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011cc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ccc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8011cd0:	f88d 301c 	strb.w	r3, [sp, #28]
 8011cd4:	4617      	mov	r7, r2
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	f8ad 5012 	strh.w	r5, [sp, #18]
 8011cdc:	f7ff fe1a 	bl	8011914 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011ce0:	4642      	mov	r2, r8
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	4639      	mov	r1, r7
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7ff ffc0 	bl	8011c6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011cec:	4b16      	ldr	r3, [pc, #88]	; (8011d48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8011cee:	9003      	str	r0, [sp, #12]
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cf6:	f7fb f9e7 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011cfa:	6803      	ldr	r3, [r0, #0]
 8011cfc:	6a1b      	ldr	r3, [r3, #32]
 8011cfe:	4798      	blx	r3
 8011d00:	f88d 001e 	strb.w	r0, [sp, #30]
 8011d04:	f88d 001d 	strb.w	r0, [sp, #29]
 8011d08:	b106      	cbz	r6, 8011d0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8011d0a:	b935      	cbnz	r5, 8011d1a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8011d0c:	4b0f      	ldr	r3, [pc, #60]	; (8011d4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8011d0e:	4a10      	ldr	r2, [pc, #64]	; (8011d50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8011d10:	f240 11cd 	movw	r1, #461	; 0x1cd
 8011d14:	480f      	ldr	r0, [pc, #60]	; (8011d54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8011d16:	f00b fd0b 	bl	801d730 <__assert_func>
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	9d00      	ldr	r5, [sp, #0]
 8011d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d20:	4620      	mov	r0, r4
 8011d22:	4798      	blx	r3
 8011d24:	4228      	tst	r0, r5
 8011d26:	d104      	bne.n	8011d32 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8011d28:	4b0b      	ldr	r3, [pc, #44]	; (8011d58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8011d2a:	4a09      	ldr	r2, [pc, #36]	; (8011d50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8011d2c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8011d30:	e7f0      	b.n	8011d14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8011d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d34:	6860      	ldr	r0, [r4, #4]
 8011d36:	9306      	str	r3, [sp, #24]
 8011d38:	6803      	ldr	r3, [r0, #0]
 8011d3a:	4669      	mov	r1, sp
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	4798      	blx	r3
 8011d40:	b008      	add	sp, #32
 8011d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d46:	bf00      	nop
 8011d48:	200084e6 	.word	0x200084e6
 8011d4c:	0801fec2 	.word	0x0801fec2
 8011d50:	08020028 	.word	0x08020028
 8011d54:	0801fe46 	.word	0x0801fe46
 8011d58:	0801fefa 	.word	0x0801fefa

08011d5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	b08a      	sub	sp, #40	; 0x28
 8011d60:	466b      	mov	r3, sp
 8011d62:	e883 0006 	stmia.w	r3, {r1, r2}
 8011d66:	4b20      	ldr	r3, [pc, #128]	; (8011de8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	b933      	cbnz	r3, 8011d7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8011d6e:	4b1f      	ldr	r3, [pc, #124]	; (8011dec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8011d70:	4a1f      	ldr	r2, [pc, #124]	; (8011df0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8011d72:	4820      	ldr	r0, [pc, #128]	; (8011df4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8011d74:	f240 11f9 	movw	r1, #505	; 0x1f9
 8011d78:	f00b fcda 	bl	801d730 <__assert_func>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	9308      	str	r3, [sp, #32]
 8011d80:	2301      	movs	r3, #1
 8011d82:	9302      	str	r3, [sp, #8]
 8011d84:	6803      	ldr	r3, [r0, #0]
 8011d86:	f8bd 5000 	ldrh.w	r5, [sp]
 8011d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d8c:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8011d90:	4798      	blx	r3
 8011d92:	4632      	mov	r2, r6
 8011d94:	4629      	mov	r1, r5
 8011d96:	4603      	mov	r3, r0
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f7ff ff67 	bl	8011c6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011da0:	9305      	str	r3, [sp, #20]
 8011da2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011da6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011daa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011dae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011db2:	4b11      	ldr	r3, [pc, #68]	; (8011df8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8011db4:	9003      	str	r0, [sp, #12]
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011dbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011dc0:	f7fb f982 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011dc4:	6803      	ldr	r3, [r0, #0]
 8011dc6:	6a1b      	ldr	r3, [r3, #32]
 8011dc8:	4798      	blx	r3
 8011dca:	23ff      	movs	r3, #255	; 0xff
 8011dcc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8011dd0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8011dd4:	6860      	ldr	r0, [r4, #4]
 8011dd6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011dda:	6803      	ldr	r3, [r0, #0]
 8011ddc:	a902      	add	r1, sp, #8
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	4798      	blx	r3
 8011de2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011de4:	b00a      	add	sp, #40	; 0x28
 8011de6:	bd70      	pop	{r4, r5, r6, pc}
 8011de8:	200084eb 	.word	0x200084eb
 8011dec:	0801fd93 	.word	0x0801fd93
 8011df0:	080200cc 	.word	0x080200cc
 8011df4:	0801fe46 	.word	0x0801fe46
 8011df8:	200084e6 	.word	0x200084e6

08011dfc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dfe:	b08b      	sub	sp, #44	; 0x2c
 8011e00:	466d      	mov	r5, sp
 8011e02:	e885 0006 	stmia.w	r5, {r1, r2}
 8011e06:	461d      	mov	r5, r3
 8011e08:	2300      	movs	r3, #0
 8011e0a:	9308      	str	r3, [sp, #32]
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	9302      	str	r3, [sp, #8]
 8011e10:	6803      	ldr	r3, [r0, #0]
 8011e12:	f8bd 6000 	ldrh.w	r6, [sp]
 8011e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e18:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011e1c:	4604      	mov	r4, r0
 8011e1e:	4798      	blx	r3
 8011e20:	463a      	mov	r2, r7
 8011e22:	4631      	mov	r1, r6
 8011e24:	4603      	mov	r3, r0
 8011e26:	4620      	mov	r0, r4
 8011e28:	f7ff ff20 	bl	8011c6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011e2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011e30:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011e34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011e38:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011e3c:	4b0e      	ldr	r3, [pc, #56]	; (8011e78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8011e3e:	9003      	str	r0, [sp, #12]
 8011e40:	881b      	ldrh	r3, [r3, #0]
 8011e42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011e4c:	9505      	str	r5, [sp, #20]
 8011e4e:	f7fb f93b 	bl	800d0c8 <_ZN8touchgfx3HAL3lcdEv>
 8011e52:	6803      	ldr	r3, [r0, #0]
 8011e54:	6a1b      	ldr	r3, [r3, #32]
 8011e56:	4798      	blx	r3
 8011e58:	23ff      	movs	r3, #255	; 0xff
 8011e5a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8011e5e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8011e62:	6860      	ldr	r0, [r4, #4]
 8011e64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e68:	6803      	ldr	r3, [r0, #0]
 8011e6a:	a902      	add	r1, sp, #8
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	4798      	blx	r3
 8011e70:	4628      	mov	r0, r5
 8011e72:	b00b      	add	sp, #44	; 0x2c
 8011e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e76:	bf00      	nop
 8011e78:	200084e6 	.word	0x200084e6

08011e7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8011e82:	4604      	mov	r4, r0
 8011e84:	b19b      	cbz	r3, 8011eae <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011e86:	2002      	movs	r0, #2
 8011e88:	f7fd fa96 	bl	800f3b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011e92:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8011e96:	6823      	ldr	r3, [r4, #0]
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8011e9e:	f7ff fd39 	bl	8011914 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011ea2:	462b      	mov	r3, r5
 8011ea4:	4601      	mov	r1, r0
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011eac:	4718      	bx	r3
 8011eae:	bd70      	pop	{r4, r5, r6, pc}

08011eb0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8011eb0:	4770      	bx	lr

08011eb2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011eb2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011eb6:	1a13      	subs	r3, r2, r0
 8011eb8:	4258      	negs	r0, r3
 8011eba:	4158      	adcs	r0, r3
 8011ebc:	4770      	bx	lr

08011ebe <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011ebe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011ec2:	1a9b      	subs	r3, r3, r2
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	bfdc      	itt	le
 8011ec8:	6882      	ldrle	r2, [r0, #8]
 8011eca:	189b      	addle	r3, r3, r2
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	bfcc      	ite	gt
 8011ed0:	2000      	movgt	r0, #0
 8011ed2:	2001      	movle	r0, #1
 8011ed4:	4770      	bx	lr

08011ed6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011ed6:	6902      	ldr	r2, [r0, #16]
 8011ed8:	6840      	ldr	r0, [r0, #4]
 8011eda:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8011ede:	4770      	bx	lr

08011ee0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011ee0:	6803      	ldr	r3, [r0, #0]
 8011ee2:	691b      	ldr	r3, [r3, #16]
 8011ee4:	4718      	bx	r3

08011ee6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011ee6:	4770      	bx	lr

08011ee8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011ee8:	4770      	bx	lr
	...

08011eec <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011eec:	b570      	push	{r4, r5, r6, lr}
 8011eee:	2301      	movs	r3, #1
 8011ef0:	7203      	strb	r3, [r0, #8]
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	6840      	ldr	r0, [r0, #4]
 8011ef6:	6803      	ldr	r3, [r0, #0]
 8011ef8:	699b      	ldr	r3, [r3, #24]
 8011efa:	4798      	blx	r3
 8011efc:	6803      	ldr	r3, [r0, #0]
 8011efe:	2b08      	cmp	r3, #8
 8011f00:	4605      	mov	r5, r0
 8011f02:	d01e      	beq.n	8011f42 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8011f04:	d80b      	bhi.n	8011f1e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011f06:	2b02      	cmp	r3, #2
 8011f08:	d027      	beq.n	8011f5a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8011f0a:	2b04      	cmp	r3, #4
 8011f0c:	d011      	beq.n	8011f32 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d028      	beq.n	8011f64 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011f12:	4b17      	ldr	r3, [pc, #92]	; (8011f70 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8011f14:	4a17      	ldr	r2, [pc, #92]	; (8011f74 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8011f16:	4818      	ldr	r0, [pc, #96]	; (8011f78 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8011f18:	218b      	movs	r1, #139	; 0x8b
 8011f1a:	f00b fc09 	bl	801d730 <__assert_func>
 8011f1e:	2b40      	cmp	r3, #64	; 0x40
 8011f20:	d020      	beq.n	8011f64 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011f22:	d801      	bhi.n	8011f28 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011f24:	2b20      	cmp	r3, #32
 8011f26:	e7f3      	b.n	8011f10 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8011f28:	2b80      	cmp	r3, #128	; 0x80
 8011f2a:	d01b      	beq.n	8011f64 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f30:	e7ee      	b.n	8011f10 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	7f01      	ldrb	r1, [r0, #28]
 8011f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f38:	4620      	mov	r0, r4
 8011f3a:	4798      	blx	r3
 8011f3c:	6823      	ldr	r3, [r4, #0]
 8011f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f40:	e006      	b.n	8011f50 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	7f01      	ldrb	r1, [r0, #28]
 8011f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f48:	4620      	mov	r0, r4
 8011f4a:	4798      	blx	r3
 8011f4c:	6823      	ldr	r3, [r4, #0]
 8011f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f50:	4629      	mov	r1, r5
 8011f52:	4620      	mov	r0, r4
 8011f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f58:	4718      	bx	r3
 8011f5a:	6823      	ldr	r3, [r4, #0]
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f60:	4798      	blx	r3
 8011f62:	e7f3      	b.n	8011f4c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	4620      	mov	r0, r4
 8011f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f6a:	4798      	blx	r3
 8011f6c:	e7e6      	b.n	8011f3c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8011f6e:	bf00      	nop
 8011f70:	0802031d 	.word	0x0802031d
 8011f74:	0802042c 	.word	0x0802042c
 8011f78:	08020342 	.word	0x08020342

08011f7c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011f7c:	b570      	push	{r4, r5, r6, lr}
 8011f7e:	4604      	mov	r4, r0
 8011f80:	460e      	mov	r6, r1
 8011f82:	6860      	ldr	r0, [r4, #4]
 8011f84:	6803      	ldr	r3, [r0, #0]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	4798      	blx	r3
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d1f9      	bne.n	8011f82 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011f8e:	4d0b      	ldr	r5, [pc, #44]	; (8011fbc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8011f90:	6828      	ldr	r0, [r5, #0]
 8011f92:	6803      	ldr	r3, [r0, #0]
 8011f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f96:	4798      	blx	r3
 8011f98:	f7fd fcee 	bl	800f978 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011f9c:	6860      	ldr	r0, [r4, #4]
 8011f9e:	6803      	ldr	r3, [r0, #0]
 8011fa0:	4631      	mov	r1, r6
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	4798      	blx	r3
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	4620      	mov	r0, r4
 8011faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fac:	4798      	blx	r3
 8011fae:	6828      	ldr	r0, [r5, #0]
 8011fb0:	6803      	ldr	r3, [r0, #0]
 8011fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011fb8:	4718      	bx	r3
 8011fba:	bf00      	nop
 8011fbc:	200084ec 	.word	0x200084ec

08011fc0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011fc0:	b508      	push	{r3, lr}
 8011fc2:	f7fd fcbf 	bl	800f944 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011fca:	f7fd bcc9 	b.w	800f960 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011fce <_ZN8touchgfx13DMA_Interface5startEv>:
 8011fce:	b510      	push	{r4, lr}
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	6840      	ldr	r0, [r0, #4]
 8011fd4:	6803      	ldr	r3, [r0, #0]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4798      	blx	r3
 8011fda:	b948      	cbnz	r0, 8011ff0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011fdc:	7a63      	ldrb	r3, [r4, #9]
 8011fde:	b13b      	cbz	r3, 8011ff0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011fe0:	7a23      	ldrb	r3, [r4, #8]
 8011fe2:	b92b      	cbnz	r3, 8011ff0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fee:	4718      	bx	r3
 8011ff0:	bd10      	pop	{r4, pc}
	...

08011ff4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011ff4:	b510      	push	{r4, lr}
 8011ff6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8011ffa:	1b12      	subs	r2, r2, r4
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	bfdc      	itt	le
 8012000:	6883      	ldrle	r3, [r0, #8]
 8012002:	18d2      	addle	r2, r2, r3
 8012004:	2a01      	cmp	r2, #1
 8012006:	dd18      	ble.n	801203a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8012008:	6843      	ldr	r3, [r0, #4]
 801200a:	f101 021c 	add.w	r2, r1, #28
 801200e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8012012:	f851 4b04 	ldr.w	r4, [r1], #4
 8012016:	f843 4b04 	str.w	r4, [r3], #4
 801201a:	4291      	cmp	r1, r2
 801201c:	d1f9      	bne.n	8012012 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801201e:	880a      	ldrh	r2, [r1, #0]
 8012020:	801a      	strh	r2, [r3, #0]
 8012022:	788a      	ldrb	r2, [r1, #2]
 8012024:	709a      	strb	r2, [r3, #2]
 8012026:	68c3      	ldr	r3, [r0, #12]
 8012028:	6882      	ldr	r2, [r0, #8]
 801202a:	f3bf 8f5b 	dmb	ish
 801202e:	3301      	adds	r3, #1
 8012030:	429a      	cmp	r2, r3
 8012032:	bfd8      	it	le
 8012034:	1a9b      	suble	r3, r3, r2
 8012036:	60c3      	str	r3, [r0, #12]
 8012038:	bd10      	pop	{r4, pc}
 801203a:	4b03      	ldr	r3, [pc, #12]	; (8012048 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801203c:	4a03      	ldr	r2, [pc, #12]	; (801204c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801203e:	4804      	ldr	r0, [pc, #16]	; (8012050 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8012040:	2139      	movs	r1, #57	; 0x39
 8012042:	f00b fb75 	bl	801d730 <__assert_func>
 8012046:	bf00      	nop
 8012048:	08020368 	.word	0x08020368
 801204c:	0802045c 	.word	0x0802045c
 8012050:	08020342 	.word	0x08020342

08012054 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012054:	b510      	push	{r4, lr}
 8012056:	6803      	ldr	r3, [r0, #0]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	4604      	mov	r4, r0
 801205c:	4798      	blx	r3
 801205e:	b128      	cbz	r0, 801206c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8012060:	4b07      	ldr	r3, [pc, #28]	; (8012080 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8012062:	4a08      	ldr	r2, [pc, #32]	; (8012084 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8012064:	4808      	ldr	r0, [pc, #32]	; (8012088 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8012066:	213f      	movs	r1, #63	; 0x3f
 8012068:	f00b fb62 	bl	801d730 <__assert_func>
 801206c:	6923      	ldr	r3, [r4, #16]
 801206e:	68a2      	ldr	r2, [r4, #8]
 8012070:	f3bf 8f5b 	dmb	ish
 8012074:	3301      	adds	r3, #1
 8012076:	429a      	cmp	r2, r3
 8012078:	bfd8      	it	le
 801207a:	1a9b      	suble	r3, r3, r2
 801207c:	6123      	str	r3, [r4, #16]
 801207e:	bd10      	pop	{r4, pc}
 8012080:	0802038b 	.word	0x0802038b
 8012084:	080204aa 	.word	0x080204aa
 8012088:	08020342 	.word	0x08020342

0801208c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801208c:	b570      	push	{r4, r5, r6, lr}
 801208e:	4604      	mov	r4, r0
 8012090:	6840      	ldr	r0, [r0, #4]
 8012092:	6803      	ldr	r3, [r0, #0]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	4798      	blx	r3
 8012098:	4605      	mov	r5, r0
 801209a:	b930      	cbnz	r0, 80120aa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801209c:	7a23      	ldrb	r3, [r4, #8]
 801209e:	b123      	cbz	r3, 80120aa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80120a0:	6860      	ldr	r0, [r4, #4]
 80120a2:	6803      	ldr	r3, [r0, #0]
 80120a4:	695b      	ldr	r3, [r3, #20]
 80120a6:	4798      	blx	r3
 80120a8:	7225      	strb	r5, [r4, #8]
 80120aa:	6860      	ldr	r0, [r4, #4]
 80120ac:	6803      	ldr	r3, [r0, #0]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4798      	blx	r3
 80120b2:	b928      	cbnz	r0, 80120c0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	4620      	mov	r0, r4
 80120b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120be:	4718      	bx	r3
 80120c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120c4:	f7fd bc64 	b.w	800f990 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080120c8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80120c8:	b510      	push	{r4, lr}
 80120ca:	4c04      	ldr	r4, [pc, #16]	; (80120dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80120cc:	6082      	str	r2, [r0, #8]
 80120ce:	2200      	movs	r2, #0
 80120d0:	e9c0 4100 	strd	r4, r1, [r0]
 80120d4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80120d8:	bd10      	pop	{r4, pc}
 80120da:	bf00      	nop
 80120dc:	08020410 	.word	0x08020410

080120e0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80120e0:	6840      	ldr	r0, [r0, #4]
 80120e2:	6803      	ldr	r3, [r0, #0]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	4718      	bx	r3

080120e8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80120e8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80120ec:	4770      	bx	lr

080120ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	790b      	ldrb	r3, [r1, #4]
 80120f2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	bf0c      	ite	eq
 80120fa:	2301      	moveq	r3, #1
 80120fc:	2300      	movne	r3, #0
 80120fe:	4604      	mov	r4, r0
 8012100:	460e      	mov	r6, r1
 8012102:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8012106:	d110      	bne.n	801212a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012108:	b185      	cbz	r5, 801212c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801210a:	7933      	ldrb	r3, [r6, #4]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d113      	bne.n	8012138 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8012110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012112:	b188      	cbz	r0, 8012138 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8012114:	6803      	ldr	r3, [r0, #0]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	4798      	blx	r3
 801211a:	b168      	cbz	r0, 8012138 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801211c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801211e:	6803      	ldr	r3, [r0, #0]
 8012120:	4621      	mov	r1, r4
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012128:	4718      	bx	r3
 801212a:	b12d      	cbz	r5, 8012138 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	4620      	mov	r0, r4
 8012130:	695b      	ldr	r3, [r3, #20]
 8012132:	4798      	blx	r3
 8012134:	2d00      	cmp	r5, #0
 8012136:	d1e8      	bne.n	801210a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8012138:	bd70      	pop	{r4, r5, r6, pc}

0801213a <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801213a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801213e:	b133      	cbz	r3, 801214e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8012140:	790b      	ldrb	r3, [r1, #4]
 8012142:	2b01      	cmp	r3, #1
 8012144:	bf01      	itttt	eq
 8012146:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8012148:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801214a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801214c:	8603      	strheq	r3, [r0, #48]	; 0x30
 801214e:	f7ff bfce 	b.w	80120ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08012152 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8012152:	2300      	movs	r3, #0
 8012154:	8003      	strh	r3, [r0, #0]
 8012156:	8043      	strh	r3, [r0, #2]
 8012158:	8083      	strh	r3, [r0, #4]
 801215a:	80c3      	strh	r3, [r0, #6]
 801215c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8012160:	b91b      	cbnz	r3, 801216a <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8012162:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8012166:	2bff      	cmp	r3, #255	; 0xff
 8012168:	d103      	bne.n	8012172 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801216a:	890b      	ldrh	r3, [r1, #8]
 801216c:	8083      	strh	r3, [r0, #4]
 801216e:	894b      	ldrh	r3, [r1, #10]
 8012170:	80c3      	strh	r3, [r0, #6]
 8012172:	4770      	bx	lr

08012174 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012176:	4604      	mov	r4, r0
 8012178:	6808      	ldr	r0, [r1, #0]
 801217a:	6849      	ldr	r1, [r1, #4]
 801217c:	466b      	mov	r3, sp
 801217e:	c303      	stmia	r3!, {r0, r1}
 8012180:	6823      	ldr	r3, [r4, #0]
 8012182:	4669      	mov	r1, sp
 8012184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012186:	4620      	mov	r0, r4
 8012188:	4798      	blx	r3
 801218a:	4b08      	ldr	r3, [pc, #32]	; (80121ac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012192:	b10a      	cbz	r2, 8012198 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012194:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012196:	b900      	cbnz	r0, 801219a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012198:	6898      	ldr	r0, [r3, #8]
 801219a:	6803      	ldr	r3, [r0, #0]
 801219c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801219e:	699d      	ldr	r5, [r3, #24]
 80121a0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80121a4:	4669      	mov	r1, sp
 80121a6:	47a8      	blx	r5
 80121a8:	b003      	add	sp, #12
 80121aa:	bd30      	pop	{r4, r5, pc}
 80121ac:	200084ec 	.word	0x200084ec

080121b0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	880b      	ldrh	r3, [r1, #0]
 80121b4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80121b6:	4605      	mov	r5, r0
 80121b8:	8813      	ldrh	r3, [r2, #0]
 80121ba:	f825 3f30 	strh.w	r3, [r5, #48]!
 80121be:	4604      	mov	r4, r0
 80121c0:	4628      	mov	r0, r5
 80121c2:	f003 f85f 	bl	8015284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80121c6:	8120      	strh	r0, [r4, #8]
 80121c8:	4628      	mov	r0, r5
 80121ca:	f003 f895 	bl	80152f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80121ce:	8160      	strh	r0, [r4, #10]
 80121d0:	bd38      	pop	{r3, r4, r5, pc}

080121d2 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80121d2:	b510      	push	{r4, lr}
 80121d4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80121d8:	2bff      	cmp	r3, #255	; 0xff
 80121da:	4604      	mov	r4, r0
 80121dc:	d006      	beq.n	80121ec <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80121de:	2300      	movs	r3, #0
 80121e0:	8003      	strh	r3, [r0, #0]
 80121e2:	8043      	strh	r3, [r0, #2]
 80121e4:	8083      	strh	r3, [r0, #4]
 80121e6:	80c3      	strh	r3, [r0, #6]
 80121e8:	4620      	mov	r0, r4
 80121ea:	bd10      	pop	{r4, pc}
 80121ec:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80121f0:	b11b      	cbz	r3, 80121fa <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80121f2:	3130      	adds	r1, #48	; 0x30
 80121f4:	f003 f8ba 	bl	801536c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80121f8:	e7f6      	b.n	80121e8 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80121fa:	312e      	adds	r1, #46	; 0x2e
 80121fc:	e7fa      	b.n	80121f4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08012200 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012208:	b08a      	sub	sp, #40	; 0x28
 801220a:	4604      	mov	r4, r0
 801220c:	4688      	mov	r8, r1
 801220e:	2b00      	cmp	r3, #0
 8012210:	d044      	beq.n	801229c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8012212:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8012214:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012218:	a805      	add	r0, sp, #20
 801221a:	f003 f833 	bl	8015284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801221e:	4605      	mov	r5, r0
 8012220:	b206      	sxth	r6, r0
 8012222:	a805      	add	r0, sp, #20
 8012224:	f003 f868 	bl	80152f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012228:	f9b8 2000 	ldrsh.w	r2, [r8]
 801222c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8012230:	4417      	add	r7, r2
 8012232:	b2bf      	uxth	r7, r7
 8012234:	2300      	movs	r3, #0
 8012236:	fa0f fe87 	sxth.w	lr, r7
 801223a:	459e      	cmp	lr, r3
 801223c:	fa0f fc80 	sxth.w	ip, r0
 8012240:	9306      	str	r3, [sp, #24]
 8012242:	dd2d      	ble.n	80122a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012244:	4296      	cmp	r6, r2
 8012246:	dd2b      	ble.n	80122a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012248:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801224c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8012250:	4419      	add	r1, r3
 8012252:	b289      	uxth	r1, r1
 8012254:	fa0f f881 	sxth.w	r8, r1
 8012258:	f1b8 0f00 	cmp.w	r8, #0
 801225c:	dd20      	ble.n	80122a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801225e:	459c      	cmp	ip, r3
 8012260:	dd1e      	ble.n	80122a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012262:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801226a:	4576      	cmp	r6, lr
 801226c:	bfa8      	it	ge
 801226e:	463d      	movge	r5, r7
 8012270:	45c4      	cmp	ip, r8
 8012272:	bfa8      	it	ge
 8012274:	4608      	movge	r0, r1
 8012276:	1aad      	subs	r5, r5, r2
 8012278:	1ac0      	subs	r0, r0, r3
 801227a:	f8ad 501c 	strh.w	r5, [sp, #28]
 801227e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012282:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012286:	f8ad 301a 	strh.w	r3, [sp, #26]
 801228a:	4b1f      	ldr	r3, [pc, #124]	; (8012308 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	b953      	cbnz	r3, 80122a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8012290:	4b1e      	ldr	r3, [pc, #120]	; (801230c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8012292:	4a1f      	ldr	r2, [pc, #124]	; (8012310 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8012294:	481f      	ldr	r0, [pc, #124]	; (8012314 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8012296:	2189      	movs	r1, #137	; 0x89
 8012298:	f00b fa4a 	bl	801d730 <__assert_func>
 801229c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801229e:	e7b9      	b.n	8012214 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80122a0:	2300      	movs	r3, #0
 80122a2:	9307      	str	r3, [sp, #28]
 80122a4:	e7f1      	b.n	801228a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80122a6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80122aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d026      	beq.n	8012300 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80122b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dd22      	ble.n	8012300 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80122ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	dd1e      	ble.n	8012300 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80122c2:	2300      	movs	r3, #0
 80122c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	a908      	add	r1, sp, #32
 80122cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ce:	4620      	mov	r0, r4
 80122d0:	4798      	blx	r3
 80122d2:	4b11      	ldr	r3, [pc, #68]	; (8012318 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80122da:	b10a      	cbz	r2, 80122e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80122dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80122de:	b900      	cbnz	r0, 80122e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80122e0:	6898      	ldr	r0, [r3, #8]
 80122e2:	6801      	ldr	r1, [r0, #0]
 80122e4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80122e8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80122ec:	2501      	movs	r5, #1
 80122ee:	9502      	str	r5, [sp, #8]
 80122f0:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80122f4:	9401      	str	r4, [sp, #4]
 80122f6:	ac06      	add	r4, sp, #24
 80122f8:	9400      	str	r4, [sp, #0]
 80122fa:	688c      	ldr	r4, [r1, #8]
 80122fc:	a905      	add	r1, sp, #20
 80122fe:	47a0      	blx	r4
 8012300:	b00a      	add	sp, #40	; 0x28
 8012302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012306:	bf00      	nop
 8012308:	20008594 	.word	0x20008594
 801230c:	08020620 	.word	0x08020620
 8012310:	080206f4 	.word	0x080206f4
 8012314:	0802065c 	.word	0x0802065c
 8012318:	200084ec 	.word	0x200084ec

0801231c <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 801231c:	b510      	push	{r4, lr}
 801231e:	4604      	mov	r4, r0
 8012320:	f7ff ff57 	bl	80121d2 <_ZNK8touchgfx6Button12getSolidRectEv>
 8012324:	4620      	mov	r0, r4
 8012326:	bd10      	pop	{r4, pc}

08012328 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8012328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801232c:	4604      	mov	r4, r0
 801232e:	b08c      	sub	sp, #48	; 0x30
 8012330:	4688      	mov	r8, r1
 8012332:	f7ff ff65 	bl	8012200 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8012336:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801233c:	4293      	cmp	r3, r2
 801233e:	f000 8099 	beq.w	8012474 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 8012342:	4e54      	ldr	r6, [pc, #336]	; (8012494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8012344:	6832      	ldr	r2, [r6, #0]
 8012346:	b92a      	cbnz	r2, 8012354 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8012348:	4b53      	ldr	r3, [pc, #332]	; (8012498 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801234a:	4a54      	ldr	r2, [pc, #336]	; (801249c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801234c:	21b1      	movs	r1, #177	; 0xb1
 801234e:	4854      	ldr	r0, [pc, #336]	; (80124a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8012350:	f00b f9ee 	bl	801d730 <__assert_func>
 8012354:	4d53      	ldr	r5, [pc, #332]	; (80124a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8012356:	8829      	ldrh	r1, [r5, #0]
 8012358:	4299      	cmp	r1, r3
 801235a:	d803      	bhi.n	8012364 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801235c:	4b52      	ldr	r3, [pc, #328]	; (80124a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801235e:	4a4f      	ldr	r2, [pc, #316]	; (801249c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8012360:	21b2      	movs	r1, #178	; 0xb2
 8012362:	e7f4      	b.n	801234e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8012364:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012368:	4b50      	ldr	r3, [pc, #320]	; (80124ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801236a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012374:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8012378:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801237c:	2300      	movs	r3, #0
 801237e:	f1be 0f01 	cmp.w	lr, #1
 8012382:	9303      	str	r3, [sp, #12]
 8012384:	b208      	sxth	r0, r1
 8012386:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801238a:	f04f 0c02 	mov.w	ip, #2
 801238e:	d074      	beq.n	801247a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 8012390:	f1be 0f03 	cmp.w	lr, #3
 8012394:	d071      	beq.n	801247a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 8012396:	1a52      	subs	r2, r2, r1
 8012398:	f8ad 3010 	strh.w	r3, [sp, #16]
 801239c:	fb92 f2fc 	sdiv	r2, r2, ip
 80123a0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80123a4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80123a8:	f10d 090c 	add.w	r9, sp, #12
 80123ac:	e899 0003 	ldmia.w	r9, {r0, r1}
 80123b0:	f10d 0a14 	add.w	sl, sp, #20
 80123b4:	e88a 0003 	stmia.w	sl, {r0, r1}
 80123b8:	4641      	mov	r1, r8
 80123ba:	4650      	mov	r0, sl
 80123bc:	f7fe fed0 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 80123c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dd55      	ble.n	8012474 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80123c8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	dd51      	ble.n	8012474 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80123d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80123d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80123d8:	1a9b      	subs	r3, r3, r2
 80123da:	f8ad 3014 	strh.w	r3, [sp, #20]
 80123de:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80123e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80123e6:	1a9b      	subs	r3, r3, r2
 80123e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80123ec:	6823      	ldr	r3, [r4, #0]
 80123ee:	4649      	mov	r1, r9
 80123f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f2:	4620      	mov	r0, r4
 80123f4:	4798      	blx	r3
 80123f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d047      	beq.n	801248e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x166>
 80123fe:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8012402:	6833      	ldr	r3, [r6, #0]
 8012404:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8012408:	2b00      	cmp	r3, #0
 801240a:	d09d      	beq.n	8012348 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801240c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801240e:	8828      	ldrh	r0, [r5, #0]
 8012410:	4288      	cmp	r0, r1
 8012412:	d9a3      	bls.n	801235c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8012414:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8012418:	6812      	ldr	r2, [r2, #0]
 801241a:	785b      	ldrb	r3, [r3, #1]
 801241c:	9209      	str	r2, [sp, #36]	; 0x24
 801241e:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8012422:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012426:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801242a:	2300      	movs	r3, #0
 801242c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8012430:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8012434:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012438:	4b1d      	ldr	r3, [pc, #116]	; (80124b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801243a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	9707      	str	r7, [sp, #28]
 8012442:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012446:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801244a:	f88d 5020 	strb.w	r5, [sp, #32]
 801244e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012452:	b10a      	cbz	r2, 8012458 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x130>
 8012454:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012456:	b904      	cbnz	r4, 801245a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8012458:	689c      	ldr	r4, [r3, #8]
 801245a:	4b16      	ldr	r3, [pc, #88]	; (80124b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801245c:	6818      	ldr	r0, [r3, #0]
 801245e:	f7fc fa5b 	bl	800e918 <_ZNK8touchgfx5Texts7getTextEt>
 8012462:	ab07      	add	r3, sp, #28
 8012464:	9001      	str	r0, [sp, #4]
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	e899 0006 	ldmia.w	r9, {r1, r2}
 801246c:	4653      	mov	r3, sl
 801246e:	4620      	mov	r0, r4
 8012470:	f7fc f9e3 	bl	800e83a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012474:	b00c      	add	sp, #48	; 0x30
 8012476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247a:	1a5b      	subs	r3, r3, r1
 801247c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012480:	fb93 f3fc 	sdiv	r3, r3, ip
 8012484:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012488:	f8ad 300c 	strh.w	r3, [sp, #12]
 801248c:	e78c      	b.n	80123a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x80>
 801248e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8012492:	e7b6      	b.n	8012402 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xda>
 8012494:	2000855c 	.word	0x2000855c
 8012498:	08020727 	.word	0x08020727
 801249c:	08020854 	.word	0x08020854
 80124a0:	08020769 	.word	0x08020769
 80124a4:	20008560 	.word	0x20008560
 80124a8:	08020792 	.word	0x08020792
 80124ac:	20008564 	.word	0x20008564
 80124b0:	200084ec 	.word	0x200084ec
 80124b4:	20008568 	.word	0x20008568

080124b8 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80124b8:	b510      	push	{r4, lr}
 80124ba:	2101      	movs	r1, #1
 80124bc:	4c12      	ldr	r4, [pc, #72]	; (8012508 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 80124be:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80124c2:	2200      	movs	r2, #0
 80124c4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80124c8:	6004      	str	r4, [r0, #0]
 80124ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80124ce:	4c0f      	ldr	r4, [pc, #60]	; (801250c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80124d0:	8082      	strh	r2, [r0, #4]
 80124d2:	80c2      	strh	r2, [r0, #6]
 80124d4:	8102      	strh	r2, [r0, #8]
 80124d6:	8142      	strh	r2, [r0, #10]
 80124d8:	8182      	strh	r2, [r0, #12]
 80124da:	81c2      	strh	r2, [r0, #14]
 80124dc:	8202      	strh	r2, [r0, #16]
 80124de:	8242      	strh	r2, [r0, #18]
 80124e0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80124e4:	61c2      	str	r2, [r0, #28]
 80124e6:	6282      	str	r2, [r0, #40]	; 0x28
 80124e8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80124ec:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80124ee:	8601      	strh	r1, [r0, #48]	; 0x30
 80124f0:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80124f4:	6344      	str	r4, [r0, #52]	; 0x34
 80124f6:	8701      	strh	r1, [r0, #56]	; 0x38
 80124f8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80124fc:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8012500:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8012504:	bd10      	pop	{r4, pc}
 8012506:	bf00      	nop
 8012508:	080207ec 	.word	0x080207ec
 801250c:	0801eea8 	.word	0x0801eea8

08012510 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012510:	2000      	movs	r0, #0
 8012512:	4770      	bx	lr

08012514 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012518:	b091      	sub	sp, #68	; 0x44
 801251a:	4699      	mov	r9, r3
 801251c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8012520:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8012522:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8012526:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801252a:	4680      	mov	r8, r0
 801252c:	4617      	mov	r7, r2
 801252e:	a80e      	add	r0, sp, #56	; 0x38
 8012530:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8012534:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8012538:	2500      	movs	r5, #0
 801253a:	910d      	str	r1, [sp, #52]	; 0x34
 801253c:	950e      	str	r5, [sp, #56]	; 0x38
 801253e:	f000 fe15 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012542:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012544:	f8d9 6000 	ldr.w	r6, [r9]
 8012548:	6818      	ldr	r0, [r3, #0]
 801254a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801254c:	f9b4 b000 	ldrsh.w	fp, [r4]
 8012550:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012554:	eb02 0c06 	add.w	ip, r2, r6
 8012558:	1b80      	subs	r0, r0, r6
 801255a:	ebab 0e0c 	sub.w	lr, fp, ip
 801255e:	4570      	cmp	r0, lr
 8012560:	f340 80bd 	ble.w	80126de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8012564:	88a1      	ldrh	r1, [r4, #4]
 8012566:	4459      	add	r1, fp
 8012568:	b209      	sxth	r1, r1
 801256a:	458c      	cmp	ip, r1
 801256c:	f300 80b7 	bgt.w	80126de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8012570:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8012574:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8012578:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801257c:	edd9 6a07 	vldr	s13, [r9, #28]
 8012580:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8012584:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8012588:	4283      	cmp	r3, r0
 801258a:	bfa8      	it	ge
 801258c:	4603      	movge	r3, r0
 801258e:	ee07 3a90 	vmov	s15, r3
 8012592:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012596:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801259a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801259e:	ee65 4a24 	vmul.f32	s9, s10, s9
 80125a2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80125a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80125ae:	45e3      	cmp	fp, ip
 80125b0:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80125b4:	ee32 1a05 	vadd.f32	s2, s4, s10
 80125b8:	ee36 0a84 	vadd.f32	s0, s13, s8
 80125bc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80125c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80125c4:	f340 808e 	ble.w	80126e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 80125c8:	fb9e f5f3 	sdiv	r5, lr, r3
 80125cc:	ee07 5a10 	vmov	s14, r5
 80125d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125d4:	2d00      	cmp	r5, #0
 80125d6:	fb03 e415 	mls	r4, r3, r5, lr
 80125da:	eea7 0a04 	vfma.f32	s0, s14, s8
 80125de:	eee7 0a24 	vfma.f32	s1, s14, s9
 80125e2:	eea7 1a05 	vfma.f32	s2, s14, s10
 80125e6:	dd13      	ble.n	8012610 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80125e8:	ee70 6a44 	vsub.f32	s13, s0, s8
 80125ec:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80125f0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80125f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f8:	bf18      	it	ne
 80125fa:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80125fe:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012602:	bf08      	it	eq
 8012604:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012608:	ee61 1a87 	vmul.f32	s3, s3, s14
 801260c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012610:	fb05 f703 	mul.w	r7, r5, r3
 8012614:	1bc0      	subs	r0, r0, r7
 8012616:	443e      	add	r6, r7
 8012618:	1997      	adds	r7, r2, r6
 801261a:	4407      	add	r7, r0
 801261c:	42b9      	cmp	r1, r7
 801261e:	bfbc      	itt	lt
 8012620:	1a88      	sublt	r0, r1, r2
 8012622:	1b80      	sublt	r0, r0, r6
 8012624:	2800      	cmp	r0, #0
 8012626:	dd5a      	ble.n	80126de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8012628:	fb90 f1f3 	sdiv	r1, r0, r3
 801262c:	fb03 0211 	mls	r2, r3, r1, r0
 8012630:	b90a      	cbnz	r2, 8012636 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 8012632:	3901      	subs	r1, #1
 8012634:	461a      	mov	r2, r3
 8012636:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801263a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801263e:	44a4      	add	ip, r4
 8012640:	fb03 c505 	mla	r5, r3, r5, ip
 8012644:	2900      	cmp	r1, #0
 8012646:	bfcc      	ite	gt
 8012648:	469e      	movgt	lr, r3
 801264a:	4696      	movle	lr, r2
 801264c:	eef0 6a42 	vmov.f32	s13, s4
 8012650:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012654:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012658:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801265c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012660:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012664:	eeb0 7a61 	vmov.f32	s14, s3
 8012668:	ee17 0a90 	vmov	r0, s15
 801266c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012670:	fb90 f6f3 	sdiv	r6, r0, r3
 8012674:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012678:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801267c:	ee17 0a90 	vmov	r0, s15
 8012680:	fb90 f7f3 	sdiv	r7, r0, r3
 8012684:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012688:	900c      	str	r0, [sp, #48]	; 0x30
 801268a:	f8d0 8000 	ldr.w	r8, [r0]
 801268e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012690:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012694:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8012698:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801269c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80126a0:	f8cd a020 	str.w	sl, [sp, #32]
 80126a4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80126a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80126aa:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80126ae:	9603      	str	r6, [sp, #12]
 80126b0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80126b4:	ee16 0a90 	vmov	r0, s13
 80126b8:	fb07 0704 	mla	r7, r7, r4, r0
 80126bc:	ee17 0a10 	vmov	r0, s14
 80126c0:	fb06 0604 	mla	r6, r6, r4, r0
 80126c4:	e9cd 3600 	strd	r3, r6, [sp]
 80126c8:	44ca      	add	sl, r9
 80126ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80126ce:	9506      	str	r5, [sp, #24]
 80126d0:	9702      	str	r7, [sp, #8]
 80126d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80126d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80126d8:	ebae 0304 	sub.w	r3, lr, r4
 80126dc:	47a8      	blx	r5
 80126de:	b011      	add	sp, #68	; 0x44
 80126e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e4:	462c      	mov	r4, r5
 80126e6:	e797      	b.n	8012618 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

080126e8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80126e8:	b570      	push	{r4, r5, r6, lr}
 80126ea:	4604      	mov	r4, r0
 80126ec:	2500      	movs	r5, #0
 80126ee:	7223      	strb	r3, [r4, #8]
 80126f0:	9804      	ldr	r0, [sp, #16]
 80126f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80126f6:	8025      	strh	r5, [r4, #0]
 80126f8:	6061      	str	r1, [r4, #4]
 80126fa:	7263      	strb	r3, [r4, #9]
 80126fc:	60e0      	str	r0, [r4, #12]
 80126fe:	8222      	strh	r2, [r4, #16]
 8012700:	8265      	strh	r5, [r4, #18]
 8012702:	82a5      	strh	r5, [r4, #20]
 8012704:	82e5      	strh	r5, [r4, #22]
 8012706:	8325      	strh	r5, [r4, #24]
 8012708:	8365      	strh	r5, [r4, #26]
 801270a:	83a5      	strh	r5, [r4, #28]
 801270c:	77a5      	strb	r5, [r4, #30]
 801270e:	6803      	ldr	r3, [r0, #0]
 8012710:	695b      	ldr	r3, [r3, #20]
 8012712:	4798      	blx	r3
 8012714:	4606      	mov	r6, r0
 8012716:	b1f8      	cbz	r0, 8012758 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8012718:	68e0      	ldr	r0, [r4, #12]
 801271a:	6803      	ldr	r3, [r0, #0]
 801271c:	4631      	mov	r1, r6
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	4798      	blx	r3
 8012722:	7b43      	ldrb	r3, [r0, #13]
 8012724:	7a82      	ldrb	r2, [r0, #10]
 8012726:	005b      	lsls	r3, r3, #1
 8012728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801272c:	4313      	orrs	r3, r2
 801272e:	83a3      	strh	r3, [r4, #28]
 8012730:	7a63      	ldrb	r3, [r4, #9]
 8012732:	2b04      	cmp	r3, #4
 8012734:	4605      	mov	r5, r0
 8012736:	d10f      	bne.n	8012758 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8012738:	68e0      	ldr	r0, [r4, #12]
 801273a:	6803      	ldr	r3, [r0, #0]
 801273c:	462a      	mov	r2, r5
 801273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012740:	4631      	mov	r1, r6
 8012742:	4798      	blx	r3
 8012744:	7b6b      	ldrb	r3, [r5, #13]
 8012746:	005b      	lsls	r3, r3, #1
 8012748:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801274c:	7aab      	ldrb	r3, [r5, #10]
 801274e:	4313      	orrs	r3, r2
 8012750:	4418      	add	r0, r3
 8012752:	8ba3      	ldrh	r3, [r4, #28]
 8012754:	4418      	add	r0, r3
 8012756:	83a0      	strh	r0, [r4, #28]
 8012758:	4620      	mov	r0, r4
 801275a:	bd70      	pop	{r4, r5, r6, pc}

0801275c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012760:	2400      	movs	r4, #0
 8012762:	b085      	sub	sp, #20
 8012764:	4681      	mov	r9, r0
 8012766:	4688      	mov	r8, r1
 8012768:	4692      	mov	sl, r2
 801276a:	469b      	mov	fp, r3
 801276c:	4627      	mov	r7, r4
 801276e:	4625      	mov	r5, r4
 8012770:	4626      	mov	r6, r4
 8012772:	4554      	cmp	r4, sl
 8012774:	da2a      	bge.n	80127cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012776:	2300      	movs	r3, #0
 8012778:	9303      	str	r3, [sp, #12]
 801277a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801277e:	429d      	cmp	r5, r3
 8012780:	d004      	beq.n	801278c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8012782:	f242 030b 	movw	r3, #8203	; 0x200b
 8012786:	429d      	cmp	r5, r3
 8012788:	bf18      	it	ne
 801278a:	462f      	movne	r7, r5
 801278c:	ab03      	add	r3, sp, #12
 801278e:	4642      	mov	r2, r8
 8012790:	4659      	mov	r1, fp
 8012792:	4648      	mov	r0, r9
 8012794:	f002 fa70 	bl	8014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012798:	4605      	mov	r5, r0
 801279a:	b1b8      	cbz	r0, 80127cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801279c:	280a      	cmp	r0, #10
 801279e:	d015      	beq.n	80127cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80127a0:	9a03      	ldr	r2, [sp, #12]
 80127a2:	b18a      	cbz	r2, 80127c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80127a4:	7b50      	ldrb	r0, [r2, #13]
 80127a6:	7a93      	ldrb	r3, [r2, #10]
 80127a8:	8895      	ldrh	r5, [r2, #4]
 80127aa:	0040      	lsls	r0, r0, #1
 80127ac:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80127b0:	4303      	orrs	r3, r0
 80127b2:	9301      	str	r3, [sp, #4]
 80127b4:	f8d8 3000 	ldr.w	r3, [r8]
 80127b8:	4639      	mov	r1, r7
 80127ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127bc:	4640      	mov	r0, r8
 80127be:	4798      	blx	r3
 80127c0:	9b01      	ldr	r3, [sp, #4]
 80127c2:	4418      	add	r0, r3
 80127c4:	4406      	add	r6, r0
 80127c6:	b2b6      	uxth	r6, r6
 80127c8:	3401      	adds	r4, #1
 80127ca:	e7d2      	b.n	8012772 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80127cc:	4630      	mov	r0, r6
 80127ce:	b005      	add	sp, #20
 80127d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80127d4:	2a02      	cmp	r2, #2
 80127d6:	b530      	push	{r4, r5, lr}
 80127d8:	d011      	beq.n	80127fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80127da:	2a03      	cmp	r2, #3
 80127dc:	d01c      	beq.n	8012818 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80127de:	2a01      	cmp	r2, #1
 80127e0:	d10c      	bne.n	80127fc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80127e2:	888b      	ldrh	r3, [r1, #4]
 80127e4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80127e8:	8801      	ldrh	r1, [r0, #0]
 80127ea:	8844      	ldrh	r4, [r0, #2]
 80127ec:	8004      	strh	r4, [r0, #0]
 80127ee:	1a9b      	subs	r3, r3, r2
 80127f0:	1a5b      	subs	r3, r3, r1
 80127f2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80127f6:	8043      	strh	r3, [r0, #2]
 80127f8:	8081      	strh	r1, [r0, #4]
 80127fa:	80c2      	strh	r2, [r0, #6]
 80127fc:	bd30      	pop	{r4, r5, pc}
 80127fe:	88cb      	ldrh	r3, [r1, #6]
 8012800:	88c2      	ldrh	r2, [r0, #6]
 8012802:	1a9b      	subs	r3, r3, r2
 8012804:	8842      	ldrh	r2, [r0, #2]
 8012806:	1a9b      	subs	r3, r3, r2
 8012808:	888a      	ldrh	r2, [r1, #4]
 801280a:	8881      	ldrh	r1, [r0, #4]
 801280c:	8043      	strh	r3, [r0, #2]
 801280e:	1a52      	subs	r2, r2, r1
 8012810:	8801      	ldrh	r1, [r0, #0]
 8012812:	1a52      	subs	r2, r2, r1
 8012814:	8002      	strh	r2, [r0, #0]
 8012816:	e7f1      	b.n	80127fc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012818:	88cb      	ldrh	r3, [r1, #6]
 801281a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801281e:	8841      	ldrh	r1, [r0, #2]
 8012820:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012824:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012828:	8045      	strh	r5, [r0, #2]
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	1a5b      	subs	r3, r3, r1
 801282e:	8003      	strh	r3, [r0, #0]
 8012830:	8082      	strh	r2, [r0, #4]
 8012832:	80c4      	strh	r4, [r0, #6]
 8012834:	e7e2      	b.n	80127fc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08012836 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8012836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283a:	b09f      	sub	sp, #124	; 0x7c
 801283c:	9116      	str	r1, [sp, #88]	; 0x58
 801283e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012840:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012842:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012844:	8809      	ldrh	r1, [r1, #0]
 8012846:	889b      	ldrh	r3, [r3, #4]
 8012848:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801284c:	9212      	str	r2, [sp, #72]	; 0x48
 801284e:	440b      	add	r3, r1
 8012850:	b21b      	sxth	r3, r3
 8012852:	9310      	str	r3, [sp, #64]	; 0x40
 8012854:	f8d8 3000 	ldr.w	r3, [r8]
 8012858:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801285c:	7a59      	ldrb	r1, [r3, #9]
 801285e:	7a1b      	ldrb	r3, [r3, #8]
 8012860:	9315      	str	r3, [sp, #84]	; 0x54
 8012862:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012864:	9011      	str	r0, [sp, #68]	; 0x44
 8012866:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801286a:	9114      	str	r1, [sp, #80]	; 0x50
 801286c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012870:	2a00      	cmp	r2, #0
 8012872:	d067      	beq.n	8012944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8012874:	f898 3010 	ldrb.w	r3, [r8, #16]
 8012878:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801287a:	2b04      	cmp	r3, #4
 801287c:	bf14      	ite	ne
 801287e:	2301      	movne	r3, #1
 8012880:	2302      	moveq	r3, #2
 8012882:	4413      	add	r3, r2
 8012884:	f04f 0900 	mov.w	r9, #0
 8012888:	930f      	str	r3, [sp, #60]	; 0x3c
 801288a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801288e:	464c      	mov	r4, r9
 8012890:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8012894:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8012898:	4293      	cmp	r3, r2
 801289a:	f280 808c 	bge.w	80129b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801289e:	2300      	movs	r3, #0
 80128a0:	931c      	str	r3, [sp, #112]	; 0x70
 80128a2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80128a6:	429c      	cmp	r4, r3
 80128a8:	d006      	beq.n	80128b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80128aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128ac:	f242 020b 	movw	r2, #8203	; 0x200b
 80128b0:	4294      	cmp	r4, r2
 80128b2:	bf18      	it	ne
 80128b4:	4623      	movne	r3, r4
 80128b6:	930d      	str	r3, [sp, #52]	; 0x34
 80128b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128ba:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80128bc:	f8d8 2000 	ldr.w	r2, [r8]
 80128c0:	428b      	cmp	r3, r1
 80128c2:	db41      	blt.n	8012948 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80128c4:	6813      	ldr	r3, [r2, #0]
 80128c6:	4610      	mov	r0, r2
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	4798      	blx	r3
 80128cc:	4604      	mov	r4, r0
 80128ce:	f8d8 0000 	ldr.w	r0, [r8]
 80128d2:	6803      	ldr	r3, [r0, #0]
 80128d4:	aa1d      	add	r2, sp, #116	; 0x74
 80128d6:	689e      	ldr	r6, [r3, #8]
 80128d8:	4621      	mov	r1, r4
 80128da:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80128de:	47b0      	blx	r6
 80128e0:	901c      	str	r0, [sp, #112]	; 0x70
 80128e2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80128e6:	429c      	cmp	r4, r3
 80128e8:	f000 80e9 	beq.w	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80128ec:	f242 030b 	movw	r3, #8203	; 0x200b
 80128f0:	429c      	cmp	r4, r3
 80128f2:	f000 80e4 	beq.w	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80128f6:	2c00      	cmp	r4, #0
 80128f8:	f000 80f6 	beq.w	8012ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80128fc:	2c0a      	cmp	r4, #10
 80128fe:	d060      	beq.n	80129c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012902:	b36a      	cbz	r2, 8012960 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8012904:	8894      	ldrh	r4, [r2, #4]
 8012906:	f1bb 0f00 	cmp.w	fp, #0
 801290a:	d03b      	beq.n	8012984 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801290c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012910:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8012914:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8012918:	f892 900a 	ldrb.w	r9, [r2, #10]
 801291c:	f1bb 0f01 	cmp.w	fp, #1
 8012920:	ea49 0903 	orr.w	r9, r9, r3
 8012924:	d134      	bne.n	8012990 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8012926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012928:	eba5 0509 	sub.w	r5, r5, r9
 801292c:	2b00      	cmp	r3, #0
 801292e:	d14f      	bne.n	80129d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8012930:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012932:	eb09 0305 	add.w	r3, r9, r5
 8012936:	4413      	add	r3, r2
 8012938:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801293a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801293e:	4293      	cmp	r3, r2
 8012940:	da51      	bge.n	80129e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8012942:	e038      	b.n	80129b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8012944:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012946:	e79d      	b.n	8012884 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8012948:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801294c:	9301      	str	r3, [sp, #4]
 801294e:	ab1d      	add	r3, sp, #116	; 0x74
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	4659      	mov	r1, fp
 8012954:	ab1c      	add	r3, sp, #112	; 0x70
 8012956:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012958:	f002 f9e2 	bl	8014d20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801295c:	4604      	mov	r4, r0
 801295e:	e7c0      	b.n	80128e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8012960:	f8d8 0000 	ldr.w	r0, [r8]
 8012964:	6803      	ldr	r3, [r0, #0]
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	4798      	blx	r3
 801296a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801296e:	4298      	cmp	r0, r3
 8012970:	f000 80a5 	beq.w	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012974:	f242 030b 	movw	r3, #8203	; 0x200b
 8012978:	4298      	cmp	r0, r3
 801297a:	f000 80a0 	beq.w	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801297e:	f1bb 0f00 	cmp.w	fp, #0
 8012982:	d100      	bne.n	8012986 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8012984:	444d      	add	r5, r9
 8012986:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012988:	2a00      	cmp	r2, #0
 801298a:	d1bf      	bne.n	801290c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801298c:	4691      	mov	r9, r2
 801298e:	e096      	b.n	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012992:	2b00      	cmp	r3, #0
 8012994:	f000 80aa 	beq.w	8012aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8012998:	f1bb 0f00 	cmp.w	fp, #0
 801299c:	d118      	bne.n	80129d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801299e:	f8d8 0000 	ldr.w	r0, [r8]
 80129a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80129a4:	6803      	ldr	r3, [r0, #0]
 80129a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129a8:	4798      	blx	r3
 80129aa:	4405      	add	r5, r0
 80129ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80129b0:	1aeb      	subs	r3, r5, r3
 80129b2:	4293      	cmp	r3, r2
 80129b4:	dd17      	ble.n	80129e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80129b6:	2c00      	cmp	r4, #0
 80129b8:	f000 8096 	beq.w	8012ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80129bc:	2c0a      	cmp	r4, #10
 80129be:	f040 8084 	bne.w	8012aca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 80129c2:	240a      	movs	r4, #10
 80129c4:	fab4 f084 	clz	r0, r4
 80129c8:	0940      	lsrs	r0, r0, #5
 80129ca:	b01f      	add	sp, #124	; 0x7c
 80129cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d0:	f8d8 0000 	ldr.w	r0, [r8]
 80129d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80129d6:	6803      	ldr	r3, [r0, #0]
 80129d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129da:	4798      	blx	r3
 80129dc:	f1bb 0f01 	cmp.w	fp, #1
 80129e0:	eba5 0500 	sub.w	r5, r5, r0
 80129e4:	d0a4      	beq.n	8012930 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80129e6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80129e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80129ea:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80129ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80129f2:	7b43      	ldrb	r3, [r0, #13]
 80129f4:	015b      	lsls	r3, r3, #5
 80129f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80129fa:	7983      	ldrb	r3, [r0, #6]
 80129fc:	4429      	add	r1, r5
 80129fe:	4313      	orrs	r3, r2
 8012a00:	440b      	add	r3, r1
 8012a02:	42b3      	cmp	r3, r6
 8012a04:	db5b      	blt.n	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a08:	4299      	cmp	r1, r3
 8012a0a:	da58      	bge.n	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012a0c:	f8d8 0000 	ldr.w	r0, [r8]
 8012a10:	6803      	ldr	r3, [r0, #0]
 8012a12:	42ae      	cmp	r6, r5
 8012a14:	bfc8      	it	gt
 8012a16:	1b76      	subgt	r6, r6, r5
 8012a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a1a:	bfcc      	ite	gt
 8012a1c:	b2b6      	uxthgt	r6, r6
 8012a1e:	2600      	movle	r6, #0
 8012a20:	4798      	blx	r3
 8012a22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012a24:	7b5a      	ldrb	r2, [r3, #13]
 8012a26:	00d1      	lsls	r1, r2, #3
 8012a28:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8012a2c:	7a19      	ldrb	r1, [r3, #8]
 8012a2e:	4339      	orrs	r1, r7
 8012a30:	0657      	lsls	r7, r2, #25
 8012a32:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8012a34:	bf44      	itt	mi
 8012a36:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8012a3a:	b209      	sxthmi	r1, r1
 8012a3c:	19c7      	adds	r7, r0, r7
 8012a3e:	1a7f      	subs	r7, r7, r1
 8012a40:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012a42:	b2bf      	uxth	r7, r7
 8012a44:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012a48:	fa0f fa87 	sxth.w	sl, r7
 8012a4c:	4551      	cmp	r1, sl
 8012a4e:	dd3a      	ble.n	8012ac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012a50:	0112      	lsls	r2, r2, #4
 8012a52:	79d8      	ldrb	r0, [r3, #7]
 8012a54:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012a58:	4302      	orrs	r2, r0
 8012a5a:	4492      	add	sl, r2
 8012a5c:	4551      	cmp	r1, sl
 8012a5e:	dc2e      	bgt.n	8012abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012a60:	1bcf      	subs	r7, r1, r7
 8012a62:	b2bf      	uxth	r7, r7
 8012a64:	468a      	mov	sl, r1
 8012a66:	9319      	str	r3, [sp, #100]	; 0x64
 8012a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a6a:	f8d8 0000 	ldr.w	r0, [r8]
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	6801      	ldr	r1, [r0, #0]
 8012a72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012a74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012a76:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a78:	9218      	str	r2, [sp, #96]	; 0x60
 8012a7a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8012a7c:	4788      	blx	r1
 8012a7e:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012a82:	910b      	str	r1, [sp, #44]	; 0x2c
 8012a84:	f898 100e 	ldrb.w	r1, [r8, #14]
 8012a88:	910a      	str	r1, [sp, #40]	; 0x28
 8012a8a:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8012a8e:	9109      	str	r1, [sp, #36]	; 0x24
 8012a90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a92:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012a96:	9305      	str	r3, [sp, #20]
 8012a98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012a9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012a9c:	9206      	str	r2, [sp, #24]
 8012a9e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8012aa2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8012aa6:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012aaa:	442e      	add	r6, r5
 8012aac:	b236      	sxth	r6, r6
 8012aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012ab0:	9600      	str	r6, [sp, #0]
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012aba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012abc:	47b0      	blx	r6
 8012abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8012ac4:	e6e6      	b.n	8012894 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8012ac6:	2700      	movs	r7, #0
 8012ac8:	e7cd      	b.n	8012a66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8012aca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012acc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012ace:	3501      	adds	r5, #1
 8012ad0:	429d      	cmp	r5, r3
 8012ad2:	f6bf af77 	bge.w	80129c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8012ad6:	4659      	mov	r1, fp
 8012ad8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012ada:	f7fb fdff 	bl	800e6dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012ade:	4604      	mov	r4, r0
 8012ae0:	b110      	cbz	r0, 8012ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8012ae2:	280a      	cmp	r0, #10
 8012ae4:	d1f2      	bne.n	8012acc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8012ae6:	e76c      	b.n	80129c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012ae8:	2400      	movs	r4, #0
 8012aea:	e76b      	b.n	80129c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8012aec:	f1bb 0f00 	cmp.w	fp, #0
 8012af0:	f43f af5c 	beq.w	80129ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8012af4:	e777      	b.n	80129e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08012af6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012af6:	b530      	push	{r4, r5, lr}
 8012af8:	8a44      	ldrh	r4, [r0, #18]
 8012afa:	8ac5      	ldrh	r5, [r0, #22]
 8012afc:	82c3      	strh	r3, [r0, #22]
 8012afe:	442c      	add	r4, r5
 8012b00:	1ae4      	subs	r4, r4, r3
 8012b02:	8244      	strh	r4, [r0, #18]
 8012b04:	8b03      	ldrh	r3, [r0, #24]
 8012b06:	8a84      	ldrh	r4, [r0, #20]
 8012b08:	4422      	add	r2, r4
 8012b0a:	440c      	add	r4, r1
 8012b0c:	1a59      	subs	r1, r3, r1
 8012b0e:	8342      	strh	r2, [r0, #26]
 8012b10:	8284      	strh	r4, [r0, #20]
 8012b12:	8301      	strh	r1, [r0, #24]
 8012b14:	bd30      	pop	{r4, r5, pc}

08012b16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8012b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1a:	7a43      	ldrb	r3, [r0, #9]
 8012b1c:	1eda      	subs	r2, r3, #3
 8012b1e:	b087      	sub	sp, #28
 8012b20:	4604      	mov	r4, r0
 8012b22:	b2d2      	uxtb	r2, r2
 8012b24:	460f      	mov	r7, r1
 8012b26:	2900      	cmp	r1, #0
 8012b28:	d036      	beq.n	8012b98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8012b2a:	2a01      	cmp	r2, #1
 8012b2c:	d932      	bls.n	8012b94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8012b2e:	1e58      	subs	r0, r3, #1
 8012b30:	f1d0 0b00 	rsbs	fp, r0, #0
 8012b34:	eb4b 0b00 	adc.w	fp, fp, r0
 8012b38:	1e99      	subs	r1, r3, #2
 8012b3a:	424b      	negs	r3, r1
 8012b3c:	414b      	adcs	r3, r1
 8012b3e:	9303      	str	r3, [sp, #12]
 8012b40:	2300      	movs	r3, #0
 8012b42:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8012b46:	2500      	movs	r5, #0
 8012b48:	8265      	strh	r5, [r4, #18]
 8012b4a:	82a5      	strh	r5, [r4, #20]
 8012b4c:	46a9      	mov	r9, r5
 8012b4e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8012b52:	2300      	movs	r3, #0
 8012b54:	9305      	str	r3, [sp, #20]
 8012b56:	8823      	ldrh	r3, [r4, #0]
 8012b58:	2b20      	cmp	r3, #32
 8012b5a:	d02b      	beq.n	8012bb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8012b5c:	eba3 020a 	sub.w	r2, r3, sl
 8012b60:	4256      	negs	r6, r2
 8012b62:	4156      	adcs	r6, r2
 8012b64:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d004      	beq.n	8012b76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8012b6c:	4553      	cmp	r3, sl
 8012b6e:	bf16      	itet	ne
 8012b70:	4699      	movne	r9, r3
 8012b72:	2601      	moveq	r6, #1
 8012b74:	2600      	movne	r6, #0
 8012b76:	ab05      	add	r3, sp, #20
 8012b78:	68e2      	ldr	r2, [r4, #12]
 8012b7a:	7a21      	ldrb	r1, [r4, #8]
 8012b7c:	6860      	ldr	r0, [r4, #4]
 8012b7e:	f002 f87b 	bl	8014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012b82:	8020      	strh	r0, [r4, #0]
 8012b84:	b9c8      	cbnz	r0, 8012bba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8012b86:	8b22      	ldrh	r2, [r4, #24]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	4611      	mov	r1, r2
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f7ff ffb2 	bl	8012af6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012b92:	e066      	b.n	8012c62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8012b94:	468b      	mov	fp, r1
 8012b96:	e7cf      	b.n	8012b38 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	2a01      	cmp	r2, #1
 8012b9c:	bf8c      	ite	hi
 8012b9e:	2200      	movhi	r2, #0
 8012ba0:	2201      	movls	r2, #1
 8012ba2:	2b01      	cmp	r3, #1
 8012ba4:	bf8c      	ite	hi
 8012ba6:	2300      	movhi	r3, #0
 8012ba8:	2301      	movls	r3, #1
 8012baa:	9202      	str	r2, [sp, #8]
 8012bac:	9301      	str	r3, [sp, #4]
 8012bae:	9103      	str	r1, [sp, #12]
 8012bb0:	468b      	mov	fp, r1
 8012bb2:	e7c8      	b.n	8012b46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8012bb4:	4699      	mov	r9, r3
 8012bb6:	2601      	movs	r6, #1
 8012bb8:	e7dd      	b.n	8012b76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8012bba:	8ae3      	ldrh	r3, [r4, #22]
 8012bbc:	280a      	cmp	r0, #10
 8012bbe:	f103 0301 	add.w	r3, r3, #1
 8012bc2:	82e3      	strh	r3, [r4, #22]
 8012bc4:	d0df      	beq.n	8012b86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8012bc6:	9a05      	ldr	r2, [sp, #20]
 8012bc8:	bb42      	cbnz	r2, 8012c1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8012bca:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012bce:	4298      	cmp	r0, r3
 8012bd0:	d001      	beq.n	8012bd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8012bd2:	4550      	cmp	r0, sl
 8012bd4:	d1bd      	bne.n	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012bd6:	8823      	ldrh	r3, [r4, #0]
 8012bd8:	8b21      	ldrh	r1, [r4, #24]
 8012bda:	2b20      	cmp	r3, #32
 8012bdc:	d001      	beq.n	8012be2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8012bde:	4553      	cmp	r3, sl
 8012be0:	d131      	bne.n	8012c46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8012be2:	2e00      	cmp	r6, #0
 8012be4:	bf0a      	itet	eq
 8012be6:	460d      	moveq	r5, r1
 8012be8:	4630      	movne	r0, r6
 8012bea:	2001      	moveq	r0, #1
 8012bec:	440a      	add	r2, r1
 8012bee:	8aa3      	ldrh	r3, [r4, #20]
 8012bf0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012bf4:	b292      	uxth	r2, r2
 8012bf6:	8322      	strh	r2, [r4, #24]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	2f00      	cmp	r7, #0
 8012bfc:	d03a      	beq.n	8012c74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8012bfe:	f1bb 0f00 	cmp.w	fp, #0
 8012c02:	d102      	bne.n	8012c0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8012c04:	9903      	ldr	r1, [sp, #12]
 8012c06:	b301      	cbz	r1, 8012c4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8012c08:	b1f8      	cbz	r0, 8012c4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8012c0a:	8ba1      	ldrh	r1, [r4, #28]
 8012c0c:	4419      	add	r1, r3
 8012c0e:	458c      	cmp	ip, r1
 8012c10:	da2a      	bge.n	8012c68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8012c12:	8a61      	ldrh	r1, [r4, #18]
 8012c14:	b341      	cbz	r1, 8012c68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8012c16:	4563      	cmp	r3, ip
 8012c18:	dd9b      	ble.n	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c1a:	e01c      	b.n	8012c56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8012c1c:	8893      	ldrh	r3, [r2, #4]
 8012c1e:	8023      	strh	r3, [r4, #0]
 8012c20:	f892 800d 	ldrb.w	r8, [r2, #13]
 8012c24:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012c28:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8012c2c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8012c30:	ea48 0800 	orr.w	r8, r8, r0
 8012c34:	68e0      	ldr	r0, [r4, #12]
 8012c36:	6803      	ldr	r3, [r0, #0]
 8012c38:	4649      	mov	r1, r9
 8012c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c3c:	4798      	blx	r3
 8012c3e:	eb08 0200 	add.w	r2, r8, r0
 8012c42:	b292      	uxth	r2, r2
 8012c44:	e7c7      	b.n	8012bd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8012c46:	2000      	movs	r0, #0
 8012c48:	e7d0      	b.n	8012bec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8012c4a:	4563      	cmp	r3, ip
 8012c4c:	dd81      	ble.n	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c4e:	8a63      	ldrh	r3, [r4, #18]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f43f af7e 	beq.w	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c56:	2301      	movs	r3, #1
 8012c58:	77a3      	strb	r3, [r4, #30]
 8012c5a:	8ba2      	ldrh	r2, [r4, #28]
 8012c5c:	8b63      	ldrh	r3, [r4, #26]
 8012c5e:	4413      	add	r3, r2
 8012c60:	8363      	strh	r3, [r4, #26]
 8012c62:	b007      	add	sp, #28
 8012c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c68:	2300      	movs	r3, #0
 8012c6a:	4611      	mov	r1, r2
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f7ff ff42 	bl	8012af6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012c72:	e76e      	b.n	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c74:	4563      	cmp	r3, ip
 8012c76:	dd14      	ble.n	8012ca2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8012c78:	9b02      	ldr	r3, [sp, #8]
 8012c7a:	b113      	cbz	r3, 8012c82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	460a      	mov	r2, r1
 8012c80:	e783      	b.n	8012b8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8012c82:	9b01      	ldr	r3, [sp, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f43f af64 	beq.w	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	f47f af61 	bne.w	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c90:	b116      	cbz	r6, 8012c98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8012c92:	2301      	movs	r3, #1
 8012c94:	462a      	mov	r2, r5
 8012c96:	e779      	b.n	8012b8c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8012c98:	8a63      	ldrh	r3, [r4, #18]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	f43f af59 	beq.w	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012ca0:	e7df      	b.n	8012c62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	f47f af55 	bne.w	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012ca8:	2e00      	cmp	r6, #0
 8012caa:	f43f af52 	beq.w	8012b52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	462a      	mov	r2, r5
 8012cb2:	e7db      	b.n	8012c6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08012cb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	b0db      	sub	sp, #364	; 0x16c
 8012cba:	4689      	mov	r9, r1
 8012cbc:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8012cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8012cc2:	461c      	mov	r4, r3
 8012cc4:	f1ba 0f00 	cmp.w	sl, #0
 8012cc8:	f000 80a5 	beq.w	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f000 80a1 	beq.w	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012cd4:	7ba3      	ldrb	r3, [r4, #14]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 809d 	beq.w	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012cdc:	6810      	ldr	r0, [r2, #0]
 8012cde:	6851      	ldr	r1, [r2, #4]
 8012ce0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8012ce4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8012ce8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8012cec:	4643      	mov	r3, r8
 8012cee:	c303      	stmia	r3!, {r0, r1}
 8012cf0:	2500      	movs	r5, #0
 8012cf2:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8012cf6:	79a2      	ldrb	r2, [r4, #6]
 8012cf8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012cfc:	a90e      	add	r1, sp, #56	; 0x38
 8012cfe:	4640      	mov	r0, r8
 8012d00:	950e      	str	r5, [sp, #56]	; 0x38
 8012d02:	f7ff fd67 	bl	80127d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012d06:	a90e      	add	r1, sp, #56	; 0x38
 8012d08:	4608      	mov	r0, r1
 8012d0a:	79a2      	ldrb	r2, [r4, #6]
 8012d0c:	af18      	add	r7, sp, #96	; 0x60
 8012d0e:	f7ff fd61 	bl	80127d4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012d12:	4638      	mov	r0, r7
 8012d14:	f001 fc72 	bl	80145fc <_ZN8touchgfx12TextProviderC1Ev>
 8012d18:	6820      	ldr	r0, [r4, #0]
 8012d1a:	6803      	ldr	r3, [r0, #0]
 8012d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d1e:	4798      	blx	r3
 8012d20:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012d22:	4603      	mov	r3, r0
 8012d24:	4651      	mov	r1, sl
 8012d26:	4638      	mov	r0, r7
 8012d28:	f001 fcad 	bl	8014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012d2c:	6820      	ldr	r0, [r4, #0]
 8012d2e:	7923      	ldrb	r3, [r4, #4]
 8012d30:	9308      	str	r3, [sp, #32]
 8012d32:	6803      	ldr	r3, [r0, #0]
 8012d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d36:	4798      	blx	r3
 8012d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d3c:	181e      	adds	r6, r3, r0
 8012d3e:	42ae      	cmp	r6, r5
 8012d40:	dd06      	ble.n	8012d50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8012d42:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8012d46:	4282      	cmp	r2, r0
 8012d48:	bfa4      	itt	ge
 8012d4a:	189d      	addge	r5, r3, r2
 8012d4c:	fb95 f5f6 	sdivge	r5, r5, r6
 8012d50:	a82e      	add	r0, sp, #184	; 0xb8
 8012d52:	f001 fc53 	bl	80145fc <_ZN8touchgfx12TextProviderC1Ev>
 8012d56:	7c23      	ldrb	r3, [r4, #16]
 8012d58:	b14b      	cbz	r3, 8012d6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8012d5a:	6820      	ldr	r0, [r4, #0]
 8012d5c:	6803      	ldr	r3, [r0, #0]
 8012d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d60:	4798      	blx	r3
 8012d62:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012d64:	4603      	mov	r3, r0
 8012d66:	4651      	mov	r1, sl
 8012d68:	a82e      	add	r0, sp, #184	; 0xb8
 8012d6a:	f001 fc8c 	bl	8014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012d6e:	7c21      	ldrb	r1, [r4, #16]
 8012d70:	9101      	str	r1, [sp, #4]
 8012d72:	6821      	ldr	r1, [r4, #0]
 8012d74:	7963      	ldrb	r3, [r4, #5]
 8012d76:	9100      	str	r1, [sp, #0]
 8012d78:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8012d7c:	a92e      	add	r1, sp, #184	; 0xb8
 8012d7e:	a810      	add	r0, sp, #64	; 0x40
 8012d80:	f7ff fcb2 	bl	80126e8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8012d84:	7c23      	ldrb	r3, [r4, #16]
 8012d86:	b9bb      	cbnz	r3, 8012db8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8012d88:	fa1f fa86 	uxth.w	sl, r6
 8012d8c:	2d00      	cmp	r5, #0
 8012d8e:	dd45      	ble.n	8012e1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8012d90:	4638      	mov	r0, r7
 8012d92:	f002 f863 	bl	8014e5c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d03d      	beq.n	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012d9a:	280a      	cmp	r0, #10
 8012d9c:	d1f6      	bne.n	8012d8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8012d9e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012da2:	4453      	add	r3, sl
 8012da4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012da8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012dac:	eba3 030a 	sub.w	r3, r3, sl
 8012db0:	3d01      	subs	r5, #1
 8012db2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012db6:	e7e9      	b.n	8012d8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8012db8:	0073      	lsls	r3, r6, #1
 8012dba:	9309      	str	r3, [sp, #36]	; 0x24
 8012dbc:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8012dc0:	fa1f fa86 	uxth.w	sl, r6
 8012dc4:	2d00      	cmp	r5, #0
 8012dc6:	dd29      	ble.n	8012e1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8012dc8:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8012dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dce:	428b      	cmp	r3, r1
 8012dd0:	bfd4      	ite	le
 8012dd2:	2100      	movle	r1, #0
 8012dd4:	2101      	movgt	r1, #1
 8012dd6:	a810      	add	r0, sp, #64	; 0x40
 8012dd8:	f7ff fe9d 	bl	8012b16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012ddc:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8012de0:	3b01      	subs	r3, #1
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	455b      	cmp	r3, fp
 8012de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012de8:	d005      	beq.n	8012df6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8012dea:	7961      	ldrb	r1, [r4, #5]
 8012dec:	4638      	mov	r0, r7
 8012dee:	f7fb fc75 	bl	800e6dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012df4:	e7f4      	b.n	8012de0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8012df6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012dfa:	4453      	add	r3, sl
 8012dfc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012e00:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012e04:	eba3 030a 	sub.w	r3, r3, sl
 8012e08:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012e0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012e10:	3d01      	subs	r5, #1
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d1d6      	bne.n	8012dc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8012e16:	b05b      	add	sp, #364	; 0x16c
 8012e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8012e20:	ad44      	add	r5, sp, #272	; 0x110
 8012e22:	f04f 0b00 	mov.w	fp, #0
 8012e26:	7c23      	ldrb	r3, [r4, #16]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d067      	beq.n	8012efc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8012e2c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8012e30:	458a      	cmp	sl, r1
 8012e32:	bfd4      	ite	le
 8012e34:	2100      	movle	r1, #0
 8012e36:	2101      	movgt	r1, #1
 8012e38:	a810      	add	r0, sp, #64	; 0x40
 8012e3a:	f7ff fe6c 	bl	8012b16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012e3e:	9b08      	ldr	r3, [sp, #32]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d056      	beq.n	8012ef2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8012e44:	7c23      	ldrb	r3, [r4, #16]
 8012e46:	9309      	str	r3, [sp, #36]	; 0x24
 8012e48:	2258      	movs	r2, #88	; 0x58
 8012e4a:	4639      	mov	r1, r7
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	f00a fcfc 	bl	801d84a <memcpy>
 8012e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d059      	beq.n	8012f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8012e58:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8012e5c:	7922      	ldrb	r2, [r4, #4]
 8012e5e:	2a01      	cmp	r2, #1
 8012e60:	d13d      	bne.n	8012ede <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8012e62:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8012e66:	1ac0      	subs	r0, r0, r3
 8012e68:	2302      	movs	r3, #2
 8012e6a:	fb90 f0f3 	sdiv	r0, r0, r3
 8012e6e:	b200      	sxth	r0, r0
 8012e70:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012e74:	4418      	add	r0, r3
 8012e76:	7c23      	ldrb	r3, [r4, #16]
 8012e78:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d03a      	beq.n	8012ef6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8012e80:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8012e84:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8012e88:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012e8c:	9500      	str	r5, [sp, #0]
 8012e8e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012e92:	e9cd b703 	strd	fp, r7, [sp, #12]
 8012e96:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8012e9a:	464a      	mov	r2, r9
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012ea0:	f7ff fcc9 	bl	8012836 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	d1b6      	bne.n	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012ea8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012eac:	b2b2      	uxth	r2, r6
 8012eae:	4611      	mov	r1, r2
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8012eb6:	1a52      	subs	r2, r2, r1
 8012eb8:	7c21      	ldrb	r1, [r4, #16]
 8012eba:	b21b      	sxth	r3, r3
 8012ebc:	b212      	sxth	r2, r2
 8012ebe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012ec2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8012ec6:	b109      	cbz	r1, 8012ecc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8012ec8:	42b2      	cmp	r2, r6
 8012eca:	dba4      	blt.n	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012ecc:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8012ed0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8012ed4:	440a      	add	r2, r1
 8012ed6:	b212      	sxth	r2, r2
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	dda4      	ble.n	8012e26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8012edc:	e79b      	b.n	8012e16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8012ede:	2a02      	cmp	r2, #2
 8012ee0:	d105      	bne.n	8012eee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8012ee2:	7be2      	ldrb	r2, [r4, #15]
 8012ee4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8012ee8:	1a80      	subs	r0, r0, r2
 8012eea:	1ac0      	subs	r0, r0, r3
 8012eec:	e7bf      	b.n	8012e6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8012eee:	2000      	movs	r0, #0
 8012ef0:	e7be      	b.n	8012e70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8012ef2:	7be0      	ldrb	r0, [r4, #15]
 8012ef4:	e7bc      	b.n	8012e70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8012ef6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012efa:	e7c3      	b.n	8012e84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8012efc:	9b08      	ldr	r3, [sp, #32]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d0f7      	beq.n	8012ef2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8012f02:	2258      	movs	r2, #88	; 0x58
 8012f04:	4639      	mov	r1, r7
 8012f06:	4628      	mov	r0, r5
 8012f08:	f00a fc9f 	bl	801d84a <memcpy>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012f12:	6821      	ldr	r1, [r4, #0]
 8012f14:	4628      	mov	r0, r5
 8012f16:	f7ff fc21 	bl	801275c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012f1a:	b203      	sxth	r3, r0
 8012f1c:	e79e      	b.n	8012e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08012f1e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012f1e:	b510      	push	{r4, lr}
 8012f20:	2b02      	cmp	r3, #2
 8012f22:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012f26:	d00b      	beq.n	8012f40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	d00e      	beq.n	8012f4a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d001      	beq.n	8012f34 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8012f30:	1860      	adds	r0, r4, r1
 8012f32:	bd10      	pop	{r4, pc}
 8012f34:	8880      	ldrh	r0, [r0, #4]
 8012f36:	4420      	add	r0, r4
 8012f38:	b200      	sxth	r0, r0
 8012f3a:	1a80      	subs	r0, r0, r2
 8012f3c:	3801      	subs	r0, #1
 8012f3e:	e7f8      	b.n	8012f32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8012f40:	8880      	ldrh	r0, [r0, #4]
 8012f42:	4420      	add	r0, r4
 8012f44:	b200      	sxth	r0, r0
 8012f46:	1a40      	subs	r0, r0, r1
 8012f48:	e7f8      	b.n	8012f3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012f4a:	18a0      	adds	r0, r4, r2
 8012f4c:	e7f1      	b.n	8012f32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08012f4e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012f4e:	b510      	push	{r4, lr}
 8012f50:	2b02      	cmp	r3, #2
 8012f52:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012f56:	d006      	beq.n	8012f66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8012f58:	2b03      	cmp	r3, #3
 8012f5a:	d00a      	beq.n	8012f72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	bf14      	ite	ne
 8012f60:	18a0      	addne	r0, r4, r2
 8012f62:	1860      	addeq	r0, r4, r1
 8012f64:	bd10      	pop	{r4, pc}
 8012f66:	88c0      	ldrh	r0, [r0, #6]
 8012f68:	4420      	add	r0, r4
 8012f6a:	b200      	sxth	r0, r0
 8012f6c:	1a80      	subs	r0, r0, r2
 8012f6e:	3801      	subs	r0, #1
 8012f70:	e7f8      	b.n	8012f64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8012f72:	88c0      	ldrh	r0, [r0, #6]
 8012f74:	4420      	add	r0, r4
 8012f76:	b200      	sxth	r0, r0
 8012f78:	1a40      	subs	r0, r0, r1
 8012f7a:	e7f8      	b.n	8012f6e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08012f7c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012f7c:	4b01      	ldr	r3, [pc, #4]	; (8012f84 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012f7e:	2200      	movs	r2, #0
 8012f80:	601a      	str	r2, [r3, #0]
 8012f82:	4770      	bx	lr
 8012f84:	200084f4 	.word	0x200084f4

08012f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8012f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8012f8e:	1e05      	subs	r5, r0, #0
 8012f90:	bfba      	itte	lt
 8012f92:	f04f 37ff 	movlt.w	r7, #4294967295
 8012f96:	426d      	neglt	r5, r5
 8012f98:	2701      	movge	r7, #1
 8012f9a:	f1be 0f00 	cmp.w	lr, #0
 8012f9e:	bfb8      	it	lt
 8012fa0:	f1ce 0e00 	rsblt	lr, lr, #0
 8012fa4:	f04f 0601 	mov.w	r6, #1
 8012fa8:	fa4e f001 	asr.w	r0, lr, r1
 8012fac:	fa06 f101 	lsl.w	r1, r6, r1
 8012fb0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8012fb4:	f101 31ff 	add.w	r1, r1, #4294967295
 8012fb8:	ea01 010e 	and.w	r1, r1, lr
 8012fbc:	bfb8      	it	lt
 8012fbe:	427f      	neglt	r7, r7
 8012fc0:	434d      	muls	r5, r1
 8012fc2:	2c00      	cmp	r4, #0
 8012fc4:	f8dc 1000 	ldr.w	r1, [ip]
 8012fc8:	bfb8      	it	lt
 8012fca:	4264      	neglt	r4, r4
 8012fcc:	fb03 1300 	mla	r3, r3, r0, r1
 8012fd0:	fb95 f1f4 	sdiv	r1, r5, r4
 8012fd4:	fb04 5511 	mls	r5, r4, r1, r5
 8012fd8:	441d      	add	r5, r3
 8012fda:	fb95 f3f4 	sdiv	r3, r5, r4
 8012fde:	fb04 5413 	mls	r4, r4, r3, r5
 8012fe2:	4419      	add	r1, r3
 8012fe4:	bfb8      	it	lt
 8012fe6:	427f      	neglt	r7, r7
 8012fe8:	fb02 1000 	mla	r0, r2, r0, r1
 8012fec:	f8cc 4000 	str.w	r4, [ip]
 8012ff0:	4378      	muls	r0, r7
 8012ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ff4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff8:	4c24      	ldr	r4, [pc, #144]	; (801308c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8012ffa:	6807      	ldr	r7, [r0, #0]
 8012ffc:	69a3      	ldr	r3, [r4, #24]
 8012ffe:	b086      	sub	sp, #24
 8013000:	4605      	mov	r5, r0
 8013002:	b92b      	cbnz	r3, 8013010 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8013004:	6840      	ldr	r0, [r0, #4]
 8013006:	e9c5 7000 	strd	r7, r0, [r5]
 801300a:	b006      	add	sp, #24
 801300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013010:	68a2      	ldr	r2, [r4, #8]
 8013012:	6820      	ldr	r0, [r4, #0]
 8013014:	ae06      	add	r6, sp, #24
 8013016:	f04f 0802 	mov.w	r8, #2
 801301a:	fb93 f1f8 	sdiv	r1, r3, r8
 801301e:	440a      	add	r2, r1
 8013020:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013024:	69e1      	ldr	r1, [r4, #28]
 8013026:	9700      	str	r7, [sp, #0]
 8013028:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801302c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801302e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013030:	f7ff ffaa 	bl	8012f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8013034:	69a3      	ldr	r3, [r4, #24]
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	686b      	ldr	r3, [r5, #4]
 801303a:	9300      	str	r3, [sp, #0]
 801303c:	4607      	mov	r7, r0
 801303e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013040:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013042:	6a21      	ldr	r1, [r4, #32]
 8013044:	9602      	str	r6, [sp, #8]
 8013046:	6860      	ldr	r0, [r4, #4]
 8013048:	f7ff ff9e 	bl	8012f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801304c:	6963      	ldr	r3, [r4, #20]
 801304e:	69a2      	ldr	r2, [r4, #24]
 8013050:	fb92 f8f8 	sdiv	r8, r2, r8
 8013054:	4443      	add	r3, r8
 8013056:	9305      	str	r3, [sp, #20]
 8013058:	682b      	ldr	r3, [r5, #0]
 801305a:	9300      	str	r3, [sp, #0]
 801305c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8013060:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013062:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013064:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013066:	4407      	add	r7, r0
 8013068:	68e0      	ldr	r0, [r4, #12]
 801306a:	f7ff ff8d 	bl	8012f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801306e:	69a3      	ldr	r3, [r4, #24]
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	686b      	ldr	r3, [r5, #4]
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	4680      	mov	r8, r0
 8013078:	9602      	str	r6, [sp, #8]
 801307a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801307c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801307e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013080:	6920      	ldr	r0, [r4, #16]
 8013082:	f7ff ff81 	bl	8012f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8013086:	4440      	add	r0, r8
 8013088:	e7bd      	b.n	8013006 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801308a:	bf00      	nop
 801308c:	200084f8 	.word	0x200084f8

08013090 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013090:	b510      	push	{r4, lr}
 8013092:	4b07      	ldr	r3, [pc, #28]	; (80130b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d108      	bne.n	80130ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801309a:	4b06      	ldr	r3, [pc, #24]	; (80130b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801309c:	880c      	ldrh	r4, [r1, #0]
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80130a4:	3b01      	subs	r3, #1
 80130a6:	1b1b      	subs	r3, r3, r4
 80130a8:	8003      	strh	r3, [r0, #0]
 80130aa:	800a      	strh	r2, [r1, #0]
 80130ac:	bd10      	pop	{r4, pc}
 80130ae:	bf00      	nop
 80130b0:	200084e4 	.word	0x200084e4
 80130b4:	200084e8 	.word	0x200084e8

080130b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80130b8:	b510      	push	{r4, lr}
 80130ba:	4b0a      	ldr	r3, [pc, #40]	; (80130e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	2b01      	cmp	r3, #1
 80130c0:	d10e      	bne.n	80130e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80130c2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80130c6:	8843      	ldrh	r3, [r0, #2]
 80130c8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80130cc:	8044      	strh	r4, [r0, #2]
 80130ce:	18ca      	adds	r2, r1, r3
 80130d0:	4b05      	ldr	r3, [pc, #20]	; (80130e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	1a9b      	subs	r3, r3, r2
 80130d6:	8003      	strh	r3, [r0, #0]
 80130d8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80130dc:	80c3      	strh	r3, [r0, #6]
 80130de:	8081      	strh	r1, [r0, #4]
 80130e0:	bd10      	pop	{r4, pc}
 80130e2:	bf00      	nop
 80130e4:	200084e4 	.word	0x200084e4
 80130e8:	200084e0 	.word	0x200084e0

080130ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80130ec:	b510      	push	{r4, lr}
 80130ee:	4b07      	ldr	r3, [pc, #28]	; (801310c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d108      	bne.n	8013108 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80130f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80130fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 80130fe:	8003      	strh	r3, [r0, #0]
 8013100:	8893      	ldrh	r3, [r2, #4]
 8013102:	3b01      	subs	r3, #1
 8013104:	1b1b      	subs	r3, r3, r4
 8013106:	800b      	strh	r3, [r1, #0]
 8013108:	bd10      	pop	{r4, pc}
 801310a:	bf00      	nop
 801310c:	200084e4 	.word	0x200084e4

08013110 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013110:	b513      	push	{r0, r1, r4, lr}
 8013112:	4b08      	ldr	r3, [pc, #32]	; (8013134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013114:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013118:	4b07      	ldr	r3, [pc, #28]	; (8013138 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801311a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801311e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013122:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013126:	2400      	movs	r4, #0
 8013128:	466a      	mov	r2, sp
 801312a:	9400      	str	r4, [sp, #0]
 801312c:	f7ff ffde 	bl	80130ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013130:	b002      	add	sp, #8
 8013132:	bd10      	pop	{r4, pc}
 8013134:	200084e0 	.word	0x200084e0
 8013138:	200084e2 	.word	0x200084e2

0801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801313c:	b510      	push	{r4, lr}
 801313e:	4b0a      	ldr	r3, [pc, #40]	; (8013168 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b01      	cmp	r3, #1
 8013144:	460a      	mov	r2, r1
 8013146:	d10d      	bne.n	8013164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013148:	8881      	ldrh	r1, [r0, #4]
 801314a:	8803      	ldrh	r3, [r0, #0]
 801314c:	440b      	add	r3, r1
 801314e:	4601      	mov	r1, r0
 8013150:	3b01      	subs	r3, #1
 8013152:	f821 3b02 	strh.w	r3, [r1], #2
 8013156:	f7ff ffc9 	bl	80130ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801315a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801315e:	88c2      	ldrh	r2, [r0, #6]
 8013160:	8082      	strh	r2, [r0, #4]
 8013162:	80c3      	strh	r3, [r0, #6]
 8013164:	bd10      	pop	{r4, pc}
 8013166:	bf00      	nop
 8013168:	200084e4 	.word	0x200084e4

0801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801316c:	b507      	push	{r0, r1, r2, lr}
 801316e:	4b09      	ldr	r3, [pc, #36]	; (8013194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013174:	4b08      	ldr	r3, [pc, #32]	; (8013198 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8013176:	f8ad 2004 	strh.w	r2, [sp, #4]
 801317a:	2100      	movs	r1, #0
 801317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013180:	9100      	str	r1, [sp, #0]
 8013182:	4669      	mov	r1, sp
 8013184:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013188:	f7ff ffd8 	bl	801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801318c:	b003      	add	sp, #12
 801318e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013192:	bf00      	nop
 8013194:	200084e0 	.word	0x200084e0
 8013198:	200084e2 	.word	0x200084e2

0801319c <_ZN8touchgfx11Application13requestRedrawEv>:
 801319c:	4b06      	ldr	r3, [pc, #24]	; (80131b8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801319e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80131a2:	4b06      	ldr	r3, [pc, #24]	; (80131bc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80131a4:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80131a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131ac:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80131b0:	2100      	movs	r1, #0
 80131b2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80131b6:	4770      	bx	lr
 80131b8:	200084e0 	.word	0x200084e0
 80131bc:	200084e2 	.word	0x200084e2

080131c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80131c0:	4b03      	ldr	r3, [pc, #12]	; (80131d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80131c2:	6818      	ldr	r0, [r3, #0]
 80131c4:	b110      	cbz	r0, 80131cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80131c6:	6803      	ldr	r3, [r0, #0]
 80131c8:	699b      	ldr	r3, [r3, #24]
 80131ca:	4718      	bx	r3
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop
 80131d0:	20008548 	.word	0x20008548

080131d4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80131d4:	4770      	bx	lr
	...

080131d8 <_ZN8touchgfx11Application4drawEv>:
 80131d8:	b507      	push	{r0, r1, r2, lr}
 80131da:	4b09      	ldr	r3, [pc, #36]	; (8013200 <_ZN8touchgfx11Application4drawEv+0x28>)
 80131dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80131e0:	4b08      	ldr	r3, [pc, #32]	; (8013204 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80131e2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80131e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80131ee:	6803      	ldr	r3, [r0, #0]
 80131f0:	2100      	movs	r1, #0
 80131f2:	9100      	str	r1, [sp, #0]
 80131f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131f6:	4669      	mov	r1, sp
 80131f8:	4798      	blx	r3
 80131fa:	b003      	add	sp, #12
 80131fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8013200:	200084e0 	.word	0x200084e0
 8013204:	200084e2 	.word	0x200084e2

08013208 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013208:	4b03      	ldr	r3, [pc, #12]	; (8013218 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801320a:	6818      	ldr	r0, [r3, #0]
 801320c:	b110      	cbz	r0, 8013214 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801320e:	6803      	ldr	r3, [r0, #0]
 8013210:	69db      	ldr	r3, [r3, #28]
 8013212:	4718      	bx	r3
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	20008548 	.word	0x20008548

0801321c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801321c:	4b03      	ldr	r3, [pc, #12]	; (801322c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801321e:	6818      	ldr	r0, [r3, #0]
 8013220:	b110      	cbz	r0, 8013228 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013222:	6803      	ldr	r3, [r0, #0]
 8013224:	6a1b      	ldr	r3, [r3, #32]
 8013226:	4718      	bx	r3
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop
 801322c:	20008548 	.word	0x20008548

08013230 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013230:	4b03      	ldr	r3, [pc, #12]	; (8013240 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013232:	6818      	ldr	r0, [r3, #0]
 8013234:	b110      	cbz	r0, 801323c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013236:	6803      	ldr	r3, [r0, #0]
 8013238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801323a:	4718      	bx	r3
 801323c:	4770      	bx	lr
 801323e:	bf00      	nop
 8013240:	20008548 	.word	0x20008548

08013244 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013244:	b570      	push	{r4, r5, r6, lr}
 8013246:	4d34      	ldr	r5, [pc, #208]	; (8013318 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8013248:	4604      	mov	r4, r0
 801324a:	6828      	ldr	r0, [r5, #0]
 801324c:	b140      	cbz	r0, 8013260 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801324e:	7a03      	ldrb	r3, [r0, #8]
 8013250:	b933      	cbnz	r3, 8013260 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013252:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8013256:	6803      	ldr	r3, [r0, #0]
 8013258:	689b      	ldr	r3, [r3, #8]
 801325a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801325e:	4718      	bx	r3
 8013260:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8013264:	b97b      	cbnz	r3, 8013286 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013266:	b170      	cbz	r0, 8013286 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013268:	7a03      	ldrb	r3, [r0, #8]
 801326a:	b163      	cbz	r3, 8013286 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801326c:	4b2b      	ldr	r3, [pc, #172]	; (801331c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801326e:	6818      	ldr	r0, [r3, #0]
 8013270:	b110      	cbz	r0, 8013278 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8013272:	6803      	ldr	r3, [r0, #0]
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	4798      	blx	r3
 8013278:	6828      	ldr	r0, [r5, #0]
 801327a:	6803      	ldr	r3, [r0, #0]
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	4798      	blx	r3
 8013280:	2301      	movs	r3, #1
 8013282:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8013286:	2500      	movs	r5, #0
 8013288:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801328c:	42a8      	cmp	r0, r5
 801328e:	dd0c      	ble.n	80132aa <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8013290:	1963      	adds	r3, r4, r5
 8013292:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8013296:	b132      	cbz	r2, 80132a6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8013298:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801329c:	4413      	add	r3, r2
 801329e:	6858      	ldr	r0, [r3, #4]
 80132a0:	6803      	ldr	r3, [r0, #0]
 80132a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132a4:	4798      	blx	r3
 80132a6:	3501      	adds	r5, #1
 80132a8:	e7ee      	b.n	8013288 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80132aa:	2300      	movs	r3, #0
 80132ac:	461a      	mov	r2, r3
 80132ae:	4298      	cmp	r0, r3
 80132b0:	d114      	bne.n	80132dc <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80132b2:	1d25      	adds	r5, r4, #4
 80132b4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80132b8:	1e48      	subs	r0, r1, #1
 80132ba:	b280      	uxth	r0, r0
 80132bc:	4291      	cmp	r1, r2
 80132be:	dd24      	ble.n	801330a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 80132c0:	4288      	cmp	r0, r1
 80132c2:	d2fb      	bcs.n	80132bc <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 80132c4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80132c8:	3304      	adds	r3, #4
 80132ca:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80132ce:	428b      	cmp	r3, r1
 80132d0:	d018      	beq.n	8013304 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80132d2:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80132d6:	f843 6c04 	str.w	r6, [r3, #-4]
 80132da:	e7f8      	b.n	80132ce <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 80132dc:	18e1      	adds	r1, r4, r3
 80132de:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80132e2:	b16d      	cbz	r5, 8013300 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d00a      	beq.n	80132fe <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 80132e8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80132ec:	4431      	add	r1, r6
 80132ee:	684e      	ldr	r6, [r1, #4]
 80132f0:	b291      	uxth	r1, r2
 80132f2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80132f6:	604e      	str	r6, [r1, #4]
 80132f8:	18a1      	adds	r1, r4, r2
 80132fa:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80132fe:	3201      	adds	r2, #1
 8013300:	3301      	adds	r3, #1
 8013302:	e7d4      	b.n	80132ae <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8013304:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8013308:	e7d4      	b.n	80132b4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801330a:	4b04      	ldr	r3, [pc, #16]	; (801331c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801330c:	6818      	ldr	r0, [r3, #0]
 801330e:	b110      	cbz	r0, 8013316 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8013310:	6803      	ldr	r3, [r0, #0]
 8013312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013314:	e7a1      	b.n	801325a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8013316:	bd70      	pop	{r4, r5, r6, pc}
 8013318:	2000854c 	.word	0x2000854c
 801331c:	20008548 	.word	0x20008548

08013320 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	4606      	mov	r6, r0
 8013324:	460c      	mov	r4, r1
 8013326:	b929      	cbnz	r1, 8013334 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8013328:	4b0c      	ldr	r3, [pc, #48]	; (801335c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801332a:	4a0d      	ldr	r2, [pc, #52]	; (8013360 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801332c:	480d      	ldr	r0, [pc, #52]	; (8013364 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801332e:	2165      	movs	r1, #101	; 0x65
 8013330:	f00a f9fe 	bl	801d730 <__assert_func>
 8013334:	4d0c      	ldr	r5, [pc, #48]	; (8013368 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8013336:	2300      	movs	r3, #0
 8013338:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801333c:	6828      	ldr	r0, [r5, #0]
 801333e:	b110      	cbz	r0, 8013346 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8013340:	6803      	ldr	r3, [r0, #0]
 8013342:	695b      	ldr	r3, [r3, #20]
 8013344:	4798      	blx	r3
 8013346:	602c      	str	r4, [r5, #0]
 8013348:	6823      	ldr	r3, [r4, #0]
 801334a:	4620      	mov	r0, r4
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	4798      	blx	r3
 8013350:	6833      	ldr	r3, [r6, #0]
 8013352:	4630      	mov	r0, r6
 8013354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801335a:	4718      	bx	r3
 801335c:	080208d0 	.word	0x080208d0
 8013360:	080209a0 	.word	0x080209a0
 8013364:	080208da 	.word	0x080208da
 8013368:	20008548 	.word	0x20008548

0801336c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801336c:	b510      	push	{r4, lr}
 801336e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013372:	888a      	ldrh	r2, [r1, #4]
 8013374:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013378:	4422      	add	r2, r4
 801337a:	b212      	sxth	r2, r2
 801337c:	4293      	cmp	r3, r2
 801337e:	da15      	bge.n	80133ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013380:	8882      	ldrh	r2, [r0, #4]
 8013382:	4413      	add	r3, r2
 8013384:	b21b      	sxth	r3, r3
 8013386:	429c      	cmp	r4, r3
 8013388:	da10      	bge.n	80133ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801338a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801338e:	88c9      	ldrh	r1, [r1, #6]
 8013390:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013394:	4419      	add	r1, r3
 8013396:	b209      	sxth	r1, r1
 8013398:	428a      	cmp	r2, r1
 801339a:	da07      	bge.n	80133ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801339c:	88c0      	ldrh	r0, [r0, #6]
 801339e:	4410      	add	r0, r2
 80133a0:	b200      	sxth	r0, r0
 80133a2:	4283      	cmp	r3, r0
 80133a4:	bfac      	ite	ge
 80133a6:	2000      	movge	r0, #0
 80133a8:	2001      	movlt	r0, #1
 80133aa:	bd10      	pop	{r4, pc}
 80133ac:	2000      	movs	r0, #0
 80133ae:	e7fc      	b.n	80133aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080133b0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80133b0:	b570      	push	{r4, r5, r6, lr}
 80133b2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80133b6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80133ba:	42ac      	cmp	r4, r5
 80133bc:	db18      	blt.n	80133f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80133be:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80133c2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	db12      	blt.n	80133f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80133ca:	8886      	ldrh	r6, [r0, #4]
 80133cc:	4435      	add	r5, r6
 80133ce:	888e      	ldrh	r6, [r1, #4]
 80133d0:	4434      	add	r4, r6
 80133d2:	b22d      	sxth	r5, r5
 80133d4:	b224      	sxth	r4, r4
 80133d6:	42a5      	cmp	r5, r4
 80133d8:	db0a      	blt.n	80133f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80133da:	88c0      	ldrh	r0, [r0, #6]
 80133dc:	4418      	add	r0, r3
 80133de:	88cb      	ldrh	r3, [r1, #6]
 80133e0:	441a      	add	r2, r3
 80133e2:	b200      	sxth	r0, r0
 80133e4:	b212      	sxth	r2, r2
 80133e6:	4290      	cmp	r0, r2
 80133e8:	bfb4      	ite	lt
 80133ea:	2000      	movlt	r0, #0
 80133ec:	2001      	movge	r0, #1
 80133ee:	bd70      	pop	{r4, r5, r6, pc}
 80133f0:	2000      	movs	r0, #0
 80133f2:	e7fc      	b.n	80133ee <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080133f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80133f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133f6:	4604      	mov	r4, r0
 80133f8:	4608      	mov	r0, r1
 80133fa:	460d      	mov	r5, r1
 80133fc:	f7fd fef3 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013400:	b978      	cbnz	r0, 8013422 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013402:	4620      	mov	r0, r4
 8013404:	f7fd feef 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013408:	f9b5 6000 	ldrsh.w	r6, [r5]
 801340c:	b150      	cbz	r0, 8013424 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801340e:	8026      	strh	r6, [r4, #0]
 8013410:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013414:	8063      	strh	r3, [r4, #2]
 8013416:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801341a:	80a3      	strh	r3, [r4, #4]
 801341c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013420:	80e3      	strh	r3, [r4, #6]
 8013422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013424:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013428:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801342c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013430:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013434:	88ed      	ldrh	r5, [r5, #6]
 8013436:	42b1      	cmp	r1, r6
 8013438:	460f      	mov	r7, r1
 801343a:	bfa8      	it	ge
 801343c:	4637      	movge	r7, r6
 801343e:	4293      	cmp	r3, r2
 8013440:	4618      	mov	r0, r3
 8013442:	4466      	add	r6, ip
 8013444:	bfa8      	it	ge
 8013446:	4610      	movge	r0, r2
 8013448:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801344c:	8027      	strh	r7, [r4, #0]
 801344e:	442a      	add	r2, r5
 8013450:	88e5      	ldrh	r5, [r4, #6]
 8013452:	8060      	strh	r0, [r4, #2]
 8013454:	4461      	add	r1, ip
 8013456:	442b      	add	r3, r5
 8013458:	b236      	sxth	r6, r6
 801345a:	b209      	sxth	r1, r1
 801345c:	b212      	sxth	r2, r2
 801345e:	b21b      	sxth	r3, r3
 8013460:	428e      	cmp	r6, r1
 8013462:	bfac      	ite	ge
 8013464:	ebc7 0106 	rsbge	r1, r7, r6
 8013468:	ebc7 0101 	rsblt	r1, r7, r1
 801346c:	429a      	cmp	r2, r3
 801346e:	bfac      	ite	ge
 8013470:	ebc0 0202 	rsbge	r2, r0, r2
 8013474:	ebc0 0203 	rsblt	r2, r0, r3
 8013478:	80a1      	strh	r1, [r4, #4]
 801347a:	80e2      	strh	r2, [r4, #6]
 801347c:	e7d1      	b.n	8013422 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013480 <_ZN8touchgfx11Application11getInstanceEv>:
 8013480:	4b01      	ldr	r3, [pc, #4]	; (8013488 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013482:	6818      	ldr	r0, [r3, #0]
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	20008558 	.word	0x20008558

0801348c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801348c:	2300      	movs	r3, #0
 801348e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8013492:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8013496:	30a8      	adds	r0, #168	; 0xa8
 8013498:	f802 3b01 	strb.w	r3, [r2], #1
 801349c:	4282      	cmp	r2, r0
 801349e:	d1fb      	bne.n	8013498 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80134a0:	4770      	bx	lr

080134a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80134a2:	4603      	mov	r3, r0
 80134a4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80134a8:	2200      	movs	r2, #0
 80134aa:	801a      	strh	r2, [r3, #0]
 80134ac:	805a      	strh	r2, [r3, #2]
 80134ae:	809a      	strh	r2, [r3, #4]
 80134b0:	80da      	strh	r2, [r3, #6]
 80134b2:	3308      	adds	r3, #8
 80134b4:	428b      	cmp	r3, r1
 80134b6:	d1f8      	bne.n	80134aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80134b8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80134bc:	4770      	bx	lr
	...

080134c0 <_ZN8touchgfx11ApplicationC1Ev>:
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	4b1a      	ldr	r3, [pc, #104]	; (801352c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80134c4:	6003      	str	r3, [r0, #0]
 80134c6:	2500      	movs	r5, #0
 80134c8:	4604      	mov	r4, r0
 80134ca:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 80134ce:	30a8      	adds	r0, #168	; 0xa8
 80134d0:	f7ff ffe7 	bl	80134a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80134d4:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80134d8:	f7ff ffe3 	bl	80134a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80134dc:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80134e0:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80134e4:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80134e8:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80134ec:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80134f0:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80134f4:	490e      	ldr	r1, [pc, #56]	; (8013530 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80134f6:	480f      	ldr	r0, [pc, #60]	; (8013534 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80134f8:	4e0f      	ldr	r6, [pc, #60]	; (8013538 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80134fa:	f009 ffe7 	bl	801d4cc <CRC_Lock>
 80134fe:	4b0f      	ldr	r3, [pc, #60]	; (801353c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013500:	b158      	cbz	r0, 801351a <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 8013502:	801d      	strh	r5, [r3, #0]
 8013504:	4a0e      	ldr	r2, [pc, #56]	; (8013540 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8013506:	2300      	movs	r3, #0
 8013508:	6013      	str	r3, [r2, #0]
 801350a:	4a0e      	ldr	r2, [pc, #56]	; (8013544 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801350c:	6033      	str	r3, [r6, #0]
 801350e:	4620      	mov	r0, r4
 8013510:	6013      	str	r3, [r2, #0]
 8013512:	f7ff ffbb 	bl	801348c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8013516:	4620      	mov	r0, r4
 8013518:	bd70      	pop	{r4, r5, r6, pc}
 801351a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801351e:	2002      	movs	r0, #2
 8013520:	801a      	strh	r2, [r3, #0]
 8013522:	6030      	str	r0, [r6, #0]
 8013524:	f000 ff22 	bl	801436c <_ZN8touchgfx6Screen4drawEv>
 8013528:	e7ec      	b.n	8013504 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801352a:	bf00      	nop
 801352c:	08020964 	.word	0x08020964
 8013530:	b5e8b5cd 	.word	0xb5e8b5cd
 8013534:	f407a5c2 	.word	0xf407a5c2
 8013538:	20008548 	.word	0x20008548
 801353c:	20000094 	.word	0x20000094
 8013540:	20008558 	.word	0x20008558
 8013544:	2000854c 	.word	0x2000854c

08013548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8013548:	2300      	movs	r3, #0
 801354a:	8003      	strh	r3, [r0, #0]
 801354c:	8043      	strh	r3, [r0, #2]
 801354e:	8083      	strh	r3, [r0, #4]
 8013550:	80c3      	strh	r3, [r0, #6]
 8013552:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8013556:	4293      	cmp	r3, r2
 8013558:	b530      	push	{r4, r5, lr}
 801355a:	d912      	bls.n	8013582 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801355c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8013560:	3b01      	subs	r3, #1
 8013562:	6825      	ldr	r5, [r4, #0]
 8013564:	6005      	str	r5, [r0, #0]
 8013566:	b29b      	uxth	r3, r3
 8013568:	6865      	ldr	r5, [r4, #4]
 801356a:	6045      	str	r5, [r0, #4]
 801356c:	4293      	cmp	r3, r2
 801356e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8013572:	d906      	bls.n	8013582 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8013574:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013578:	681d      	ldr	r5, [r3, #0]
 801357a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801357e:	685d      	ldr	r5, [r3, #4]
 8013580:	6065      	str	r5, [r4, #4]
 8013582:	bd30      	pop	{r4, r5, pc}

08013584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8013584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013586:	466b      	mov	r3, sp
 8013588:	e883 0006 	stmia.w	r3, {r1, r2}
 801358c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8013590:	2a07      	cmp	r2, #7
 8013592:	4604      	mov	r4, r0
 8013594:	d906      	bls.n	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8013596:	4b09      	ldr	r3, [pc, #36]	; (80135bc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8013598:	4a09      	ldr	r2, [pc, #36]	; (80135c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801359a:	480a      	ldr	r0, [pc, #40]	; (80135c4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801359c:	f240 118f 	movw	r1, #399	; 0x18f
 80135a0:	f00a f8c6 	bl	801d730 <__assert_func>
 80135a4:	1c51      	adds	r1, r2, #1
 80135a6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80135aa:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80135ae:	cb03      	ldmia	r3!, {r0, r1}
 80135b0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80135b4:	6069      	str	r1, [r5, #4]
 80135b6:	b003      	add	sp, #12
 80135b8:	bd30      	pop	{r4, r5, pc}
 80135ba:	bf00      	nop
 80135bc:	08020904 	.word	0x08020904
 80135c0:	080209e4 	.word	0x080209e4
 80135c4:	08020933 	.word	0x08020933

080135c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80135c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135cc:	b089      	sub	sp, #36	; 0x24
 80135ce:	466c      	mov	r4, sp
 80135d0:	4606      	mov	r6, r0
 80135d2:	4620      	mov	r0, r4
 80135d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80135d8:	f7fd fe05 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80135dc:	bbb0      	cbnz	r0, 801364c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80135de:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80135e2:	b1fd      	cbz	r5, 8013624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80135e4:	3d01      	subs	r5, #1
 80135e6:	af04      	add	r7, sp, #16
 80135e8:	f04f 090a 	mov.w	r9, #10
 80135ec:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80135f0:	ab02      	add	r3, sp, #8
 80135f2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80135f6:	6851      	ldr	r1, [r2, #4]
 80135f8:	c303      	stmia	r3!, {r0, r1}
 80135fa:	4621      	mov	r1, r4
 80135fc:	a802      	add	r0, sp, #8
 80135fe:	fa1f f885 	uxth.w	r8, r5
 8013602:	f7ff fed5 	bl	80133b0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013606:	bb08      	cbnz	r0, 801364c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8013608:	a902      	add	r1, sp, #8
 801360a:	4620      	mov	r0, r4
 801360c:	f7ff fed0 	bl	80133b0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013610:	b1f8      	cbz	r0, 8013652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8013612:	4642      	mov	r2, r8
 8013614:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8013618:	a806      	add	r0, sp, #24
 801361a:	f7ff ff95 	bl	8013548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801361e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8013622:	d2e3      	bcs.n	80135ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8013624:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8013628:	2b08      	cmp	r3, #8
 801362a:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801362e:	d108      	bne.n	8013642 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8013630:	4629      	mov	r1, r5
 8013632:	a806      	add	r0, sp, #24
 8013634:	2207      	movs	r2, #7
 8013636:	f7ff ff87 	bl	8013548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801363a:	a906      	add	r1, sp, #24
 801363c:	4620      	mov	r0, r4
 801363e:	f7ff fed9 	bl	80133f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013642:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013646:	4628      	mov	r0, r5
 8013648:	f7ff ff9c 	bl	8013584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801364c:	b009      	add	sp, #36	; 0x24
 801364e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013652:	4621      	mov	r1, r4
 8013654:	a802      	add	r0, sp, #8
 8013656:	f7ff fe89 	bl	801336c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801365a:	b150      	cbz	r0, 8013672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801365c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8013660:	a806      	add	r0, sp, #24
 8013662:	4642      	mov	r2, r8
 8013664:	f7ff ff70 	bl	8013548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013668:	a902      	add	r1, sp, #8
 801366a:	4620      	mov	r0, r4
 801366c:	f7ff fec2 	bl	80133f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013670:	e7d5      	b.n	801361e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8013672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013676:	e887 0003 	stmia.w	r7, {r0, r1}
 801367a:	a902      	add	r1, sp, #8
 801367c:	4638      	mov	r0, r7
 801367e:	f7ff feb9 	bl	80133f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013682:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013686:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801368a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801368e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013692:	fb13 f302 	smulbb	r3, r3, r2
 8013696:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801369a:	fb11 f102 	smulbb	r1, r1, r2
 801369e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80136a2:	fb12 1100 	smlabb	r1, r2, r0, r1
 80136a6:	220b      	movs	r2, #11
 80136a8:	fb09 f303 	mul.w	r3, r9, r3
 80136ac:	434a      	muls	r2, r1
 80136ae:	4293      	cmp	r3, r2
 80136b0:	dab5      	bge.n	801361e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80136b2:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80136b6:	a806      	add	r0, sp, #24
 80136b8:	4642      	mov	r2, r8
 80136ba:	f7ff ff45 	bl	8013548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80136be:	e897 0003 	ldmia.w	r7, {r0, r1}
 80136c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80136c6:	e7aa      	b.n	801361e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080136c8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80136c8:	b530      	push	{r4, r5, lr}
 80136ca:	4b1d      	ldr	r3, [pc, #116]	; (8013740 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80136cc:	b085      	sub	sp, #20
 80136ce:	460c      	mov	r4, r1
 80136d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80136d4:	4b1b      	ldr	r3, [pc, #108]	; (8013744 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80136d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80136da:	2100      	movs	r1, #0
 80136dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136e0:	9100      	str	r1, [sp, #0]
 80136e2:	4605      	mov	r5, r0
 80136e4:	6861      	ldr	r1, [r4, #4]
 80136e6:	6820      	ldr	r0, [r4, #0]
 80136e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80136ec:	ab02      	add	r3, sp, #8
 80136ee:	c303      	stmia	r3!, {r0, r1}
 80136f0:	4669      	mov	r1, sp
 80136f2:	a802      	add	r0, sp, #8
 80136f4:	f7fd fd34 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 80136f8:	ab02      	add	r3, sp, #8
 80136fa:	cb03      	ldmia	r3!, {r0, r1}
 80136fc:	4b12      	ldr	r3, [pc, #72]	; (8013748 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80136fe:	6020      	str	r0, [r4, #0]
 8013700:	6818      	ldr	r0, [r3, #0]
 8013702:	6061      	str	r1, [r4, #4]
 8013704:	b138      	cbz	r0, 8013716 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8013706:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801370a:	b133      	cbz	r3, 801371a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801370c:	6821      	ldr	r1, [r4, #0]
 801370e:	6862      	ldr	r2, [r4, #4]
 8013710:	4628      	mov	r0, r5
 8013712:	f7ff ff59 	bl	80135c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013716:	b005      	add	sp, #20
 8013718:	bd30      	pop	{r4, r5, pc}
 801371a:	6803      	ldr	r3, [r0, #0]
 801371c:	4621      	mov	r1, r4
 801371e:	689b      	ldr	r3, [r3, #8]
 8013720:	4798      	blx	r3
 8013722:	4b0a      	ldr	r3, [pc, #40]	; (801374c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8013724:	6818      	ldr	r0, [r3, #0]
 8013726:	b118      	cbz	r0, 8013730 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8013728:	6803      	ldr	r3, [r0, #0]
 801372a:	4621      	mov	r1, r4
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	4798      	blx	r3
 8013730:	4b07      	ldr	r3, [pc, #28]	; (8013750 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8013732:	6818      	ldr	r0, [r3, #0]
 8013734:	6803      	ldr	r3, [r0, #0]
 8013736:	4621      	mov	r1, r4
 8013738:	695b      	ldr	r3, [r3, #20]
 801373a:	4798      	blx	r3
 801373c:	e7eb      	b.n	8013716 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801373e:	bf00      	nop
 8013740:	200084e0 	.word	0x200084e0
 8013744:	200084e2 	.word	0x200084e2
 8013748:	20008548 	.word	0x20008548
 801374c:	20008544 	.word	0x20008544
 8013750:	200084ec 	.word	0x200084ec

08013754 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8013754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013758:	4604      	mov	r4, r0
 801375a:	b09b      	sub	sp, #108	; 0x6c
 801375c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8013760:	b129      	cbz	r1, 801376e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8013762:	2300      	movs	r3, #0
 8013764:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8013768:	b01b      	add	sp, #108	; 0x6c
 801376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801376e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8013772:	4630      	mov	r0, r6
 8013774:	f7fd fd37 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013778:	4605      	mov	r5, r0
 801377a:	b940      	cbnz	r0, 801378e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801377c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013780:	4620      	mov	r0, r4
 8013782:	f7ff ff21 	bl	80135c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013786:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801378a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801378e:	4baf      	ldr	r3, [pc, #700]	; (8013a4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	b33b      	cbz	r3, 80137e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8013794:	4dae      	ldr	r5, [pc, #696]	; (8013a50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 8013796:	4628      	mov	r0, r5
 8013798:	f7fd fd25 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801379c:	4606      	mov	r6, r0
 801379e:	bb08      	cbnz	r0, 80137e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80137a0:	4628      	mov	r0, r5
 80137a2:	f7ff fc89 	bl	80130b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80137a6:	6829      	ldr	r1, [r5, #0]
 80137a8:	686a      	ldr	r2, [r5, #4]
 80137aa:	4620      	mov	r0, r4
 80137ac:	f7ff ff0c 	bl	80135c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80137b0:	802e      	strh	r6, [r5, #0]
 80137b2:	806e      	strh	r6, [r5, #2]
 80137b4:	80ae      	strh	r6, [r5, #4]
 80137b6:	80ee      	strh	r6, [r5, #6]
 80137b8:	4fa6      	ldr	r7, [pc, #664]	; (8013a54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 80137ba:	a809      	add	r0, sp, #36	; 0x24
 80137bc:	f7ff fe71 	bl	80134a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80137c0:	883d      	ldrh	r5, [r7, #0]
 80137c2:	462e      	mov	r6, r5
 80137c4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80137c8:	42b3      	cmp	r3, r6
 80137ca:	d910      	bls.n	80137ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80137cc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80137d0:	a809      	add	r0, sp, #36	; 0x24
 80137d2:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80137d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80137da:	3601      	adds	r6, #1
 80137dc:	f7ff fed2 	bl	8013584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80137e0:	b2b6      	uxth	r6, r6
 80137e2:	e7ef      	b.n	80137c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80137e4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d1e5      	bne.n	80137b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80137ec:	e7bc      	b.n	8013768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80137ee:	462e      	mov	r6, r5
 80137f0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80137f4:	42b3      	cmp	r3, r6
 80137f6:	d90b      	bls.n	8013810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80137f8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80137fc:	4620      	mov	r0, r4
 80137fe:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8013802:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8013806:	3601      	adds	r6, #1
 8013808:	f7ff fede 	bl	80135c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801380c:	b2b6      	uxth	r6, r6
 801380e:	e7ef      	b.n	80137f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8013810:	4e91      	ldr	r6, [pc, #580]	; (8013a58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 8013812:	6833      	ldr	r3, [r6, #0]
 8013814:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013818:	2b01      	cmp	r3, #1
 801381a:	f040 8092 	bne.w	8013942 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 801381e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8013822:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8013826:	33aa      	adds	r3, #170	; 0xaa
 8013828:	f04f 0900 	mov.w	r9, #0
 801382c:	42a8      	cmp	r0, r5
 801382e:	f103 0308 	add.w	r3, r3, #8
 8013832:	dd0a      	ble.n	801384a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 8013834:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8013838:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801383c:	440a      	add	r2, r1
 801383e:	b212      	sxth	r2, r2
 8013840:	4591      	cmp	r9, r2
 8013842:	bfb8      	it	lt
 8013844:	4691      	movlt	r9, r2
 8013846:	3501      	adds	r5, #1
 8013848:	e7f0      	b.n	801382c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 801384a:	4b84      	ldr	r3, [pc, #528]	; (8013a5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 801384c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8013a64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 8013850:	881d      	ldrh	r5, [r3, #0]
 8013852:	2300      	movs	r3, #0
 8013854:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013858:	2d0f      	cmp	r5, #15
 801385a:	bf8c      	ite	hi
 801385c:	08ed      	lsrhi	r5, r5, #3
 801385e:	2501      	movls	r5, #1
 8013860:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013864:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8013868:	6830      	ldr	r0, [r6, #0]
 801386a:	440b      	add	r3, r1
 801386c:	b21b      	sxth	r3, r3
 801386e:	4599      	cmp	r9, r3
 8013870:	6802      	ldr	r2, [r0, #0]
 8013872:	dd49      	ble.n	8013908 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 8013874:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8013878:	4798      	blx	r3
 801387a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801387e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013882:	4413      	add	r3, r2
 8013884:	b21b      	sxth	r3, r3
 8013886:	195a      	adds	r2, r3, r5
 8013888:	4290      	cmp	r0, r2
 801388a:	da07      	bge.n	801389c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801388c:	4581      	cmp	r9, r0
 801388e:	dd05      	ble.n	801389c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8013890:	4298      	cmp	r0, r3
 8013892:	da33      	bge.n	80138fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8013894:	2b00      	cmp	r3, #0
 8013896:	dd31      	ble.n	80138fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8013898:	4648      	mov	r0, r9
 801389a:	e004      	b.n	80138a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801389c:	4298      	cmp	r0, r3
 801389e:	dbfb      	blt.n	8013898 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 80138a0:	4548      	cmp	r0, r9
 80138a2:	bfa8      	it	ge
 80138a4:	4648      	movge	r0, r9
 80138a6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80138aa:	f8b7 a000 	ldrh.w	sl, [r7]
 80138ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80138b2:	2100      	movs	r1, #0
 80138b4:	1ac0      	subs	r0, r0, r3
 80138b6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80138ba:	f8ad 2018 	strh.w	r2, [sp, #24]
 80138be:	f8ad 001a 	strh.w	r0, [sp, #26]
 80138c2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80138c6:	4553      	cmp	r3, sl
 80138c8:	d9ca      	bls.n	8013860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80138ca:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80138ce:	ab07      	add	r3, sp, #28
 80138d0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80138d4:	6851      	ldr	r1, [r2, #4]
 80138d6:	c303      	stmia	r3!, {r0, r1}
 80138d8:	a807      	add	r0, sp, #28
 80138da:	a905      	add	r1, sp, #20
 80138dc:	f7fd fc40 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 80138e0:	a807      	add	r0, sp, #28
 80138e2:	f7fd fc80 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80138e6:	b920      	cbnz	r0, 80138f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 80138e8:	6823      	ldr	r3, [r4, #0]
 80138ea:	a907      	add	r1, sp, #28
 80138ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ee:	4620      	mov	r0, r4
 80138f0:	4798      	blx	r3
 80138f2:	f10a 0a01 	add.w	sl, sl, #1
 80138f6:	fa1f fa8a 	uxth.w	sl, sl
 80138fa:	e7e2      	b.n	80138c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 80138fc:	6830      	ldr	r0, [r6, #0]
 80138fe:	6803      	ldr	r3, [r0, #0]
 8013900:	2101      	movs	r1, #1
 8013902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013904:	4798      	blx	r3
 8013906:	e7ab      	b.n	8013860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8013908:	69d3      	ldr	r3, [r2, #28]
 801390a:	4798      	blx	r3
 801390c:	4b54      	ldr	r3, [pc, #336]	; (8013a60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	f43f af29 	beq.w	8013768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8013916:	2300      	movs	r3, #0
 8013918:	883d      	ldrh	r5, [r7, #0]
 801391a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801391e:	34ea      	adds	r4, #234	; 0xea
 8013920:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8013924:	42ab      	cmp	r3, r5
 8013926:	f67f af1f 	bls.w	8013768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801392a:	ab1a      	add	r3, sp, #104	; 0x68
 801392c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013930:	3b44      	subs	r3, #68	; 0x44
 8013932:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013936:	4620      	mov	r0, r4
 8013938:	3501      	adds	r5, #1
 801393a:	f7ff fe23 	bl	8013584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801393e:	b2ad      	uxth	r5, r5
 8013940:	e7ee      	b.n	8013920 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 8013942:	2b02      	cmp	r3, #2
 8013944:	d16a      	bne.n	8013a1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8013946:	f8df a120 	ldr.w	sl, [pc, #288]	; 8013a68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 801394a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801394e:	42ab      	cmp	r3, r5
 8013950:	d9dc      	bls.n	801390c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8013952:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8013956:	ab03      	add	r3, sp, #12
 8013958:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801395c:	6851      	ldr	r1, [r2, #4]
 801395e:	c303      	stmia	r3!, {r0, r1}
 8013960:	f89a 3000 	ldrb.w	r3, [sl]
 8013964:	2b01      	cmp	r3, #1
 8013966:	d102      	bne.n	801396e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 8013968:	a803      	add	r0, sp, #12
 801396a:	f7ff fbff 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801396e:	a803      	add	r0, sp, #12
 8013970:	f7fd fc39 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013974:	2800      	cmp	r0, #0
 8013976:	d14a      	bne.n	8013a0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 8013978:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801397c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013980:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013984:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013988:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801398c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013990:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013994:	f10d 0914 	add.w	r9, sp, #20
 8013998:	f10d 081c 	add.w	r8, sp, #28
 801399c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80139a0:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 80139a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80139a8:	6830      	ldr	r0, [r6, #0]
 80139aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80139ae:	f8d0 e000 	ldr.w	lr, [r0]
 80139b2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80139b6:	44dc      	add	ip, fp
 80139b8:	ebac 0c02 	sub.w	ip, ip, r2
 80139bc:	fa1f fc8c 	uxth.w	ip, ip
 80139c0:	f8cd c000 	str.w	ip, [sp]
 80139c4:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 80139c8:	47d8      	blx	fp
 80139ca:	f89a 3000 	ldrb.w	r3, [sl]
 80139ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d11e      	bne.n	8013a14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 80139d6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80139da:	e888 0003 	stmia.w	r8, {r0, r1}
 80139de:	4640      	mov	r0, r8
 80139e0:	f7ff fb6a 	bl	80130b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80139e4:	6823      	ldr	r3, [r4, #0]
 80139e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e8:	4641      	mov	r1, r8
 80139ea:	4620      	mov	r0, r4
 80139ec:	4798      	blx	r3
 80139ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80139f2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80139f6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80139fa:	4413      	add	r3, r2
 80139fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8013a00:	440a      	add	r2, r1
 8013a02:	b21b      	sxth	r3, r3
 8013a04:	b212      	sxth	r2, r2
 8013a06:	4293      	cmp	r3, r2
 8013a08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a0c:	dbc6      	blt.n	801399c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 8013a0e:	3501      	adds	r5, #1
 8013a10:	b2ad      	uxth	r5, r5
 8013a12:	e79a      	b.n	801394a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 8013a14:	6823      	ldr	r3, [r4, #0]
 8013a16:	4649      	mov	r1, r9
 8013a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a1a:	e7e6      	b.n	80139ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 8013a1c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013a20:	42ab      	cmp	r3, r5
 8013a22:	f67f af73 	bls.w	801390c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8013a26:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8013a2a:	ab07      	add	r3, sp, #28
 8013a2c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8013a30:	6851      	ldr	r1, [r2, #4]
 8013a32:	c303      	stmia	r3!, {r0, r1}
 8013a34:	a807      	add	r0, sp, #28
 8013a36:	f7fd fbd6 	bl	80111e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a3a:	b920      	cbnz	r0, 8013a46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 8013a3c:	6823      	ldr	r3, [r4, #0]
 8013a3e:	a907      	add	r1, sp, #28
 8013a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a42:	4620      	mov	r0, r4
 8013a44:	4798      	blx	r3
 8013a46:	3501      	adds	r5, #1
 8013a48:	b2ad      	uxth	r5, r5
 8013a4a:	e7e7      	b.n	8013a1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8013a4c:	20008544 	.word	0x20008544
 8013a50:	20008550 	.word	0x20008550
 8013a54:	20000094 	.word	0x20000094
 8013a58:	200084ec 	.word	0x200084ec
 8013a5c:	200084e2 	.word	0x200084e2
 8013a60:	200084ea 	.word	0x200084ea
 8013a64:	200084e0 	.word	0x200084e0
 8013a68:	200084e4 	.word	0x200084e4

08013a6c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013a6c:	4b03      	ldr	r3, [pc, #12]	; (8013a7c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	801a      	strh	r2, [r3, #0]
 8013a72:	805a      	strh	r2, [r3, #2]
 8013a74:	809a      	strh	r2, [r3, #4]
 8013a76:	80da      	strh	r2, [r3, #6]
 8013a78:	4770      	bx	lr
 8013a7a:	bf00      	nop
 8013a7c:	20008550 	.word	0x20008550

08013a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	4607      	mov	r7, r0
 8013a86:	b099      	sub	sp, #100	; 0x64
 8013a88:	a802      	add	r0, sp, #8
 8013a8a:	4614      	mov	r4, r2
 8013a8c:	461d      	mov	r5, r3
 8013a8e:	468a      	mov	sl, r1
 8013a90:	f000 fdb4 	bl	80145fc <_ZN8touchgfx12TextProviderC1Ev>
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	4638      	mov	r0, r7
 8013a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a9a:	4798      	blx	r3
 8013a9c:	462a      	mov	r2, r5
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	a802      	add	r0, sp, #8
 8013aa4:	f000 fdef 	bl	8014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8013aa8:	2500      	movs	r5, #0
 8013aaa:	462c      	mov	r4, r5
 8013aac:	46a9      	mov	r9, r5
 8013aae:	46a8      	mov	r8, r5
 8013ab0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	9301      	str	r3, [sp, #4]
 8013ab8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013abc:	429c      	cmp	r4, r3
 8013abe:	d002      	beq.n	8013ac6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8013ac0:	455c      	cmp	r4, fp
 8013ac2:	bf18      	it	ne
 8013ac4:	4625      	movne	r5, r4
 8013ac6:	ab01      	add	r3, sp, #4
 8013ac8:	463a      	mov	r2, r7
 8013aca:	4651      	mov	r1, sl
 8013acc:	a802      	add	r0, sp, #8
 8013ace:	f001 f8d3 	bl	8014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	b108      	cbz	r0, 8013ada <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8013ad6:	280a      	cmp	r0, #10
 8013ad8:	d10a      	bne.n	8013af0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8013ada:	45c1      	cmp	r9, r8
 8013adc:	bf38      	it	cc
 8013ade:	46c1      	movcc	r9, r8
 8013ae0:	f04f 0800 	mov.w	r8, #0
 8013ae4:	2c00      	cmp	r4, #0
 8013ae6:	d1e5      	bne.n	8013ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8013ae8:	4648      	mov	r0, r9
 8013aea:	b019      	add	sp, #100	; 0x64
 8013aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af0:	9a01      	ldr	r2, [sp, #4]
 8013af2:	2a00      	cmp	r2, #0
 8013af4:	d0de      	beq.n	8013ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8013af6:	7b56      	ldrb	r6, [r2, #13]
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	8894      	ldrh	r4, [r2, #4]
 8013afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013afe:	0076      	lsls	r6, r6, #1
 8013b00:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8013b04:	7a96      	ldrb	r6, [r2, #10]
 8013b06:	4629      	mov	r1, r5
 8013b08:	4306      	orrs	r6, r0
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	4798      	blx	r3
 8013b0e:	4430      	add	r0, r6
 8013b10:	4480      	add	r8, r0
 8013b12:	fa1f f888 	uxth.w	r8, r8
 8013b16:	e7e5      	b.n	8013ae4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08013b18 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013b18:	b508      	push	{r3, lr}
 8013b1a:	6803      	ldr	r3, [r0, #0]
 8013b1c:	68db      	ldr	r3, [r3, #12]
 8013b1e:	4798      	blx	r3
 8013b20:	b128      	cbz	r0, 8013b2e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013b22:	7b43      	ldrb	r3, [r0, #13]
 8013b24:	7a80      	ldrb	r0, [r0, #10]
 8013b26:	005b      	lsls	r3, r3, #1
 8013b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b2c:	4318      	orrs	r0, r3
 8013b2e:	bd08      	pop	{r3, pc}

08013b30 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013b30:	b40e      	push	{r1, r2, r3}
 8013b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b34:	b098      	sub	sp, #96	; 0x60
 8013b36:	ab1d      	add	r3, sp, #116	; 0x74
 8013b38:	4605      	mov	r5, r0
 8013b3a:	f853 4b04 	ldr.w	r4, [r3], #4
 8013b3e:	9300      	str	r3, [sp, #0]
 8013b40:	a802      	add	r0, sp, #8
 8013b42:	f000 fd5b 	bl	80145fc <_ZN8touchgfx12TextProviderC1Ev>
 8013b46:	682b      	ldr	r3, [r5, #0]
 8013b48:	4628      	mov	r0, r5
 8013b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b4c:	4798      	blx	r3
 8013b4e:	ae18      	add	r6, sp, #96	; 0x60
 8013b50:	4603      	mov	r3, r0
 8013b52:	4621      	mov	r1, r4
 8013b54:	9a00      	ldr	r2, [sp, #0]
 8013b56:	2400      	movs	r4, #0
 8013b58:	a802      	add	r0, sp, #8
 8013b5a:	f000 fd94 	bl	8014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8013b5e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8013b62:	462a      	mov	r2, r5
 8013b64:	4633      	mov	r3, r6
 8013b66:	4621      	mov	r1, r4
 8013b68:	a802      	add	r0, sp, #8
 8013b6a:	f001 f885 	bl	8014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013b6e:	b1f0      	cbz	r0, 8013bae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 8013b70:	280a      	cmp	r0, #10
 8013b72:	d018      	beq.n	8013ba6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8013b74:	9f01      	ldr	r7, [sp, #4]
 8013b76:	b1b7      	cbz	r7, 8013ba6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8013b78:	7b78      	ldrb	r0, [r7, #13]
 8013b7a:	7a3b      	ldrb	r3, [r7, #8]
 8013b7c:	88aa      	ldrh	r2, [r5, #4]
 8013b7e:	00c1      	lsls	r1, r0, #3
 8013b80:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013b84:	4319      	orrs	r1, r3
 8013b86:	0643      	lsls	r3, r0, #25
 8013b88:	bf44      	itt	mi
 8013b8a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8013b8e:	b219      	sxthmi	r1, r3
 8013b90:	0100      	lsls	r0, r0, #4
 8013b92:	79fb      	ldrb	r3, [r7, #7]
 8013b94:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013b98:	4303      	orrs	r3, r0
 8013b9a:	4413      	add	r3, r2
 8013b9c:	1a5b      	subs	r3, r3, r1
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	42a3      	cmp	r3, r4
 8013ba2:	bfc8      	it	gt
 8013ba4:	b21c      	sxthgt	r4, r3
 8013ba6:	4633      	mov	r3, r6
 8013ba8:	462a      	mov	r2, r5
 8013baa:	2100      	movs	r1, #0
 8013bac:	e7dc      	b.n	8013b68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8013bae:	b2a0      	uxth	r0, r4
 8013bb0:	b018      	add	sp, #96	; 0x60
 8013bb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013bb6:	b003      	add	sp, #12
 8013bb8:	4770      	bx	lr

08013bba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013bba:	b40e      	push	{r1, r2, r3}
 8013bbc:	b530      	push	{r4, r5, lr}
 8013bbe:	b098      	sub	sp, #96	; 0x60
 8013bc0:	ab1b      	add	r3, sp, #108	; 0x6c
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013bc8:	9301      	str	r3, [sp, #4]
 8013bca:	a802      	add	r0, sp, #8
 8013bcc:	f000 fd16 	bl	80145fc <_ZN8touchgfx12TextProviderC1Ev>
 8013bd0:	6823      	ldr	r3, [r4, #0]
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bd6:	4798      	blx	r3
 8013bd8:	9a01      	ldr	r2, [sp, #4]
 8013bda:	4603      	mov	r3, r0
 8013bdc:	4629      	mov	r1, r5
 8013bde:	a802      	add	r0, sp, #8
 8013be0:	f000 fd51 	bl	8014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8013be4:	a802      	add	r0, sp, #8
 8013be6:	f001 f939 	bl	8014e5c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013bea:	2401      	movs	r4, #1
 8013bec:	b2a3      	uxth	r3, r4
 8013bee:	b140      	cbz	r0, 8013c02 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8013bf0:	280a      	cmp	r0, #10
 8013bf2:	bf08      	it	eq
 8013bf4:	3301      	addeq	r3, #1
 8013bf6:	a802      	add	r0, sp, #8
 8013bf8:	bf08      	it	eq
 8013bfa:	b21c      	sxtheq	r4, r3
 8013bfc:	f001 f92e 	bl	8014e5c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013c00:	e7f4      	b.n	8013bec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8013c02:	4618      	mov	r0, r3
 8013c04:	b018      	add	sp, #96	; 0x60
 8013c06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c0a:	b003      	add	sp, #12
 8013c0c:	4770      	bx	lr

08013c0e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013c0e:	b40e      	push	{r1, r2, r3}
 8013c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c12:	b098      	sub	sp, #96	; 0x60
 8013c14:	ab1d      	add	r3, sp, #116	; 0x74
 8013c16:	4604      	mov	r4, r0
 8013c18:	f853 5b04 	ldr.w	r5, [r3], #4
 8013c1c:	9300      	str	r3, [sp, #0]
 8013c1e:	a802      	add	r0, sp, #8
 8013c20:	f000 fcec 	bl	80145fc <_ZN8touchgfx12TextProviderC1Ev>
 8013c24:	6823      	ldr	r3, [r4, #0]
 8013c26:	4620      	mov	r0, r4
 8013c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c2a:	4798      	blx	r3
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	4603      	mov	r3, r0
 8013c30:	9a00      	ldr	r2, [sp, #0]
 8013c32:	a802      	add	r0, sp, #8
 8013c34:	ad18      	add	r5, sp, #96	; 0x60
 8013c36:	f000 fd26 	bl	8014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8013c40:	4622      	mov	r2, r4
 8013c42:	462b      	mov	r3, r5
 8013c44:	a802      	add	r0, sp, #8
 8013c46:	f001 f817 	bl	8014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c4a:	26ff      	movs	r6, #255	; 0xff
 8013c4c:	b1d8      	cbz	r0, 8013c86 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013c4e:	280a      	cmp	r0, #10
 8013c50:	d012      	beq.n	8013c78 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8013c52:	9801      	ldr	r0, [sp, #4]
 8013c54:	b180      	cbz	r0, 8013c78 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8013c56:	7b47      	ldrb	r7, [r0, #13]
 8013c58:	7922      	ldrb	r2, [r4, #4]
 8013c5a:	00fb      	lsls	r3, r7, #3
 8013c5c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013c60:	7a03      	ldrb	r3, [r0, #8]
 8013c62:	430b      	orrs	r3, r1
 8013c64:	0679      	lsls	r1, r7, #25
 8013c66:	bf44      	itt	mi
 8013c68:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013c6c:	b21b      	sxthmi	r3, r3
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	429e      	cmp	r6, r3
 8013c74:	bf28      	it	cs
 8013c76:	461e      	movcs	r6, r3
 8013c78:	462b      	mov	r3, r5
 8013c7a:	4622      	mov	r2, r4
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	a802      	add	r0, sp, #8
 8013c80:	f000 fffa 	bl	8014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c84:	e7e2      	b.n	8013c4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8013c86:	4630      	mov	r0, r6
 8013c88:	b018      	add	sp, #96	; 0x60
 8013c8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013c8e:	b003      	add	sp, #12
 8013c90:	4770      	bx	lr

08013c92 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013c92:	b513      	push	{r0, r1, r4, lr}
 8013c94:	1d01      	adds	r1, r0, #4
 8013c96:	4603      	mov	r3, r0
 8013c98:	c903      	ldmia	r1, {r0, r1}
 8013c9a:	466a      	mov	r2, sp
 8013c9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	9100      	str	r1, [sp, #0]
 8013ca4:	6819      	ldr	r1, [r3, #0]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	690c      	ldr	r4, [r1, #16]
 8013caa:	4611      	mov	r1, r2
 8013cac:	47a0      	blx	r4
 8013cae:	b002      	add	sp, #8
 8013cb0:	bd10      	pop	{r4, pc}

08013cb2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013cb2:	b538      	push	{r3, r4, r5, lr}
 8013cb4:	680b      	ldr	r3, [r1, #0]
 8013cb6:	460c      	mov	r4, r1
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	4605      	mov	r5, r0
 8013cbc:	4798      	blx	r3
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc4:	4629      	mov	r1, r5
 8013cc6:	4798      	blx	r3
 8013cc8:	4628      	mov	r0, r5
 8013cca:	bd38      	pop	{r3, r4, r5, pc}

08013ccc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013ccc:	b410      	push	{r4}
 8013cce:	880a      	ldrh	r2, [r1, #0]
 8013cd0:	8884      	ldrh	r4, [r0, #4]
 8013cd2:	4422      	add	r2, r4
 8013cd4:	800a      	strh	r2, [r1, #0]
 8013cd6:	88c4      	ldrh	r4, [r0, #6]
 8013cd8:	884a      	ldrh	r2, [r1, #2]
 8013cda:	4422      	add	r2, r4
 8013cdc:	804a      	strh	r2, [r1, #2]
 8013cde:	6940      	ldr	r0, [r0, #20]
 8013ce0:	b120      	cbz	r0, 8013cec <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013ce2:	6803      	ldr	r3, [r0, #0]
 8013ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cea:	4718      	bx	r3
 8013cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cf0:	4770      	bx	lr

08013cf2 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	b085      	sub	sp, #20
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	b901      	cbnz	r1, 8013cfe <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013cfc:	b1fa      	cbz	r2, 8013d3e <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8013cfe:	1d27      	adds	r7, r4, #4
 8013d00:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013d04:	466e      	mov	r6, sp
 8013d06:	e886 0003 	stmia.w	r6, {r0, r1}
 8013d0a:	88e1      	ldrh	r1, [r4, #6]
 8013d0c:	440a      	add	r2, r1
 8013d0e:	88a1      	ldrh	r1, [r4, #4]
 8013d10:	4419      	add	r1, r3
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	b209      	sxth	r1, r1
 8013d16:	4620      	mov	r0, r4
 8013d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d1a:	b212      	sxth	r2, r2
 8013d1c:	4798      	blx	r3
 8013d1e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013d22:	ad02      	add	r5, sp, #8
 8013d24:	e885 0003 	stmia.w	r5, {r0, r1}
 8013d28:	6960      	ldr	r0, [r4, #20]
 8013d2a:	b150      	cbz	r0, 8013d42 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8013d2c:	6803      	ldr	r3, [r0, #0]
 8013d2e:	4631      	mov	r1, r6
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	4798      	blx	r3
 8013d34:	6960      	ldr	r0, [r4, #20]
 8013d36:	6803      	ldr	r3, [r0, #0]
 8013d38:	691b      	ldr	r3, [r3, #16]
 8013d3a:	4629      	mov	r1, r5
 8013d3c:	4798      	blx	r3
 8013d3e:	b005      	add	sp, #20
 8013d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d42:	f7ff fb9d 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 8013d46:	6803      	ldr	r3, [r0, #0]
 8013d48:	4631      	mov	r1, r6
 8013d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d4c:	4798      	blx	r3
 8013d4e:	f7ff fb97 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 8013d52:	6803      	ldr	r3, [r0, #0]
 8013d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d56:	e7f0      	b.n	8013d3a <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08013d58 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d5a:	8882      	ldrh	r2, [r0, #4]
 8013d5c:	880b      	ldrh	r3, [r1, #0]
 8013d5e:	4413      	add	r3, r2
 8013d60:	800b      	strh	r3, [r1, #0]
 8013d62:	88c2      	ldrh	r2, [r0, #6]
 8013d64:	884b      	ldrh	r3, [r1, #2]
 8013d66:	4413      	add	r3, r2
 8013d68:	4602      	mov	r2, r0
 8013d6a:	804b      	strh	r3, [r1, #2]
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013d72:	460c      	mov	r4, r1
 8013d74:	6851      	ldr	r1, [r2, #4]
 8013d76:	466b      	mov	r3, sp
 8013d78:	c303      	stmia	r3!, {r0, r1}
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	4668      	mov	r0, sp
 8013d7e:	f7fd f9ef 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8013d82:	466b      	mov	r3, sp
 8013d84:	cb03      	ldmia	r3!, {r0, r1}
 8013d86:	6020      	str	r0, [r4, #0]
 8013d88:	6061      	str	r1, [r4, #4]
 8013d8a:	6968      	ldr	r0, [r5, #20]
 8013d8c:	b128      	cbz	r0, 8013d9a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8013d8e:	6803      	ldr	r3, [r0, #0]
 8013d90:	691b      	ldr	r3, [r3, #16]
 8013d92:	4621      	mov	r1, r4
 8013d94:	4798      	blx	r3
 8013d96:	b003      	add	sp, #12
 8013d98:	bd30      	pop	{r4, r5, pc}
 8013d9a:	f7ff fb71 	bl	8013480 <_ZN8touchgfx11Application11getInstanceEv>
 8013d9e:	6803      	ldr	r3, [r0, #0]
 8013da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013da2:	e7f6      	b.n	8013d92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08013da4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013da4:	b570      	push	{r4, r5, r6, lr}
 8013da6:	8882      	ldrh	r2, [r0, #4]
 8013da8:	880b      	ldrh	r3, [r1, #0]
 8013daa:	4413      	add	r3, r2
 8013dac:	800b      	strh	r3, [r1, #0]
 8013dae:	88c2      	ldrh	r2, [r0, #6]
 8013db0:	884b      	ldrh	r3, [r1, #2]
 8013db2:	460c      	mov	r4, r1
 8013db4:	4413      	add	r3, r2
 8013db6:	804b      	strh	r3, [r1, #2]
 8013db8:	4605      	mov	r5, r0
 8013dba:	1d01      	adds	r1, r0, #4
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f7fd f9cf 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8013dc2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	dd0b      	ble.n	8013de2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013dca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	dd07      	ble.n	8013de2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013dd2:	6968      	ldr	r0, [r5, #20]
 8013dd4:	b128      	cbz	r0, 8013de2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013dd6:	6803      	ldr	r3, [r0, #0]
 8013dd8:	4621      	mov	r1, r4
 8013dda:	6a1b      	ldr	r3, [r3, #32]
 8013ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013de0:	4718      	bx	r3
 8013de2:	bd70      	pop	{r4, r5, r6, pc}

08013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013de4:	b510      	push	{r4, lr}
 8013de6:	4604      	mov	r4, r0
 8013de8:	4608      	mov	r0, r1
 8013dea:	2300      	movs	r3, #0
 8013dec:	8023      	strh	r3, [r4, #0]
 8013dee:	8063      	strh	r3, [r4, #2]
 8013df0:	6803      	ldr	r3, [r0, #0]
 8013df2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013df6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013dfa:	80a1      	strh	r1, [r4, #4]
 8013dfc:	80e2      	strh	r2, [r4, #6]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e00:	4621      	mov	r1, r4
 8013e02:	4798      	blx	r3
 8013e04:	4620      	mov	r0, r4
 8013e06:	bd10      	pop	{r4, pc}

08013e08 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8013e08:	b530      	push	{r4, r5, lr}
 8013e0a:	8083      	strh	r3, [r0, #4]
 8013e0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013e10:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8013e14:	7183      	strb	r3, [r0, #6]
 8013e16:	79c3      	ldrb	r3, [r0, #7]
 8013e18:	6101      	str	r1, [r0, #16]
 8013e1a:	f365 0306 	bfi	r3, r5, #0, #7
 8013e1e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8013e22:	8282      	strh	r2, [r0, #20]
 8013e24:	f365 13c7 	bfi	r3, r5, #7, #1
 8013e28:	71c3      	strb	r3, [r0, #7]
 8013e2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013e2e:	7203      	strb	r3, [r0, #8]
 8013e30:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8013e34:	7243      	strb	r3, [r0, #9]
 8013e36:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013e3a:	8143      	strh	r3, [r0, #10]
 8013e3c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013e40:	8183      	strh	r3, [r0, #12]
 8013e42:	4b01      	ldr	r3, [pc, #4]	; (8013e48 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8013e44:	6003      	str	r3, [r0, #0]
 8013e46:	bd30      	pop	{r4, r5, pc}
 8013e48:	08020abc 	.word	0x08020abc

08013e4c <_ZNK8touchgfx9ConstFont4findEt>:
 8013e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e4e:	6904      	ldr	r4, [r0, #16]
 8013e50:	8a82      	ldrh	r2, [r0, #20]
 8013e52:	88a3      	ldrh	r3, [r4, #4]
 8013e54:	1acb      	subs	r3, r1, r3
 8013e56:	f102 32ff 	add.w	r2, r2, #4294967295
 8013e5a:	d431      	bmi.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	dd0c      	ble.n	8013e7a <_ZNK8touchgfx9ConstFont4findEt+0x2e>
 8013e60:	230e      	movs	r3, #14
 8013e62:	fb03 4302 	mla	r3, r3, r2, r4
 8013e66:	889b      	ldrh	r3, [r3, #4]
 8013e68:	1a5b      	subs	r3, r3, r1
 8013e6a:	1ad3      	subs	r3, r2, r3
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	db27      	blt.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	bfbc      	itt	lt
 8013e74:	2302      	movlt	r3, #2
 8013e76:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013e7a:	2500      	movs	r5, #0
 8013e7c:	260e      	movs	r6, #14
 8013e7e:	4295      	cmp	r5, r2
 8013e80:	dc1e      	bgt.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013e82:	fb06 4003 	mla	r0, r6, r3, r4
 8013e86:	8887      	ldrh	r7, [r0, #4]
 8013e88:	428f      	cmp	r7, r1
 8013e8a:	d01a      	beq.n	8013ec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e8c:	d90d      	bls.n	8013eaa <_ZNK8touchgfx9ConstFont4findEt+0x5e>
 8013e8e:	1e5a      	subs	r2, r3, #1
 8013e90:	4295      	cmp	r5, r2
 8013e92:	dc15      	bgt.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013e94:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013e98:	1a5b      	subs	r3, r3, r1
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	db0f      	blt.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013ea0:	429d      	cmp	r5, r3
 8013ea2:	ddec      	ble.n	8013e7e <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8013ea4:	1953      	adds	r3, r2, r5
 8013ea6:	105b      	asrs	r3, r3, #1
 8013ea8:	e7e9      	b.n	8013e7e <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8013eaa:	1c5d      	adds	r5, r3, #1
 8013eac:	42aa      	cmp	r2, r5
 8013eae:	db07      	blt.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013eb0:	8a43      	ldrh	r3, [r0, #18]
 8013eb2:	1acb      	subs	r3, r1, r3
 8013eb4:	442b      	add	r3, r5
 8013eb6:	429d      	cmp	r5, r3
 8013eb8:	dc02      	bgt.n	8013ec0 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	dadf      	bge.n	8013e7e <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8013ebe:	e7f1      	b.n	8013ea4 <_ZNK8touchgfx9ConstFont4findEt+0x58>
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ec4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	4617      	mov	r7, r2
 8013eca:	461e      	mov	r6, r3
 8013ecc:	b911      	cbnz	r1, 8013ed4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013ece:	2500      	movs	r5, #0
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ed4:	290a      	cmp	r1, #10
 8013ed6:	d0fa      	beq.n	8013ece <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013ed8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8013edc:	4291      	cmp	r1, r2
 8013ede:	d0f6      	beq.n	8013ece <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013ee0:	f242 020b 	movw	r2, #8203	; 0x200b
 8013ee4:	4291      	cmp	r1, r2
 8013ee6:	d0f2      	beq.n	8013ece <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013ee8:	f7ff ffb0 	bl	8013e4c <_ZNK8touchgfx9ConstFont4findEt>
 8013eec:	4605      	mov	r5, r0
 8013eee:	b950      	cbnz	r0, 8013f06 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	691b      	ldr	r3, [r3, #16]
 8013ef6:	4798      	blx	r3
 8013ef8:	4601      	mov	r1, r0
 8013efa:	4620      	mov	r0, r4
 8013efc:	f7ff ffa6 	bl	8013e4c <_ZNK8touchgfx9ConstFont4findEt>
 8013f00:	4605      	mov	r5, r0
 8013f02:	2800      	cmp	r0, #0
 8013f04:	d0e3      	beq.n	8013ece <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013f06:	6823      	ldr	r3, [r4, #0]
 8013f08:	4629      	mov	r1, r5
 8013f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	4798      	blx	r3
 8013f10:	6038      	str	r0, [r7, #0]
 8013f12:	6823      	ldr	r3, [r4, #0]
 8013f14:	4620      	mov	r0, r4
 8013f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f18:	4798      	blx	r3
 8013f1a:	7030      	strb	r0, [r6, #0]
 8013f1c:	e7d8      	b.n	8013ed0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013f1e <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8013f1e:	2000      	movs	r0, #0
 8013f20:	4770      	bx	lr

08013f22 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8013f22:	2001      	movs	r0, #1
 8013f24:	4770      	bx	lr

08013f26 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8013f26:	2002      	movs	r0, #2
 8013f28:	4770      	bx	lr

08013f2a <_ZN8touchgfx12GestureEventD1Ev>:
 8013f2a:	4770      	bx	lr

08013f2c <_ZN8touchgfx9DragEventD1Ev>:
 8013f2c:	4770      	bx	lr

08013f2e <_ZN8touchgfx10ClickEventD1Ev>:
 8013f2e:	4770      	bx	lr

08013f30 <_ZN8touchgfx10ClickEventD0Ev>:
 8013f30:	b510      	push	{r4, lr}
 8013f32:	210c      	movs	r1, #12
 8013f34:	4604      	mov	r4, r0
 8013f36:	f009 fbcf 	bl	801d6d8 <_ZdlPvj>
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	bd10      	pop	{r4, pc}

08013f3e <_ZN8touchgfx9DragEventD0Ev>:
 8013f3e:	b510      	push	{r4, lr}
 8013f40:	2110      	movs	r1, #16
 8013f42:	4604      	mov	r4, r0
 8013f44:	f009 fbc8 	bl	801d6d8 <_ZdlPvj>
 8013f48:	4620      	mov	r0, r4
 8013f4a:	bd10      	pop	{r4, pc}

08013f4c <_ZN8touchgfx12GestureEventD0Ev>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	210c      	movs	r1, #12
 8013f50:	4604      	mov	r4, r0
 8013f52:	f009 fbc1 	bl	801d6d8 <_ZdlPvj>
 8013f56:	4620      	mov	r0, r4
 8013f58:	bd10      	pop	{r4, pc}
	...

08013f5c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013f5c:	b530      	push	{r4, r5, lr}
 8013f5e:	460d      	mov	r5, r1
 8013f60:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013f62:	b087      	sub	sp, #28
 8013f64:	4604      	mov	r4, r0
 8013f66:	b301      	cbz	r1, 8013faa <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013f68:	a801      	add	r0, sp, #4
 8013f6a:	f7ff ff3b 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f6e:	892a      	ldrh	r2, [r5, #8]
 8013f70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013f74:	7928      	ldrb	r0, [r5, #4]
 8013f76:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f7a:	f88d 0010 	strb.w	r0, [sp, #16]
 8013f7e:	1ad2      	subs	r2, r2, r3
 8013f80:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013f82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013f84:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013f88:	441a      	add	r2, r3
 8013f8a:	896b      	ldrh	r3, [r5, #10]
 8013f8c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013f90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013f94:	1b5b      	subs	r3, r3, r5
 8013f96:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8013f98:	442b      	add	r3, r5
 8013f9a:	4d05      	ldr	r5, [pc, #20]	; (8013fb0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013f9c:	9503      	str	r5, [sp, #12]
 8013f9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013fa2:	6803      	ldr	r3, [r0, #0]
 8013fa4:	a903      	add	r1, sp, #12
 8013fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fa8:	4798      	blx	r3
 8013faa:	b007      	add	sp, #28
 8013fac:	bd30      	pop	{r4, r5, pc}
 8013fae:	bf00      	nop
 8013fb0:	08020b38 	.word	0x08020b38

08013fb4 <_ZNK8touchgfx4Rect9intersectEss>:
 8013fb4:	b510      	push	{r4, lr}
 8013fb6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013fba:	428b      	cmp	r3, r1
 8013fbc:	dc10      	bgt.n	8013fe0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013fbe:	8884      	ldrh	r4, [r0, #4]
 8013fc0:	4423      	add	r3, r4
 8013fc2:	b21b      	sxth	r3, r3
 8013fc4:	4299      	cmp	r1, r3
 8013fc6:	da0b      	bge.n	8013fe0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013fc8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	dc07      	bgt.n	8013fe0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013fd0:	88c0      	ldrh	r0, [r0, #6]
 8013fd2:	4418      	add	r0, r3
 8013fd4:	b200      	sxth	r0, r0
 8013fd6:	4282      	cmp	r2, r0
 8013fd8:	bfac      	ite	ge
 8013fda:	2000      	movge	r0, #0
 8013fdc:	2001      	movlt	r0, #1
 8013fde:	bd10      	pop	{r4, pc}
 8013fe0:	2000      	movs	r0, #0
 8013fe2:	e7fc      	b.n	8013fde <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08013fe4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fe6:	460c      	mov	r4, r1
 8013fe8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013fea:	b089      	sub	sp, #36	; 0x24
 8013fec:	4605      	mov	r5, r0
 8013fee:	2900      	cmp	r1, #0
 8013ff0:	d054      	beq.n	801409c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8013ff2:	4668      	mov	r0, sp
 8013ff4:	f7ff fef6 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ff8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8013ffa:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8013ffc:	8922      	ldrh	r2, [r4, #8]
 8013ffe:	88e1      	ldrh	r1, [r4, #6]
 8014000:	443a      	add	r2, r7
 8014002:	4431      	add	r1, r6
 8014004:	b212      	sxth	r2, r2
 8014006:	b209      	sxth	r1, r1
 8014008:	4668      	mov	r0, sp
 801400a:	f7ff ffd3 	bl	8013fb4 <_ZNK8touchgfx4Rect9intersectEss>
 801400e:	b1d0      	cbz	r0, 8014046 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8014010:	89a2      	ldrh	r2, [r4, #12]
 8014012:	8961      	ldrh	r1, [r4, #10]
 8014014:	443a      	add	r2, r7
 8014016:	4431      	add	r1, r6
 8014018:	b212      	sxth	r2, r2
 801401a:	b209      	sxth	r1, r1
 801401c:	4668      	mov	r0, sp
 801401e:	f7ff ffc9 	bl	8013fb4 <_ZNK8touchgfx4Rect9intersectEss>
 8014022:	4603      	mov	r3, r0
 8014024:	b978      	cbnz	r0, 8014046 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8014026:	4a1e      	ldr	r2, [pc, #120]	; (80140a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8014028:	9204      	str	r2, [sp, #16]
 801402a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801402c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014030:	2202      	movs	r2, #2
 8014032:	f88d 2014 	strb.w	r2, [sp, #20]
 8014036:	f8ad 3018 	strh.w	r3, [sp, #24]
 801403a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801403e:	6803      	ldr	r3, [r0, #0]
 8014040:	a904      	add	r1, sp, #16
 8014042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014044:	4798      	blx	r3
 8014046:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8014048:	a802      	add	r0, sp, #8
 801404a:	f7ff fecb 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801404e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014052:	88e0      	ldrh	r0, [r4, #6]
 8014054:	8961      	ldrh	r1, [r4, #10]
 8014056:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801405a:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801405e:	8923      	ldrh	r3, [r4, #8]
 8014060:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8014062:	7927      	ldrb	r7, [r4, #4]
 8014064:	f88d 7014 	strb.w	r7, [sp, #20]
 8014068:	1a80      	subs	r0, r0, r2
 801406a:	1a89      	subs	r1, r1, r2
 801406c:	89a2      	ldrh	r2, [r4, #12]
 801406e:	4c0d      	ldr	r4, [pc, #52]	; (80140a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8014070:	9404      	str	r4, [sp, #16]
 8014072:	4460      	add	r0, ip
 8014074:	eba3 030e 	sub.w	r3, r3, lr
 8014078:	eba2 020e 	sub.w	r2, r2, lr
 801407c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014080:	4433      	add	r3, r6
 8014082:	4461      	add	r1, ip
 8014084:	4432      	add	r2, r6
 8014086:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014088:	f8ad 101a 	strh.w	r1, [sp, #26]
 801408c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014090:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014094:	6803      	ldr	r3, [r0, #0]
 8014096:	a904      	add	r1, sp, #16
 8014098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801409a:	4798      	blx	r3
 801409c:	b009      	add	sp, #36	; 0x24
 801409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140a0:	08020b10 	.word	0x08020b10
 80140a4:	08020b24 	.word	0x08020b24

080140a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80140a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ac:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80140b0:	790b      	ldrb	r3, [r1, #4]
 80140b2:	b0a1      	sub	sp, #132	; 0x84
 80140b4:	4604      	mov	r4, r0
 80140b6:	460d      	mov	r5, r1
 80140b8:	f1b9 0f00 	cmp.w	r9, #0
 80140bc:	d00f      	beq.n	80140de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80140be:	2b00      	cmp	r3, #0
 80140c0:	f040 80a0 	bne.w	8014204 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 80140c4:	b021      	add	sp, #132	; 0x84
 80140c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ca:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80140ce:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80140d2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80140d6:	1d20      	adds	r0, r4, #4
 80140d8:	f7fc ff90 	bl	8010ffc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80140dc:	e092      	b.n	8014204 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d1f0      	bne.n	80140c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80140e2:	4b5e      	ldr	r3, [pc, #376]	; (801425c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 80140ea:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80140ee:	f1ba 0f03 	cmp.w	sl, #3
 80140f2:	ddea      	ble.n	80140ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 80140f4:	f1ba 0f0c 	cmp.w	sl, #12
 80140f8:	f04f 0303 	mov.w	r3, #3
 80140fc:	bfdc      	itt	le
 80140fe:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8014102:	fb92 f3f3 	sdivle	r3, r2, r3
 8014106:	9301      	str	r3, [sp, #4]
 8014108:	4b55      	ldr	r3, [pc, #340]	; (8014260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801410a:	4956      	ldr	r1, [pc, #344]	; (8014264 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801410c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014110:	4b55      	ldr	r3, [pc, #340]	; (8014268 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8014112:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8014116:	f9b3 3000 	ldrsh.w	r3, [r3]
 801411a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801411e:	ab0e      	add	r3, sp, #56	; 0x38
 8014120:	2248      	movs	r2, #72	; 0x48
 8014122:	2600      	movs	r6, #0
 8014124:	4618      	mov	r0, r3
 8014126:	960a      	str	r6, [sp, #40]	; 0x28
 8014128:	f009 fb8f 	bl	801d84a <memcpy>
 801412c:	f04f 32ff 	mov.w	r2, #4294967295
 8014130:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8014134:	f8cd a008 	str.w	sl, [sp, #8]
 8014138:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801413c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014140:	b29b      	uxth	r3, r3
 8014142:	46b3      	mov	fp, r6
 8014144:	9303      	str	r3, [sp, #12]
 8014146:	2300      	movs	r3, #0
 8014148:	9309      	str	r3, [sp, #36]	; 0x24
 801414a:	9b07      	ldr	r3, [sp, #28]
 801414c:	9a03      	ldr	r2, [sp, #12]
 801414e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8014152:	88ef      	ldrh	r7, [r5, #6]
 8014154:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8014158:	fb13 f302 	smulbb	r3, r3, r2
 801415c:	b29b      	uxth	r3, r3
 801415e:	9304      	str	r3, [sp, #16]
 8014160:	9b07      	ldr	r3, [sp, #28]
 8014162:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014166:	a80a      	add	r0, sp, #40	; 0x28
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	fb13 f302 	smulbb	r3, r3, r2
 801416e:	b29b      	uxth	r3, r3
 8014170:	9305      	str	r3, [sp, #20]
 8014172:	9b04      	ldr	r3, [sp, #16]
 8014174:	441f      	add	r7, r3
 8014176:	9b05      	ldr	r3, [sp, #20]
 8014178:	4498      	add	r8, r3
 801417a:	b23f      	sxth	r7, r7
 801417c:	fa0f f888 	sxth.w	r8, r8
 8014180:	4642      	mov	r2, r8
 8014182:	4639      	mov	r1, r7
 8014184:	f7ff ff16 	bl	8013fb4 <_ZNK8touchgfx4Rect9intersectEss>
 8014188:	b380      	cbz	r0, 80141ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801418a:	4639      	mov	r1, r7
 801418c:	ab09      	add	r3, sp, #36	; 0x24
 801418e:	4642      	mov	r2, r8
 8014190:	1d20      	adds	r0, r4, #4
 8014192:	f7fc ff33 	bl	8010ffc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014198:	b341      	cbz	r1, 80141ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801419a:	4549      	cmp	r1, r9
 801419c:	d026      	beq.n	80141ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801419e:	a80c      	add	r0, sp, #48	; 0x30
 80141a0:	f7ff fe20 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80141a4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80141a8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80141ac:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80141b0:	2002      	movs	r0, #2
 80141b2:	fb92 f2f0 	sdiv	r2, r2, r0
 80141b6:	440a      	add	r2, r1
 80141b8:	1a99      	subs	r1, r3, r2
 80141ba:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80141be:	fb93 f3f0 	sdiv	r3, r3, r0
 80141c2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80141c6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80141ca:	4403      	add	r3, r0
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	435b      	muls	r3, r3
 80141d0:	9a06      	ldr	r2, [sp, #24]
 80141d2:	fb01 3301 	mla	r3, r1, r1, r3
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d208      	bcs.n	80141ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80141da:	9a04      	ldr	r2, [sp, #16]
 80141dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80141e0:	86a2      	strh	r2, [r4, #52]	; 0x34
 80141e2:	9a05      	ldr	r2, [sp, #20]
 80141e4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 80141e8:	86e2      	strh	r2, [r4, #54]	; 0x36
 80141ea:	9306      	str	r3, [sp, #24]
 80141ec:	f10b 0b02 	add.w	fp, fp, #2
 80141f0:	f1bb 0f08 	cmp.w	fp, #8
 80141f4:	dda7      	ble.n	8014146 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80141f6:	9b02      	ldr	r3, [sp, #8]
 80141f8:	4453      	add	r3, sl
 80141fa:	9302      	str	r3, [sp, #8]
 80141fc:	9b01      	ldr	r3, [sp, #4]
 80141fe:	3601      	adds	r6, #1
 8014200:	42b3      	cmp	r3, r6
 8014202:	d199      	bne.n	8014138 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8014204:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014206:	2900      	cmp	r1, #0
 8014208:	f43f af5c 	beq.w	80140c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801420c:	a80c      	add	r0, sp, #48	; 0x30
 801420e:	f7ff fde9 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014212:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8014216:	88ea      	ldrh	r2, [r5, #6]
 8014218:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801421c:	7929      	ldrb	r1, [r5, #4]
 801421e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8014222:	1ad2      	subs	r2, r2, r3
 8014224:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014226:	441a      	add	r2, r3
 8014228:	892b      	ldrh	r3, [r5, #8]
 801422a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801422e:	1a1b      	subs	r3, r3, r0
 8014230:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8014232:	4403      	add	r3, r0
 8014234:	480d      	ldr	r0, [pc, #52]	; (801426c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8014236:	900e      	str	r0, [sp, #56]	; 0x38
 8014238:	2600      	movs	r6, #0
 801423a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801423c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8014240:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8014244:	6803      	ldr	r3, [r0, #0]
 8014246:	a90e      	add	r1, sp, #56	; 0x38
 8014248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801424a:	4798      	blx	r3
 801424c:	792b      	ldrb	r3, [r5, #4]
 801424e:	2b00      	cmp	r3, #0
 8014250:	f43f af38 	beq.w	80140c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8014254:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8014258:	e734      	b.n	80140c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801425a:	bf00      	nop
 801425c:	200084ec 	.word	0x200084ec
 8014260:	200084e0 	.word	0x200084e0
 8014264:	0801ede0 	.word	0x0801ede0
 8014268:	200084e2 	.word	0x200084e2
 801426c:	08020b10 	.word	0x08020b10

08014270 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014272:	4604      	mov	r4, r0
 8014274:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014278:	3201      	adds	r2, #1
 801427a:	d112      	bne.n	80142a2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801427c:	6803      	ldr	r3, [r0, #0]
 801427e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014282:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014286:	f8ad 1004 	strh.w	r1, [sp, #4]
 801428a:	2500      	movs	r5, #0
 801428c:	9500      	str	r5, [sp, #0]
 801428e:	466d      	mov	r5, sp
 8014290:	4629      	mov	r1, r5
 8014292:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014296:	6a1b      	ldr	r3, [r3, #32]
 8014298:	4798      	blx	r3
 801429a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801429e:	e884 0003 	stmia.w	r4, {r0, r1}
 80142a2:	4620      	mov	r0, r4
 80142a4:	b003      	add	sp, #12
 80142a6:	bd30      	pop	{r4, r5, pc}

080142a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80142a8:	b513      	push	{r0, r1, r4, lr}
 80142aa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80142ae:	3301      	adds	r3, #1
 80142b0:	4604      	mov	r4, r0
 80142b2:	d109      	bne.n	80142c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80142b4:	4601      	mov	r1, r0
 80142b6:	4668      	mov	r0, sp
 80142b8:	f7ff fd94 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80142bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80142c0:	8423      	strh	r3, [r4, #32]
 80142c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80142c6:	8463      	strh	r3, [r4, #34]	; 0x22
 80142c8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80142cc:	b002      	add	sp, #8
 80142ce:	bd10      	pop	{r4, pc}

080142d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80142d0:	b513      	push	{r0, r1, r4, lr}
 80142d2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80142d6:	3301      	adds	r3, #1
 80142d8:	4604      	mov	r4, r0
 80142da:	d109      	bne.n	80142f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80142dc:	4601      	mov	r1, r0
 80142de:	4668      	mov	r0, sp
 80142e0:	f7ff fd80 	bl	8013de4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80142e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80142e8:	8423      	strh	r3, [r4, #32]
 80142ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80142ee:	8463      	strh	r3, [r4, #34]	; 0x22
 80142f0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80142f4:	b002      	add	sp, #8
 80142f6:	bd10      	pop	{r4, pc}

080142f8 <_ZN8touchgfx6ScreenC1Ev>:
 80142f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142fa:	4605      	mov	r5, r0
 80142fc:	4b17      	ldr	r3, [pc, #92]	; (801435c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80142fe:	f845 3b04 	str.w	r3, [r5], #4
 8014302:	2301      	movs	r3, #1
 8014304:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8014308:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801430c:	4b14      	ldr	r3, [pc, #80]	; (8014360 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801430e:	4915      	ldr	r1, [pc, #84]	; (8014364 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014310:	f9b3 7000 	ldrsh.w	r7, [r3]
 8014314:	4b14      	ldr	r3, [pc, #80]	; (8014368 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8014316:	6041      	str	r1, [r0, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	8102      	strh	r2, [r0, #8]
 801431c:	8142      	strh	r2, [r0, #10]
 801431e:	8182      	strh	r2, [r0, #12]
 8014320:	81c2      	strh	r2, [r0, #14]
 8014322:	8202      	strh	r2, [r0, #16]
 8014324:	8242      	strh	r2, [r0, #18]
 8014326:	8282      	strh	r2, [r0, #20]
 8014328:	82c2      	strh	r2, [r0, #22]
 801432a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801432e:	6202      	str	r2, [r0, #32]
 8014330:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8014334:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8014338:	6342      	str	r2, [r0, #52]	; 0x34
 801433a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801433e:	4611      	mov	r1, r2
 8014340:	4604      	mov	r4, r0
 8014342:	4628      	mov	r0, r5
 8014344:	f7f9 fbbb 	bl	800dabe <_ZN8touchgfx8Drawable5setXYEss>
 8014348:	4639      	mov	r1, r7
 801434a:	4628      	mov	r0, r5
 801434c:	f7f9 fbd5 	bl	800dafa <_ZN8touchgfx8Drawable8setWidthEs>
 8014350:	4628      	mov	r0, r5
 8014352:	4631      	mov	r1, r6
 8014354:	f7f9 fbe0 	bl	800db18 <_ZN8touchgfx8Drawable9setHeightEs>
 8014358:	4620      	mov	r0, r4
 801435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801435c:	08020b4c 	.word	0x08020b4c
 8014360:	200084e0 	.word	0x200084e0
 8014364:	0801fcd4 	.word	0x0801fcd4
 8014368:	200084e2 	.word	0x200084e2

0801436c <_ZN8touchgfx6Screen4drawEv>:
 801436c:	b507      	push	{r0, r1, r2, lr}
 801436e:	4b09      	ldr	r3, [pc, #36]	; (8014394 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014370:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014374:	4b08      	ldr	r3, [pc, #32]	; (8014398 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014376:	f8ad 2004 	strh.w	r2, [sp, #4]
 801437a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801437e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014382:	6803      	ldr	r3, [r0, #0]
 8014384:	2100      	movs	r1, #0
 8014386:	9100      	str	r1, [sp, #0]
 8014388:	689b      	ldr	r3, [r3, #8]
 801438a:	4669      	mov	r1, sp
 801438c:	4798      	blx	r3
 801438e:	b003      	add	sp, #12
 8014390:	f85d fb04 	ldr.w	pc, [sp], #4
 8014394:	200084e0 	.word	0x200084e0
 8014398:	200084e2 	.word	0x200084e2

0801439c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	b089      	sub	sp, #36	; 0x24
 80143a8:	4680      	mov	r8, r0
 80143aa:	460c      	mov	r4, r1
 80143ac:	4615      	mov	r5, r2
 80143ae:	dd0e      	ble.n	80143ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80143b0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	dd0a      	ble.n	80143ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80143b8:	4628      	mov	r0, r5
 80143ba:	f7ff ff59 	bl	8014270 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80143be:	4621      	mov	r1, r4
 80143c0:	f7fe ffd4 	bl	801336c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80143c4:	69eb      	ldr	r3, [r5, #28]
 80143c6:	b928      	cbnz	r0, 80143d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80143c8:	461d      	mov	r5, r3
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d1f4      	bne.n	80143b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80143ce:	b009      	add	sp, #36	; 0x24
 80143d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143d4:	ae04      	add	r6, sp, #16
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d051      	beq.n	801447e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80143da:	682b      	ldr	r3, [r5, #0]
 80143dc:	4629      	mov	r1, r5
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	a802      	add	r0, sp, #8
 80143e2:	4798      	blx	r3
 80143e4:	4628      	mov	r0, r5
 80143e6:	f7ff ff5f 	bl	80142a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80143ea:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80143ee:	4407      	add	r7, r0
 80143f0:	4628      	mov	r0, r5
 80143f2:	f7ff ff6d 	bl	80142d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80143f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80143fa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80143fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014402:	4418      	add	r0, r3
 8014404:	4621      	mov	r1, r4
 8014406:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801440a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801440e:	b23f      	sxth	r7, r7
 8014410:	4630      	mov	r0, r6
 8014412:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014416:	f8ad 7010 	strh.w	r7, [sp, #16]
 801441a:	f7fc fea1 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 801441e:	4628      	mov	r0, r5
 8014420:	f7ff ff26 	bl	8014270 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014424:	4602      	mov	r2, r0
 8014426:	e896 0003 	ldmia.w	r6, {r0, r1}
 801442a:	ab06      	add	r3, sp, #24
 801442c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014430:	4611      	mov	r1, r2
 8014432:	4618      	mov	r0, r3
 8014434:	f7fc fe94 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8014438:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801443c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014440:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014444:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014448:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801444c:	4299      	cmp	r1, r3
 801444e:	d10b      	bne.n	8014468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8014450:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014454:	4552      	cmp	r2, sl
 8014456:	d107      	bne.n	8014468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8014458:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801445c:	455a      	cmp	r2, fp
 801445e:	d103      	bne.n	8014468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8014460:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014464:	454a      	cmp	r2, r9
 8014466:	d00a      	beq.n	801447e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 8014468:	f1bb 0f00 	cmp.w	fp, #0
 801446c:	d002      	beq.n	8014474 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801446e:	f1b9 0f00 	cmp.w	r9, #0
 8014472:	d12e      	bne.n	80144d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 8014474:	69ea      	ldr	r2, [r5, #28]
 8014476:	4621      	mov	r1, r4
 8014478:	4640      	mov	r0, r8
 801447a:	f7ff ff8f 	bl	801439c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801447e:	4628      	mov	r0, r5
 8014480:	f7ff fef6 	bl	8014270 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014484:	6861      	ldr	r1, [r4, #4]
 8014486:	4602      	mov	r2, r0
 8014488:	6820      	ldr	r0, [r4, #0]
 801448a:	4633      	mov	r3, r6
 801448c:	c303      	stmia	r3!, {r0, r1}
 801448e:	4611      	mov	r1, r2
 8014490:	4630      	mov	r0, r6
 8014492:	f7fc fe65 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8014496:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801449a:	2b00      	cmp	r3, #0
 801449c:	dd97      	ble.n	80143ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801449e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	dd93      	ble.n	80143ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80144a6:	4628      	mov	r0, r5
 80144a8:	f7ff fefe 	bl	80142a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80144ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80144b0:	1a18      	subs	r0, r3, r0
 80144b2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80144b6:	4628      	mov	r0, r5
 80144b8:	f7ff ff0a 	bl	80142d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80144bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80144c0:	1a18      	subs	r0, r3, r0
 80144c2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80144c6:	682b      	ldr	r3, [r5, #0]
 80144c8:	4631      	mov	r1, r6
 80144ca:	689b      	ldr	r3, [r3, #8]
 80144cc:	4628      	mov	r0, r5
 80144ce:	4798      	blx	r3
 80144d0:	e77d      	b.n	80143ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80144d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80144d6:	fa1f f08a 	uxth.w	r0, sl
 80144da:	4552      	cmp	r2, sl
 80144dc:	9000      	str	r0, [sp, #0]
 80144de:	da12      	bge.n	8014506 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 80144e0:	9301      	str	r3, [sp, #4]
 80144e2:	9b00      	ldr	r3, [sp, #0]
 80144e4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80144e8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80144ec:	1a9a      	subs	r2, r3, r2
 80144ee:	f8ad 1010 	strh.w	r1, [sp, #16]
 80144f2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80144f6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80144fa:	69ea      	ldr	r2, [r5, #28]
 80144fc:	4631      	mov	r1, r6
 80144fe:	4640      	mov	r0, r8
 8014500:	f7ff ff4c 	bl	801439c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014504:	9b01      	ldr	r3, [sp, #4]
 8014506:	f9b4 2000 	ldrsh.w	r2, [r4]
 801450a:	429a      	cmp	r2, r3
 801450c:	b29f      	uxth	r7, r3
 801450e:	da0d      	bge.n	801452c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 8014510:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014514:	1aba      	subs	r2, r7, r2
 8014516:	f8ad a012 	strh.w	sl, [sp, #18]
 801451a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801451e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014522:	69ea      	ldr	r2, [r5, #28]
 8014524:	4631      	mov	r1, r6
 8014526:	4640      	mov	r0, r8
 8014528:	f7ff ff38 	bl	801439c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801452c:	8822      	ldrh	r2, [r4, #0]
 801452e:	88a3      	ldrh	r3, [r4, #4]
 8014530:	445f      	add	r7, fp
 8014532:	4413      	add	r3, r2
 8014534:	b29b      	uxth	r3, r3
 8014536:	b2bf      	uxth	r7, r7
 8014538:	b23a      	sxth	r2, r7
 801453a:	b219      	sxth	r1, r3
 801453c:	4291      	cmp	r1, r2
 801453e:	dd0d      	ble.n	801455c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 8014540:	1bdb      	subs	r3, r3, r7
 8014542:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014546:	f8ad a012 	strh.w	sl, [sp, #18]
 801454a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801454e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014552:	69ea      	ldr	r2, [r5, #28]
 8014554:	4631      	mov	r1, r6
 8014556:	4640      	mov	r0, r8
 8014558:	f7ff ff20 	bl	801439c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801455c:	88e2      	ldrh	r2, [r4, #6]
 801455e:	8863      	ldrh	r3, [r4, #2]
 8014560:	4413      	add	r3, r2
 8014562:	9a00      	ldr	r2, [sp, #0]
 8014564:	444a      	add	r2, r9
 8014566:	b29b      	uxth	r3, r3
 8014568:	fa1f f982 	uxth.w	r9, r2
 801456c:	fa0f f289 	sxth.w	r2, r9
 8014570:	b219      	sxth	r1, r3
 8014572:	428a      	cmp	r2, r1
 8014574:	da83      	bge.n	801447e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 8014576:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801457a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801457e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014582:	eba3 0309 	sub.w	r3, r3, r9
 8014586:	f8ad 0010 	strh.w	r0, [sp, #16]
 801458a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801458e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014592:	69ea      	ldr	r2, [r5, #28]
 8014594:	4631      	mov	r1, r6
 8014596:	e76f      	b.n	8014478 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

08014598 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801459a:	aa02      	add	r2, sp, #8
 801459c:	2300      	movs	r3, #0
 801459e:	f842 3d04 	str.w	r3, [r2, #-4]!
 80145a2:	4604      	mov	r4, r0
 80145a4:	3004      	adds	r0, #4
 80145a6:	460d      	mov	r5, r1
 80145a8:	f7fc feb2 	bl	8011310 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80145ac:	9a01      	ldr	r2, [sp, #4]
 80145ae:	b11a      	cbz	r2, 80145b8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80145b0:	4629      	mov	r1, r5
 80145b2:	4620      	mov	r0, r4
 80145b4:	f7ff fef2 	bl	801439c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80145b8:	b003      	add	sp, #12
 80145ba:	bd30      	pop	{r4, r5, pc}

080145bc <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80145bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145be:	4602      	mov	r2, r0
 80145c0:	4604      	mov	r4, r0
 80145c2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80145c6:	460d      	mov	r5, r1
 80145c8:	6851      	ldr	r1, [r2, #4]
 80145ca:	466b      	mov	r3, sp
 80145cc:	c303      	stmia	r3!, {r0, r1}
 80145ce:	4629      	mov	r1, r5
 80145d0:	4668      	mov	r0, sp
 80145d2:	f7fc fdc5 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 80145d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80145da:	4669      	mov	r1, sp
 80145dc:	b123      	cbz	r3, 80145e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 80145de:	4620      	mov	r0, r4
 80145e0:	f7ff ffda 	bl	8014598 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80145e4:	b003      	add	sp, #12
 80145e6:	bd30      	pop	{r4, r5, pc}
 80145e8:	1d20      	adds	r0, r4, #4
 80145ea:	f7fc fe58 	bl	801129e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80145ee:	e7f9      	b.n	80145e4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080145f0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80145f0:	680a      	ldr	r2, [r1, #0]
 80145f2:	460b      	mov	r3, r1
 80145f4:	6952      	ldr	r2, [r2, #20]
 80145f6:	1d01      	adds	r1, r0, #4
 80145f8:	4618      	mov	r0, r3
 80145fa:	4710      	bx	r2

080145fc <_ZN8touchgfx12TextProviderC1Ev>:
 80145fc:	b510      	push	{r4, lr}
 80145fe:	2300      	movs	r3, #0
 8014600:	2201      	movs	r2, #1
 8014602:	4604      	mov	r4, r0
 8014604:	e9c0 3300 	strd	r3, r3, [r0]
 8014608:	60c3      	str	r3, [r0, #12]
 801460a:	7403      	strb	r3, [r0, #16]
 801460c:	82c3      	strh	r3, [r0, #22]
 801460e:	8303      	strh	r3, [r0, #24]
 8014610:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8014612:	8603      	strh	r3, [r0, #48]	; 0x30
 8014614:	86c3      	strh	r3, [r0, #54]	; 0x36
 8014616:	8703      	strh	r3, [r0, #56]	; 0x38
 8014618:	63c3      	str	r3, [r0, #60]	; 0x3c
 801461a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801461e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8014622:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8014626:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801462a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801462e:	f7fa f8f9 	bl	800e824 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014632:	4620      	mov	r0, r4
 8014634:	bd10      	pop	{r4, pc}

08014636 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014636:	b530      	push	{r4, r5, lr}
 8014638:	2500      	movs	r5, #0
 801463a:	2401      	movs	r4, #1
 801463c:	6843      	ldr	r3, [r0, #4]
 801463e:	b913      	cbnz	r3, 8014646 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014640:	6803      	ldr	r3, [r0, #0]
 8014642:	b1f3      	cbz	r3, 8014682 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8014644:	6043      	str	r3, [r0, #4]
 8014646:	7c03      	ldrb	r3, [r0, #16]
 8014648:	b143      	cbz	r3, 801465c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801464a:	68c3      	ldr	r3, [r0, #12]
 801464c:	b12b      	cbz	r3, 801465a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801464e:	881a      	ldrh	r2, [r3, #0]
 8014650:	b11a      	cbz	r2, 801465a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014652:	1c9a      	adds	r2, r3, #2
 8014654:	60c2      	str	r2, [r0, #12]
 8014656:	8818      	ldrh	r0, [r3, #0]
 8014658:	bd30      	pop	{r4, r5, pc}
 801465a:	7405      	strb	r5, [r0, #16]
 801465c:	6843      	ldr	r3, [r0, #4]
 801465e:	8819      	ldrh	r1, [r3, #0]
 8014660:	b179      	cbz	r1, 8014682 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8014662:	1c9a      	adds	r2, r3, #2
 8014664:	2902      	cmp	r1, #2
 8014666:	6042      	str	r2, [r0, #4]
 8014668:	d1f5      	bne.n	8014656 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801466a:	6883      	ldr	r3, [r0, #8]
 801466c:	1d1a      	adds	r2, r3, #4
 801466e:	6082      	str	r2, [r0, #8]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	60c3      	str	r3, [r0, #12]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d0e1      	beq.n	801463c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d0de      	beq.n	801463c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801467e:	7404      	strb	r4, [r0, #16]
 8014680:	e7dc      	b.n	801463c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014682:	2000      	movs	r0, #0
 8014684:	e7e8      	b.n	8014658 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014686 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8014686:	b410      	push	{r4}
 8014688:	63c3      	str	r3, [r0, #60]	; 0x3c
 801468a:	2300      	movs	r3, #0
 801468c:	6082      	str	r2, [r0, #8]
 801468e:	6001      	str	r1, [r0, #0]
 8014690:	6043      	str	r3, [r0, #4]
 8014692:	60c3      	str	r3, [r0, #12]
 8014694:	7403      	strb	r3, [r0, #16]
 8014696:	8603      	strh	r3, [r0, #48]	; 0x30
 8014698:	8303      	strh	r3, [r0, #24]
 801469a:	8703      	strh	r3, [r0, #56]	; 0x38
 801469c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146a0:	f7fa b8c0 	b.w	800e824 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080146a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80146a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146a6:	4605      	mov	r5, r0
 80146a8:	4608      	mov	r0, r1
 80146aa:	b1e9      	cbz	r1, 80146e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80146ac:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80146b0:	460b      	mov	r3, r1
 80146b2:	f101 0708 	add.w	r7, r1, #8
 80146b6:	4622      	mov	r2, r4
 80146b8:	6818      	ldr	r0, [r3, #0]
 80146ba:	6859      	ldr	r1, [r3, #4]
 80146bc:	4626      	mov	r6, r4
 80146be:	c603      	stmia	r6!, {r0, r1}
 80146c0:	3308      	adds	r3, #8
 80146c2:	42bb      	cmp	r3, r7
 80146c4:	4634      	mov	r4, r6
 80146c6:	d1f7      	bne.n	80146b8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80146c8:	6818      	ldr	r0, [r3, #0]
 80146ca:	6030      	str	r0, [r6, #0]
 80146cc:	889b      	ldrh	r3, [r3, #4]
 80146ce:	80b3      	strh	r3, [r6, #4]
 80146d0:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80146d4:	015b      	lsls	r3, r3, #5
 80146d6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80146da:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80146de:	430b      	orrs	r3, r1
 80146e0:	425b      	negs	r3, r3
 80146e2:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80146e6:	4610      	mov	r0, r2
 80146e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146ea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80146ea:	b538      	push	{r3, r4, r5, lr}
 80146ec:	460c      	mov	r4, r1
 80146ee:	6811      	ldr	r1, [r2, #0]
 80146f0:	4610      	mov	r0, r2
 80146f2:	68cd      	ldr	r5, [r1, #12]
 80146f4:	4619      	mov	r1, r3
 80146f6:	47a8      	blx	r5
 80146f8:	2800      	cmp	r0, #0
 80146fa:	bf08      	it	eq
 80146fc:	4620      	moveq	r0, r4
 80146fe:	bd38      	pop	{r3, r4, r5, pc}

08014700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	4615      	mov	r5, r2
 8014706:	4608      	mov	r0, r1
 8014708:	b93a      	cbnz	r2, 801471a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801470a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801470e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8014712:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8014716:	4628      	mov	r0, r5
 8014718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801471a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801471e:	8893      	ldrh	r3, [r2, #4]
 8014720:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014724:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014728:	79ee      	ldrb	r6, [r5, #7]
 801472a:	4316      	orrs	r6, r2
 801472c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8014730:	189a      	adds	r2, r3, r2
 8014732:	b291      	uxth	r1, r2
 8014734:	291d      	cmp	r1, #29
 8014736:	b2b7      	uxth	r7, r6
 8014738:	f200 8083 	bhi.w	8014842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801473c:	2201      	movs	r2, #1
 801473e:	408a      	lsls	r2, r1
 8014740:	4978      	ldr	r1, [pc, #480]	; (8014924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8014742:	420a      	tst	r2, r1
 8014744:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8014748:	d12d      	bne.n	80147a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801474a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801474e:	d078      	beq.n	8014842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8014750:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8014754:	462b      	mov	r3, r5
 8014756:	f105 0e08 	add.w	lr, r5, #8
 801475a:	4615      	mov	r5, r2
 801475c:	6818      	ldr	r0, [r3, #0]
 801475e:	6859      	ldr	r1, [r3, #4]
 8014760:	4694      	mov	ip, r2
 8014762:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014766:	3308      	adds	r3, #8
 8014768:	4573      	cmp	r3, lr
 801476a:	4662      	mov	r2, ip
 801476c:	d1f6      	bne.n	801475c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801476e:	6818      	ldr	r0, [r3, #0]
 8014770:	f8cc 0000 	str.w	r0, [ip]
 8014774:	889b      	ldrh	r3, [r3, #4]
 8014776:	f8ac 3004 	strh.w	r3, [ip, #4]
 801477a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801477e:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8014782:	b2b3      	uxth	r3, r6
 8014784:	1aca      	subs	r2, r1, r3
 8014786:	b292      	uxth	r2, r2
 8014788:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801478c:	10d2      	asrs	r2, r2, #3
 801478e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8014792:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8014796:	4302      	orrs	r2, r0
 8014798:	1bcf      	subs	r7, r1, r7
 801479a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801479e:	1afb      	subs	r3, r7, r3
 80147a0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80147a4:	e7b7      	b.n	8014716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80147a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80147a8:	b92b      	cbnz	r3, 80147b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80147aa:	4b5f      	ldr	r3, [pc, #380]	; (8014928 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80147ac:	4a5f      	ldr	r2, [pc, #380]	; (801492c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80147ae:	4860      	ldr	r0, [pc, #384]	; (8014930 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80147b0:	21c0      	movs	r1, #192	; 0xc0
 80147b2:	f008 ffbd 	bl	801d730 <__assert_func>
 80147b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80147b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80147bc:	8b59      	ldrh	r1, [r3, #26]
 80147be:	f640 6333 	movw	r3, #3635	; 0xe33
 80147c2:	4299      	cmp	r1, r3
 80147c4:	d110      	bne.n	80147e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80147c6:	6803      	ldr	r3, [r0, #0]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	4798      	blx	r3
 80147cc:	7b41      	ldrb	r1, [r0, #13]
 80147ce:	00cb      	lsls	r3, r1, #3
 80147d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80147d4:	7a03      	ldrb	r3, [r0, #8]
 80147d6:	0648      	lsls	r0, r1, #25
 80147d8:	ea43 0302 	orr.w	r3, r3, r2
 80147dc:	bf44      	itt	mi
 80147de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80147e2:	b21b      	sxthmi	r3, r3
 80147e4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80147e8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80147ec:	443b      	add	r3, r7
 80147ee:	4433      	add	r3, r6
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80147f6:	462a      	mov	r2, r5
 80147f8:	f105 0c08 	add.w	ip, r5, #8
 80147fc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8014800:	4635      	mov	r5, r6
 8014802:	6810      	ldr	r0, [r2, #0]
 8014804:	6851      	ldr	r1, [r2, #4]
 8014806:	4637      	mov	r7, r6
 8014808:	c703      	stmia	r7!, {r0, r1}
 801480a:	3208      	adds	r2, #8
 801480c:	4562      	cmp	r2, ip
 801480e:	463e      	mov	r6, r7
 8014810:	d1f7      	bne.n	8014802 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8014812:	6810      	ldr	r0, [r2, #0]
 8014814:	6038      	str	r0, [r7, #0]
 8014816:	8892      	ldrh	r2, [r2, #4]
 8014818:	80ba      	strh	r2, [r7, #4]
 801481a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801481e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8014822:	10db      	asrs	r3, r3, #3
 8014824:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801482c:	4313      	orrs	r3, r2
 801482e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8014832:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8014836:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801483a:	1a9b      	subs	r3, r3, r2
 801483c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8014840:	e769      	b.n	8014716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014842:	f023 0204 	bic.w	r2, r3, #4
 8014846:	f640 611b 	movw	r1, #3611	; 0xe1b
 801484a:	428a      	cmp	r2, r1
 801484c:	d003      	beq.n	8014856 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801484e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8014852:	4293      	cmp	r3, r2
 8014854:	d120      	bne.n	8014898 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 8014856:	3b01      	subs	r3, #1
 8014858:	4602      	mov	r2, r0
 801485a:	b29b      	uxth	r3, r3
 801485c:	4629      	mov	r1, r5
 801485e:	4620      	mov	r0, r4
 8014860:	f7ff ff43 	bl	80146ea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014864:	7b41      	ldrb	r1, [r0, #13]
 8014866:	00cb      	lsls	r3, r1, #3
 8014868:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801486c:	7a03      	ldrb	r3, [r0, #8]
 801486e:	0649      	lsls	r1, r1, #25
 8014870:	ea43 0302 	orr.w	r3, r3, r2
 8014874:	bf44      	itt	mi
 8014876:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801487a:	b21b      	sxthmi	r3, r3
 801487c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8014880:	7b6b      	ldrb	r3, [r5, #13]
 8014882:	7aaa      	ldrb	r2, [r5, #10]
 8014884:	005b      	lsls	r3, r3, #1
 8014886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801488a:	4313      	orrs	r3, r2
 801488c:	115a      	asrs	r2, r3, #5
 801488e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8014892:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8014896:	e036      	b.n	8014906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8014898:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801489c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80148a0:	7a2a      	ldrb	r2, [r5, #8]
 80148a2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80148a6:	ea42 0201 	orr.w	r2, r2, r1
 80148aa:	bf1c      	itt	ne
 80148ac:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80148b0:	b212      	sxthne	r2, r2
 80148b2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80148b6:	f640 6109 	movw	r1, #3593	; 0xe09
 80148ba:	f023 0210 	bic.w	r2, r3, #16
 80148be:	428a      	cmp	r2, r1
 80148c0:	d003      	beq.n	80148ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 80148c2:	f640 6213 	movw	r2, #3603	; 0xe13
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d12a      	bne.n	8014920 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 80148ca:	7b6e      	ldrb	r6, [r5, #13]
 80148cc:	0076      	lsls	r6, r6, #1
 80148ce:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80148d2:	7aae      	ldrb	r6, [r5, #10]
 80148d4:	4316      	orrs	r6, r2
 80148d6:	f640 6213 	movw	r2, #3603	; 0xe13
 80148da:	4293      	cmp	r3, r2
 80148dc:	bf18      	it	ne
 80148de:	f103 33ff 	addne.w	r3, r3, #4294967295
 80148e2:	4602      	mov	r2, r0
 80148e4:	bf14      	ite	ne
 80148e6:	b29b      	uxthne	r3, r3
 80148e8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80148ec:	4629      	mov	r1, r5
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7ff fefb 	bl	80146ea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80148f4:	7b43      	ldrb	r3, [r0, #13]
 80148f6:	7a82      	ldrb	r2, [r0, #10]
 80148f8:	005b      	lsls	r3, r3, #1
 80148fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148fe:	4313      	orrs	r3, r2
 8014900:	1af6      	subs	r6, r6, r3
 8014902:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8014906:	7b69      	ldrb	r1, [r5, #13]
 8014908:	00cb      	lsls	r3, r1, #3
 801490a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801490e:	7a2b      	ldrb	r3, [r5, #8]
 8014910:	4313      	orrs	r3, r2
 8014912:	064a      	lsls	r2, r1, #25
 8014914:	bf44      	itt	mi
 8014916:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801491a:	b21b      	sxthmi	r3, r3
 801491c:	1bdb      	subs	r3, r3, r7
 801491e:	e73f      	b.n	80147a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8014920:	2300      	movs	r3, #0
 8014922:	e7b6      	b.n	8014892 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8014924:	3fc00079 	.word	0x3fc00079
 8014928:	08020b78 	.word	0x08020b78
 801492c:	08020dea 	.word	0x08020dea
 8014930:	08020b81 	.word	0x08020b81

08014934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014938:	4604      	mov	r4, r0
 801493a:	b942      	cbnz	r2, 801494e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801493c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014940:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8014944:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8014948:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801494c:	e046      	b.n	80149dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801494e:	7b51      	ldrb	r1, [r2, #13]
 8014950:	8893      	ldrh	r3, [r2, #4]
 8014952:	010f      	lsls	r7, r1, #4
 8014954:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8014958:	79d7      	ldrb	r7, [r2, #7]
 801495a:	4307      	orrs	r7, r0
 801495c:	2f04      	cmp	r7, #4
 801495e:	b2bd      	uxth	r5, r7
 8014960:	bfcc      	ite	gt
 8014962:	08bf      	lsrgt	r7, r7, #2
 8014964:	2701      	movle	r7, #1
 8014966:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801496a:	f200 80ab 	bhi.w	8014ac4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801496e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8014972:	4283      	cmp	r3, r0
 8014974:	d216      	bcs.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014976:	f240 605b 	movw	r0, #1627	; 0x65b
 801497a:	4283      	cmp	r3, r0
 801497c:	d859      	bhi.n	8014a32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801497e:	f240 6057 	movw	r0, #1623	; 0x657
 8014982:	4283      	cmp	r3, r0
 8014984:	d20e      	bcs.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014986:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801498a:	d24a      	bcs.n	8014a22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801498c:	f240 604e 	movw	r0, #1614	; 0x64e
 8014990:	4283      	cmp	r3, r0
 8014992:	d207      	bcs.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014994:	f240 601a 	movw	r0, #1562	; 0x61a
 8014998:	4283      	cmp	r3, r0
 801499a:	d02a      	beq.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801499c:	d821      	bhi.n	80149e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801499e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80149a2:	d35b      	bcc.n	8014a5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80149a4:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 80149a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80149ac:	f040 80d0 	bne.w	8014b50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80149b0:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 80149b4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80149b8:	f040 80ca 	bne.w	8014b50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80149bc:	00cb      	lsls	r3, r1, #3
 80149be:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80149c2:	7a13      	ldrb	r3, [r2, #8]
 80149c4:	0649      	lsls	r1, r1, #25
 80149c6:	ea43 0300 	orr.w	r3, r3, r0
 80149ca:	bf44      	itt	mi
 80149cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80149d0:	b21b      	sxthmi	r3, r3
 80149d2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80149d6:	1b5d      	subs	r5, r3, r5
 80149d8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80149dc:	4610      	mov	r0, r2
 80149de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149e2:	f240 604b 	movw	r0, #1611	; 0x64b
 80149e6:	4283      	cmp	r3, r0
 80149e8:	d338      	bcc.n	8014a5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80149ea:	f240 604c 	movw	r0, #1612	; 0x64c
 80149ee:	4283      	cmp	r3, r0
 80149f0:	d9d8      	bls.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80149f2:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 80149f6:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 80149fa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80149fe:	f040 80f1 	bne.w	8014be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8014a02:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014a06:	f040 80ed 	bne.w	8014be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8014a0a:	00cb      	lsls	r3, r1, #3
 8014a0c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014a10:	7a13      	ldrb	r3, [r2, #8]
 8014a12:	064e      	lsls	r6, r1, #25
 8014a14:	ea43 0300 	orr.w	r3, r3, r0
 8014a18:	bf44      	itt	mi
 8014a1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014a1e:	b21b      	sxthmi	r3, r3
 8014a20:	e7d9      	b.n	80149d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8014a22:	f240 6054 	movw	r0, #1620	; 0x654
 8014a26:	4283      	cmp	r3, r0
 8014a28:	d8e3      	bhi.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014a2a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014a2e:	d9e0      	bls.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014a30:	e7b8      	b.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a32:	f240 6074 	movw	r0, #1652	; 0x674
 8014a36:	4283      	cmp	r3, r0
 8014a38:	d0b4      	beq.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a3a:	d82d      	bhi.n	8014a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8014a3c:	f240 605e 	movw	r0, #1630	; 0x65e
 8014a40:	4283      	cmp	r3, r0
 8014a42:	d804      	bhi.n	8014a4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8014a44:	f240 605d 	movw	r0, #1629	; 0x65d
 8014a48:	4283      	cmp	r3, r0
 8014a4a:	d3d2      	bcc.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014a4c:	e7aa      	b.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a4e:	f240 605f 	movw	r0, #1631	; 0x65f
 8014a52:	4283      	cmp	r3, r0
 8014a54:	d0cd      	beq.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014a56:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8014a5a:	d0a3      	beq.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014a5c:	00cb      	lsls	r3, r1, #3
 8014a5e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014a62:	7a13      	ldrb	r3, [r2, #8]
 8014a64:	0649      	lsls	r1, r1, #25
 8014a66:	ea43 0300 	orr.w	r3, r3, r0
 8014a6a:	bf44      	itt	mi
 8014a6c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014a70:	b21b      	sxthmi	r3, r3
 8014a72:	1b5d      	subs	r5, r3, r5
 8014a74:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8014a78:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8014a7c:	7b53      	ldrb	r3, [r2, #13]
 8014a7e:	015b      	lsls	r3, r3, #5
 8014a80:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014a84:	7993      	ldrb	r3, [r2, #6]
 8014a86:	430b      	orrs	r3, r1
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	2105      	movs	r1, #5
 8014a8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8014a90:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014a94:	440b      	add	r3, r1
 8014a96:	e757      	b.n	8014948 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014a98:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8014a9c:	4283      	cmp	r3, r0
 8014a9e:	d809      	bhi.n	8014ab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8014aa0:	f240 60df 	movw	r0, #1759	; 0x6df
 8014aa4:	4283      	cmp	r3, r0
 8014aa6:	f4bf af7d 	bcs.w	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014aaa:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8014aae:	2b05      	cmp	r3, #5
 8014ab0:	d8d4      	bhi.n	8014a5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014ab2:	e777      	b.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014ab4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8014ab8:	4283      	cmp	r3, r0
 8014aba:	d09a      	beq.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014abc:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8014ac0:	4283      	cmp	r3, r0
 8014ac2:	e7ca      	b.n	8014a5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8014ac4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8014ac8:	d22b      	bcs.n	8014b22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8014aca:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8014ace:	4283      	cmp	r3, r0
 8014ad0:	d28f      	bcs.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014ad2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014ad6:	4283      	cmp	r3, r0
 8014ad8:	d816      	bhi.n	8014b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8014ada:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8014ade:	4283      	cmp	r3, r0
 8014ae0:	f4bf af60 	bcs.w	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014ae4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8014ae8:	4283      	cmp	r3, r0
 8014aea:	d80a      	bhi.n	8014b02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8014aec:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8014af0:	4283      	cmp	r3, r0
 8014af2:	f4bf af57 	bcs.w	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014af6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8014afa:	4283      	cmp	r3, r0
 8014afc:	f43f af79 	beq.w	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014b00:	e7ac      	b.n	8014a5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014b02:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8014b06:	e7f8      	b.n	8014afa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8014b08:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8014b0c:	4283      	cmp	r3, r0
 8014b0e:	d802      	bhi.n	8014b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8014b10:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014b14:	e798      	b.n	8014a48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8014b16:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8014b1a:	4283      	cmp	r3, r0
 8014b1c:	f47f af42 	bne.w	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014b20:	e767      	b.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014b22:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8014b26:	4283      	cmp	r3, r0
 8014b28:	f43f af63 	beq.w	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014b2c:	d802      	bhi.n	8014b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8014b2e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014b32:	e7f2      	b.n	8014b1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8014b34:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8014b38:	4283      	cmp	r3, r0
 8014b3a:	d805      	bhi.n	8014b48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8014b3c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014b40:	4283      	cmp	r3, r0
 8014b42:	f4ff af2f 	bcc.w	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014b46:	e754      	b.n	80149f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014b48:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8014b4c:	4283      	cmp	r3, r0
 8014b4e:	e7af      	b.n	8014ab0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8014b50:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8014b54:	4617      	mov	r7, r2
 8014b56:	f102 0808 	add.w	r8, r2, #8
 8014b5a:	4666      	mov	r6, ip
 8014b5c:	6838      	ldr	r0, [r7, #0]
 8014b5e:	6879      	ldr	r1, [r7, #4]
 8014b60:	46e6      	mov	lr, ip
 8014b62:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014b66:	3708      	adds	r7, #8
 8014b68:	4547      	cmp	r7, r8
 8014b6a:	46f4      	mov	ip, lr
 8014b6c:	d1f6      	bne.n	8014b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8014b6e:	6838      	ldr	r0, [r7, #0]
 8014b70:	f8ce 0000 	str.w	r0, [lr]
 8014b74:	88b9      	ldrh	r1, [r7, #4]
 8014b76:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014b7a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8014b7e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014b82:	d009      	beq.n	8014b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8014b84:	7b51      	ldrb	r1, [r2, #13]
 8014b86:	7992      	ldrb	r2, [r2, #6]
 8014b88:	0149      	lsls	r1, r1, #5
 8014b8a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014b8e:	4311      	orrs	r1, r2
 8014b90:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014b94:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8014b98:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014b9c:	d00d      	beq.n	8014bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 8014b9e:	442b      	add	r3, r5
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8014ba6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8014baa:	10db      	asrs	r3, r3, #3
 8014bac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bb4:	4313      	orrs	r3, r2
 8014bb6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8014bba:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8014bbe:	00cb      	lsls	r3, r1, #3
 8014bc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014bc4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014bc8:	064f      	lsls	r7, r1, #25
 8014bca:	ea43 0302 	orr.w	r3, r3, r2
 8014bce:	bf44      	itt	mi
 8014bd0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014bd4:	b21b      	sxthmi	r3, r3
 8014bd6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8014bda:	1b5d      	subs	r5, r3, r5
 8014bdc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8014be0:	4632      	mov	r2, r6
 8014be2:	e6fb      	b.n	80149dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8014be4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8014be8:	4694      	mov	ip, r2
 8014bea:	f102 0908 	add.w	r9, r2, #8
 8014bee:	4676      	mov	r6, lr
 8014bf0:	f8dc 0000 	ldr.w	r0, [ip]
 8014bf4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014bf8:	46f0      	mov	r8, lr
 8014bfa:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014bfe:	f10c 0c08 	add.w	ip, ip, #8
 8014c02:	45cc      	cmp	ip, r9
 8014c04:	46c6      	mov	lr, r8
 8014c06:	d1f3      	bne.n	8014bf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8014c08:	f8dc 0000 	ldr.w	r0, [ip]
 8014c0c:	f8c8 0000 	str.w	r0, [r8]
 8014c10:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8014c14:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014c18:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8014c1c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014c20:	d009      	beq.n	8014c36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8014c22:	7b51      	ldrb	r1, [r2, #13]
 8014c24:	7992      	ldrb	r2, [r2, #6]
 8014c26:	0149      	lsls	r1, r1, #5
 8014c28:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014c2c:	4311      	orrs	r1, r2
 8014c2e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014c32:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8014c36:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014c3a:	d00d      	beq.n	8014c58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8014c3c:	1bdb      	subs	r3, r3, r7
 8014c3e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8014c48:	10db      	asrs	r3, r3, #3
 8014c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014c52:	4313      	orrs	r3, r2
 8014c54:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8014c58:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8014c5c:	00cb      	lsls	r3, r1, #3
 8014c5e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c62:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014c66:	0648      	lsls	r0, r1, #25
 8014c68:	ea43 0302 	orr.w	r3, r3, r2
 8014c6c:	bf44      	itt	mi
 8014c6e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014c72:	b21b      	sxthmi	r3, r3
 8014c74:	e7b1      	b.n	8014bda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08014c78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c7c:	461d      	mov	r5, r3
 8014c7e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014c80:	4604      	mov	r4, r0
 8014c82:	4617      	mov	r7, r2
 8014c84:	b92b      	cbnz	r3, 8014c92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8014c86:	4b23      	ldr	r3, [pc, #140]	; (8014d14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 8014c88:	4a23      	ldr	r2, [pc, #140]	; (8014d18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 8014c8a:	4824      	ldr	r0, [pc, #144]	; (8014d1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8014c8c:	21c0      	movs	r1, #192	; 0xc0
 8014c8e:	f008 fd4f 	bl	801d730 <__assert_func>
 8014c92:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014c94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014c98:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8014c9c:	f7f9 fd1e 	bl	800e6dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	4601      	mov	r1, r0
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	4638      	mov	r0, r7
 8014caa:	4798      	blx	r3
 8014cac:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	6028      	str	r0, [r5, #0]
 8014cb8:	d215      	bcs.n	8014ce6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8014cba:	4643      	mov	r3, r8
 8014cbc:	4639      	mov	r1, r7
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f7ff fe38 	bl	8014934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014cc4:	6028      	str	r0, [r5, #0]
 8014cc6:	682b      	ldr	r3, [r5, #0]
 8014cc8:	b143      	cbz	r3, 8014cdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014cca:	7b5a      	ldrb	r2, [r3, #13]
 8014ccc:	7a9b      	ldrb	r3, [r3, #10]
 8014cce:	0052      	lsls	r2, r2, #1
 8014cd0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014cd4:	4313      	orrs	r3, r2
 8014cd6:	bf0c      	ite	eq
 8014cd8:	2301      	moveq	r3, #1
 8014cda:	2300      	movne	r3, #0
 8014cdc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce6:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	2b7f      	cmp	r3, #127	; 0x7f
 8014cee:	d804      	bhi.n	8014cfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 8014cf0:	4639      	mov	r1, r7
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f7ff fd04 	bl	8014700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014cf8:	e7e4      	b.n	8014cc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 8014cfa:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d0e1      	beq.n	8014cc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8014d02:	f640 1302 	movw	r3, #2306	; 0x902
 8014d06:	429e      	cmp	r6, r3
 8014d08:	d1dd      	bne.n	8014cc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8014d0a:	4601      	mov	r1, r0
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	f7ff fcc9 	bl	80146a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014d12:	e7d7      	b.n	8014cc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 8014d14:	08020b78 	.word	0x08020b78
 8014d18:	08020dea 	.word	0x08020dea
 8014d1c:	08020b81 	.word	0x08020b81

08014d20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d24:	461d      	mov	r5, r3
 8014d26:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014d28:	4604      	mov	r4, r0
 8014d2a:	4617      	mov	r7, r2
 8014d2c:	b92b      	cbnz	r3, 8014d3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8014d2e:	4b25      	ldr	r3, [pc, #148]	; (8014dc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 8014d30:	4a25      	ldr	r2, [pc, #148]	; (8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8014d32:	4826      	ldr	r0, [pc, #152]	; (8014dcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8014d34:	21c0      	movs	r1, #192	; 0xc0
 8014d36:	f008 fcfb 	bl	801d730 <__assert_func>
 8014d3a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014d3c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014d40:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8014d44:	f7f9 fcca 	bl	800e6dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	4601      	mov	r1, r0
 8014d4c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8014d50:	4606      	mov	r6, r0
 8014d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014d56:	4638      	mov	r0, r7
 8014d58:	47c8      	blx	r9
 8014d5a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014d62:	4602      	mov	r2, r0
 8014d64:	6028      	str	r0, [r5, #0]
 8014d66:	d215      	bcs.n	8014d94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8014d68:	4643      	mov	r3, r8
 8014d6a:	4639      	mov	r1, r7
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	f7ff fde1 	bl	8014934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014d72:	6028      	str	r0, [r5, #0]
 8014d74:	682b      	ldr	r3, [r5, #0]
 8014d76:	b143      	cbz	r3, 8014d8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8014d78:	7b5a      	ldrb	r2, [r3, #13]
 8014d7a:	7a9b      	ldrb	r3, [r3, #10]
 8014d7c:	0052      	lsls	r2, r2, #1
 8014d7e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014d82:	4313      	orrs	r3, r2
 8014d84:	bf0c      	ite	eq
 8014d86:	2301      	moveq	r3, #1
 8014d88:	2300      	movne	r3, #0
 8014d8a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8014d8e:	4630      	mov	r0, r6
 8014d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d94:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8014d9c:	d804      	bhi.n	8014da8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 8014d9e:	4639      	mov	r1, r7
 8014da0:	4620      	mov	r0, r4
 8014da2:	f7ff fcad 	bl	8014700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014da6:	e7e4      	b.n	8014d72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 8014da8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d0e1      	beq.n	8014d74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 8014db0:	f640 1302 	movw	r3, #2306	; 0x902
 8014db4:	429e      	cmp	r6, r3
 8014db6:	d1dd      	bne.n	8014d74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 8014db8:	4601      	mov	r1, r0
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f7ff fc72 	bl	80146a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014dc0:	e7d7      	b.n	8014d72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 8014dc2:	bf00      	nop
 8014dc4:	08020b78 	.word	0x08020b78
 8014dc8:	08020dea 	.word	0x08020dea
 8014dcc:	08020b81 	.word	0x08020b81

08014dd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014dd0:	b510      	push	{r4, lr}
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8014dd6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014dd8:	b9d9      	cbnz	r1, 8014e12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8014dda:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014ddc:	2b0a      	cmp	r3, #10
 8014dde:	d036      	beq.n	8014e4e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8014de0:	4620      	mov	r0, r4
 8014de2:	f7ff fc28 	bl	8014636 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014de6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014de8:	2b09      	cmp	r3, #9
 8014dea:	d906      	bls.n	8014dfa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8014dec:	4b18      	ldr	r3, [pc, #96]	; (8014e50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8014dee:	4a19      	ldr	r2, [pc, #100]	; (8014e54 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8014df0:	4819      	ldr	r0, [pc, #100]	; (8014e58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8014df2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8014df6:	f008 fc9b 	bl	801d730 <__assert_func>
 8014dfa:	1c5a      	adds	r2, r3, #1
 8014dfc:	8622      	strh	r2, [r4, #48]	; 0x30
 8014dfe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8014e00:	4413      	add	r3, r2
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	2b09      	cmp	r3, #9
 8014e06:	bf88      	it	hi
 8014e08:	3b0a      	subhi	r3, #10
 8014e0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014e0e:	8358      	strh	r0, [r3, #26]
 8014e10:	e7e3      	b.n	8014dda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8014e12:	2b0a      	cmp	r3, #10
 8014e14:	d01b      	beq.n	8014e4e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8014e16:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014e18:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014e1c:	3901      	subs	r1, #1
 8014e1e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8014e20:	8721      	strh	r1, [r4, #56]	; 0x38
 8014e22:	1c51      	adds	r1, r2, #1
 8014e24:	b289      	uxth	r1, r1
 8014e26:	2901      	cmp	r1, #1
 8014e28:	bf8a      	itet	hi
 8014e2a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014e2e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8014e30:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8014e32:	2b09      	cmp	r3, #9
 8014e34:	d8da      	bhi.n	8014dec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8014e36:	1c5a      	adds	r2, r3, #1
 8014e38:	8622      	strh	r2, [r4, #48]	; 0x30
 8014e3a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8014e3c:	4413      	add	r3, r2
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	2b09      	cmp	r3, #9
 8014e42:	bf88      	it	hi
 8014e44:	3b0a      	subhi	r3, #10
 8014e46:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014e4a:	8358      	strh	r0, [r3, #26]
 8014e4c:	e7c2      	b.n	8014dd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014e4e:	bd10      	pop	{r4, pc}
 8014e50:	08020bad 	.word	0x08020bad
 8014e54:	08020f40 	.word	0x08020f40
 8014e58:	08020b81 	.word	0x08020b81

08014e5c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014e5c:	b538      	push	{r3, r4, r5, lr}
 8014e5e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8014e60:	4604      	mov	r4, r0
 8014e62:	b92a      	cbnz	r2, 8014e70 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8014e64:	4b13      	ldr	r3, [pc, #76]	; (8014eb4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8014e66:	4a14      	ldr	r2, [pc, #80]	; (8014eb8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8014e68:	4814      	ldr	r0, [pc, #80]	; (8014ebc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8014e6a:	21d5      	movs	r1, #213	; 0xd5
 8014e6c:	f008 fc60 	bl	801d730 <__assert_func>
 8014e70:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014e72:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8014e76:	3a01      	subs	r2, #1
 8014e78:	8b4d      	ldrh	r5, [r1, #26]
 8014e7a:	8602      	strh	r2, [r0, #48]	; 0x30
 8014e7c:	1c5a      	adds	r2, r3, #1
 8014e7e:	b292      	uxth	r2, r2
 8014e80:	2a09      	cmp	r2, #9
 8014e82:	bf86      	itte	hi
 8014e84:	3b09      	subhi	r3, #9
 8014e86:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8014e88:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8014e8a:	f7ff ffa1 	bl	8014dd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014e8e:	8b23      	ldrh	r3, [r4, #24]
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	bf9c      	itt	ls
 8014e94:	3301      	addls	r3, #1
 8014e96:	8323      	strhls	r3, [r4, #24]
 8014e98:	8ae3      	ldrh	r3, [r4, #22]
 8014e9a:	b90b      	cbnz	r3, 8014ea0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8014e9c:	2302      	movs	r3, #2
 8014e9e:	82e3      	strh	r3, [r4, #22]
 8014ea0:	8ae3      	ldrh	r3, [r4, #22]
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	82e3      	strh	r3, [r4, #22]
 8014ea8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014eac:	4628      	mov	r0, r5
 8014eae:	8265      	strh	r5, [r4, #18]
 8014eb0:	bd38      	pop	{r3, r4, r5, pc}
 8014eb2:	bf00      	nop
 8014eb4:	08020b78 	.word	0x08020b78
 8014eb8:	08020e95 	.word	0x08020e95
 8014ebc:	08020b81 	.word	0x08020b81

08014ec0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014ec0:	b538      	push	{r3, r4, r5, lr}
 8014ec2:	428a      	cmp	r2, r1
 8014ec4:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8014ec6:	d90c      	bls.n	8014ee2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8014ec8:	b92c      	cbnz	r4, 8014ed6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8014eca:	4b1c      	ldr	r3, [pc, #112]	; (8014f3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8014ecc:	4a1c      	ldr	r2, [pc, #112]	; (8014f40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8014ece:	21e1      	movs	r1, #225	; 0xe1
 8014ed0:	481c      	ldr	r0, [pc, #112]	; (8014f44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8014ed2:	f008 fc2d 	bl	801d730 <__assert_func>
 8014ed6:	3c01      	subs	r4, #1
 8014ed8:	8604      	strh	r4, [r0, #48]	; 0x30
 8014eda:	4b1b      	ldr	r3, [pc, #108]	; (8014f48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8014edc:	4a1b      	ldr	r2, [pc, #108]	; (8014f4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8014ede:	21c5      	movs	r1, #197	; 0xc5
 8014ee0:	e7f6      	b.n	8014ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014ee2:	428c      	cmp	r4, r1
 8014ee4:	d203      	bcs.n	8014eee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8014ee6:	4b1a      	ldr	r3, [pc, #104]	; (8014f50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8014ee8:	4a1a      	ldr	r2, [pc, #104]	; (8014f54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8014eea:	21cb      	movs	r1, #203	; 0xcb
 8014eec:	e7f0      	b.n	8014ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014eee:	1a64      	subs	r4, r4, r1
 8014ef0:	8604      	strh	r4, [r0, #48]	; 0x30
 8014ef2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8014ef4:	4421      	add	r1, r4
 8014ef6:	b289      	uxth	r1, r1
 8014ef8:	2909      	cmp	r1, #9
 8014efa:	bf88      	it	hi
 8014efc:	390a      	subhi	r1, #10
 8014efe:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8014f00:	250a      	movs	r5, #10
 8014f02:	b1ba      	cbz	r2, 8014f34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8014f04:	3a01      	subs	r2, #1
 8014f06:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8014f08:	b292      	uxth	r2, r2
 8014f0a:	2909      	cmp	r1, #9
 8014f0c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014f10:	d903      	bls.n	8014f1a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8014f12:	4b11      	ldr	r3, [pc, #68]	; (8014f58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8014f14:	4a11      	ldr	r2, [pc, #68]	; (8014f5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8014f16:	21e6      	movs	r1, #230	; 0xe6
 8014f18:	e7da      	b.n	8014ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014f1a:	3101      	adds	r1, #1
 8014f1c:	8601      	strh	r1, [r0, #48]	; 0x30
 8014f1e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8014f20:	b901      	cbnz	r1, 8014f24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8014f22:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8014f24:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8014f26:	3901      	subs	r1, #1
 8014f28:	b289      	uxth	r1, r1
 8014f2a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8014f2c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014f30:	834c      	strh	r4, [r1, #26]
 8014f32:	e7e6      	b.n	8014f02 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8014f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f38:	f7ff bf4a 	b.w	8014dd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014f3c:	08020b78 	.word	0x08020b78
 8014f40:	08020c6e 	.word	0x08020c6e
 8014f44:	08020b81 	.word	0x08020b81
 8014f48:	08020bb9 	.word	0x08020bb9
 8014f4c:	08020d18 	.word	0x08020d18
 8014f50:	08020bc7 	.word	0x08020bc7
 8014f54:	08020fef 	.word	0x08020fef
 8014f58:	08020bd3 	.word	0x08020bd3
 8014f5c:	08020be6 	.word	0x08020be6

08014f60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014f60:	3a01      	subs	r2, #1
 8014f62:	b570      	push	{r4, r5, r6, lr}
 8014f64:	b292      	uxth	r2, r2
 8014f66:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8014f6a:	42b2      	cmp	r2, r6
 8014f6c:	d019      	beq.n	8014fa2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8014f6e:	8b04      	ldrh	r4, [r0, #24]
 8014f70:	f831 5b02 	ldrh.w	r5, [r1], #2
 8014f74:	4294      	cmp	r4, r2
 8014f76:	d805      	bhi.n	8014f84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8014f78:	4b19      	ldr	r3, [pc, #100]	; (8014fe0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8014f7a:	4a1a      	ldr	r2, [pc, #104]	; (8014fe4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8014f7c:	481a      	ldr	r0, [pc, #104]	; (8014fe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8014f7e:	21c5      	movs	r1, #197	; 0xc5
 8014f80:	f008 fbd6 	bl	801d730 <__assert_func>
 8014f84:	8ac4      	ldrh	r4, [r0, #22]
 8014f86:	4414      	add	r4, r2
 8014f88:	b2a4      	uxth	r4, r4
 8014f8a:	2c01      	cmp	r4, #1
 8014f8c:	bf88      	it	hi
 8014f8e:	3c02      	subhi	r4, #2
 8014f90:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014f94:	3a01      	subs	r2, #1
 8014f96:	8a64      	ldrh	r4, [r4, #18]
 8014f98:	42ac      	cmp	r4, r5
 8014f9a:	b292      	uxth	r2, r2
 8014f9c:	d0e5      	beq.n	8014f6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8014f9e:	2000      	movs	r0, #0
 8014fa0:	bd70      	pop	{r4, r5, r6, pc}
 8014fa2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014fa6:	2400      	movs	r4, #0
 8014fa8:	4413      	add	r3, r2
 8014faa:	b2a2      	uxth	r2, r4
 8014fac:	429a      	cmp	r2, r3
 8014fae:	da14      	bge.n	8014fda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8014fb0:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8014fb2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014fb6:	4296      	cmp	r6, r2
 8014fb8:	d802      	bhi.n	8014fc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8014fba:	4b09      	ldr	r3, [pc, #36]	; (8014fe0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8014fbc:	4a0b      	ldr	r2, [pc, #44]	; (8014fec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8014fbe:	e7dd      	b.n	8014f7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8014fc0:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8014fc2:	4432      	add	r2, r6
 8014fc4:	b292      	uxth	r2, r2
 8014fc6:	2a09      	cmp	r2, #9
 8014fc8:	bf88      	it	hi
 8014fca:	3a0a      	subhi	r2, #10
 8014fcc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014fd0:	3401      	adds	r4, #1
 8014fd2:	8b52      	ldrh	r2, [r2, #26]
 8014fd4:	42aa      	cmp	r2, r5
 8014fd6:	d0e8      	beq.n	8014faa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8014fd8:	e7e1      	b.n	8014f9e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8014fda:	2001      	movs	r0, #1
 8014fdc:	e7e0      	b.n	8014fa0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8014fde:	bf00      	nop
 8014fe0:	08020bb9 	.word	0x08020bb9
 8014fe4:	08021073 	.word	0x08021073
 8014fe8:	08020b81 	.word	0x08020b81
 8014fec:	08020d18 	.word	0x08020d18

08014ff0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff4:	4605      	mov	r5, r0
 8014ff6:	4616      	mov	r6, r2
 8014ff8:	1c8c      	adds	r4, r1, #2
 8014ffa:	8809      	ldrh	r1, [r1, #0]
 8014ffc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015000:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8015004:	42b3      	cmp	r3, r6
 8015006:	d124      	bne.n	8015052 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015008:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801500c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015010:	f001 070f 	and.w	r7, r1, #15
 8015014:	f8cd 8000 	str.w	r8, [sp]
 8015018:	464b      	mov	r3, r9
 801501a:	4652      	mov	r2, sl
 801501c:	4621      	mov	r1, r4
 801501e:	4628      	mov	r0, r5
 8015020:	f7ff ff9e 	bl	8014f60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8015024:	4683      	mov	fp, r0
 8015026:	b168      	cbz	r0, 8015044 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015028:	eb0a 0109 	add.w	r1, sl, r9
 801502c:	4441      	add	r1, r8
 801502e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8015032:	463a      	mov	r2, r7
 8015034:	4649      	mov	r1, r9
 8015036:	4628      	mov	r0, r5
 8015038:	f7ff ff42 	bl	8014ec0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801503c:	4658      	mov	r0, fp
 801503e:	b003      	add	sp, #12
 8015040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015044:	eb07 010a 	add.w	r1, r7, sl
 8015048:	4449      	add	r1, r9
 801504a:	4441      	add	r1, r8
 801504c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015050:	e7d2      	b.n	8014ff8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8015052:	f04f 0b00 	mov.w	fp, #0
 8015056:	e7f1      	b.n	801503c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015058:	b570      	push	{r4, r5, r6, lr}
 801505a:	8810      	ldrh	r0, [r2, #0]
 801505c:	4298      	cmp	r0, r3
 801505e:	d817      	bhi.n	8015090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015060:	1e48      	subs	r0, r1, #1
 8015062:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8015066:	4298      	cmp	r0, r3
 8015068:	d312      	bcc.n	8015090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801506a:	2400      	movs	r4, #0
 801506c:	428c      	cmp	r4, r1
 801506e:	d20f      	bcs.n	8015090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015070:	1860      	adds	r0, r4, r1
 8015072:	1040      	asrs	r0, r0, #1
 8015074:	0085      	lsls	r5, r0, #2
 8015076:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801507a:	42b3      	cmp	r3, r6
 801507c:	d902      	bls.n	8015084 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801507e:	3001      	adds	r0, #1
 8015080:	b284      	uxth	r4, r0
 8015082:	e7f3      	b.n	801506c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015084:	d201      	bcs.n	801508a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8015086:	b281      	uxth	r1, r0
 8015088:	e7f0      	b.n	801506c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801508a:	442a      	add	r2, r5
 801508c:	8850      	ldrh	r0, [r2, #2]
 801508e:	bd70      	pop	{r4, r5, r6, pc}
 8015090:	2000      	movs	r0, #0
 8015092:	e7fc      	b.n	801508e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08015094 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8015094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015098:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801509a:	886f      	ldrh	r7, [r5, #2]
 801509c:	4604      	mov	r4, r0
 801509e:	087f      	lsrs	r7, r7, #1
 80150a0:	260b      	movs	r6, #11
 80150a2:	3e01      	subs	r6, #1
 80150a4:	d01b      	beq.n	80150de <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80150a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80150a8:	b92b      	cbnz	r3, 80150b6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80150aa:	4b0e      	ldr	r3, [pc, #56]	; (80150e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80150ac:	4a0e      	ldr	r2, [pc, #56]	; (80150e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80150ae:	480f      	ldr	r0, [pc, #60]	; (80150ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80150b0:	21c0      	movs	r1, #192	; 0xc0
 80150b2:	f008 fb3d 	bl	801d730 <__assert_func>
 80150b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80150b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80150bc:	462a      	mov	r2, r5
 80150be:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80150c2:	4639      	mov	r1, r7
 80150c4:	4643      	mov	r3, r8
 80150c6:	4620      	mov	r0, r4
 80150c8:	f7ff ffc6 	bl	8015058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80150cc:	b138      	cbz	r0, 80150de <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80150ce:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80150d2:	4642      	mov	r2, r8
 80150d4:	4620      	mov	r0, r4
 80150d6:	f7ff ff8b 	bl	8014ff0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80150da:	2800      	cmp	r0, #0
 80150dc:	d1e1      	bne.n	80150a2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80150de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e2:	bf00      	nop
 80150e4:	08020b78 	.word	0x08020b78
 80150e8:	08020dea 	.word	0x08020dea
 80150ec:	08020b81 	.word	0x08020b81

080150f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80150f0:	4b01      	ldr	r3, [pc, #4]	; (80150f8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80150f2:	6018      	str	r0, [r3, #0]
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	2000856c 	.word	0x2000856c

080150fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80150fc:	4b07      	ldr	r3, [pc, #28]	; (801511c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 80150fe:	881a      	ldrh	r2, [r3, #0]
 8015100:	4282      	cmp	r2, r0
 8015102:	d809      	bhi.n	8015118 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8015104:	4b06      	ldr	r3, [pc, #24]	; (8015120 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8015106:	881b      	ldrh	r3, [r3, #0]
 8015108:	4413      	add	r3, r2
 801510a:	4298      	cmp	r0, r3
 801510c:	da04      	bge.n	8015118 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801510e:	4b05      	ldr	r3, [pc, #20]	; (8015124 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015116:	4770      	bx	lr
 8015118:	2000      	movs	r0, #0
 801511a:	4770      	bx	lr
 801511c:	2000858c 	.word	0x2000858c
 8015120:	20008590 	.word	0x20008590
 8015124:	20008570 	.word	0x20008570

08015128 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801512c:	4d28      	ldr	r5, [pc, #160]	; (80151d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801512e:	682b      	ldr	r3, [r5, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d04a      	beq.n	80151ca <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8015134:	4a27      	ldr	r2, [pc, #156]	; (80151d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015136:	4e28      	ldr	r6, [pc, #160]	; (80151d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015138:	8810      	ldrh	r0, [r2, #0]
 801513a:	f8b6 8000 	ldrh.w	r8, [r6]
 801513e:	4c27      	ldr	r4, [pc, #156]	; (80151dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015140:	4f27      	ldr	r7, [pc, #156]	; (80151e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015142:	4440      	add	r0, r8
 8015144:	1c41      	adds	r1, r0, #1
 8015146:	f021 0101 	bic.w	r1, r1, #1
 801514a:	0409      	lsls	r1, r1, #16
 801514c:	0c09      	lsrs	r1, r1, #16
 801514e:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8015152:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8015156:	eb03 020e 	add.w	r2, r3, lr
 801515a:	eb0e 010c 	add.w	r1, lr, ip
 801515e:	6022      	str	r2, [r4, #0]
 8015160:	185a      	adds	r2, r3, r1
 8015162:	603a      	str	r2, [r7, #0]
 8015164:	220e      	movs	r2, #14
 8015166:	fb02 f208 	mul.w	r2, r2, r8
 801516a:	3203      	adds	r2, #3
 801516c:	f022 0203 	bic.w	r2, r2, #3
 8015170:	4411      	add	r1, r2
 8015172:	440b      	add	r3, r1
 8015174:	491b      	ldr	r1, [pc, #108]	; (80151e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8015176:	600b      	str	r3, [r1, #0]
 8015178:	491b      	ldr	r1, [pc, #108]	; (80151e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801517a:	2300      	movs	r3, #0
 801517c:	800b      	strh	r3, [r1, #0]
 801517e:	491b      	ldr	r1, [pc, #108]	; (80151ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8015180:	6809      	ldr	r1, [r1, #0]
 8015182:	eba1 010e 	sub.w	r1, r1, lr
 8015186:	eba1 010c 	sub.w	r1, r1, ip
 801518a:	1a8a      	subs	r2, r1, r2
 801518c:	4918      	ldr	r1, [pc, #96]	; (80151f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801518e:	600a      	str	r2, [r1, #0]
 8015190:	4a18      	ldr	r2, [pc, #96]	; (80151f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8015192:	469c      	mov	ip, r3
 8015194:	8013      	strh	r3, [r2, #0]
 8015196:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801519a:	4283      	cmp	r3, r0
 801519c:	d10d      	bne.n	80151ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801519e:	8835      	ldrh	r5, [r6, #0]
 80151a0:	6838      	ldr	r0, [r7, #0]
 80151a2:	2300      	movs	r3, #0
 80151a4:	240e      	movs	r4, #14
 80151a6:	429d      	cmp	r5, r3
 80151a8:	d90f      	bls.n	80151ca <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80151aa:	fb04 0203 	mla	r2, r4, r3, r0
 80151ae:	3301      	adds	r3, #1
 80151b0:	7b11      	ldrb	r1, [r2, #12]
 80151b2:	f36f 1145 	bfc	r1, #5, #1
 80151b6:	7311      	strb	r1, [r2, #12]
 80151b8:	e7f5      	b.n	80151a6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80151ba:	682a      	ldr	r2, [r5, #0]
 80151bc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80151c0:	6822      	ldr	r2, [r4, #0]
 80151c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80151c6:	3301      	adds	r3, #1
 80151c8:	e7e7      	b.n	801519a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80151ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ce:	bf00      	nop
 80151d0:	20008570 	.word	0x20008570
 80151d4:	2000858c 	.word	0x2000858c
 80151d8:	20008590 	.word	0x20008590
 80151dc:	20008584 	.word	0x20008584
 80151e0:	20008574 	.word	0x20008574
 80151e4:	2000857c 	.word	0x2000857c
 80151e8:	2000858e 	.word	0x2000858e
 80151ec:	20008578 	.word	0x20008578
 80151f0:	20008588 	.word	0x20008588
 80151f4:	20008580 	.word	0x20008580

080151f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80151f8:	b510      	push	{r4, lr}
 80151fa:	4b10      	ldr	r3, [pc, #64]	; (801523c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	b9db      	cbnz	r3, 8015238 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8015200:	b1d1      	cbz	r1, 8015238 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8015202:	4b0f      	ldr	r3, [pc, #60]	; (8015240 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8015204:	801a      	strh	r2, [r3, #0]
 8015206:	4b0f      	ldr	r3, [pc, #60]	; (8015244 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	b292      	uxth	r2, r2
 801520c:	240e      	movs	r4, #14
 801520e:	4413      	add	r3, r2
 8015210:	4362      	muls	r2, r4
 8015212:	2406      	movs	r4, #6
 8015214:	fb04 2203 	mla	r2, r4, r3, r2
 8015218:	428a      	cmp	r2, r1
 801521a:	d305      	bcc.n	8015228 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801521c:	4b0a      	ldr	r3, [pc, #40]	; (8015248 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801521e:	4a0b      	ldr	r2, [pc, #44]	; (801524c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8015220:	480b      	ldr	r0, [pc, #44]	; (8015250 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8015222:	2137      	movs	r1, #55	; 0x37
 8015224:	f008 fa84 	bl	801d730 <__assert_func>
 8015228:	4b0a      	ldr	r3, [pc, #40]	; (8015254 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801522a:	6019      	str	r1, [r3, #0]
 801522c:	4b0a      	ldr	r3, [pc, #40]	; (8015258 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801522e:	6018      	str	r0, [r3, #0]
 8015230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015234:	f7ff bf78 	b.w	8015128 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015238:	bd10      	pop	{r4, pc}
 801523a:	bf00      	nop
 801523c:	2000857c 	.word	0x2000857c
 8015240:	20008590 	.word	0x20008590
 8015244:	2000858c 	.word	0x2000858c
 8015248:	080211a1 	.word	0x080211a1
 801524c:	080211fa 	.word	0x080211fa
 8015250:	0802117c 	.word	0x0802117c
 8015254:	20008578 	.word	0x20008578
 8015258:	20008570 	.word	0x20008570

0801525c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801525c:	b470      	push	{r4, r5, r6}
 801525e:	4c07      	ldr	r4, [pc, #28]	; (801527c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015260:	6826      	ldr	r6, [r4, #0]
 8015262:	4605      	mov	r5, r0
 8015264:	4610      	mov	r0, r2
 8015266:	9a03      	ldr	r2, [sp, #12]
 8015268:	b936      	cbnz	r6, 8015278 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801526a:	6025      	str	r5, [r4, #0]
 801526c:	4c04      	ldr	r4, [pc, #16]	; (8015280 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801526e:	8021      	strh	r1, [r4, #0]
 8015270:	bc70      	pop	{r4, r5, r6}
 8015272:	4619      	mov	r1, r3
 8015274:	f7ff bfc0 	b.w	80151f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015278:	bc70      	pop	{r4, r5, r6}
 801527a:	4770      	bx	lr
 801527c:	20008594 	.word	0x20008594
 8015280:	2000858c 	.word	0x2000858c

08015284 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015284:	b508      	push	{r3, lr}
 8015286:	4b14      	ldr	r3, [pc, #80]	; (80152d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015288:	6819      	ldr	r1, [r3, #0]
 801528a:	b931      	cbnz	r1, 801529a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801528c:	4b13      	ldr	r3, [pc, #76]	; (80152dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801528e:	4a14      	ldr	r2, [pc, #80]	; (80152e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015290:	4814      	ldr	r0, [pc, #80]	; (80152e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015292:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8015296:	f008 fa4b 	bl	801d730 <__assert_func>
 801529a:	4a13      	ldr	r2, [pc, #76]	; (80152e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801529c:	8803      	ldrh	r3, [r0, #0]
 801529e:	8812      	ldrh	r2, [r2, #0]
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d204      	bcs.n	80152ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80152a4:	2214      	movs	r2, #20
 80152a6:	fb02 1303 	mla	r3, r2, r3, r1
 80152aa:	8918      	ldrh	r0, [r3, #8]
 80152ac:	bd08      	pop	{r3, pc}
 80152ae:	490f      	ldr	r1, [pc, #60]	; (80152ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80152b0:	8809      	ldrh	r1, [r1, #0]
 80152b2:	4411      	add	r1, r2
 80152b4:	428b      	cmp	r3, r1
 80152b6:	da06      	bge.n	80152c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80152b8:	1a9b      	subs	r3, r3, r2
 80152ba:	4a0d      	ldr	r2, [pc, #52]	; (80152f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80152bc:	6812      	ldr	r2, [r2, #0]
 80152be:	210e      	movs	r1, #14
 80152c0:	fb01 2303 	mla	r3, r1, r3, r2
 80152c4:	e7f1      	b.n	80152aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80152c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80152ca:	4293      	cmp	r3, r2
 80152cc:	bf0a      	itet	eq
 80152ce:	4b09      	ldreq	r3, [pc, #36]	; (80152f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80152d0:	2000      	movne	r0, #0
 80152d2:	8818      	ldrheq	r0, [r3, #0]
 80152d4:	e7ea      	b.n	80152ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80152d6:	bf00      	nop
 80152d8:	20008594 	.word	0x20008594
 80152dc:	08020620 	.word	0x08020620
 80152e0:	080212a7 	.word	0x080212a7
 80152e4:	0802117c 	.word	0x0802117c
 80152e8:	2000858c 	.word	0x2000858c
 80152ec:	20008590 	.word	0x20008590
 80152f0:	20008574 	.word	0x20008574
 80152f4:	200084e0 	.word	0x200084e0

080152f8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80152f8:	b508      	push	{r3, lr}
 80152fa:	4b14      	ldr	r3, [pc, #80]	; (801534c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80152fc:	6819      	ldr	r1, [r3, #0]
 80152fe:	b931      	cbnz	r1, 801530e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8015300:	4b13      	ldr	r3, [pc, #76]	; (8015350 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015302:	4a14      	ldr	r2, [pc, #80]	; (8015354 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015304:	4814      	ldr	r0, [pc, #80]	; (8015358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015306:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801530a:	f008 fa11 	bl	801d730 <__assert_func>
 801530e:	4a13      	ldr	r2, [pc, #76]	; (801535c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015310:	8803      	ldrh	r3, [r0, #0]
 8015312:	8812      	ldrh	r2, [r2, #0]
 8015314:	4293      	cmp	r3, r2
 8015316:	d204      	bcs.n	8015322 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8015318:	2214      	movs	r2, #20
 801531a:	fb02 1303 	mla	r3, r2, r3, r1
 801531e:	8958      	ldrh	r0, [r3, #10]
 8015320:	bd08      	pop	{r3, pc}
 8015322:	490f      	ldr	r1, [pc, #60]	; (8015360 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8015324:	8809      	ldrh	r1, [r1, #0]
 8015326:	4411      	add	r1, r2
 8015328:	428b      	cmp	r3, r1
 801532a:	da06      	bge.n	801533a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801532c:	1a9b      	subs	r3, r3, r2
 801532e:	4a0d      	ldr	r2, [pc, #52]	; (8015364 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8015330:	6812      	ldr	r2, [r2, #0]
 8015332:	210e      	movs	r1, #14
 8015334:	fb01 2303 	mla	r3, r1, r3, r2
 8015338:	e7f1      	b.n	801531e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801533a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801533e:	4293      	cmp	r3, r2
 8015340:	bf0a      	itet	eq
 8015342:	4b09      	ldreq	r3, [pc, #36]	; (8015368 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8015344:	2000      	movne	r0, #0
 8015346:	8818      	ldrheq	r0, [r3, #0]
 8015348:	e7ea      	b.n	8015320 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801534a:	bf00      	nop
 801534c:	20008594 	.word	0x20008594
 8015350:	08020620 	.word	0x08020620
 8015354:	080212d3 	.word	0x080212d3
 8015358:	0802117c 	.word	0x0802117c
 801535c:	2000858c 	.word	0x2000858c
 8015360:	20008590 	.word	0x20008590
 8015364:	20008574 	.word	0x20008574
 8015368:	200084e2 	.word	0x200084e2

0801536c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801536c:	b510      	push	{r4, lr}
 801536e:	4b23      	ldr	r3, [pc, #140]	; (80153fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015370:	681c      	ldr	r4, [r3, #0]
 8015372:	b934      	cbnz	r4, 8015382 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8015374:	4b22      	ldr	r3, [pc, #136]	; (8015400 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015376:	4a23      	ldr	r2, [pc, #140]	; (8015404 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8015378:	4823      	ldr	r0, [pc, #140]	; (8015408 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801537a:	f44f 7148 	mov.w	r1, #800	; 0x320
 801537e:	f008 f9d7 	bl	801d730 <__assert_func>
 8015382:	4a22      	ldr	r2, [pc, #136]	; (801540c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015384:	880b      	ldrh	r3, [r1, #0]
 8015386:	8812      	ldrh	r2, [r2, #0]
 8015388:	4293      	cmp	r3, r2
 801538a:	d211      	bcs.n	80153b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801538c:	2214      	movs	r2, #20
 801538e:	fb02 4303 	mla	r3, r2, r3, r4
 8015392:	8a1a      	ldrh	r2, [r3, #16]
 8015394:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015398:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801539c:	8a5b      	ldrh	r3, [r3, #18]
 801539e:	8004      	strh	r4, [r0, #0]
 80153a0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80153a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80153a8:	8041      	strh	r1, [r0, #2]
 80153aa:	8082      	strh	r2, [r0, #4]
 80153ac:	80c3      	strh	r3, [r0, #6]
 80153ae:	e00e      	b.n	80153ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80153b0:	4917      	ldr	r1, [pc, #92]	; (8015410 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80153b2:	8809      	ldrh	r1, [r1, #0]
 80153b4:	4411      	add	r1, r2
 80153b6:	428b      	cmp	r3, r1
 80153b8:	da0a      	bge.n	80153d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80153ba:	1a9b      	subs	r3, r3, r2
 80153bc:	4a15      	ldr	r2, [pc, #84]	; (8015414 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80153be:	6812      	ldr	r2, [r2, #0]
 80153c0:	210e      	movs	r1, #14
 80153c2:	fb01 2303 	mla	r3, r1, r3, r2
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	6002      	str	r2, [r0, #0]
 80153ca:	685a      	ldr	r2, [r3, #4]
 80153cc:	6042      	str	r2, [r0, #4]
 80153ce:	bd10      	pop	{r4, pc}
 80153d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80153d4:	4293      	cmp	r3, r2
 80153d6:	d10b      	bne.n	80153f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80153d8:	4b0f      	ldr	r3, [pc, #60]	; (8015418 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80153da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80153de:	4b0f      	ldr	r3, [pc, #60]	; (801541c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80153e0:	8081      	strh	r1, [r0, #4]
 80153e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80153e6:	80c2      	strh	r2, [r0, #6]
 80153e8:	2300      	movs	r3, #0
 80153ea:	8003      	strh	r3, [r0, #0]
 80153ec:	8043      	strh	r3, [r0, #2]
 80153ee:	e7ee      	b.n	80153ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80153f0:	2300      	movs	r3, #0
 80153f2:	8003      	strh	r3, [r0, #0]
 80153f4:	8043      	strh	r3, [r0, #2]
 80153f6:	8083      	strh	r3, [r0, #4]
 80153f8:	e7d8      	b.n	80153ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80153fa:	bf00      	nop
 80153fc:	20008594 	.word	0x20008594
 8015400:	08020620 	.word	0x08020620
 8015404:	08021240 	.word	0x08021240
 8015408:	0802117c 	.word	0x0802117c
 801540c:	2000858c 	.word	0x2000858c
 8015410:	20008590 	.word	0x20008590
 8015414:	20008574 	.word	0x20008574
 8015418:	200084e0 	.word	0x200084e0
 801541c:	200084e2 	.word	0x200084e2

08015420 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015420:	b508      	push	{r3, lr}
 8015422:	4b12      	ldr	r3, [pc, #72]	; (801546c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015424:	6819      	ldr	r1, [r3, #0]
 8015426:	b931      	cbnz	r1, 8015436 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015428:	4b11      	ldr	r3, [pc, #68]	; (8015470 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801542a:	4a12      	ldr	r2, [pc, #72]	; (8015474 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801542c:	4812      	ldr	r0, [pc, #72]	; (8015478 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801542e:	f44f 7151 	mov.w	r1, #836	; 0x344
 8015432:	f008 f97d 	bl	801d730 <__assert_func>
 8015436:	8803      	ldrh	r3, [r0, #0]
 8015438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801543c:	4293      	cmp	r3, r2
 801543e:	d012      	beq.n	8015466 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8015440:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015444:	4293      	cmp	r3, r2
 8015446:	d103      	bne.n	8015450 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8015448:	4b0c      	ldr	r3, [pc, #48]	; (801547c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801544e:	bd08      	pop	{r3, pc}
 8015450:	4a0b      	ldr	r2, [pc, #44]	; (8015480 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8015452:	6812      	ldr	r2, [r2, #0]
 8015454:	b11a      	cbz	r2, 801545e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8015456:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801545a:	2800      	cmp	r0, #0
 801545c:	d1f7      	bne.n	801544e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801545e:	2214      	movs	r2, #20
 8015460:	4353      	muls	r3, r2
 8015462:	58c8      	ldr	r0, [r1, r3]
 8015464:	e7f3      	b.n	801544e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8015466:	2000      	movs	r0, #0
 8015468:	e7f1      	b.n	801544e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801546a:	bf00      	nop
 801546c:	20008594 	.word	0x20008594
 8015470:	08020620 	.word	0x08020620
 8015474:	08021276 	.word	0x08021276
 8015478:	0802117c 	.word	0x0802117c
 801547c:	200084ec 	.word	0x200084ec
 8015480:	20008570 	.word	0x20008570

08015484 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015484:	8802      	ldrh	r2, [r0, #0]
 8015486:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801548a:	429a      	cmp	r2, r3
 801548c:	d840      	bhi.n	8015510 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801548e:	4b21      	ldr	r3, [pc, #132]	; (8015514 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8015490:	881b      	ldrh	r3, [r3, #0]
 8015492:	429a      	cmp	r2, r3
 8015494:	d220      	bcs.n	80154d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8015496:	4b20      	ldr	r3, [pc, #128]	; (8015518 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8015498:	6819      	ldr	r1, [r3, #0]
 801549a:	2314      	movs	r3, #20
 801549c:	fb03 1302 	mla	r3, r3, r2, r1
 80154a0:	6858      	ldr	r0, [r3, #4]
 80154a2:	2800      	cmp	r0, #0
 80154a4:	d035      	beq.n	8015512 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80154a6:	491d      	ldr	r1, [pc, #116]	; (801551c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80154a8:	6809      	ldr	r1, [r1, #0]
 80154aa:	2900      	cmp	r1, #0
 80154ac:	d031      	beq.n	8015512 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80154ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80154b2:	b371      	cbz	r1, 8015512 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80154b4:	895a      	ldrh	r2, [r3, #10]
 80154b6:	8918      	ldrh	r0, [r3, #8]
 80154b8:	4350      	muls	r0, r2
 80154ba:	7c5a      	ldrb	r2, [r3, #17]
 80154bc:	7cdb      	ldrb	r3, [r3, #19]
 80154be:	0952      	lsrs	r2, r2, #5
 80154c0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80154c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80154c8:	2b0b      	cmp	r3, #11
 80154ca:	bf18      	it	ne
 80154cc:	0040      	lslne	r0, r0, #1
 80154ce:	3003      	adds	r0, #3
 80154d0:	f020 0003 	bic.w	r0, r0, #3
 80154d4:	4408      	add	r0, r1
 80154d6:	4770      	bx	lr
 80154d8:	4911      	ldr	r1, [pc, #68]	; (8015520 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80154da:	8809      	ldrh	r1, [r1, #0]
 80154dc:	4419      	add	r1, r3
 80154de:	428a      	cmp	r2, r1
 80154e0:	da16      	bge.n	8015510 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80154e2:	4910      	ldr	r1, [pc, #64]	; (8015524 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80154e4:	6809      	ldr	r1, [r1, #0]
 80154e6:	1ad3      	subs	r3, r2, r3
 80154e8:	200e      	movs	r0, #14
 80154ea:	fb00 1303 	mla	r3, r0, r3, r1
 80154ee:	7b19      	ldrb	r1, [r3, #12]
 80154f0:	f001 011f 	and.w	r1, r1, #31
 80154f4:	290b      	cmp	r1, #11
 80154f6:	d10b      	bne.n	8015510 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80154f8:	8919      	ldrh	r1, [r3, #8]
 80154fa:	8958      	ldrh	r0, [r3, #10]
 80154fc:	4b07      	ldr	r3, [pc, #28]	; (801551c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80154fe:	4348      	muls	r0, r1
 8015500:	6819      	ldr	r1, [r3, #0]
 8015502:	3003      	adds	r0, #3
 8015504:	f020 0303 	bic.w	r3, r0, #3
 8015508:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801550c:	4418      	add	r0, r3
 801550e:	4770      	bx	lr
 8015510:	2000      	movs	r0, #0
 8015512:	4770      	bx	lr
 8015514:	2000858c 	.word	0x2000858c
 8015518:	20008594 	.word	0x20008594
 801551c:	20008570 	.word	0x20008570
 8015520:	20008590 	.word	0x20008590
 8015524:	20008574 	.word	0x20008574

08015528 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015528:	4b19      	ldr	r3, [pc, #100]	; (8015590 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801552a:	6819      	ldr	r1, [r3, #0]
 801552c:	8803      	ldrh	r3, [r0, #0]
 801552e:	b1e9      	cbz	r1, 801556c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015530:	4a18      	ldr	r2, [pc, #96]	; (8015594 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8015532:	8812      	ldrh	r2, [r2, #0]
 8015534:	429a      	cmp	r2, r3
 8015536:	d90a      	bls.n	801554e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015538:	2214      	movs	r2, #20
 801553a:	fb02 1303 	mla	r3, r2, r3, r1
 801553e:	7c58      	ldrb	r0, [r3, #17]
 8015540:	0942      	lsrs	r2, r0, #5
 8015542:	7cd8      	ldrb	r0, [r3, #19]
 8015544:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015548:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801554c:	4770      	bx	lr
 801554e:	4912      	ldr	r1, [pc, #72]	; (8015598 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8015550:	8809      	ldrh	r1, [r1, #0]
 8015552:	4411      	add	r1, r2
 8015554:	428b      	cmp	r3, r1
 8015556:	da09      	bge.n	801556c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015558:	1a9b      	subs	r3, r3, r2
 801555a:	4a10      	ldr	r2, [pc, #64]	; (801559c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801555c:	6812      	ldr	r2, [r2, #0]
 801555e:	210e      	movs	r1, #14
 8015560:	fb01 2303 	mla	r3, r1, r3, r2
 8015564:	7b18      	ldrb	r0, [r3, #12]
 8015566:	f000 001f 	and.w	r0, r0, #31
 801556a:	4770      	bx	lr
 801556c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015570:	4293      	cmp	r3, r2
 8015572:	d10a      	bne.n	801558a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8015574:	4b0a      	ldr	r3, [pc, #40]	; (80155a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801557c:	b10a      	cbz	r2, 8015582 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801557e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015580:	b900      	cbnz	r0, 8015584 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8015582:	6898      	ldr	r0, [r3, #8]
 8015584:	6803      	ldr	r3, [r0, #0]
 8015586:	6a1b      	ldr	r3, [r3, #32]
 8015588:	4718      	bx	r3
 801558a:	2000      	movs	r0, #0
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	20008594 	.word	0x20008594
 8015594:	2000858c 	.word	0x2000858c
 8015598:	20008590 	.word	0x20008590
 801559c:	20008574 	.word	0x20008574
 80155a0:	200084ec 	.word	0x200084ec

080155a4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80155a4:	2018      	movs	r0, #24
 80155a6:	4770      	bx	lr

080155a8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80155a8:	2001      	movs	r0, #1
 80155aa:	4770      	bx	lr

080155ac <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 80155ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80155b0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80155b4:	4770      	bx	lr

080155b6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80155b6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80155ba:	4770      	bx	lr

080155bc <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80155bc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80155c0:	4770      	bx	lr

080155c2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80155c2:	b2c8      	uxtb	r0, r1
 80155c4:	4770      	bx	lr

080155c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80155c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ca:	b085      	sub	sp, #20
 80155cc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80155ce:	9203      	str	r2, [sp, #12]
 80155d0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80155d4:	9201      	str	r2, [sp, #4]
 80155d6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80155de:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 80155e2:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80155e6:	9100      	str	r1, [sp, #0]
 80155e8:	fb00 2505 	mla	r5, r0, r5, r2
 80155ec:	683a      	ldr	r2, [r7, #0]
 80155ee:	6877      	ldr	r7, [r6, #4]
 80155f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80155f4:	4415      	add	r5, r2
 80155f6:	fa1f fc84 	uxth.w	ip, r4
 80155fa:	6832      	ldr	r2, [r6, #0]
 80155fc:	9202      	str	r2, [sp, #8]
 80155fe:	43e4      	mvns	r4, r4
 8015600:	3704      	adds	r7, #4
 8015602:	b2e4      	uxtb	r4, r4
 8015604:	9a00      	ldr	r2, [sp, #0]
 8015606:	2a00      	cmp	r2, #0
 8015608:	dc03      	bgt.n	8015612 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801560a:	9a03      	ldr	r2, [sp, #12]
 801560c:	2a00      	cmp	r2, #0
 801560e:	f340 8116 	ble.w	801583e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8015612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015614:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015618:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801561a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801561e:	2b00      	cmp	r3, #0
 8015620:	dd0f      	ble.n	8015642 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8015622:	1406      	asrs	r6, r0, #16
 8015624:	d406      	bmi.n	8015634 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8015626:	4546      	cmp	r6, r8
 8015628:	da04      	bge.n	8015634 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801562a:	1416      	asrs	r6, r2, #16
 801562c:	d402      	bmi.n	8015634 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801562e:	9901      	ldr	r1, [sp, #4]
 8015630:	428e      	cmp	r6, r1
 8015632:	db07      	blt.n	8015644 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8015634:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015636:	4408      	add	r0, r1
 8015638:	9912      	ldr	r1, [sp, #72]	; 0x48
 801563a:	3b01      	subs	r3, #1
 801563c:	440a      	add	r2, r1
 801563e:	3503      	adds	r5, #3
 8015640:	e7ed      	b.n	801561e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8015642:	d011      	beq.n	8015668 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8015644:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015646:	1e5e      	subs	r6, r3, #1
 8015648:	fb01 0e06 	mla	lr, r1, r6, r0
 801564c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8015650:	d548      	bpl.n	80156e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8015652:	4699      	mov	r9, r3
 8015654:	462e      	mov	r6, r5
 8015656:	f1b9 0f00 	cmp.w	r9, #0
 801565a:	f300 809e 	bgt.w	801579a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801565e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015662:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015666:	441d      	add	r5, r3
 8015668:	9b00      	ldr	r3, [sp, #0]
 801566a:	2b00      	cmp	r3, #0
 801566c:	f340 80e7 	ble.w	801583e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8015670:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015678:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801567c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801567e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015682:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015686:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801568a:	eef0 6a62 	vmov.f32	s13, s5
 801568e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015692:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015696:	ee77 2a62 	vsub.f32	s5, s14, s5
 801569a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801569e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80156a2:	eef0 6a43 	vmov.f32	s13, s6
 80156a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80156aa:	ee12 2a90 	vmov	r2, s5
 80156ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80156b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80156b6:	ee13 2a10 	vmov	r2, s6
 80156ba:	9311      	str	r3, [sp, #68]	; 0x44
 80156bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156be:	fb92 f3f3 	sdiv	r3, r2, r3
 80156c2:	9312      	str	r3, [sp, #72]	; 0x48
 80156c4:	9b00      	ldr	r3, [sp, #0]
 80156c6:	9a03      	ldr	r2, [sp, #12]
 80156c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80156cc:	3b01      	subs	r3, #1
 80156ce:	9300      	str	r3, [sp, #0]
 80156d0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80156d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156d6:	eeb0 3a67 	vmov.f32	s6, s15
 80156da:	bf08      	it	eq
 80156dc:	4613      	moveq	r3, r2
 80156de:	eef0 2a47 	vmov.f32	s5, s14
 80156e2:	e78f      	b.n	8015604 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80156e4:	45c6      	cmp	lr, r8
 80156e6:	dab4      	bge.n	8015652 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80156e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80156ea:	fb01 2606 	mla	r6, r1, r6, r2
 80156ee:	1436      	asrs	r6, r6, #16
 80156f0:	d4af      	bmi.n	8015652 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80156f2:	9901      	ldr	r1, [sp, #4]
 80156f4:	428e      	cmp	r6, r1
 80156f6:	daac      	bge.n	8015652 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80156f8:	1cee      	adds	r6, r5, #3
 80156fa:	4699      	mov	r9, r3
 80156fc:	f1b9 0f00 	cmp.w	r9, #0
 8015700:	f106 0603 	add.w	r6, r6, #3
 8015704:	ddab      	ble.n	801565e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8015706:	9902      	ldr	r1, [sp, #8]
 8015708:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801570c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015710:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015714:	fb08 1e0e 	mla	lr, r8, lr, r1
 8015718:	fb1b fb04 	smulbb	fp, fp, r4
 801571c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8015720:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015722:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015726:	eb07 0a0e 	add.w	sl, r7, lr
 801572a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801572e:	fb0e be0c 	mla	lr, lr, ip, fp
 8015732:	fa1f fe8e 	uxth.w	lr, lr
 8015736:	f10e 0b01 	add.w	fp, lr, #1
 801573a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801573e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015742:	f806 ec06 	strb.w	lr, [r6, #-6]
 8015746:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801574a:	f89a e001 	ldrb.w	lr, [sl, #1]
 801574e:	fb1b fb04 	smulbb	fp, fp, r4
 8015752:	fb0e be0c 	mla	lr, lr, ip, fp
 8015756:	fa1f fe8e 	uxth.w	lr, lr
 801575a:	f10e 0b01 	add.w	fp, lr, #1
 801575e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8015762:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015766:	f806 ec05 	strb.w	lr, [r6, #-5]
 801576a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801576e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015772:	fb1a fa04 	smulbb	sl, sl, r4
 8015776:	fb0e ae0c 	mla	lr, lr, ip, sl
 801577a:	fa1f fe8e 	uxth.w	lr, lr
 801577e:	f10e 0a01 	add.w	sl, lr, #1
 8015782:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8015786:	4408      	add	r0, r1
 8015788:	9912      	ldr	r1, [sp, #72]	; 0x48
 801578a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801578e:	f806 ec04 	strb.w	lr, [r6, #-4]
 8015792:	440a      	add	r2, r1
 8015794:	f109 39ff 	add.w	r9, r9, #4294967295
 8015798:	e7b0      	b.n	80156fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801579a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801579e:	d446      	bmi.n	801582e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80157a0:	45c2      	cmp	sl, r8
 80157a2:	da44      	bge.n	801582e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80157a4:	ea5f 4e22 	movs.w	lr, r2, asr #16
 80157a8:	d441      	bmi.n	801582e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80157aa:	9901      	ldr	r1, [sp, #4]
 80157ac:	458e      	cmp	lr, r1
 80157ae:	da3e      	bge.n	801582e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80157b0:	9902      	ldr	r1, [sp, #8]
 80157b2:	f896 b000 	ldrb.w	fp, [r6]
 80157b6:	fb08 1e0e 	mla	lr, r8, lr, r1
 80157ba:	fb1b fb04 	smulbb	fp, fp, r4
 80157be:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80157c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80157c6:	eb07 0a0e 	add.w	sl, r7, lr
 80157ca:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80157ce:	fb0e be0c 	mla	lr, lr, ip, fp
 80157d2:	fa1f fe8e 	uxth.w	lr, lr
 80157d6:	f10e 0b01 	add.w	fp, lr, #1
 80157da:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80157de:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80157e2:	f886 e000 	strb.w	lr, [r6]
 80157e6:	f896 b001 	ldrb.w	fp, [r6, #1]
 80157ea:	f89a e001 	ldrb.w	lr, [sl, #1]
 80157ee:	fb1b fb04 	smulbb	fp, fp, r4
 80157f2:	fb0e be0c 	mla	lr, lr, ip, fp
 80157f6:	fa1f fe8e 	uxth.w	lr, lr
 80157fa:	f10e 0b01 	add.w	fp, lr, #1
 80157fe:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8015802:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015806:	f886 e001 	strb.w	lr, [r6, #1]
 801580a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801580e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015812:	fb1a fa04 	smulbb	sl, sl, r4
 8015816:	fb0e ae0c 	mla	lr, lr, ip, sl
 801581a:	fa1f fe8e 	uxth.w	lr, lr
 801581e:	f10e 0a01 	add.w	sl, lr, #1
 8015822:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8015826:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801582a:	f886 e002 	strb.w	lr, [r6, #2]
 801582e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015830:	4408      	add	r0, r1
 8015832:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015834:	3603      	adds	r6, #3
 8015836:	440a      	add	r2, r1
 8015838:	f109 39ff 	add.w	r9, r9, #4294967295
 801583c:	e70b      	b.n	8015656 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801583e:	b005      	add	sp, #20
 8015840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015844 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	b085      	sub	sp, #20
 801584a:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801584e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015850:	9203      	str	r2, [sp, #12]
 8015852:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015856:	6870      	ldr	r0, [r6, #4]
 8015858:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801585a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801585e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8015862:	9101      	str	r1, [sp, #4]
 8015864:	fb00 2404 	mla	r4, r0, r4, r2
 8015868:	6832      	ldr	r2, [r6, #0]
 801586a:	686e      	ldr	r6, [r5, #4]
 801586c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015870:	4414      	add	r4, r2
 8015872:	682a      	ldr	r2, [r5, #0]
 8015874:	9202      	str	r2, [sp, #8]
 8015876:	3604      	adds	r6, #4
 8015878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801587c:	9a01      	ldr	r2, [sp, #4]
 801587e:	2a00      	cmp	r2, #0
 8015880:	dc03      	bgt.n	801588a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8015882:	9a03      	ldr	r2, [sp, #12]
 8015884:	2a00      	cmp	r2, #0
 8015886:	f340 80b2 	ble.w	80159ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801588a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801588c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015890:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015892:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015896:	2b00      	cmp	r3, #0
 8015898:	dd0c      	ble.n	80158b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801589a:	1405      	asrs	r5, r0, #16
 801589c:	d405      	bmi.n	80158aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801589e:	4575      	cmp	r5, lr
 80158a0:	da03      	bge.n	80158aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80158a2:	1415      	asrs	r5, r2, #16
 80158a4:	d401      	bmi.n	80158aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80158a6:	4545      	cmp	r5, r8
 80158a8:	db05      	blt.n	80158b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80158aa:	4460      	add	r0, ip
 80158ac:	443a      	add	r2, r7
 80158ae:	3b01      	subs	r3, #1
 80158b0:	3403      	adds	r4, #3
 80158b2:	e7f0      	b.n	8015896 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80158b4:	d03d      	beq.n	8015932 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80158b6:	1e5d      	subs	r5, r3, #1
 80158b8:	fb0c 0905 	mla	r9, ip, r5, r0
 80158bc:	ea5f 4929 	movs.w	r9, r9, asr #16
 80158c0:	d42c      	bmi.n	801591c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80158c2:	45f1      	cmp	r9, lr
 80158c4:	da2a      	bge.n	801591c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80158c6:	fb07 2505 	mla	r5, r7, r5, r2
 80158ca:	142d      	asrs	r5, r5, #16
 80158cc:	d426      	bmi.n	801591c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80158ce:	4545      	cmp	r5, r8
 80158d0:	da24      	bge.n	801591c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80158d2:	1ce5      	adds	r5, r4, #3
 80158d4:	469a      	mov	sl, r3
 80158d6:	f1ba 0f00 	cmp.w	sl, #0
 80158da:	f105 0503 	add.w	r5, r5, #3
 80158de:	dd23      	ble.n	8015928 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80158e0:	9902      	ldr	r1, [sp, #8]
 80158e2:	ea4f 4922 	mov.w	r9, r2, asr #16
 80158e6:	ea4f 4b20 	mov.w	fp, r0, asr #16
 80158ea:	fb0e 1909 	mla	r9, lr, r9, r1
 80158ee:	4460      	add	r0, ip
 80158f0:	f819 900b 	ldrb.w	r9, [r9, fp]
 80158f4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80158f8:	eb06 0b09 	add.w	fp, r6, r9
 80158fc:	f816 9009 	ldrb.w	r9, [r6, r9]
 8015900:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015904:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8015908:	f805 9c05 	strb.w	r9, [r5, #-5]
 801590c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8015910:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015914:	443a      	add	r2, r7
 8015916:	f10a 3aff 	add.w	sl, sl, #4294967295
 801591a:	e7dc      	b.n	80158d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801591c:	2500      	movs	r5, #0
 801591e:	eba3 0905 	sub.w	r9, r3, r5
 8015922:	f1b9 0f00 	cmp.w	r9, #0
 8015926:	dc3c      	bgt.n	80159a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 8015928:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801592c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015930:	441c      	add	r4, r3
 8015932:	9b01      	ldr	r3, [sp, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	dd5a      	ble.n	80159ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8015938:	ee30 0a04 	vadd.f32	s0, s0, s8
 801593c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015940:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015946:	ee31 1a05 	vadd.f32	s2, s2, s10
 801594a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801594e:	eeb0 6a62 	vmov.f32	s12, s5
 8015952:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015956:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801595a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801595e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015962:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015966:	eeb0 6a43 	vmov.f32	s12, s6
 801596a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801596e:	ee12 2a90 	vmov	r2, s5
 8015972:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015976:	fb92 fcf3 	sdiv	ip, r2, r3
 801597a:	ee13 2a10 	vmov	r2, s6
 801597e:	fb92 f7f3 	sdiv	r7, r2, r3
 8015982:	9b01      	ldr	r3, [sp, #4]
 8015984:	9a03      	ldr	r2, [sp, #12]
 8015986:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801598a:	3b01      	subs	r3, #1
 801598c:	9301      	str	r3, [sp, #4]
 801598e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015994:	eeb0 3a67 	vmov.f32	s6, s15
 8015998:	bf08      	it	eq
 801599a:	4613      	moveq	r3, r2
 801599c:	eef0 2a47 	vmov.f32	s5, s14
 80159a0:	e76c      	b.n	801587c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80159a2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80159a6:	d41e      	bmi.n	80159e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80159a8:	45f2      	cmp	sl, lr
 80159aa:	da1c      	bge.n	80159e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80159ac:	ea5f 4922 	movs.w	r9, r2, asr #16
 80159b0:	d419      	bmi.n	80159e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80159b2:	45c1      	cmp	r9, r8
 80159b4:	da17      	bge.n	80159e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80159b6:	9902      	ldr	r1, [sp, #8]
 80159b8:	fb0e 1909 	mla	r9, lr, r9, r1
 80159bc:	f819 900a 	ldrb.w	r9, [r9, sl]
 80159c0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80159c4:	eb06 0a09 	add.w	sl, r6, r9
 80159c8:	f816 b009 	ldrb.w	fp, [r6, r9]
 80159cc:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 80159d0:	f804 b009 	strb.w	fp, [r4, r9]
 80159d4:	44a1      	add	r9, r4
 80159d6:	f89a b001 	ldrb.w	fp, [sl, #1]
 80159da:	f889 b001 	strb.w	fp, [r9, #1]
 80159de:	f89a a002 	ldrb.w	sl, [sl, #2]
 80159e2:	f889 a002 	strb.w	sl, [r9, #2]
 80159e6:	4460      	add	r0, ip
 80159e8:	443a      	add	r2, r7
 80159ea:	3501      	adds	r5, #1
 80159ec:	e797      	b.n	801591e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80159ee:	b005      	add	sp, #20
 80159f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080159f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80159f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f8:	b087      	sub	sp, #28
 80159fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80159fe:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015a00:	9204      	str	r2, [sp, #16]
 8015a02:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8015a06:	9205      	str	r2, [sp, #20]
 8015a08:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8015a0c:	6870      	ldr	r0, [r6, #4]
 8015a0e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015a10:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8015a14:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8015a18:	9101      	str	r1, [sp, #4]
 8015a1a:	fb00 2505 	mla	r5, r0, r5, r2
 8015a1e:	6832      	ldr	r2, [r6, #0]
 8015a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a24:	4415      	add	r5, r2
 8015a26:	6822      	ldr	r2, [r4, #0]
 8015a28:	9202      	str	r2, [sp, #8]
 8015a2a:	6862      	ldr	r2, [r4, #4]
 8015a2c:	3204      	adds	r2, #4
 8015a2e:	9203      	str	r2, [sp, #12]
 8015a30:	9a01      	ldr	r2, [sp, #4]
 8015a32:	2a00      	cmp	r2, #0
 8015a34:	dc03      	bgt.n	8015a3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8015a36:	9a04      	ldr	r2, [sp, #16]
 8015a38:	2a00      	cmp	r2, #0
 8015a3a:	f340 8124 	ble.w	8015c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8015a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015a40:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015a46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	dd0e      	ble.n	8015a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8015a4e:	1422      	asrs	r2, r4, #16
 8015a50:	d405      	bmi.n	8015a5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8015a52:	4572      	cmp	r2, lr
 8015a54:	da03      	bge.n	8015a5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8015a56:	1402      	asrs	r2, r0, #16
 8015a58:	d401      	bmi.n	8015a5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8015a5a:	4542      	cmp	r2, r8
 8015a5c:	db07      	blt.n	8015a6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8015a5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015a60:	4414      	add	r4, r2
 8015a62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a64:	3b01      	subs	r3, #1
 8015a66:	4410      	add	r0, r2
 8015a68:	3503      	adds	r5, #3
 8015a6a:	e7ee      	b.n	8015a4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8015a6c:	d010      	beq.n	8015a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8015a6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015a70:	1e5a      	subs	r2, r3, #1
 8015a72:	fb06 4602 	mla	r6, r6, r2, r4
 8015a76:	1436      	asrs	r6, r6, #16
 8015a78:	d546      	bpl.n	8015b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8015a7a:	4699      	mov	r9, r3
 8015a7c:	462f      	mov	r7, r5
 8015a7e:	f1b9 0f00 	cmp.w	r9, #0
 8015a82:	f300 80a5 	bgt.w	8015bd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8015a86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015a8e:	441d      	add	r5, r3
 8015a90:	9b01      	ldr	r3, [sp, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	f340 80f7 	ble.w	8015c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8015a98:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015a9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015aa0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015aa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015aaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015aae:	eeb0 6a62 	vmov.f32	s12, s5
 8015ab2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ab6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015aba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015abe:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015ac2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015ac6:	eeb0 6a43 	vmov.f32	s12, s6
 8015aca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015ace:	ee12 2a90 	vmov	r2, s5
 8015ad2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ada:	ee13 2a10 	vmov	r2, s6
 8015ade:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ae6:	9314      	str	r3, [sp, #80]	; 0x50
 8015ae8:	9b01      	ldr	r3, [sp, #4]
 8015aea:	9a04      	ldr	r2, [sp, #16]
 8015aec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015af0:	3b01      	subs	r3, #1
 8015af2:	9301      	str	r3, [sp, #4]
 8015af4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015afa:	eeb0 3a67 	vmov.f32	s6, s15
 8015afe:	bf08      	it	eq
 8015b00:	4613      	moveq	r3, r2
 8015b02:	eef0 2a47 	vmov.f32	s5, s14
 8015b06:	e793      	b.n	8015a30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8015b08:	4576      	cmp	r6, lr
 8015b0a:	dab6      	bge.n	8015a7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8015b0c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015b0e:	fb06 0202 	mla	r2, r6, r2, r0
 8015b12:	1412      	asrs	r2, r2, #16
 8015b14:	d4b1      	bmi.n	8015a7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8015b16:	4542      	cmp	r2, r8
 8015b18:	daaf      	bge.n	8015a7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8015b1a:	1cef      	adds	r7, r5, #3
 8015b1c:	4699      	mov	r9, r3
 8015b1e:	f1b9 0f00 	cmp.w	r9, #0
 8015b22:	ddb0      	ble.n	8015a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8015b24:	9902      	ldr	r1, [sp, #8]
 8015b26:	1402      	asrs	r2, r0, #16
 8015b28:	1426      	asrs	r6, r4, #16
 8015b2a:	fb0e 1202 	mla	r2, lr, r2, r1
 8015b2e:	9903      	ldr	r1, [sp, #12]
 8015b30:	5d92      	ldrb	r2, [r2, r6]
 8015b32:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8015b36:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8015b3a:	d041      	beq.n	8015bc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8015b3c:	9a05      	ldr	r2, [sp, #20]
 8015b3e:	fb02 fc0c 	mul.w	ip, r2, ip
 8015b42:	f10c 0201 	add.w	r2, ip, #1
 8015b46:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8015b4a:	1212      	asrs	r2, r2, #8
 8015b4c:	fa1f fa82 	uxth.w	sl, r2
 8015b50:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8015b54:	fa5f fb86 	uxtb.w	fp, r6
 8015b58:	43d2      	mvns	r2, r2
 8015b5a:	b2d2      	uxtb	r2, r2
 8015b5c:	fb1b fb0a 	smulbb	fp, fp, sl
 8015b60:	fb0c bc02 	mla	ip, ip, r2, fp
 8015b64:	fa1f fc8c 	uxth.w	ip, ip
 8015b68:	f10c 0b01 	add.w	fp, ip, #1
 8015b6c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015b70:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015b74:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015b78:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015b7c:	fb1b fb0a 	smulbb	fp, fp, sl
 8015b80:	f807 cc03 	strb.w	ip, [r7, #-3]
 8015b84:	fb16 fa0a 	smulbb	sl, r6, sl
 8015b88:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8015b8c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015b90:	fb0c bc02 	mla	ip, ip, r2, fp
 8015b94:	fb06 aa02 	mla	sl, r6, r2, sl
 8015b98:	fa1f fc8c 	uxth.w	ip, ip
 8015b9c:	fa1f fa8a 	uxth.w	sl, sl
 8015ba0:	f10c 0b01 	add.w	fp, ip, #1
 8015ba4:	f10a 0601 	add.w	r6, sl, #1
 8015ba8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015bac:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015bb0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015bb4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015bb8:	f807 cc02 	strb.w	ip, [r7, #-2]
 8015bbc:	f807 ac01 	strb.w	sl, [r7, #-1]
 8015bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015bc2:	4414      	add	r4, r2
 8015bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015bc6:	3703      	adds	r7, #3
 8015bc8:	4410      	add	r0, r2
 8015bca:	f109 39ff 	add.w	r9, r9, #4294967295
 8015bce:	e7a6      	b.n	8015b1e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8015bd0:	1426      	asrs	r6, r4, #16
 8015bd2:	d450      	bmi.n	8015c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8015bd4:	4576      	cmp	r6, lr
 8015bd6:	da4e      	bge.n	8015c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8015bd8:	1402      	asrs	r2, r0, #16
 8015bda:	d44c      	bmi.n	8015c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8015bdc:	4542      	cmp	r2, r8
 8015bde:	da4a      	bge.n	8015c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8015be0:	9902      	ldr	r1, [sp, #8]
 8015be2:	fb0e 1202 	mla	r2, lr, r2, r1
 8015be6:	9903      	ldr	r1, [sp, #12]
 8015be8:	5d92      	ldrb	r2, [r2, r6]
 8015bea:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8015bee:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8015bf2:	d040      	beq.n	8015c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8015bf4:	9a05      	ldr	r2, [sp, #20]
 8015bf6:	fb02 fc0c 	mul.w	ip, r2, ip
 8015bfa:	f10c 0201 	add.w	r2, ip, #1
 8015bfe:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8015c02:	1212      	asrs	r2, r2, #8
 8015c04:	fa1f fa82 	uxth.w	sl, r2
 8015c08:	f897 c000 	ldrb.w	ip, [r7]
 8015c0c:	fa5f fb86 	uxtb.w	fp, r6
 8015c10:	43d2      	mvns	r2, r2
 8015c12:	b2d2      	uxtb	r2, r2
 8015c14:	fb1b fb0a 	smulbb	fp, fp, sl
 8015c18:	fb0c bc02 	mla	ip, ip, r2, fp
 8015c1c:	fa1f fc8c 	uxth.w	ip, ip
 8015c20:	f10c 0b01 	add.w	fp, ip, #1
 8015c24:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015c28:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015c2c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015c30:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015c34:	fb1b fb0a 	smulbb	fp, fp, sl
 8015c38:	f887 c000 	strb.w	ip, [r7]
 8015c3c:	fb16 fa0a 	smulbb	sl, r6, sl
 8015c40:	f897 c001 	ldrb.w	ip, [r7, #1]
 8015c44:	78be      	ldrb	r6, [r7, #2]
 8015c46:	fb0c bc02 	mla	ip, ip, r2, fp
 8015c4a:	fb06 aa02 	mla	sl, r6, r2, sl
 8015c4e:	fa1f fc8c 	uxth.w	ip, ip
 8015c52:	fa1f fa8a 	uxth.w	sl, sl
 8015c56:	f10c 0b01 	add.w	fp, ip, #1
 8015c5a:	f10a 0601 	add.w	r6, sl, #1
 8015c5e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015c62:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015c66:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015c6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015c6e:	f887 c001 	strb.w	ip, [r7, #1]
 8015c72:	f887 a002 	strb.w	sl, [r7, #2]
 8015c76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015c78:	4414      	add	r4, r2
 8015c7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c7c:	3703      	adds	r7, #3
 8015c7e:	4410      	add	r0, r2
 8015c80:	f109 39ff 	add.w	r9, r9, #4294967295
 8015c84:	e6fb      	b.n	8015a7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8015c86:	b007      	add	sp, #28
 8015c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c8c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c90:	b085      	sub	sp, #20
 8015c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c96:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015c98:	9203      	str	r2, [sp, #12]
 8015c9a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015c9e:	6870      	ldr	r0, [r6, #4]
 8015ca0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8015ca2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8015ca6:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8015caa:	9100      	str	r1, [sp, #0]
 8015cac:	fb00 2404 	mla	r4, r0, r4, r2
 8015cb0:	6832      	ldr	r2, [r6, #0]
 8015cb2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015cb6:	4414      	add	r4, r2
 8015cb8:	682a      	ldr	r2, [r5, #0]
 8015cba:	9201      	str	r2, [sp, #4]
 8015cbc:	686a      	ldr	r2, [r5, #4]
 8015cbe:	3204      	adds	r2, #4
 8015cc0:	9202      	str	r2, [sp, #8]
 8015cc2:	9a00      	ldr	r2, [sp, #0]
 8015cc4:	2a00      	cmp	r2, #0
 8015cc6:	dc03      	bgt.n	8015cd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8015cc8:	9a03      	ldr	r2, [sp, #12]
 8015cca:	2a00      	cmp	r2, #0
 8015ccc:	f340 8131 	ble.w	8015f32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8015cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015cd2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015cd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015cd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	dd0e      	ble.n	8015cfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8015ce0:	1405      	asrs	r5, r0, #16
 8015ce2:	d405      	bmi.n	8015cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015ce4:	4575      	cmp	r5, lr
 8015ce6:	da03      	bge.n	8015cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015ce8:	1415      	asrs	r5, r2, #16
 8015cea:	d401      	bmi.n	8015cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015cec:	4545      	cmp	r5, r8
 8015cee:	db07      	blt.n	8015d00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8015cf0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015cf2:	4428      	add	r0, r5
 8015cf4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015cf6:	3b01      	subs	r3, #1
 8015cf8:	442a      	add	r2, r5
 8015cfa:	3403      	adds	r4, #3
 8015cfc:	e7ee      	b.n	8015cdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8015cfe:	d06f      	beq.n	8015de0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8015d00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015d02:	1e5d      	subs	r5, r3, #1
 8015d04:	fb06 0605 	mla	r6, r6, r5, r0
 8015d08:	1436      	asrs	r6, r6, #16
 8015d0a:	d460      	bmi.n	8015dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8015d0c:	4576      	cmp	r6, lr
 8015d0e:	da5e      	bge.n	8015dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8015d10:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015d12:	fb06 2505 	mla	r5, r6, r5, r2
 8015d16:	142d      	asrs	r5, r5, #16
 8015d18:	d459      	bmi.n	8015dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8015d1a:	4545      	cmp	r5, r8
 8015d1c:	da57      	bge.n	8015dce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8015d1e:	1ce5      	adds	r5, r4, #3
 8015d20:	469a      	mov	sl, r3
 8015d22:	f1ba 0f00 	cmp.w	sl, #0
 8015d26:	dd56      	ble.n	8015dd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 8015d28:	9901      	ldr	r1, [sp, #4]
 8015d2a:	1416      	asrs	r6, r2, #16
 8015d2c:	1407      	asrs	r7, r0, #16
 8015d2e:	fb0e 1606 	mla	r6, lr, r6, r1
 8015d32:	9902      	ldr	r1, [sp, #8]
 8015d34:	5df6      	ldrb	r6, [r6, r7]
 8015d36:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8015d3a:	0e37      	lsrs	r7, r6, #24
 8015d3c:	2fff      	cmp	r7, #255	; 0xff
 8015d3e:	f000 80ef 	beq.w	8015f20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8015d42:	fa5f fc87 	uxtb.w	ip, r7
 8015d46:	b3d7      	cbz	r7, 8015dbe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8015d48:	fa1f f78c 	uxth.w	r7, ip
 8015d4c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8015d50:	fa5f fb86 	uxtb.w	fp, r6
 8015d54:	ea6f 0c0c 	mvn.w	ip, ip
 8015d58:	fa5f fc8c 	uxtb.w	ip, ip
 8015d5c:	fb1b fb07 	smulbb	fp, fp, r7
 8015d60:	fb09 b90c 	mla	r9, r9, ip, fp
 8015d64:	fa1f f989 	uxth.w	r9, r9
 8015d68:	f109 0b01 	add.w	fp, r9, #1
 8015d6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015d70:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8015d74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d78:	fb1b fb0c 	smulbb	fp, fp, ip
 8015d7c:	f805 9c03 	strb.w	r9, [r5, #-3]
 8015d80:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8015d84:	fb09 b907 	mla	r9, r9, r7, fp
 8015d88:	fa1f f989 	uxth.w	r9, r9
 8015d8c:	f109 0b01 	add.w	fp, r9, #1
 8015d90:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015d94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d98:	f805 9c02 	strb.w	r9, [r5, #-2]
 8015d9c:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8015da0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015da4:	fb19 fc0c 	smulbb	ip, r9, ip
 8015da8:	fb06 c607 	mla	r6, r6, r7, ip
 8015dac:	b2b6      	uxth	r6, r6
 8015dae:	f106 0c01 	add.w	ip, r6, #1
 8015db2:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8015db6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015dba:	f805 cc01 	strb.w	ip, [r5, #-1]
 8015dbe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015dc0:	4408      	add	r0, r1
 8015dc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015dc4:	3503      	adds	r5, #3
 8015dc6:	440a      	add	r2, r1
 8015dc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015dcc:	e7a9      	b.n	8015d22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8015dce:	2600      	movs	r6, #0
 8015dd0:	1b9d      	subs	r5, r3, r6
 8015dd2:	2d00      	cmp	r5, #0
 8015dd4:	dc40      	bgt.n	8015e58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8015dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015dda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015dde:	441c      	add	r4, r3
 8015de0:	9b00      	ldr	r3, [sp, #0]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f340 80a5 	ble.w	8015f32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8015de8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015dec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015df0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015df6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015dfa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015dfe:	eeb0 6a62 	vmov.f32	s12, s5
 8015e02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015e06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015e0e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015e12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015e16:	eeb0 6a43 	vmov.f32	s12, s6
 8015e1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015e1e:	ee12 2a90 	vmov	r2, s5
 8015e22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e2a:	ee13 2a10 	vmov	r2, s6
 8015e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8015e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e36:	9312      	str	r3, [sp, #72]	; 0x48
 8015e38:	9b00      	ldr	r3, [sp, #0]
 8015e3a:	9a03      	ldr	r2, [sp, #12]
 8015e3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e40:	3b01      	subs	r3, #1
 8015e42:	9300      	str	r3, [sp, #0]
 8015e44:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e4a:	eeb0 3a67 	vmov.f32	s6, s15
 8015e4e:	bf08      	it	eq
 8015e50:	4613      	moveq	r3, r2
 8015e52:	eef0 2a47 	vmov.f32	s5, s14
 8015e56:	e734      	b.n	8015cc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8015e58:	1407      	asrs	r7, r0, #16
 8015e5a:	d450      	bmi.n	8015efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8015e5c:	4577      	cmp	r7, lr
 8015e5e:	da4e      	bge.n	8015efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8015e60:	1415      	asrs	r5, r2, #16
 8015e62:	d44c      	bmi.n	8015efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8015e64:	4545      	cmp	r5, r8
 8015e66:	da4a      	bge.n	8015efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8015e68:	9901      	ldr	r1, [sp, #4]
 8015e6a:	fb0e 1505 	mla	r5, lr, r5, r1
 8015e6e:	9902      	ldr	r1, [sp, #8]
 8015e70:	5ded      	ldrb	r5, [r5, r7]
 8015e72:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8015e76:	0e2f      	lsrs	r7, r5, #24
 8015e78:	2fff      	cmp	r7, #255	; 0xff
 8015e7a:	d046      	beq.n	8015f0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8015e7c:	fa5f f987 	uxtb.w	r9, r7
 8015e80:	b3ef      	cbz	r7, 8015efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8015e82:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8015e86:	fa1f fc89 	uxth.w	ip, r9
 8015e8a:	f814 a007 	ldrb.w	sl, [r4, r7]
 8015e8e:	fa5f fb85 	uxtb.w	fp, r5
 8015e92:	ea6f 0909 	mvn.w	r9, r9
 8015e96:	fa5f f989 	uxtb.w	r9, r9
 8015e9a:	fb1b fb0c 	smulbb	fp, fp, ip
 8015e9e:	fb0a ba09 	mla	sl, sl, r9, fp
 8015ea2:	fa1f fa8a 	uxth.w	sl, sl
 8015ea6:	f10a 0b01 	add.w	fp, sl, #1
 8015eaa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8015eae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015eb2:	f804 a007 	strb.w	sl, [r4, r7]
 8015eb6:	4427      	add	r7, r4
 8015eb8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015ebc:	f897 b001 	ldrb.w	fp, [r7, #1]
 8015ec0:	fb1b fb09 	smulbb	fp, fp, r9
 8015ec4:	fb0a ba0c 	mla	sl, sl, ip, fp
 8015ec8:	fa1f fa8a 	uxth.w	sl, sl
 8015ecc:	f10a 0b01 	add.w	fp, sl, #1
 8015ed0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8015ed4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015ed8:	f887 a001 	strb.w	sl, [r7, #1]
 8015edc:	f897 a002 	ldrb.w	sl, [r7, #2]
 8015ee0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8015ee4:	fb1a f909 	smulbb	r9, sl, r9
 8015ee8:	fb05 950c 	mla	r5, r5, ip, r9
 8015eec:	b2ad      	uxth	r5, r5
 8015eee:	f105 0901 	add.w	r9, r5, #1
 8015ef2:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8015ef6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015efa:	f887 9002 	strb.w	r9, [r7, #2]
 8015efe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f00:	4408      	add	r0, r1
 8015f02:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015f04:	3601      	adds	r6, #1
 8015f06:	440a      	add	r2, r1
 8015f08:	e762      	b.n	8015dd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8015f0a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8015f0e:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8015f12:	55e5      	strb	r5, [r4, r7]
 8015f14:	4427      	add	r7, r4
 8015f16:	0c2d      	lsrs	r5, r5, #16
 8015f18:	f887 c001 	strb.w	ip, [r7, #1]
 8015f1c:	70bd      	strb	r5, [r7, #2]
 8015f1e:	e7ee      	b.n	8015efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8015f20:	0a37      	lsrs	r7, r6, #8
 8015f22:	f805 6c03 	strb.w	r6, [r5, #-3]
 8015f26:	0c36      	lsrs	r6, r6, #16
 8015f28:	f805 7c02 	strb.w	r7, [r5, #-2]
 8015f2c:	f805 6c01 	strb.w	r6, [r5, #-1]
 8015f30:	e745      	b.n	8015dbe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8015f32:	b005      	add	sp, #20
 8015f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f3e:	9201      	str	r2, [sp, #4]
 8015f40:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8015f44:	9200      	str	r2, [sp, #0]
 8015f46:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015f4a:	6870      	ldr	r0, [r6, #4]
 8015f4c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015f50:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8015f54:	fb00 2404 	mla	r4, r0, r4, r2
 8015f58:	6832      	ldr	r2, [r6, #0]
 8015f5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015f5e:	4414      	add	r4, r2
 8015f60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f62:	fa1f fc85 	uxth.w	ip, r5
 8015f66:	f8d2 8000 	ldr.w	r8, [r2]
 8015f6a:	43ed      	mvns	r5, r5
 8015f6c:	b2ed      	uxtb	r5, r5
 8015f6e:	2900      	cmp	r1, #0
 8015f70:	dc03      	bgt.n	8015f7a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8015f72:	9a01      	ldr	r2, [sp, #4]
 8015f74:	2a00      	cmp	r2, #0
 8015f76:	f340 8104 	ble.w	8016182 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8015f7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f82:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	dd0f      	ble.n	8015faa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8015f8a:	1406      	asrs	r6, r0, #16
 8015f8c:	d406      	bmi.n	8015f9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015f8e:	4576      	cmp	r6, lr
 8015f90:	da04      	bge.n	8015f9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015f92:	1416      	asrs	r6, r2, #16
 8015f94:	d402      	bmi.n	8015f9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015f96:	9f00      	ldr	r7, [sp, #0]
 8015f98:	42be      	cmp	r6, r7
 8015f9a:	db07      	blt.n	8015fac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8015f9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015f9e:	4430      	add	r0, r6
 8015fa0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015fa2:	3b01      	subs	r3, #1
 8015fa4:	4432      	add	r2, r6
 8015fa6:	3403      	adds	r4, #3
 8015fa8:	e7ed      	b.n	8015f86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8015faa:	d05f      	beq.n	801606c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8015fac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015fae:	1e5e      	subs	r6, r3, #1
 8015fb0:	fb07 0706 	mla	r7, r7, r6, r0
 8015fb4:	143f      	asrs	r7, r7, #16
 8015fb6:	d450      	bmi.n	801605a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8015fb8:	4577      	cmp	r7, lr
 8015fba:	da4e      	bge.n	801605a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8015fbc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015fbe:	fb07 2606 	mla	r6, r7, r6, r2
 8015fc2:	1436      	asrs	r6, r6, #16
 8015fc4:	d449      	bmi.n	801605a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8015fc6:	9f00      	ldr	r7, [sp, #0]
 8015fc8:	42be      	cmp	r6, r7
 8015fca:	da46      	bge.n	801605a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8015fcc:	1ce6      	adds	r6, r4, #3
 8015fce:	4699      	mov	r9, r3
 8015fd0:	f1b9 0f00 	cmp.w	r9, #0
 8015fd4:	f106 0603 	add.w	r6, r6, #3
 8015fd8:	dd43      	ble.n	8016062 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8015fda:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015fde:	1417      	asrs	r7, r2, #16
 8015fe0:	fb0e a707 	mla	r7, lr, r7, sl
 8015fe4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015fe8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015fec:	eb08 0a07 	add.w	sl, r8, r7
 8015ff0:	f818 7007 	ldrb.w	r7, [r8, r7]
 8015ff4:	fb1b fb05 	smulbb	fp, fp, r5
 8015ff8:	fb07 b70c 	mla	r7, r7, ip, fp
 8015ffc:	b2bf      	uxth	r7, r7
 8015ffe:	f107 0b01 	add.w	fp, r7, #1
 8016002:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016006:	123f      	asrs	r7, r7, #8
 8016008:	f806 7c06 	strb.w	r7, [r6, #-6]
 801600c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016010:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016014:	fb1b fb05 	smulbb	fp, fp, r5
 8016018:	fb07 b70c 	mla	r7, r7, ip, fp
 801601c:	b2bf      	uxth	r7, r7
 801601e:	f107 0b01 	add.w	fp, r7, #1
 8016022:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016026:	123f      	asrs	r7, r7, #8
 8016028:	f806 7c05 	strb.w	r7, [r6, #-5]
 801602c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016030:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016034:	fb1a fa05 	smulbb	sl, sl, r5
 8016038:	fb07 a70c 	mla	r7, r7, ip, sl
 801603c:	b2bf      	uxth	r7, r7
 801603e:	f107 0a01 	add.w	sl, r7, #1
 8016042:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016046:	123f      	asrs	r7, r7, #8
 8016048:	f806 7c04 	strb.w	r7, [r6, #-4]
 801604c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801604e:	4438      	add	r0, r7
 8016050:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016052:	f109 39ff 	add.w	r9, r9, #4294967295
 8016056:	443a      	add	r2, r7
 8016058:	e7ba      	b.n	8015fd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801605a:	2700      	movs	r7, #0
 801605c:	1bde      	subs	r6, r3, r7
 801605e:	2e00      	cmp	r6, #0
 8016060:	dc3f      	bgt.n	80160e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8016062:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016066:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801606a:	441c      	add	r4, r3
 801606c:	2900      	cmp	r1, #0
 801606e:	f340 8088 	ble.w	8016182 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8016072:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801607a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801607e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016080:	3901      	subs	r1, #1
 8016082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016086:	ee31 1a05 	vadd.f32	s2, s2, s10
 801608a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801608e:	eef0 6a62 	vmov.f32	s13, s5
 8016092:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016096:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801609a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801609e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80160a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80160a6:	eef0 6a43 	vmov.f32	s13, s6
 80160aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80160ae:	ee12 2a90 	vmov	r2, s5
 80160b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80160ba:	ee13 2a10 	vmov	r2, s6
 80160be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80160c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80160c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80160ca:	9a01      	ldr	r2, [sp, #4]
 80160cc:	9310      	str	r3, [sp, #64]	; 0x40
 80160ce:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80160d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160d4:	eeb0 3a67 	vmov.f32	s6, s15
 80160d8:	bf08      	it	eq
 80160da:	4613      	moveq	r3, r2
 80160dc:	eef0 2a47 	vmov.f32	s5, s14
 80160e0:	e745      	b.n	8015f6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80160e2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80160e6:	d446      	bmi.n	8016176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80160e8:	45f2      	cmp	sl, lr
 80160ea:	da44      	bge.n	8016176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80160ec:	ea5f 4922 	movs.w	r9, r2, asr #16
 80160f0:	d441      	bmi.n	8016176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80160f2:	9e00      	ldr	r6, [sp, #0]
 80160f4:	45b1      	cmp	r9, r6
 80160f6:	da3e      	bge.n	8016176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80160f8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80160fc:	fb0e a909 	mla	r9, lr, r9, sl
 8016100:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016104:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016108:	eb08 0a09 	add.w	sl, r8, r9
 801610c:	f818 9009 	ldrb.w	r9, [r8, r9]
 8016110:	fb1b fb05 	smulbb	fp, fp, r5
 8016114:	fb09 b90c 	mla	r9, r9, ip, fp
 8016118:	fa1f f989 	uxth.w	r9, r9
 801611c:	f109 0b01 	add.w	fp, r9, #1
 8016120:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016124:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016128:	f804 9006 	strb.w	r9, [r4, r6]
 801612c:	4426      	add	r6, r4
 801612e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016132:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016136:	fb1b fb05 	smulbb	fp, fp, r5
 801613a:	fb09 b90c 	mla	r9, r9, ip, fp
 801613e:	fa1f f989 	uxth.w	r9, r9
 8016142:	f109 0b01 	add.w	fp, r9, #1
 8016146:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801614a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801614e:	f886 9001 	strb.w	r9, [r6, #1]
 8016152:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016156:	f896 a002 	ldrb.w	sl, [r6, #2]
 801615a:	fb1a fa05 	smulbb	sl, sl, r5
 801615e:	fb09 a90c 	mla	r9, r9, ip, sl
 8016162:	fa1f f989 	uxth.w	r9, r9
 8016166:	f109 0a01 	add.w	sl, r9, #1
 801616a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801616e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016172:	f886 9002 	strb.w	r9, [r6, #2]
 8016176:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016178:	4430      	add	r0, r6
 801617a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801617c:	3701      	adds	r7, #1
 801617e:	4432      	add	r2, r6
 8016180:	e76c      	b.n	801605c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8016182:	b003      	add	sp, #12
 8016184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016188 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801618e:	9201      	str	r2, [sp, #4]
 8016190:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016194:	6868      	ldr	r0, [r5, #4]
 8016196:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801619a:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801619e:	fb00 2404 	mla	r4, r0, r4, r2
 80161a2:	682a      	ldr	r2, [r5, #0]
 80161a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80161a8:	4414      	add	r4, r2
 80161aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80161ac:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 80161b0:	f8d2 9000 	ldr.w	r9, [r2]
 80161b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80161b8:	2900      	cmp	r1, #0
 80161ba:	dc03      	bgt.n	80161c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80161bc:	9a01      	ldr	r2, [sp, #4]
 80161be:	2a00      	cmp	r2, #0
 80161c0:	f340 80a8 	ble.w	8016314 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80161c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80161c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80161ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	dd0c      	ble.n	80161ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80161d4:	1405      	asrs	r5, r0, #16
 80161d6:	d405      	bmi.n	80161e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80161d8:	4565      	cmp	r5, ip
 80161da:	da03      	bge.n	80161e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80161dc:	1415      	asrs	r5, r2, #16
 80161de:	d401      	bmi.n	80161e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80161e0:	4575      	cmp	r5, lr
 80161e2:	db05      	blt.n	80161f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80161e4:	4438      	add	r0, r7
 80161e6:	4432      	add	r2, r6
 80161e8:	3b01      	subs	r3, #1
 80161ea:	3403      	adds	r4, #3
 80161ec:	e7f0      	b.n	80161d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 80161ee:	d03a      	beq.n	8016266 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80161f0:	1e5d      	subs	r5, r3, #1
 80161f2:	fb07 0805 	mla	r8, r7, r5, r0
 80161f6:	ea5f 4828 	movs.w	r8, r8, asr #16
 80161fa:	d429      	bmi.n	8016250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80161fc:	45e0      	cmp	r8, ip
 80161fe:	da27      	bge.n	8016250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8016200:	fb06 2505 	mla	r5, r6, r5, r2
 8016204:	142d      	asrs	r5, r5, #16
 8016206:	d423      	bmi.n	8016250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8016208:	4575      	cmp	r5, lr
 801620a:	da21      	bge.n	8016250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801620c:	f104 0803 	add.w	r8, r4, #3
 8016210:	469a      	mov	sl, r3
 8016212:	f1ba 0f00 	cmp.w	sl, #0
 8016216:	f108 0803 	add.w	r8, r8, #3
 801621a:	dd1f      	ble.n	801625c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801621c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8016220:	1415      	asrs	r5, r2, #16
 8016222:	fb0c b505 	mla	r5, ip, r5, fp
 8016226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801622a:	eb09 0b05 	add.w	fp, r9, r5
 801622e:	f819 5005 	ldrb.w	r5, [r9, r5]
 8016232:	f808 5c06 	strb.w	r5, [r8, #-6]
 8016236:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801623a:	f808 5c05 	strb.w	r5, [r8, #-5]
 801623e:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8016242:	f808 5c04 	strb.w	r5, [r8, #-4]
 8016246:	4438      	add	r0, r7
 8016248:	4432      	add	r2, r6
 801624a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801624e:	e7e0      	b.n	8016212 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8016250:	2500      	movs	r5, #0
 8016252:	eba3 0805 	sub.w	r8, r3, r5
 8016256:	f1b8 0f00 	cmp.w	r8, #0
 801625a:	dc38      	bgt.n	80162ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801625c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016264:	441c      	add	r4, r3
 8016266:	2900      	cmp	r1, #0
 8016268:	dd54      	ble.n	8016314 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801626a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801626e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016272:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016278:	3901      	subs	r1, #1
 801627a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801627e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016282:	eeb0 6a62 	vmov.f32	s12, s5
 8016286:	ee61 7a27 	vmul.f32	s15, s2, s15
 801628a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801628e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016292:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016296:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801629a:	eeb0 6a43 	vmov.f32	s12, s6
 801629e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80162a2:	ee12 2a90 	vmov	r2, s5
 80162a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80162aa:	fb92 f7f3 	sdiv	r7, r2, r3
 80162ae:	ee13 2a10 	vmov	r2, s6
 80162b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80162b6:	fb92 f6f3 	sdiv	r6, r2, r3
 80162ba:	9a01      	ldr	r2, [sp, #4]
 80162bc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80162c0:	bf08      	it	eq
 80162c2:	4613      	moveq	r3, r2
 80162c4:	eeb0 3a67 	vmov.f32	s6, s15
 80162c8:	eef0 2a47 	vmov.f32	s5, s14
 80162cc:	e774      	b.n	80161b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 80162ce:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80162d2:	d41b      	bmi.n	801630c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80162d4:	45e2      	cmp	sl, ip
 80162d6:	da19      	bge.n	801630c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80162d8:	ea5f 4822 	movs.w	r8, r2, asr #16
 80162dc:	d416      	bmi.n	801630c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80162de:	45f0      	cmp	r8, lr
 80162e0:	da14      	bge.n	801630c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80162e2:	fb0c a808 	mla	r8, ip, r8, sl
 80162e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80162ea:	eb09 0a08 	add.w	sl, r9, r8
 80162ee:	f819 b008 	ldrb.w	fp, [r9, r8]
 80162f2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80162f6:	f804 b008 	strb.w	fp, [r4, r8]
 80162fa:	44a0      	add	r8, r4
 80162fc:	f89a b001 	ldrb.w	fp, [sl, #1]
 8016300:	f888 b001 	strb.w	fp, [r8, #1]
 8016304:	f89a a002 	ldrb.w	sl, [sl, #2]
 8016308:	f888 a002 	strb.w	sl, [r8, #2]
 801630c:	4438      	add	r0, r7
 801630e:	4432      	add	r2, r6
 8016310:	3501      	adds	r5, #1
 8016312:	e79e      	b.n	8016252 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8016314:	b003      	add	sp, #12
 8016316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801631a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801631a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801631e:	b085      	sub	sp, #20
 8016320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016324:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016326:	9202      	str	r2, [sp, #8]
 8016328:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801632c:	9203      	str	r2, [sp, #12]
 801632e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016332:	6860      	ldr	r0, [r4, #4]
 8016334:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8016338:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801633c:	fb00 2505 	mla	r5, r0, r5, r2
 8016340:	6822      	ldr	r2, [r4, #0]
 8016342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016346:	4415      	add	r5, r2
 8016348:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801634a:	6812      	ldr	r2, [r2, #0]
 801634c:	9201      	str	r2, [sp, #4]
 801634e:	2900      	cmp	r1, #0
 8016350:	dc03      	bgt.n	801635a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8016352:	9a02      	ldr	r2, [sp, #8]
 8016354:	2a00      	cmp	r2, #0
 8016356:	f340 811c 	ble.w	8016592 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801635a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801635c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016360:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016362:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016366:	2b00      	cmp	r3, #0
 8016368:	dd0e      	ble.n	8016388 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801636a:	1422      	asrs	r2, r4, #16
 801636c:	d405      	bmi.n	801637a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801636e:	4572      	cmp	r2, lr
 8016370:	da03      	bge.n	801637a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8016372:	1402      	asrs	r2, r0, #16
 8016374:	d401      	bmi.n	801637a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8016376:	4542      	cmp	r2, r8
 8016378:	db07      	blt.n	801638a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801637a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801637c:	4414      	add	r4, r2
 801637e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016380:	3b01      	subs	r3, #1
 8016382:	4410      	add	r0, r2
 8016384:	3503      	adds	r5, #3
 8016386:	e7ee      	b.n	8016366 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8016388:	d072      	beq.n	8016470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801638a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801638c:	1e5a      	subs	r2, r3, #1
 801638e:	fb06 4602 	mla	r6, r6, r2, r4
 8016392:	1436      	asrs	r6, r6, #16
 8016394:	d461      	bmi.n	801645a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8016396:	4576      	cmp	r6, lr
 8016398:	da5f      	bge.n	801645a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801639a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801639c:	fb06 0202 	mla	r2, r6, r2, r0
 80163a0:	1412      	asrs	r2, r2, #16
 80163a2:	d45a      	bmi.n	801645a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80163a4:	4542      	cmp	r2, r8
 80163a6:	da58      	bge.n	801645a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80163a8:	1cef      	adds	r7, r5, #3
 80163aa:	4699      	mov	r9, r3
 80163ac:	f1b9 0f00 	cmp.w	r9, #0
 80163b0:	dd59      	ble.n	8016466 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80163b2:	1426      	asrs	r6, r4, #16
 80163b4:	1402      	asrs	r2, r0, #16
 80163b6:	fb0e 6202 	mla	r2, lr, r2, r6
 80163ba:	9e01      	ldr	r6, [sp, #4]
 80163bc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80163c0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80163c4:	d041      	beq.n	801644a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80163c6:	9a03      	ldr	r2, [sp, #12]
 80163c8:	fb02 fc0c 	mul.w	ip, r2, ip
 80163cc:	f10c 0201 	add.w	r2, ip, #1
 80163d0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 80163d4:	1212      	asrs	r2, r2, #8
 80163d6:	fa1f fa82 	uxth.w	sl, r2
 80163da:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 80163de:	fa5f fb86 	uxtb.w	fp, r6
 80163e2:	43d2      	mvns	r2, r2
 80163e4:	b2d2      	uxtb	r2, r2
 80163e6:	fb1b fb0a 	smulbb	fp, fp, sl
 80163ea:	fb0c bc02 	mla	ip, ip, r2, fp
 80163ee:	fa1f fc8c 	uxth.w	ip, ip
 80163f2:	f10c 0b01 	add.w	fp, ip, #1
 80163f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80163fa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80163fe:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016402:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016406:	fb1b fb0a 	smulbb	fp, fp, sl
 801640a:	f807 cc03 	strb.w	ip, [r7, #-3]
 801640e:	fb16 fa0a 	smulbb	sl, r6, sl
 8016412:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8016416:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801641a:	fb0c bc02 	mla	ip, ip, r2, fp
 801641e:	fb06 aa02 	mla	sl, r6, r2, sl
 8016422:	fa1f fc8c 	uxth.w	ip, ip
 8016426:	fa1f fa8a 	uxth.w	sl, sl
 801642a:	f10c 0b01 	add.w	fp, ip, #1
 801642e:	f10a 0601 	add.w	r6, sl, #1
 8016432:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8016436:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801643a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801643e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016442:	f807 cc02 	strb.w	ip, [r7, #-2]
 8016446:	f807 ac01 	strb.w	sl, [r7, #-1]
 801644a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801644c:	4414      	add	r4, r2
 801644e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016450:	3703      	adds	r7, #3
 8016452:	4410      	add	r0, r2
 8016454:	f109 39ff 	add.w	r9, r9, #4294967295
 8016458:	e7a8      	b.n	80163ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801645a:	f04f 0c00 	mov.w	ip, #0
 801645e:	eba3 020c 	sub.w	r2, r3, ip
 8016462:	2a00      	cmp	r2, #0
 8016464:	dc3d      	bgt.n	80164e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8016466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801646a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801646e:	441d      	add	r5, r3
 8016470:	2900      	cmp	r1, #0
 8016472:	f340 808e 	ble.w	8016592 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8016476:	ee30 0a04 	vadd.f32	s0, s0, s8
 801647a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801647e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016484:	3901      	subs	r1, #1
 8016486:	ee31 1a05 	vadd.f32	s2, s2, s10
 801648a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801648e:	eeb0 6a62 	vmov.f32	s12, s5
 8016492:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016496:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801649a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801649e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80164a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80164a6:	eeb0 6a43 	vmov.f32	s12, s6
 80164aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80164ae:	ee12 2a90 	vmov	r2, s5
 80164b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80164b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80164ba:	ee13 2a10 	vmov	r2, s6
 80164be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80164c2:	9311      	str	r3, [sp, #68]	; 0x44
 80164c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80164ca:	9a02      	ldr	r2, [sp, #8]
 80164cc:	9312      	str	r3, [sp, #72]	; 0x48
 80164ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80164d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164d4:	eeb0 3a67 	vmov.f32	s6, s15
 80164d8:	bf08      	it	eq
 80164da:	4613      	moveq	r3, r2
 80164dc:	eef0 2a47 	vmov.f32	s5, s14
 80164e0:	e735      	b.n	801634e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 80164e2:	1426      	asrs	r6, r4, #16
 80164e4:	d44e      	bmi.n	8016584 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80164e6:	4576      	cmp	r6, lr
 80164e8:	da4c      	bge.n	8016584 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80164ea:	1402      	asrs	r2, r0, #16
 80164ec:	d44a      	bmi.n	8016584 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80164ee:	4542      	cmp	r2, r8
 80164f0:	da48      	bge.n	8016584 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80164f2:	fb0e 6202 	mla	r2, lr, r2, r6
 80164f6:	9e01      	ldr	r6, [sp, #4]
 80164f8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80164fc:	0e3a      	lsrs	r2, r7, #24
 80164fe:	d041      	beq.n	8016584 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8016500:	9e03      	ldr	r6, [sp, #12]
 8016502:	4372      	muls	r2, r6
 8016504:	1c56      	adds	r6, r2, #1
 8016506:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801650a:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801650e:	1212      	asrs	r2, r2, #8
 8016510:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016514:	fa1f fa82 	uxth.w	sl, r2
 8016518:	fa5f fb87 	uxtb.w	fp, r7
 801651c:	43d2      	mvns	r2, r2
 801651e:	b2d2      	uxtb	r2, r2
 8016520:	fb1b fb0a 	smulbb	fp, fp, sl
 8016524:	fb09 b902 	mla	r9, r9, r2, fp
 8016528:	fa1f f989 	uxth.w	r9, r9
 801652c:	f109 0b01 	add.w	fp, r9, #1
 8016530:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016534:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016538:	f805 9006 	strb.w	r9, [r5, r6]
 801653c:	442e      	add	r6, r5
 801653e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016542:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016546:	fb1b fb0a 	smulbb	fp, fp, sl
 801654a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801654e:	fb17 fa0a 	smulbb	sl, r7, sl
 8016552:	78b7      	ldrb	r7, [r6, #2]
 8016554:	fb09 b902 	mla	r9, r9, r2, fp
 8016558:	fb07 aa02 	mla	sl, r7, r2, sl
 801655c:	fa1f f989 	uxth.w	r9, r9
 8016560:	fa1f fa8a 	uxth.w	sl, sl
 8016564:	f109 0b01 	add.w	fp, r9, #1
 8016568:	f10a 0701 	add.w	r7, sl, #1
 801656c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016570:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016574:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016578:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801657c:	f886 9001 	strb.w	r9, [r6, #1]
 8016580:	f886 a002 	strb.w	sl, [r6, #2]
 8016584:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016586:	4414      	add	r4, r2
 8016588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801658a:	f10c 0c01 	add.w	ip, ip, #1
 801658e:	4410      	add	r0, r2
 8016590:	e765      	b.n	801645e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8016592:	b005      	add	sp, #20
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016598 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801659c:	b085      	sub	sp, #20
 801659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80165a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80165a4:	9203      	str	r2, [sp, #12]
 80165a6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80165aa:	9201      	str	r2, [sp, #4]
 80165ac:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80165b0:	6860      	ldr	r0, [r4, #4]
 80165b2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80165b6:	fb00 2505 	mla	r5, r0, r5, r2
 80165ba:	6822      	ldr	r2, [r4, #0]
 80165bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165c0:	4415      	add	r5, r2
 80165c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80165c4:	6812      	ldr	r2, [r2, #0]
 80165c6:	9202      	str	r2, [sp, #8]
 80165c8:	2900      	cmp	r1, #0
 80165ca:	dc03      	bgt.n	80165d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80165cc:	9a03      	ldr	r2, [sp, #12]
 80165ce:	2a00      	cmp	r2, #0
 80165d0:	f340 8122 	ble.w	8016818 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80165d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165d6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80165da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80165dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	dd0f      	ble.n	8016604 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80165e4:	1422      	asrs	r2, r4, #16
 80165e6:	d406      	bmi.n	80165f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80165e8:	4572      	cmp	r2, lr
 80165ea:	da04      	bge.n	80165f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80165ec:	1402      	asrs	r2, r0, #16
 80165ee:	d402      	bmi.n	80165f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80165f0:	9e01      	ldr	r6, [sp, #4]
 80165f2:	42b2      	cmp	r2, r6
 80165f4:	db07      	blt.n	8016606 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80165f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80165f8:	4414      	add	r4, r2
 80165fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165fc:	3b01      	subs	r3, #1
 80165fe:	4410      	add	r0, r2
 8016600:	3503      	adds	r5, #3
 8016602:	e7ed      	b.n	80165e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8016604:	d06e      	beq.n	80166e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8016606:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016608:	1e5a      	subs	r2, r3, #1
 801660a:	fb06 4602 	mla	r6, r6, r2, r4
 801660e:	1436      	asrs	r6, r6, #16
 8016610:	d45d      	bmi.n	80166ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8016612:	4576      	cmp	r6, lr
 8016614:	da5b      	bge.n	80166ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8016616:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016618:	fb06 0202 	mla	r2, r6, r2, r0
 801661c:	1412      	asrs	r2, r2, #16
 801661e:	d456      	bmi.n	80166ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8016620:	9e01      	ldr	r6, [sp, #4]
 8016622:	42b2      	cmp	r2, r6
 8016624:	da53      	bge.n	80166ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8016626:	1cee      	adds	r6, r5, #3
 8016628:	469a      	mov	sl, r3
 801662a:	f1ba 0f00 	cmp.w	sl, #0
 801662e:	dd54      	ble.n	80166da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8016630:	1427      	asrs	r7, r4, #16
 8016632:	1402      	asrs	r2, r0, #16
 8016634:	fb0e 7202 	mla	r2, lr, r2, r7
 8016638:	9f02      	ldr	r7, [sp, #8]
 801663a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801663e:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8016642:	d03c      	beq.n	80166be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8016644:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016648:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801664c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016650:	fa5f f28c 	uxtb.w	r2, ip
 8016654:	b2ff      	uxtb	r7, r7
 8016656:	f000 80d8 	beq.w	801680a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801665a:	fa1f f882 	uxth.w	r8, r2
 801665e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8016662:	43d2      	mvns	r2, r2
 8016664:	b2d2      	uxtb	r2, r2
 8016666:	fb17 f708 	smulbb	r7, r7, r8
 801666a:	fb0c 7702 	mla	r7, ip, r2, r7
 801666e:	b2bf      	uxth	r7, r7
 8016670:	f107 0c01 	add.w	ip, r7, #1
 8016674:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8016678:	123f      	asrs	r7, r7, #8
 801667a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801667e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016682:	fb19 f908 	smulbb	r9, r9, r8
 8016686:	fb07 9902 	mla	r9, r7, r2, r9
 801668a:	fa1f f989 	uxth.w	r9, r9
 801668e:	f109 0701 	add.w	r7, r9, #1
 8016692:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016696:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801669a:	fb1b f808 	smulbb	r8, fp, r8
 801669e:	fb07 8802 	mla	r8, r7, r2, r8
 80166a2:	fa1f f888 	uxth.w	r8, r8
 80166a6:	f108 0201 	add.w	r2, r8, #1
 80166aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80166ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80166b6:	f806 9c02 	strb.w	r9, [r6, #-2]
 80166ba:	f806 8c01 	strb.w	r8, [r6, #-1]
 80166be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80166c0:	4414      	add	r4, r2
 80166c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80166c4:	3603      	adds	r6, #3
 80166c6:	4410      	add	r0, r2
 80166c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166cc:	e7ad      	b.n	801662a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80166ce:	f04f 0c00 	mov.w	ip, #0
 80166d2:	eba3 020c 	sub.w	r2, r3, ip
 80166d6:	2a00      	cmp	r2, #0
 80166d8:	dc3d      	bgt.n	8016756 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80166da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80166e2:	441d      	add	r5, r3
 80166e4:	2900      	cmp	r1, #0
 80166e6:	f340 8097 	ble.w	8016818 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80166ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80166ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80166f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80166f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166f8:	3901      	subs	r1, #1
 80166fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80166fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016702:	eeb0 6a62 	vmov.f32	s12, s5
 8016706:	ee61 7a27 	vmul.f32	s15, s2, s15
 801670a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801670e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016712:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016716:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801671a:	eeb0 6a43 	vmov.f32	s12, s6
 801671e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016722:	ee12 2a90 	vmov	r2, s5
 8016726:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801672a:	fb92 f3f3 	sdiv	r3, r2, r3
 801672e:	ee13 2a10 	vmov	r2, s6
 8016732:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016736:	9311      	str	r3, [sp, #68]	; 0x44
 8016738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801673a:	fb92 f3f3 	sdiv	r3, r2, r3
 801673e:	9a03      	ldr	r2, [sp, #12]
 8016740:	9312      	str	r3, [sp, #72]	; 0x48
 8016742:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016748:	eeb0 3a67 	vmov.f32	s6, s15
 801674c:	bf08      	it	eq
 801674e:	4613      	moveq	r3, r2
 8016750:	eef0 2a47 	vmov.f32	s5, s14
 8016754:	e738      	b.n	80165c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8016756:	1426      	asrs	r6, r4, #16
 8016758:	d448      	bmi.n	80167ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801675a:	4576      	cmp	r6, lr
 801675c:	da46      	bge.n	80167ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801675e:	1402      	asrs	r2, r0, #16
 8016760:	d444      	bmi.n	80167ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8016762:	9f01      	ldr	r7, [sp, #4]
 8016764:	42ba      	cmp	r2, r7
 8016766:	da41      	bge.n	80167ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8016768:	fb0e 6202 	mla	r2, lr, r2, r6
 801676c:	9e02      	ldr	r6, [sp, #8]
 801676e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016772:	0e3a      	lsrs	r2, r7, #24
 8016774:	d03a      	beq.n	80167ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8016776:	2aff      	cmp	r2, #255	; 0xff
 8016778:	b2d6      	uxtb	r6, r2
 801677a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801677e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016782:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8016786:	b2ff      	uxtb	r7, r7
 8016788:	d037      	beq.n	80167fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801678a:	4462      	add	r2, ip
 801678c:	fa1f f986 	uxth.w	r9, r6
 8016790:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016794:	43f6      	mvns	r6, r6
 8016796:	b2f6      	uxtb	r6, r6
 8016798:	fb17 f709 	smulbb	r7, r7, r9
 801679c:	fb08 7706 	mla	r7, r8, r6, r7
 80167a0:	b2bf      	uxth	r7, r7
 80167a2:	f107 0801 	add.w	r8, r7, #1
 80167a6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80167aa:	123f      	asrs	r7, r7, #8
 80167ac:	54af      	strb	r7, [r5, r2]
 80167ae:	442a      	add	r2, r5
 80167b0:	fb1a fa09 	smulbb	sl, sl, r9
 80167b4:	7857      	ldrb	r7, [r2, #1]
 80167b6:	fb07 aa06 	mla	sl, r7, r6, sl
 80167ba:	fa1f fa8a 	uxth.w	sl, sl
 80167be:	f10a 0701 	add.w	r7, sl, #1
 80167c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80167c6:	7897      	ldrb	r7, [r2, #2]
 80167c8:	fb1b f909 	smulbb	r9, fp, r9
 80167cc:	fb07 9906 	mla	r9, r7, r6, r9
 80167d0:	fa1f f989 	uxth.w	r9, r9
 80167d4:	f109 0601 	add.w	r6, r9, #1
 80167d8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80167dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80167e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80167e4:	f882 a001 	strb.w	sl, [r2, #1]
 80167e8:	f882 9002 	strb.w	r9, [r2, #2]
 80167ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80167ee:	4414      	add	r4, r2
 80167f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167f2:	f10c 0c01 	add.w	ip, ip, #1
 80167f6:	4410      	add	r0, r2
 80167f8:	e76b      	b.n	80166d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 80167fa:	4462      	add	r2, ip
 80167fc:	54af      	strb	r7, [r5, r2]
 80167fe:	442a      	add	r2, r5
 8016800:	f882 a001 	strb.w	sl, [r2, #1]
 8016804:	f882 b002 	strb.w	fp, [r2, #2]
 8016808:	e7f0      	b.n	80167ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801680a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801680e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016812:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016816:	e752      	b.n	80166be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8016818:	b005      	add	sp, #20
 801681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016820 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016824:	b087      	sub	sp, #28
 8016826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801682a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801682c:	9204      	str	r2, [sp, #16]
 801682e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8016832:	9205      	str	r2, [sp, #20]
 8016834:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016838:	6860      	ldr	r0, [r4, #4]
 801683a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801683e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8016842:	9101      	str	r1, [sp, #4]
 8016844:	fb00 2505 	mla	r5, r0, r5, r2
 8016848:	6822      	ldr	r2, [r4, #0]
 801684a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801684e:	4415      	add	r5, r2
 8016850:	f10e 0201 	add.w	r2, lr, #1
 8016854:	f022 0201 	bic.w	r2, r2, #1
 8016858:	9202      	str	r2, [sp, #8]
 801685a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801685c:	6812      	ldr	r2, [r2, #0]
 801685e:	9203      	str	r2, [sp, #12]
 8016860:	9a01      	ldr	r2, [sp, #4]
 8016862:	2a00      	cmp	r2, #0
 8016864:	dc03      	bgt.n	801686e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8016866:	9a04      	ldr	r2, [sp, #16]
 8016868:	2a00      	cmp	r2, #0
 801686a:	f340 8132 	ble.w	8016ad2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801686e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016870:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016876:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801687a:	2b00      	cmp	r3, #0
 801687c:	dd0e      	ble.n	801689c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801687e:	1422      	asrs	r2, r4, #16
 8016880:	d405      	bmi.n	801688e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8016882:	4596      	cmp	lr, r2
 8016884:	dd03      	ble.n	801688e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8016886:	1402      	asrs	r2, r0, #16
 8016888:	d401      	bmi.n	801688e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801688a:	4542      	cmp	r2, r8
 801688c:	db07      	blt.n	801689e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801688e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016890:	4414      	add	r4, r2
 8016892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016894:	3b01      	subs	r3, #1
 8016896:	4410      	add	r0, r2
 8016898:	3503      	adds	r5, #3
 801689a:	e7ee      	b.n	801687a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801689c:	d010      	beq.n	80168c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801689e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80168a0:	1e5a      	subs	r2, r3, #1
 80168a2:	fb06 4602 	mla	r6, r6, r2, r4
 80168a6:	1436      	asrs	r6, r6, #16
 80168a8:	d546      	bpl.n	8016938 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80168aa:	4699      	mov	r9, r3
 80168ac:	462e      	mov	r6, r5
 80168ae:	f1b9 0f00 	cmp.w	r9, #0
 80168b2:	f300 80ac 	bgt.w	8016a0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 80168b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80168be:	441d      	add	r5, r3
 80168c0:	9b01      	ldr	r3, [sp, #4]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	f340 8105 	ble.w	8016ad2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80168c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80168da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80168de:	eeb0 6a62 	vmov.f32	s12, s5
 80168e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80168e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80168ee:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80168f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80168f6:	eeb0 6a43 	vmov.f32	s12, s6
 80168fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80168fe:	ee12 2a90 	vmov	r2, s5
 8016902:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016906:	fb92 f3f3 	sdiv	r3, r2, r3
 801690a:	ee13 2a10 	vmov	r2, s6
 801690e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016910:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016912:	fb92 f3f3 	sdiv	r3, r2, r3
 8016916:	9314      	str	r3, [sp, #80]	; 0x50
 8016918:	9b01      	ldr	r3, [sp, #4]
 801691a:	9a04      	ldr	r2, [sp, #16]
 801691c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016920:	3b01      	subs	r3, #1
 8016922:	9301      	str	r3, [sp, #4]
 8016924:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801692a:	eeb0 3a67 	vmov.f32	s6, s15
 801692e:	bf08      	it	eq
 8016930:	4613      	moveq	r3, r2
 8016932:	eef0 2a47 	vmov.f32	s5, s14
 8016936:	e793      	b.n	8016860 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8016938:	45b6      	cmp	lr, r6
 801693a:	ddb6      	ble.n	80168aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801693c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801693e:	fb06 0202 	mla	r2, r6, r2, r0
 8016942:	1412      	asrs	r2, r2, #16
 8016944:	d4b1      	bmi.n	80168aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8016946:	4542      	cmp	r2, r8
 8016948:	daaf      	bge.n	80168aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801694a:	1cee      	adds	r6, r5, #3
 801694c:	4699      	mov	r9, r3
 801694e:	f1b9 0f00 	cmp.w	r9, #0
 8016952:	ddb0      	ble.n	80168b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8016954:	9902      	ldr	r1, [sp, #8]
 8016956:	1422      	asrs	r2, r4, #16
 8016958:	1407      	asrs	r7, r0, #16
 801695a:	fb01 2707 	mla	r7, r1, r7, r2
 801695e:	087a      	lsrs	r2, r7, #1
 8016960:	9903      	ldr	r1, [sp, #12]
 8016962:	5c8a      	ldrb	r2, [r1, r2]
 8016964:	07f9      	lsls	r1, r7, #31
 8016966:	bf54      	ite	pl
 8016968:	f002 020f 	andpl.w	r2, r2, #15
 801696c:	1112      	asrmi	r2, r2, #4
 801696e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016972:	b2d2      	uxtb	r2, r2
 8016974:	2a00      	cmp	r2, #0
 8016976:	d042      	beq.n	80169fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8016978:	4957      	ldr	r1, [pc, #348]	; (8016ad8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801697a:	680f      	ldr	r7, [r1, #0]
 801697c:	9905      	ldr	r1, [sp, #20]
 801697e:	434a      	muls	r2, r1
 8016980:	f102 0c01 	add.w	ip, r2, #1
 8016984:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8016988:	1212      	asrs	r2, r2, #8
 801698a:	fa1f fa82 	uxth.w	sl, r2
 801698e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8016992:	fa5f fb87 	uxtb.w	fp, r7
 8016996:	43d2      	mvns	r2, r2
 8016998:	b2d2      	uxtb	r2, r2
 801699a:	fb1b fb0a 	smulbb	fp, fp, sl
 801699e:	fb0c bc02 	mla	ip, ip, r2, fp
 80169a2:	fa1f fc8c 	uxth.w	ip, ip
 80169a6:	f10c 0b01 	add.w	fp, ip, #1
 80169aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80169ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80169b2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80169b6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80169ba:	fb1b fb0a 	smulbb	fp, fp, sl
 80169be:	f806 cc03 	strb.w	ip, [r6, #-3]
 80169c2:	fb17 fa0a 	smulbb	sl, r7, sl
 80169c6:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80169ca:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80169ce:	fb0c bc02 	mla	ip, ip, r2, fp
 80169d2:	fb07 aa02 	mla	sl, r7, r2, sl
 80169d6:	fa1f fc8c 	uxth.w	ip, ip
 80169da:	fa1f fa8a 	uxth.w	sl, sl
 80169de:	f10c 0b01 	add.w	fp, ip, #1
 80169e2:	f10a 0701 	add.w	r7, sl, #1
 80169e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80169ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80169ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80169f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80169f6:	f806 cc02 	strb.w	ip, [r6, #-2]
 80169fa:	f806 ac01 	strb.w	sl, [r6, #-1]
 80169fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a00:	4414      	add	r4, r2
 8016a02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016a04:	3603      	adds	r6, #3
 8016a06:	4410      	add	r0, r2
 8016a08:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a0c:	e79f      	b.n	801694e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 8016a0e:	1422      	asrs	r2, r4, #16
 8016a10:	d457      	bmi.n	8016ac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8016a12:	4596      	cmp	lr, r2
 8016a14:	dd55      	ble.n	8016ac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8016a16:	1407      	asrs	r7, r0, #16
 8016a18:	d453      	bmi.n	8016ac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8016a1a:	4547      	cmp	r7, r8
 8016a1c:	da51      	bge.n	8016ac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8016a1e:	9902      	ldr	r1, [sp, #8]
 8016a20:	fb07 2701 	mla	r7, r7, r1, r2
 8016a24:	087a      	lsrs	r2, r7, #1
 8016a26:	9903      	ldr	r1, [sp, #12]
 8016a28:	5c8a      	ldrb	r2, [r1, r2]
 8016a2a:	07ff      	lsls	r7, r7, #31
 8016a2c:	bf54      	ite	pl
 8016a2e:	f002 020f 	andpl.w	r2, r2, #15
 8016a32:	1112      	asrmi	r2, r2, #4
 8016a34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016a38:	b2d2      	uxtb	r2, r2
 8016a3a:	2a00      	cmp	r2, #0
 8016a3c:	d041      	beq.n	8016ac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8016a3e:	4926      	ldr	r1, [pc, #152]	; (8016ad8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8016a40:	680f      	ldr	r7, [r1, #0]
 8016a42:	9905      	ldr	r1, [sp, #20]
 8016a44:	434a      	muls	r2, r1
 8016a46:	f102 0c01 	add.w	ip, r2, #1
 8016a4a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8016a4e:	1212      	asrs	r2, r2, #8
 8016a50:	fa1f fa82 	uxth.w	sl, r2
 8016a54:	f896 c000 	ldrb.w	ip, [r6]
 8016a58:	fa5f fb87 	uxtb.w	fp, r7
 8016a5c:	43d2      	mvns	r2, r2
 8016a5e:	b2d2      	uxtb	r2, r2
 8016a60:	fb1b fb0a 	smulbb	fp, fp, sl
 8016a64:	fb0c bc02 	mla	ip, ip, r2, fp
 8016a68:	fa1f fc8c 	uxth.w	ip, ip
 8016a6c:	f10c 0b01 	add.w	fp, ip, #1
 8016a70:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8016a74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016a78:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016a7c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016a80:	fb1b fb0a 	smulbb	fp, fp, sl
 8016a84:	f886 c000 	strb.w	ip, [r6]
 8016a88:	fb17 fa0a 	smulbb	sl, r7, sl
 8016a8c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8016a90:	78b7      	ldrb	r7, [r6, #2]
 8016a92:	fb0c bc02 	mla	ip, ip, r2, fp
 8016a96:	fb07 aa02 	mla	sl, r7, r2, sl
 8016a9a:	fa1f fc8c 	uxth.w	ip, ip
 8016a9e:	fa1f fa8a 	uxth.w	sl, sl
 8016aa2:	f10c 0b01 	add.w	fp, ip, #1
 8016aa6:	f10a 0701 	add.w	r7, sl, #1
 8016aaa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8016aae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016ab2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016ab6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016aba:	f886 c001 	strb.w	ip, [r6, #1]
 8016abe:	f886 a002 	strb.w	sl, [r6, #2]
 8016ac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016ac4:	4414      	add	r4, r2
 8016ac6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ac8:	3603      	adds	r6, #3
 8016aca:	4410      	add	r0, r2
 8016acc:	f109 39ff 	add.w	r9, r9, #4294967295
 8016ad0:	e6ed      	b.n	80168ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8016ad2:	b007      	add	sp, #28
 8016ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ad8:	200084f4 	.word	0x200084f4

08016adc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae0:	b087      	sub	sp, #28
 8016ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ae6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016ae8:	9205      	str	r2, [sp, #20]
 8016aea:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8016aee:	9202      	str	r2, [sp, #8]
 8016af0:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 8016af4:	6860      	ldr	r0, [r4, #4]
 8016af6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8016afa:	9101      	str	r1, [sp, #4]
 8016afc:	fb00 2606 	mla	r6, r0, r6, r2
 8016b00:	6822      	ldr	r2, [r4, #0]
 8016b02:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016b06:	4416      	add	r6, r2
 8016b08:	f108 0201 	add.w	r2, r8, #1
 8016b0c:	f022 0201 	bic.w	r2, r2, #1
 8016b10:	9203      	str	r2, [sp, #12]
 8016b12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016b14:	6812      	ldr	r2, [r2, #0]
 8016b16:	9204      	str	r2, [sp, #16]
 8016b18:	9a01      	ldr	r2, [sp, #4]
 8016b1a:	2a00      	cmp	r2, #0
 8016b1c:	dc03      	bgt.n	8016b26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8016b1e:	9a05      	ldr	r2, [sp, #20]
 8016b20:	2a00      	cmp	r2, #0
 8016b22:	f340 813a 	ble.w	8016d9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8016b26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b28:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8016b2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b2e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	dd0f      	ble.n	8016b56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8016b36:	142a      	asrs	r2, r5, #16
 8016b38:	d406      	bmi.n	8016b48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8016b3a:	4590      	cmp	r8, r2
 8016b3c:	dd04      	ble.n	8016b48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8016b3e:	1422      	asrs	r2, r4, #16
 8016b40:	d402      	bmi.n	8016b48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8016b42:	9802      	ldr	r0, [sp, #8]
 8016b44:	4282      	cmp	r2, r0
 8016b46:	db07      	blt.n	8016b58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8016b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b4a:	4415      	add	r5, r2
 8016b4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b4e:	3b01      	subs	r3, #1
 8016b50:	4414      	add	r4, r2
 8016b52:	3603      	adds	r6, #3
 8016b54:	e7ed      	b.n	8016b32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8016b56:	d073      	beq.n	8016c40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8016b58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016b5a:	1e5a      	subs	r2, r3, #1
 8016b5c:	fb00 5002 	mla	r0, r0, r2, r5
 8016b60:	1400      	asrs	r0, r0, #16
 8016b62:	d464      	bmi.n	8016c2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8016b64:	4580      	cmp	r8, r0
 8016b66:	dd62      	ble.n	8016c2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8016b68:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016b6a:	fb00 4202 	mla	r2, r0, r2, r4
 8016b6e:	1412      	asrs	r2, r2, #16
 8016b70:	d45d      	bmi.n	8016c2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8016b72:	9802      	ldr	r0, [sp, #8]
 8016b74:	4282      	cmp	r2, r0
 8016b76:	da5a      	bge.n	8016c2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8016b78:	1cf0      	adds	r0, r6, #3
 8016b7a:	469a      	mov	sl, r3
 8016b7c:	f1ba 0f00 	cmp.w	sl, #0
 8016b80:	dd59      	ble.n	8016c36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8016b82:	9903      	ldr	r1, [sp, #12]
 8016b84:	142a      	asrs	r2, r5, #16
 8016b86:	1427      	asrs	r7, r4, #16
 8016b88:	fb01 2707 	mla	r7, r1, r7, r2
 8016b8c:	087a      	lsrs	r2, r7, #1
 8016b8e:	9904      	ldr	r1, [sp, #16]
 8016b90:	5c8a      	ldrb	r2, [r1, r2]
 8016b92:	07f9      	lsls	r1, r7, #31
 8016b94:	bf54      	ite	pl
 8016b96:	f002 020f 	andpl.w	r2, r2, #15
 8016b9a:	1112      	asrmi	r2, r2, #4
 8016b9c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016ba0:	b2d2      	uxtb	r2, r2
 8016ba2:	2a00      	cmp	r2, #0
 8016ba4:	d03b      	beq.n	8016c1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8016ba6:	497e      	ldr	r1, [pc, #504]	; (8016da0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8016ba8:	680f      	ldr	r7, [r1, #0]
 8016baa:	2aff      	cmp	r2, #255	; 0xff
 8016bac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016bb0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016bb4:	b2ff      	uxtb	r7, r7
 8016bb6:	f000 80e9 	beq.w	8016d8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8016bba:	fa1f fe82 	uxth.w	lr, r2
 8016bbe:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8016bc2:	43d2      	mvns	r2, r2
 8016bc4:	b2d2      	uxtb	r2, r2
 8016bc6:	fb17 f70e 	smulbb	r7, r7, lr
 8016bca:	fb0c 7702 	mla	r7, ip, r2, r7
 8016bce:	b2bf      	uxth	r7, r7
 8016bd0:	f107 0c01 	add.w	ip, r7, #1
 8016bd4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8016bd8:	123f      	asrs	r7, r7, #8
 8016bda:	f800 7c03 	strb.w	r7, [r0, #-3]
 8016bde:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8016be2:	fb19 f90e 	smulbb	r9, r9, lr
 8016be6:	fb07 9902 	mla	r9, r7, r2, r9
 8016bea:	fa1f f989 	uxth.w	r9, r9
 8016bee:	f109 0701 	add.w	r7, r9, #1
 8016bf2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016bf6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8016bfa:	fb1b fe0e 	smulbb	lr, fp, lr
 8016bfe:	fb07 ee02 	mla	lr, r7, r2, lr
 8016c02:	fa1f fe8e 	uxth.w	lr, lr
 8016c06:	f10e 0201 	add.w	r2, lr, #1
 8016c0a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8016c0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c12:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016c16:	f800 9c02 	strb.w	r9, [r0, #-2]
 8016c1a:	f800 ec01 	strb.w	lr, [r0, #-1]
 8016c1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c20:	4415      	add	r5, r2
 8016c22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c24:	3003      	adds	r0, #3
 8016c26:	4414      	add	r4, r2
 8016c28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c2c:	e7a6      	b.n	8016b7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8016c2e:	2700      	movs	r7, #0
 8016c30:	1bda      	subs	r2, r3, r7
 8016c32:	2a00      	cmp	r2, #0
 8016c34:	dc40      	bgt.n	8016cb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8016c36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c3e:	441e      	add	r6, r3
 8016c40:	9b01      	ldr	r3, [sp, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	f340 80a9 	ble.w	8016d9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8016c48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016c4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016c50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016c5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016c5e:	eeb0 6a62 	vmov.f32	s12, s5
 8016c62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016c66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016c6e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016c72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016c76:	eeb0 6a43 	vmov.f32	s12, s6
 8016c7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016c7e:	ee12 2a90 	vmov	r2, s5
 8016c82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016c86:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c8a:	ee13 2a10 	vmov	r2, s6
 8016c8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c96:	9314      	str	r3, [sp, #80]	; 0x50
 8016c98:	9b01      	ldr	r3, [sp, #4]
 8016c9a:	9a05      	ldr	r2, [sp, #20]
 8016c9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016ca0:	3b01      	subs	r3, #1
 8016ca2:	9301      	str	r3, [sp, #4]
 8016ca4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016caa:	eeb0 3a67 	vmov.f32	s6, s15
 8016cae:	bf08      	it	eq
 8016cb0:	4613      	moveq	r3, r2
 8016cb2:	eef0 2a47 	vmov.f32	s5, s14
 8016cb6:	e72f      	b.n	8016b18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8016cb8:	142a      	asrs	r2, r5, #16
 8016cba:	d458      	bmi.n	8016d6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8016cbc:	4590      	cmp	r8, r2
 8016cbe:	dd56      	ble.n	8016d6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8016cc0:	1420      	asrs	r0, r4, #16
 8016cc2:	d454      	bmi.n	8016d6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8016cc4:	9902      	ldr	r1, [sp, #8]
 8016cc6:	4288      	cmp	r0, r1
 8016cc8:	da51      	bge.n	8016d6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8016cca:	9903      	ldr	r1, [sp, #12]
 8016ccc:	fb00 2001 	mla	r0, r0, r1, r2
 8016cd0:	0842      	lsrs	r2, r0, #1
 8016cd2:	9904      	ldr	r1, [sp, #16]
 8016cd4:	5c8a      	ldrb	r2, [r1, r2]
 8016cd6:	07c0      	lsls	r0, r0, #31
 8016cd8:	bf54      	ite	pl
 8016cda:	f002 020f 	andpl.w	r2, r2, #15
 8016cde:	1112      	asrmi	r2, r2, #4
 8016ce0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016ce4:	b2d2      	uxtb	r2, r2
 8016ce6:	2a00      	cmp	r2, #0
 8016ce8:	d041      	beq.n	8016d6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8016cea:	492d      	ldr	r1, [pc, #180]	; (8016da0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8016cec:	6808      	ldr	r0, [r1, #0]
 8016cee:	2aff      	cmp	r2, #255	; 0xff
 8016cf0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8016cf4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8016cf8:	fa5f fc80 	uxtb.w	ip, r0
 8016cfc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8016d00:	d03b      	beq.n	8016d7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8016d02:	4438      	add	r0, r7
 8016d04:	fa1f f982 	uxth.w	r9, r2
 8016d08:	f816 e000 	ldrb.w	lr, [r6, r0]
 8016d0c:	43d2      	mvns	r2, r2
 8016d0e:	b2d2      	uxtb	r2, r2
 8016d10:	fb1c fc09 	smulbb	ip, ip, r9
 8016d14:	fb0e cc02 	mla	ip, lr, r2, ip
 8016d18:	fa1f fc8c 	uxth.w	ip, ip
 8016d1c:	f10c 0e01 	add.w	lr, ip, #1
 8016d20:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8016d24:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016d28:	f806 c000 	strb.w	ip, [r6, r0]
 8016d2c:	4430      	add	r0, r6
 8016d2e:	fb1a fa09 	smulbb	sl, sl, r9
 8016d32:	f890 c001 	ldrb.w	ip, [r0, #1]
 8016d36:	fb0c aa02 	mla	sl, ip, r2, sl
 8016d3a:	fa1f fa8a 	uxth.w	sl, sl
 8016d3e:	f10a 0c01 	add.w	ip, sl, #1
 8016d42:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016d46:	f890 c002 	ldrb.w	ip, [r0, #2]
 8016d4a:	fb1b f909 	smulbb	r9, fp, r9
 8016d4e:	fb0c 9902 	mla	r9, ip, r2, r9
 8016d52:	fa1f f989 	uxth.w	r9, r9
 8016d56:	f109 0201 	add.w	r2, r9, #1
 8016d5a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8016d5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d66:	f880 a001 	strb.w	sl, [r0, #1]
 8016d6a:	f880 9002 	strb.w	r9, [r0, #2]
 8016d6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d70:	4415      	add	r5, r2
 8016d72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d74:	3701      	adds	r7, #1
 8016d76:	4414      	add	r4, r2
 8016d78:	e75a      	b.n	8016c30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8016d7a:	4438      	add	r0, r7
 8016d7c:	f806 c000 	strb.w	ip, [r6, r0]
 8016d80:	4430      	add	r0, r6
 8016d82:	f880 a001 	strb.w	sl, [r0, #1]
 8016d86:	f880 b002 	strb.w	fp, [r0, #2]
 8016d8a:	e7f0      	b.n	8016d6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8016d8c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8016d90:	f800 9c02 	strb.w	r9, [r0, #-2]
 8016d94:	f800 bc01 	strb.w	fp, [r0, #-1]
 8016d98:	e741      	b.n	8016c1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8016d9a:	b007      	add	sp, #28
 8016d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da0:	200084f4 	.word	0x200084f4

08016da4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8016da4:	4770      	bx	lr

08016da6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8016da6:	4770      	bx	lr

08016da8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8016da8:	4770      	bx	lr

08016daa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8016daa:	4770      	bx	lr

08016dac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016dac:	4770      	bx	lr

08016dae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016dae:	4770      	bx	lr

08016db0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016db0:	4770      	bx	lr

08016db2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016db2:	4770      	bx	lr

08016db4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016db4:	4770      	bx	lr

08016db6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8016db6:	4770      	bx	lr

08016db8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016db8:	4770      	bx	lr

08016dba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8016dba:	4770      	bx	lr

08016dbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016dbc:	4770      	bx	lr

08016dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016dbe:	4770      	bx	lr

08016dc0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016dc0:	4770      	bx	lr

08016dc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016dc2:	4770      	bx	lr

08016dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016dc4:	4770      	bx	lr

08016dc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8016dc6:	4770      	bx	lr

08016dc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016dc8:	4770      	bx	lr

08016dca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8016dca:	4770      	bx	lr

08016dcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016dcc:	2bff      	cmp	r3, #255	; 0xff
 8016dce:	b508      	push	{r3, lr}
 8016dd0:	d04f      	beq.n	8016e72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8016dd2:	2a2c      	cmp	r2, #44	; 0x2c
 8016dd4:	d032      	beq.n	8016e3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8016dd6:	d80f      	bhi.n	8016df8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8016dd8:	2a08      	cmp	r2, #8
 8016dda:	d046      	beq.n	8016e6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016ddc:	d805      	bhi.n	8016dea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8016dde:	2a04      	cmp	r2, #4
 8016de0:	d041      	beq.n	8016e66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016de2:	2a05      	cmp	r2, #5
 8016de4:	d03d      	beq.n	8016e62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8016de6:	2000      	movs	r0, #0
 8016de8:	e027      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016dea:	2a0a      	cmp	r2, #10
 8016dec:	d03d      	beq.n	8016e6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016dee:	d301      	bcc.n	8016df4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8016df0:	2a0b      	cmp	r2, #11
 8016df2:	d1f8      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016df4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8016df6:	e020      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016df8:	2a30      	cmp	r2, #48	; 0x30
 8016dfa:	d038      	beq.n	8016e6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016dfc:	d808      	bhi.n	8016e10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8016dfe:	2a2e      	cmp	r2, #46	; 0x2e
 8016e00:	684b      	ldr	r3, [r1, #4]
 8016e02:	d029      	beq.n	8016e58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8016e04:	d90b      	bls.n	8016e1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8016e06:	781b      	ldrb	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d1ec      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e0c:	6a00      	ldr	r0, [r0, #32]
 8016e0e:	e014      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e10:	2a32      	cmp	r2, #50	; 0x32
 8016e12:	d02c      	beq.n	8016e6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016e14:	d301      	bcc.n	8016e1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8016e16:	2a33      	cmp	r2, #51	; 0x33
 8016e18:	d1e5      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e1a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016e1c:	e00d      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	2b01      	cmp	r3, #1
 8016e22:	d009      	beq.n	8016e38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8016e24:	d3f2      	bcc.n	8016e0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8016e26:	2b02      	cmp	r3, #2
 8016e28:	d1dd      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e2a:	4b39      	ldr	r3, [pc, #228]	; (8016f10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8016e2c:	4a39      	ldr	r2, [pc, #228]	; (8016f14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8016e2e:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8016e32:	4839      	ldr	r0, [pc, #228]	; (8016f18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8016e34:	f006 fc7c 	bl	801d730 <__assert_func>
 8016e38:	6900      	ldr	r0, [r0, #16]
 8016e3a:	bd08      	pop	{r3, pc}
 8016e3c:	684b      	ldr	r3, [r1, #4]
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	d007      	beq.n	8016e54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8016e44:	d30b      	bcc.n	8016e5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8016e46:	2b02      	cmp	r3, #2
 8016e48:	d1cd      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e4a:	4b31      	ldr	r3, [pc, #196]	; (8016f10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8016e4c:	4a31      	ldr	r2, [pc, #196]	; (8016f14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8016e4e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8016e52:	e7ee      	b.n	8016e32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016e54:	6880      	ldr	r0, [r0, #8]
 8016e56:	e7f0      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d1c3      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e5e:	6980      	ldr	r0, [r0, #24]
 8016e60:	e7eb      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016e64:	e7e9      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e66:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016e68:	e7e7      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016e6c:	e7e5      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016e70:	e7e3      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e72:	2a2c      	cmp	r2, #44	; 0x2c
 8016e74:	d030      	beq.n	8016ed8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8016e76:	d80f      	bhi.n	8016e98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8016e78:	2a08      	cmp	r2, #8
 8016e7a:	d044      	beq.n	8016f06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8016e7c:	d805      	bhi.n	8016e8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8016e7e:	2a04      	cmp	r2, #4
 8016e80:	d03f      	beq.n	8016f02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8016e82:	2a05      	cmp	r2, #5
 8016e84:	d1af      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016e88:	e7d7      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e8a:	2a0a      	cmp	r2, #10
 8016e8c:	d03b      	beq.n	8016f06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8016e8e:	d301      	bcc.n	8016e94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8016e90:	2a0b      	cmp	r2, #11
 8016e92:	d1a8      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016e94:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016e96:	e7d0      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e98:	2a30      	cmp	r2, #48	; 0x30
 8016e9a:	d036      	beq.n	8016f0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016e9c:	d808      	bhi.n	8016eb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8016e9e:	2a2e      	cmp	r2, #46	; 0x2e
 8016ea0:	684b      	ldr	r3, [r1, #4]
 8016ea2:	d028      	beq.n	8016ef6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8016ea4:	d90b      	bls.n	8016ebe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8016ea6:	781b      	ldrb	r3, [r3, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d19c      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016eac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016eae:	e7c4      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016eb0:	2a32      	cmp	r2, #50	; 0x32
 8016eb2:	d02a      	beq.n	8016f0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016eb4:	d301      	bcc.n	8016eba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8016eb6:	2a33      	cmp	r2, #51	; 0x33
 8016eb8:	d195      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016eba:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8016ebc:	e7bd      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	2b01      	cmp	r3, #1
 8016ec2:	d007      	beq.n	8016ed4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8016ec4:	d3f2      	bcc.n	8016eac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8016ec6:	2b02      	cmp	r3, #2
 8016ec8:	d18d      	bne.n	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016eca:	4b11      	ldr	r3, [pc, #68]	; (8016f10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8016ecc:	4a11      	ldr	r2, [pc, #68]	; (8016f14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8016ece:	f240 4139 	movw	r1, #1081	; 0x439
 8016ed2:	e7ae      	b.n	8016e32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016ed4:	6940      	ldr	r0, [r0, #20]
 8016ed6:	e7b0      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016ed8:	684b      	ldr	r3, [r1, #4]
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b01      	cmp	r3, #1
 8016ede:	d008      	beq.n	8016ef2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8016ee0:	d30d      	bcc.n	8016efe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016ee2:	2b02      	cmp	r3, #2
 8016ee4:	f47f af7f 	bne.w	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016ee8:	4b09      	ldr	r3, [pc, #36]	; (8016f10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8016eea:	4a0a      	ldr	r2, [pc, #40]	; (8016f14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8016eec:	f240 4145 	movw	r1, #1093	; 0x445
 8016ef0:	e79f      	b.n	8016e32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016ef2:	68c0      	ldr	r0, [r0, #12]
 8016ef4:	e7a1      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	f47f af74 	bne.w	8016de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016efe:	69c0      	ldr	r0, [r0, #28]
 8016f00:	e79b      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016f02:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016f04:	e799      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016f06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016f08:	e797      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016f0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8016f0c:	e795      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016f0e:	bf00      	nop
 8016f10:	080214b7 	.word	0x080214b7
 8016f14:	08021c67 	.word	0x08021c67
 8016f18:	08021503 	.word	0x08021503

08016f1c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8016f1c:	b508      	push	{r3, lr}
 8016f1e:	4b06      	ldr	r3, [pc, #24]	; (8016f38 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8016f20:	8818      	ldrh	r0, [r3, #0]
 8016f22:	b928      	cbnz	r0, 8016f30 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8016f24:	4b05      	ldr	r3, [pc, #20]	; (8016f3c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8016f26:	4a06      	ldr	r2, [pc, #24]	; (8016f40 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8016f28:	4806      	ldr	r0, [pc, #24]	; (8016f44 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8016f2a:	2155      	movs	r1, #85	; 0x55
 8016f2c:	f006 fc00 	bl	801d730 <__assert_func>
 8016f30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016f34:	b280      	uxth	r0, r0
 8016f36:	bd08      	pop	{r3, pc}
 8016f38:	200084e6 	.word	0x200084e6
 8016f3c:	08021750 	.word	0x08021750
 8016f40:	08021c2c 	.word	0x08021c2c
 8016f44:	08021792 	.word	0x08021792

08016f48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8016f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f4c:	4616      	mov	r6, r2
 8016f4e:	b087      	sub	sp, #28
 8016f50:	461f      	mov	r7, r3
 8016f52:	b34b      	cbz	r3, 8016fa8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8016f54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	dd25      	ble.n	8016fa8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8016f5c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	dd21      	ble.n	8016fa8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8016f64:	6808      	ldr	r0, [r1, #0]
 8016f66:	6849      	ldr	r1, [r1, #4]
 8016f68:	4c5a      	ldr	r4, [pc, #360]	; (80170d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8016f6a:	ab04      	add	r3, sp, #16
 8016f6c:	c303      	stmia	r3!, {r0, r1}
 8016f6e:	a804      	add	r0, sp, #16
 8016f70:	f7fc f8fc 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016f74:	6820      	ldr	r0, [r4, #0]
 8016f76:	6803      	ldr	r3, [r0, #0]
 8016f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f7a:	4798      	blx	r3
 8016f7c:	2fff      	cmp	r7, #255	; 0xff
 8016f7e:	4623      	mov	r3, r4
 8016f80:	d015      	beq.n	8016fae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8016f82:	f010 0f08 	tst.w	r0, #8
 8016f86:	d015      	beq.n	8016fb4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8016f88:	6818      	ldr	r0, [r3, #0]
 8016f8a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8016f8e:	6801      	ldr	r1, [r0, #0]
 8016f90:	9401      	str	r4, [sp, #4]
 8016f92:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8016f96:	9702      	str	r7, [sp, #8]
 8016f98:	9400      	str	r4, [sp, #0]
 8016f9a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8016f9c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016fa0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016fa4:	4631      	mov	r1, r6
 8016fa6:	47a0      	blx	r4
 8016fa8:	b007      	add	sp, #28
 8016faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fae:	f010 0f02 	tst.w	r0, #2
 8016fb2:	e7e8      	b.n	8016f86 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 8016fb4:	6818      	ldr	r0, [r3, #0]
 8016fb6:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8016fba:	6803      	ldr	r3, [r0, #0]
 8016fbc:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8016fc0:	6a1b      	ldr	r3, [r3, #32]
 8016fc2:	4798      	blx	r3
 8016fc4:	4944      	ldr	r1, [pc, #272]	; (80170d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 8016fc6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016fca:	f8b1 c000 	ldrh.w	ip, [r1]
 8016fce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016fd2:	fb0c 2303 	mla	r3, ip, r3, r2
 8016fd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016fda:	2fff      	cmp	r7, #255	; 0xff
 8016fdc:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8016fe0:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8016fe4:	b2f2      	uxtb	r2, r6
 8016fe6:	4418      	add	r0, r3
 8016fe8:	4688      	mov	r8, r1
 8016fea:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8016fee:	d112      	bne.n	8017016 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 8016ff0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	42a9      	cmp	r1, r5
 8016ff8:	da66      	bge.n	80170c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	2700      	movs	r7, #0
 8016ffe:	42a7      	cmp	r7, r4
 8017000:	f103 0303 	add.w	r3, r3, #3
 8017004:	da57      	bge.n	80170b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 8017006:	f803 2c03 	strb.w	r2, [r3, #-3]
 801700a:	f803 ec02 	strb.w	lr, [r3, #-2]
 801700e:	f803 cc01 	strb.w	ip, [r3, #-1]
 8017012:	3701      	adds	r7, #1
 8017014:	e7f3      	b.n	8016ffe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 8017016:	b2bb      	uxth	r3, r7
 8017018:	fb0c fc03 	mul.w	ip, ip, r3
 801701c:	fb0e fe03 	mul.w	lr, lr, r3
 8017020:	435a      	muls	r2, r3
 8017022:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8017026:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801702a:	f04f 0800 	mov.w	r8, #0
 801702e:	b29b      	uxth	r3, r3
 8017030:	460f      	mov	r7, r1
 8017032:	45a8      	cmp	r8, r5
 8017034:	da48      	bge.n	80170c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 8017036:	4601      	mov	r1, r0
 8017038:	f04f 0a00 	mov.w	sl, #0
 801703c:	45a2      	cmp	sl, r4
 801703e:	f101 0103 	add.w	r1, r1, #3
 8017042:	da2f      	bge.n	80170a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 8017044:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8017048:	fb19 f903 	smulbb	r9, r9, r3
 801704c:	4491      	add	r9, r2
 801704e:	fa1f f989 	uxth.w	r9, r9
 8017052:	f109 0b01 	add.w	fp, r9, #1
 8017056:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801705a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801705e:	f801 9c03 	strb.w	r9, [r1, #-3]
 8017062:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8017066:	fb19 f903 	smulbb	r9, r9, r3
 801706a:	44f1      	add	r9, lr
 801706c:	fa1f f989 	uxth.w	r9, r9
 8017070:	f109 0b01 	add.w	fp, r9, #1
 8017074:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017078:	ea4f 2929 	mov.w	r9, r9, asr #8
 801707c:	f801 9c02 	strb.w	r9, [r1, #-2]
 8017080:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8017084:	fb19 f903 	smulbb	r9, r9, r3
 8017088:	44e1      	add	r9, ip
 801708a:	fa1f f989 	uxth.w	r9, r9
 801708e:	f109 0b01 	add.w	fp, r9, #1
 8017092:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017096:	ea4f 2929 	mov.w	r9, r9, asr #8
 801709a:	f801 9c01 	strb.w	r9, [r1, #-1]
 801709e:	f10a 0a01 	add.w	sl, sl, #1
 80170a2:	e7cb      	b.n	801703c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 80170a4:	8839      	ldrh	r1, [r7, #0]
 80170a6:	1b09      	subs	r1, r1, r4
 80170a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80170ac:	4431      	add	r1, r6
 80170ae:	4408      	add	r0, r1
 80170b0:	f108 0801 	add.w	r8, r8, #1
 80170b4:	e7bd      	b.n	8017032 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 80170b6:	f8b8 3000 	ldrh.w	r3, [r8]
 80170ba:	1b1b      	subs	r3, r3, r4
 80170bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80170c0:	4433      	add	r3, r6
 80170c2:	4418      	add	r0, r3
 80170c4:	3101      	adds	r1, #1
 80170c6:	e796      	b.n	8016ff6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 80170c8:	4b02      	ldr	r3, [pc, #8]	; (80170d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80170ca:	6818      	ldr	r0, [r3, #0]
 80170cc:	6803      	ldr	r3, [r0, #0]
 80170ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170d0:	4798      	blx	r3
 80170d2:	e769      	b.n	8016fa8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80170d4:	200084ec 	.word	0x200084ec
 80170d8:	200084e6 	.word	0x200084e6

080170dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80170dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e0:	b08d      	sub	sp, #52	; 0x34
 80170e2:	460c      	mov	r4, r1
 80170e4:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 80170e8:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 80170ec:	4617      	mov	r7, r2
 80170ee:	2e00      	cmp	r6, #0
 80170f0:	d04a      	beq.n	8017188 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80170f2:	6810      	ldr	r0, [r2, #0]
 80170f4:	6851      	ldr	r1, [r2, #4]
 80170f6:	ad08      	add	r5, sp, #32
 80170f8:	c503      	stmia	r5!, {r0, r1}
 80170fa:	6818      	ldr	r0, [r3, #0]
 80170fc:	6859      	ldr	r1, [r3, #4]
 80170fe:	ad0a      	add	r5, sp, #40	; 0x28
 8017100:	c503      	stmia	r5!, {r0, r1}
 8017102:	a808      	add	r0, sp, #32
 8017104:	f7fc f832 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017108:	4639      	mov	r1, r7
 801710a:	a80a      	add	r0, sp, #40	; 0x28
 801710c:	f7fc f816 	bl	801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017110:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8017114:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8017118:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801711c:	4f55      	ldr	r7, [pc, #340]	; (8017274 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801711e:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8017122:	6838      	ldr	r0, [r7, #0]
 8017124:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8017128:	fb11 2103 	smlabb	r1, r1, r3, r2
 801712c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017130:	440c      	add	r4, r1
 8017132:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8017136:	440a      	add	r2, r1
 8017138:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801713c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8017140:	4413      	add	r3, r2
 8017142:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017146:	6803      	ldr	r3, [r0, #0]
 8017148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801714a:	4798      	blx	r3
 801714c:	2eff      	cmp	r6, #255	; 0xff
 801714e:	f000 8089 	beq.w	8017264 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8017152:	0743      	lsls	r3, r0, #29
 8017154:	d405      	bmi.n	8017162 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8017156:	f1b9 0f00 	cmp.w	r9, #0
 801715a:	d018      	beq.n	801718e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801715c:	f010 0f10 	tst.w	r0, #16
 8017160:	d015      	beq.n	801718e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8017162:	6838      	ldr	r0, [r7, #0]
 8017164:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8017168:	6801      	ldr	r1, [r0, #0]
 801716a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801716e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8017172:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8017176:	9602      	str	r6, [sp, #8]
 8017178:	b2ad      	uxth	r5, r5
 801717a:	fa1f f688 	uxth.w	r6, r8
 801717e:	9601      	str	r6, [sp, #4]
 8017180:	9500      	str	r5, [sp, #0]
 8017182:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8017184:	4621      	mov	r1, r4
 8017186:	47a8      	blx	r5
 8017188:	b00d      	add	sp, #52	; 0x34
 801718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801718e:	6838      	ldr	r0, [r7, #0]
 8017190:	6803      	ldr	r3, [r0, #0]
 8017192:	6a1b      	ldr	r3, [r3, #32]
 8017194:	4798      	blx	r3
 8017196:	4a38      	ldr	r2, [pc, #224]	; (8017278 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8017198:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801719c:	8813      	ldrh	r3, [r2, #0]
 801719e:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 80171a2:	fb0c 1303 	mla	r3, ip, r3, r1
 80171a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171aa:	2eff      	cmp	r6, #255	; 0xff
 80171ac:	4418      	add	r0, r3
 80171ae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80171b2:	d032      	beq.n	801721a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80171b4:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 80171b8:	9306      	str	r3, [sp, #24]
 80171ba:	f04f 0c00 	mov.w	ip, #0
 80171be:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 80171c2:	45c4      	cmp	ip, r8
 80171c4:	da49      	bge.n	801725a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 80171c6:	4686      	mov	lr, r0
 80171c8:	46a1      	mov	r9, r4
 80171ca:	eba9 0304 	sub.w	r3, r9, r4
 80171ce:	428b      	cmp	r3, r1
 80171d0:	da13      	bge.n	80171fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 80171d2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80171d6:	9307      	str	r3, [sp, #28]
 80171d8:	f89e b000 	ldrb.w	fp, [lr]
 80171dc:	9b06      	ldr	r3, [sp, #24]
 80171de:	fb1b fb03 	smulbb	fp, fp, r3
 80171e2:	9b07      	ldr	r3, [sp, #28]
 80171e4:	fb03 b306 	mla	r3, r3, r6, fp
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	f103 0b01 	add.w	fp, r3, #1
 80171ee:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80171f2:	121b      	asrs	r3, r3, #8
 80171f4:	f80e 3b01 	strb.w	r3, [lr], #1
 80171f8:	e7e7      	b.n	80171ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 80171fa:	8813      	ldrh	r3, [r2, #0]
 80171fc:	1b5b      	subs	r3, r3, r5
 80171fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017202:	4453      	add	r3, sl
 8017204:	4418      	add	r0, r3
 8017206:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801720a:	1b5b      	subs	r3, r3, r5
 801720c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017210:	4453      	add	r3, sl
 8017212:	441c      	add	r4, r3
 8017214:	f10c 0c01 	add.w	ip, ip, #1
 8017218:	e7d3      	b.n	80171c2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801721a:	2600      	movs	r6, #0
 801721c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8017220:	4546      	cmp	r6, r8
 8017222:	da1a      	bge.n	801725a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8017224:	f100 3eff 	add.w	lr, r0, #4294967295
 8017228:	4623      	mov	r3, r4
 801722a:	eba3 0904 	sub.w	r9, r3, r4
 801722e:	4589      	cmp	r9, r1
 8017230:	da04      	bge.n	801723c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8017232:	f813 9b01 	ldrb.w	r9, [r3], #1
 8017236:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801723a:	e7f6      	b.n	801722a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801723c:	8813      	ldrh	r3, [r2, #0]
 801723e:	1b5b      	subs	r3, r3, r5
 8017240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017244:	4463      	add	r3, ip
 8017246:	4418      	add	r0, r3
 8017248:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801724c:	1b5b      	subs	r3, r3, r5
 801724e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017252:	4463      	add	r3, ip
 8017254:	441c      	add	r4, r3
 8017256:	3601      	adds	r6, #1
 8017258:	e7e2      	b.n	8017220 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801725a:	6838      	ldr	r0, [r7, #0]
 801725c:	6803      	ldr	r3, [r0, #0]
 801725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017260:	4798      	blx	r3
 8017262:	e791      	b.n	8017188 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8017264:	f1b9 0f00 	cmp.w	r9, #0
 8017268:	f47f af78 	bne.w	801715c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801726c:	f010 0f01 	tst.w	r0, #1
 8017270:	e776      	b.n	8017160 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8017272:	bf00      	nop
 8017274:	200084ec 	.word	0x200084ec
 8017278:	200084e6 	.word	0x200084e6

0801727c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801727c:	b510      	push	{r4, lr}
 801727e:	2104      	movs	r1, #4
 8017280:	4604      	mov	r4, r0
 8017282:	f006 fa29 	bl	801d6d8 <_ZdlPvj>
 8017286:	4620      	mov	r0, r4
 8017288:	bd10      	pop	{r4, pc}

0801728a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801728a:	b510      	push	{r4, lr}
 801728c:	2104      	movs	r1, #4
 801728e:	4604      	mov	r4, r0
 8017290:	f006 fa22 	bl	801d6d8 <_ZdlPvj>
 8017294:	4620      	mov	r0, r4
 8017296:	bd10      	pop	{r4, pc}

08017298 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017298:	b510      	push	{r4, lr}
 801729a:	2104      	movs	r1, #4
 801729c:	4604      	mov	r4, r0
 801729e:	f006 fa1b 	bl	801d6d8 <_ZdlPvj>
 80172a2:	4620      	mov	r0, r4
 80172a4:	bd10      	pop	{r4, pc}

080172a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80172a6:	b510      	push	{r4, lr}
 80172a8:	2104      	movs	r1, #4
 80172aa:	4604      	mov	r4, r0
 80172ac:	f006 fa14 	bl	801d6d8 <_ZdlPvj>
 80172b0:	4620      	mov	r0, r4
 80172b2:	bd10      	pop	{r4, pc}

080172b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80172b4:	b510      	push	{r4, lr}
 80172b6:	2104      	movs	r1, #4
 80172b8:	4604      	mov	r4, r0
 80172ba:	f006 fa0d 	bl	801d6d8 <_ZdlPvj>
 80172be:	4620      	mov	r0, r4
 80172c0:	bd10      	pop	{r4, pc}

080172c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80172c2:	b510      	push	{r4, lr}
 80172c4:	2104      	movs	r1, #4
 80172c6:	4604      	mov	r4, r0
 80172c8:	f006 fa06 	bl	801d6d8 <_ZdlPvj>
 80172cc:	4620      	mov	r0, r4
 80172ce:	bd10      	pop	{r4, pc}

080172d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80172d0:	b510      	push	{r4, lr}
 80172d2:	2104      	movs	r1, #4
 80172d4:	4604      	mov	r4, r0
 80172d6:	f006 f9ff 	bl	801d6d8 <_ZdlPvj>
 80172da:	4620      	mov	r0, r4
 80172dc:	bd10      	pop	{r4, pc}

080172de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80172de:	b510      	push	{r4, lr}
 80172e0:	2104      	movs	r1, #4
 80172e2:	4604      	mov	r4, r0
 80172e4:	f006 f9f8 	bl	801d6d8 <_ZdlPvj>
 80172e8:	4620      	mov	r0, r4
 80172ea:	bd10      	pop	{r4, pc}

080172ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80172ec:	b510      	push	{r4, lr}
 80172ee:	2104      	movs	r1, #4
 80172f0:	4604      	mov	r4, r0
 80172f2:	f006 f9f1 	bl	801d6d8 <_ZdlPvj>
 80172f6:	4620      	mov	r0, r4
 80172f8:	bd10      	pop	{r4, pc}

080172fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80172fa:	b510      	push	{r4, lr}
 80172fc:	2104      	movs	r1, #4
 80172fe:	4604      	mov	r4, r0
 8017300:	f006 f9ea 	bl	801d6d8 <_ZdlPvj>
 8017304:	4620      	mov	r0, r4
 8017306:	bd10      	pop	{r4, pc}

08017308 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017308:	b510      	push	{r4, lr}
 801730a:	2104      	movs	r1, #4
 801730c:	4604      	mov	r4, r0
 801730e:	f006 f9e3 	bl	801d6d8 <_ZdlPvj>
 8017312:	4620      	mov	r0, r4
 8017314:	bd10      	pop	{r4, pc}

08017316 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017316:	b510      	push	{r4, lr}
 8017318:	2104      	movs	r1, #4
 801731a:	4604      	mov	r4, r0
 801731c:	f006 f9dc 	bl	801d6d8 <_ZdlPvj>
 8017320:	4620      	mov	r0, r4
 8017322:	bd10      	pop	{r4, pc}

08017324 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017324:	b510      	push	{r4, lr}
 8017326:	2104      	movs	r1, #4
 8017328:	4604      	mov	r4, r0
 801732a:	f006 f9d5 	bl	801d6d8 <_ZdlPvj>
 801732e:	4620      	mov	r0, r4
 8017330:	bd10      	pop	{r4, pc}

08017332 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017332:	b510      	push	{r4, lr}
 8017334:	2104      	movs	r1, #4
 8017336:	4604      	mov	r4, r0
 8017338:	f006 f9ce 	bl	801d6d8 <_ZdlPvj>
 801733c:	4620      	mov	r0, r4
 801733e:	bd10      	pop	{r4, pc}

08017340 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017340:	b510      	push	{r4, lr}
 8017342:	2104      	movs	r1, #4
 8017344:	4604      	mov	r4, r0
 8017346:	f006 f9c7 	bl	801d6d8 <_ZdlPvj>
 801734a:	4620      	mov	r0, r4
 801734c:	bd10      	pop	{r4, pc}

0801734e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801734e:	b510      	push	{r4, lr}
 8017350:	2104      	movs	r1, #4
 8017352:	4604      	mov	r4, r0
 8017354:	f006 f9c0 	bl	801d6d8 <_ZdlPvj>
 8017358:	4620      	mov	r0, r4
 801735a:	bd10      	pop	{r4, pc}

0801735c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801735c:	b510      	push	{r4, lr}
 801735e:	2104      	movs	r1, #4
 8017360:	4604      	mov	r4, r0
 8017362:	f006 f9b9 	bl	801d6d8 <_ZdlPvj>
 8017366:	4620      	mov	r0, r4
 8017368:	bd10      	pop	{r4, pc}

0801736a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801736a:	b510      	push	{r4, lr}
 801736c:	2104      	movs	r1, #4
 801736e:	4604      	mov	r4, r0
 8017370:	f006 f9b2 	bl	801d6d8 <_ZdlPvj>
 8017374:	4620      	mov	r0, r4
 8017376:	bd10      	pop	{r4, pc}

08017378 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017378:	b510      	push	{r4, lr}
 801737a:	2104      	movs	r1, #4
 801737c:	4604      	mov	r4, r0
 801737e:	f006 f9ab 	bl	801d6d8 <_ZdlPvj>
 8017382:	4620      	mov	r0, r4
 8017384:	bd10      	pop	{r4, pc}

08017386 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017386:	b510      	push	{r4, lr}
 8017388:	2104      	movs	r1, #4
 801738a:	4604      	mov	r4, r0
 801738c:	f006 f9a4 	bl	801d6d8 <_ZdlPvj>
 8017390:	4620      	mov	r0, r4
 8017392:	bd10      	pop	{r4, pc}

08017394 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017398:	4d9e      	ldr	r5, [pc, #632]	; (8017614 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801739a:	4690      	mov	r8, r2
 801739c:	682a      	ldr	r2, [r5, #0]
 801739e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80173a2:	2a02      	cmp	r2, #2
 80173a4:	b08f      	sub	sp, #60	; 0x3c
 80173a6:	4604      	mov	r4, r0
 80173a8:	4689      	mov	r9, r1
 80173aa:	d106      	bne.n	80173ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80173ac:	4b9a      	ldr	r3, [pc, #616]	; (8017618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80173ae:	4a9b      	ldr	r2, [pc, #620]	; (801761c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80173b0:	f240 11ef 	movw	r1, #495	; 0x1ef
 80173b4:	489a      	ldr	r0, [pc, #616]	; (8017620 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 80173b6:	f006 f9bb 	bl	801d730 <__assert_func>
 80173ba:	ae0e      	add	r6, sp, #56	; 0x38
 80173bc:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80173c0:	4630      	mov	r0, r6
 80173c2:	f7fe f8b1 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	4607      	mov	r7, r0
 80173ca:	6a1b      	ldr	r3, [r3, #32]
 80173cc:	4620      	mov	r0, r4
 80173ce:	4798      	blx	r3
 80173d0:	4287      	cmp	r7, r0
 80173d2:	d004      	beq.n	80173de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80173d4:	4b93      	ldr	r3, [pc, #588]	; (8017624 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 80173d6:	4a91      	ldr	r2, [pc, #580]	; (801761c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80173d8:	f240 11f1 	movw	r1, #497	; 0x1f1
 80173dc:	e7ea      	b.n	80173b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80173de:	4630      	mov	r0, r6
 80173e0:	f7fe f81e 	bl	8015420 <_ZNK8touchgfx6Bitmap7getDataEv>
 80173e4:	4607      	mov	r7, r0
 80173e6:	b920      	cbnz	r0, 80173f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80173e8:	4b8f      	ldr	r3, [pc, #572]	; (8017628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 80173ea:	4a8c      	ldr	r2, [pc, #560]	; (801761c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80173ec:	f240 11f3 	movw	r1, #499	; 0x1f3
 80173f0:	e7e0      	b.n	80173b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80173f2:	f8d8 0000 	ldr.w	r0, [r8]
 80173f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80173fa:	f9b8 a000 	ldrsh.w	sl, [r8]
 80173fe:	ab06      	add	r3, sp, #24
 8017400:	c303      	stmia	r3!, {r0, r1}
 8017402:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017406:	f8d9 0000 	ldr.w	r0, [r9]
 801740a:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801740e:	ab08      	add	r3, sp, #32
 8017410:	c303      	stmia	r3!, {r0, r1}
 8017412:	4630      	mov	r0, r6
 8017414:	f7fd ff36 	bl	8015284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017418:	4680      	mov	r8, r0
 801741a:	4630      	mov	r0, r6
 801741c:	f7fd ff6c 	bl	80152f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017420:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8017424:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8017428:	f10d 0920 	add.w	r9, sp, #32
 801742c:	a806      	add	r0, sp, #24
 801742e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017432:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8017436:	f7fb fe99 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801743a:	4648      	mov	r0, r9
 801743c:	f7fb fe96 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017440:	a80a      	add	r0, sp, #40	; 0x28
 8017442:	f7fb fe93 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017446:	4e79      	ldr	r6, [pc, #484]	; (801762c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8017448:	4b79      	ldr	r3, [pc, #484]	; (8017630 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801744a:	f9b6 2000 	ldrsh.w	r2, [r6]
 801744e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017452:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017456:	2100      	movs	r1, #0
 8017458:	910c      	str	r1, [sp, #48]	; 0x30
 801745a:	4648      	mov	r0, r9
 801745c:	a90c      	add	r1, sp, #48	; 0x30
 801745e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017462:	f7f9 fe7d 	bl	8011160 <_ZN8touchgfx4RectaNERKS0_>
 8017466:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801746a:	9602      	str	r6, [sp, #8]
 801746c:	f1bc 0f00 	cmp.w	ip, #0
 8017470:	f340 80a3 	ble.w	80175ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 8017474:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8017478:	2e00      	cmp	r6, #0
 801747a:	f340 809e 	ble.w	80175ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801747e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8017482:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8017486:	4288      	cmp	r0, r1
 8017488:	db36      	blt.n	80174f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801748a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801748e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017492:	429a      	cmp	r2, r3
 8017494:	db30      	blt.n	80174f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8017496:	4460      	add	r0, ip
 8017498:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801749c:	4461      	add	r1, ip
 801749e:	b200      	sxth	r0, r0
 80174a0:	b209      	sxth	r1, r1
 80174a2:	4288      	cmp	r0, r1
 80174a4:	dc28      	bgt.n	80174f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80174a6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80174aa:	4432      	add	r2, r6
 80174ac:	440b      	add	r3, r1
 80174ae:	b212      	sxth	r2, r2
 80174b0:	b21b      	sxth	r3, r3
 80174b2:	429a      	cmp	r2, r3
 80174b4:	dc20      	bgt.n	80174f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80174b6:	6823      	ldr	r3, [r4, #0]
 80174b8:	4620      	mov	r0, r4
 80174ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174bc:	4798      	blx	r3
 80174be:	4682      	mov	sl, r0
 80174c0:	6828      	ldr	r0, [r5, #0]
 80174c2:	6803      	ldr	r3, [r0, #0]
 80174c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174c6:	4798      	blx	r3
 80174c8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80174cc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80174d0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80174d4:	9303      	str	r3, [sp, #12]
 80174d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80174da:	1a9b      	subs	r3, r3, r2
 80174dc:	b29b      	uxth	r3, r3
 80174de:	b21c      	sxth	r4, r3
 80174e0:	2c00      	cmp	r4, #0
 80174e2:	dc0e      	bgt.n	8017502 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 80174e4:	b134      	cbz	r4, 80174f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 80174e6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80174ea:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80174ee:	4413      	add	r3, r2
 80174f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80174f4:	463c      	mov	r4, r7
 80174f6:	e00b      	b.n	8017510 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 80174f8:	4b4e      	ldr	r3, [pc, #312]	; (8017634 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 80174fa:	4a48      	ldr	r2, [pc, #288]	; (801761c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80174fc:	f240 2101 	movw	r1, #513	; 0x201
 8017500:	e758      	b.n	80173b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017502:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017506:	ebab 0303 	sub.w	r3, fp, r3
 801750a:	443c      	add	r4, r7
 801750c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8017510:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8017514:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017518:	1a9b      	subs	r3, r3, r2
 801751a:	b29b      	uxth	r3, r3
 801751c:	b219      	sxth	r1, r3
 801751e:	2900      	cmp	r1, #0
 8017520:	dd4f      	ble.n	80175c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22e>
 8017522:	9a03      	ldr	r2, [sp, #12]
 8017524:	fb02 4401 	mla	r4, r2, r1, r4
 8017528:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801752c:	1ad3      	subs	r3, r2, r3
 801752e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017532:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8017536:	f1bc 0f00 	cmp.w	ip, #0
 801753a:	dd3e      	ble.n	80175ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801753c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8017540:	2e00      	cmp	r6, #0
 8017542:	dd3a      	ble.n	80175ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 8017544:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8017548:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801754c:	fb0a f801 	mul.w	r8, sl, r1
 8017550:	2203      	movs	r2, #3
 8017552:	fb13 8802 	smlabb	r8, r3, r2, r8
 8017556:	9a02      	ldr	r2, [sp, #8]
 8017558:	4480      	add	r8, r0
 801755a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801755e:	8812      	ldrh	r2, [r2, #0]
 8017560:	4584      	cmp	ip, r0
 8017562:	bfa8      	it	ge
 8017564:	4684      	movge	ip, r0
 8017566:	1ad3      	subs	r3, r2, r3
 8017568:	459c      	cmp	ip, r3
 801756a:	bfa8      	it	ge
 801756c:	469c      	movge	ip, r3
 801756e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8017572:	429e      	cmp	r6, r3
 8017574:	bfa8      	it	ge
 8017576:	461e      	movge	r6, r3
 8017578:	4b2d      	ldr	r3, [pc, #180]	; (8017630 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801757a:	881b      	ldrh	r3, [r3, #0]
 801757c:	1a59      	subs	r1, r3, r1
 801757e:	428e      	cmp	r6, r1
 8017580:	4633      	mov	r3, r6
 8017582:	bfa8      	it	ge
 8017584:	460b      	movge	r3, r1
 8017586:	4562      	cmp	r2, ip
 8017588:	9302      	str	r3, [sp, #8]
 801758a:	d12d      	bne.n	80175e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 801758c:	455a      	cmp	r2, fp
 801758e:	d12b      	bne.n	80175e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 8017590:	6828      	ldr	r0, [r5, #0]
 8017592:	6803      	ldr	r3, [r0, #0]
 8017594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017596:	4798      	blx	r3
 8017598:	07c3      	lsls	r3, r0, #31
 801759a:	d51b      	bpl.n	80175d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x240>
 801759c:	6828      	ldr	r0, [r5, #0]
 801759e:	9b02      	ldr	r3, [sp, #8]
 80175a0:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80175a4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80175a8:	6803      	ldr	r3, [r0, #0]
 80175aa:	f8cd b000 	str.w	fp, [sp]
 80175ae:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80175b0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80175b4:	4623      	mov	r3, r4
 80175b6:	47a8      	blx	r5
 80175b8:	4607      	mov	r7, r0
 80175ba:	4638      	mov	r0, r7
 80175bc:	b00f      	add	sp, #60	; 0x3c
 80175be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c2:	bf1f      	itttt	ne
 80175c4:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 80175c8:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80175cc:	189b      	addne	r3, r3, r2
 80175ce:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80175d2:	e7ae      	b.n	8017532 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 80175d4:	6828      	ldr	r0, [r5, #0]
 80175d6:	6803      	ldr	r3, [r0, #0]
 80175d8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80175da:	9b02      	ldr	r3, [sp, #8]
 80175dc:	4642      	mov	r2, r8
 80175de:	fb03 f30a 	mul.w	r3, r3, sl
 80175e2:	4621      	mov	r1, r4
 80175e4:	47a8      	blx	r5
 80175e6:	e7e8      	b.n	80175ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80175e8:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 80175ec:	f04f 0900 	mov.w	r9, #0
 80175f0:	9b02      	ldr	r3, [sp, #8]
 80175f2:	454b      	cmp	r3, r9
 80175f4:	dde1      	ble.n	80175ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80175f6:	6828      	ldr	r0, [r5, #0]
 80175f8:	6803      	ldr	r3, [r0, #0]
 80175fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175fc:	4642      	mov	r2, r8
 80175fe:	461e      	mov	r6, r3
 8017600:	4621      	mov	r1, r4
 8017602:	465b      	mov	r3, fp
 8017604:	47b0      	blx	r6
 8017606:	9b03      	ldr	r3, [sp, #12]
 8017608:	44d0      	add	r8, sl
 801760a:	441c      	add	r4, r3
 801760c:	f109 0901 	add.w	r9, r9, #1
 8017610:	e7ee      	b.n	80175f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25c>
 8017612:	bf00      	nop
 8017614:	200084ec 	.word	0x200084ec
 8017618:	08021535 	.word	0x08021535
 801761c:	08021d11 	.word	0x08021d11
 8017620:	08021503 	.word	0x08021503
 8017624:	080215e7 	.word	0x080215e7
 8017628:	0802163c 	.word	0x0802163c
 801762c:	200084e6 	.word	0x200084e6
 8017630:	200084e8 	.word	0x200084e8
 8017634:	0802167a 	.word	0x0802167a

08017638 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017638:	4a0b      	ldr	r2, [pc, #44]	; (8017668 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801763a:	6002      	str	r2, [r0, #0]
 801763c:	2200      	movs	r2, #0
 801763e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017642:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017646:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801764a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801764e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017652:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017656:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801765a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801765e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017662:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017666:	4770      	bx	lr
 8017668:	08021960 	.word	0x08021960

0801766c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017670:	b093      	sub	sp, #76	; 0x4c
 8017672:	880c      	ldrh	r4, [r1, #0]
 8017674:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8017678:	4605      	mov	r5, r0
 801767a:	460f      	mov	r7, r1
 801767c:	4691      	mov	r9, r2
 801767e:	b12c      	cbz	r4, 801768c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8017680:	4b71      	ldr	r3, [pc, #452]	; (8017848 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8017682:	4a72      	ldr	r2, [pc, #456]	; (801784c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8017684:	4872      	ldr	r0, [pc, #456]	; (8017850 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8017686:	2168      	movs	r1, #104	; 0x68
 8017688:	f006 f852 	bl	801d730 <__assert_func>
 801768c:	6810      	ldr	r0, [r2, #0]
 801768e:	6851      	ldr	r1, [r2, #4]
 8017690:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8017858 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8017694:	ae0e      	add	r6, sp, #56	; 0x38
 8017696:	c603      	stmia	r6!, {r0, r1}
 8017698:	6818      	ldr	r0, [r3, #0]
 801769a:	6859      	ldr	r1, [r3, #4]
 801769c:	ae10      	add	r6, sp, #64	; 0x40
 801769e:	c603      	stmia	r6!, {r0, r1}
 80176a0:	a80e      	add	r0, sp, #56	; 0x38
 80176a2:	f7fb fd63 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80176a6:	4649      	mov	r1, r9
 80176a8:	a810      	add	r0, sp, #64	; 0x40
 80176aa:	f7fb fd47 	bl	801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80176ae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80176b2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80176b6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80176ba:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8017854 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80176be:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 80176c2:	f8d9 0000 	ldr.w	r0, [r9]
 80176c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80176ca:	440d      	add	r5, r1
 80176cc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80176d0:	440a      	add	r2, r1
 80176d2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80176d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80176da:	4413      	add	r3, r2
 80176dc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80176e0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80176e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80176e6:	6803      	ldr	r3, [r0, #0]
 80176e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176ec:	4798      	blx	r3
 80176ee:	2801      	cmp	r0, #1
 80176f0:	d11e      	bne.n	8017730 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 80176f2:	220b      	movs	r2, #11
 80176f4:	9008      	str	r0, [sp, #32]
 80176f6:	9207      	str	r2, [sp, #28]
 80176f8:	f8ba 2000 	ldrh.w	r2, [sl]
 80176fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8017700:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8017704:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017708:	9203      	str	r2, [sp, #12]
 801770a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801770e:	9202      	str	r2, [sp, #8]
 8017710:	b2b6      	uxth	r6, r6
 8017712:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017716:	9200      	str	r2, [sp, #0]
 8017718:	9601      	str	r6, [sp, #4]
 801771a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801771e:	f8d9 0000 	ldr.w	r0, [r9]
 8017722:	463a      	mov	r2, r7
 8017724:	4629      	mov	r1, r5
 8017726:	f7fa f967 	bl	80119f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801772a:	b013      	add	sp, #76	; 0x4c
 801772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017730:	f8d9 0000 	ldr.w	r0, [r9]
 8017734:	6803      	ldr	r3, [r0, #0]
 8017736:	6a1b      	ldr	r3, [r3, #32]
 8017738:	4798      	blx	r3
 801773a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801773e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017742:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8017746:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801774a:	fb01 2303 	mla	r3, r1, r3, r2
 801774e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017752:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8017756:	4418      	add	r0, r3
 8017758:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801775c:	930c      	str	r3, [sp, #48]	; 0x30
 801775e:	4621      	mov	r1, r4
 8017760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017762:	4299      	cmp	r1, r3
 8017764:	da6a      	bge.n	801783c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8017766:	1cc2      	adds	r2, r0, #3
 8017768:	46aa      	mov	sl, r5
 801776a:	ebaa 0305 	sub.w	r3, sl, r5
 801776e:	429e      	cmp	r6, r3
 8017770:	dd55      	ble.n	801781e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8017772:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8017776:	2404      	movs	r4, #4
 8017778:	fb14 4303 	smlabb	r3, r4, r3, r4
 801777c:	eb07 0e03 	add.w	lr, r7, r3
 8017780:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8017784:	b184      	cbz	r4, 80177a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8017786:	2cff      	cmp	r4, #255	; 0xff
 8017788:	f817 b003 	ldrb.w	fp, [r7, r3]
 801778c:	d10e      	bne.n	80177ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801778e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017792:	d10b      	bne.n	80177ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8017794:	f802 bc03 	strb.w	fp, [r2, #-3]
 8017798:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801779c:	f802 3c02 	strb.w	r3, [r2, #-2]
 80177a0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80177a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80177a8:	3203      	adds	r2, #3
 80177aa:	e7de      	b.n	801776a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 80177ac:	fb08 f404 	mul.w	r4, r8, r4
 80177b0:	1c63      	adds	r3, r4, #1
 80177b2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80177b6:	121b      	asrs	r3, r3, #8
 80177b8:	b29c      	uxth	r4, r3
 80177ba:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 80177be:	43db      	mvns	r3, r3
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	fb1b fb04 	smulbb	fp, fp, r4
 80177c6:	fb0c bc03 	mla	ip, ip, r3, fp
 80177ca:	fa1f fc8c 	uxth.w	ip, ip
 80177ce:	f10c 0b01 	add.w	fp, ip, #1
 80177d2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80177d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80177da:	f802 cc03 	strb.w	ip, [r2, #-3]
 80177de:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 80177e2:	f89e c001 	ldrb.w	ip, [lr, #1]
 80177e6:	fb1b fb03 	smulbb	fp, fp, r3
 80177ea:	fb0c bc04 	mla	ip, ip, r4, fp
 80177ee:	fa1f fc8c 	uxth.w	ip, ip
 80177f2:	f10c 0b01 	add.w	fp, ip, #1
 80177f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80177fa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80177fe:	f802 cc02 	strb.w	ip, [r2, #-2]
 8017802:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8017806:	f89e e002 	ldrb.w	lr, [lr, #2]
 801780a:	fb1c f303 	smulbb	r3, ip, r3
 801780e:	fb0e 3304 	mla	r3, lr, r4, r3
 8017812:	b29b      	uxth	r3, r3
 8017814:	1c5c      	adds	r4, r3, #1
 8017816:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801781a:	121b      	asrs	r3, r3, #8
 801781c:	e7c2      	b.n	80177a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801781e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017822:	881b      	ldrh	r3, [r3, #0]
 8017824:	1b9b      	subs	r3, r3, r6
 8017826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801782a:	4413      	add	r3, r2
 801782c:	4418      	add	r0, r3
 801782e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017832:	1b9b      	subs	r3, r3, r6
 8017834:	444b      	add	r3, r9
 8017836:	441d      	add	r5, r3
 8017838:	3101      	adds	r1, #1
 801783a:	e791      	b.n	8017760 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801783c:	4b05      	ldr	r3, [pc, #20]	; (8017854 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801783e:	6818      	ldr	r0, [r3, #0]
 8017840:	6803      	ldr	r3, [r0, #0]
 8017842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017844:	4798      	blx	r3
 8017846:	e770      	b.n	801772a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8017848:	08021467 	.word	0x08021467
 801784c:	08021b33 	.word	0x08021b33
 8017850:	08021503 	.word	0x08021503
 8017854:	200084ec 	.word	0x200084ec
 8017858:	200084e6 	.word	0x200084e6

0801785c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017860:	4614      	mov	r4, r2
 8017862:	880a      	ldrh	r2, [r1, #0]
 8017864:	b091      	sub	sp, #68	; 0x44
 8017866:	2a01      	cmp	r2, #1
 8017868:	4680      	mov	r8, r0
 801786a:	460e      	mov	r6, r1
 801786c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017870:	d005      	beq.n	801787e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8017872:	4b6d      	ldr	r3, [pc, #436]	; (8017a28 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8017874:	4a6d      	ldr	r2, [pc, #436]	; (8017a2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8017876:	486e      	ldr	r0, [pc, #440]	; (8017a30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8017878:	21b6      	movs	r1, #182	; 0xb6
 801787a:	f005 ff59 	bl	801d730 <__assert_func>
 801787e:	6820      	ldr	r0, [r4, #0]
 8017880:	6861      	ldr	r1, [r4, #4]
 8017882:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8017a34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8017886:	ad0c      	add	r5, sp, #48	; 0x30
 8017888:	c503      	stmia	r5!, {r0, r1}
 801788a:	6818      	ldr	r0, [r3, #0]
 801788c:	6859      	ldr	r1, [r3, #4]
 801788e:	ad0e      	add	r5, sp, #56	; 0x38
 8017890:	c503      	stmia	r5!, {r0, r1}
 8017892:	a80c      	add	r0, sp, #48	; 0x30
 8017894:	f7fb fc6a 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017898:	4621      	mov	r1, r4
 801789a:	a80e      	add	r0, sp, #56	; 0x38
 801789c:	f7fb fc4e 	bl	801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80178a0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80178a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80178a8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80178ac:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80178b0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80178b4:	eb08 0401 	add.w	r4, r8, r1
 80178b8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80178bc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8017a38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 80178c0:	440a      	add	r2, r1
 80178c2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80178c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80178ca:	f8d8 0000 	ldr.w	r0, [r8]
 80178ce:	4413      	add	r3, r2
 80178d0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80178d4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80178d8:	930a      	str	r3, [sp, #40]	; 0x28
 80178da:	6803      	ldr	r3, [r0, #0]
 80178dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80178e0:	4798      	blx	r3
 80178e2:	2801      	cmp	r0, #1
 80178e4:	d11e      	bne.n	8017924 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 80178e6:	220b      	movs	r2, #11
 80178e8:	9008      	str	r0, [sp, #32]
 80178ea:	9207      	str	r2, [sp, #28]
 80178ec:	f8b9 2000 	ldrh.w	r2, [r9]
 80178f0:	9206      	str	r2, [sp, #24]
 80178f2:	2200      	movs	r2, #0
 80178f4:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80178f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80178fc:	9203      	str	r2, [sp, #12]
 80178fe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8017902:	9202      	str	r2, [sp, #8]
 8017904:	b2ad      	uxth	r5, r5
 8017906:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801790a:	9200      	str	r2, [sp, #0]
 801790c:	9501      	str	r5, [sp, #4]
 801790e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017912:	f8d8 0000 	ldr.w	r0, [r8]
 8017916:	4632      	mov	r2, r6
 8017918:	4621      	mov	r1, r4
 801791a:	f7fa f86d 	bl	80119f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801791e:	b011      	add	sp, #68	; 0x44
 8017920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017924:	f8d8 0000 	ldr.w	r0, [r8]
 8017928:	6803      	ldr	r3, [r0, #0]
 801792a:	6a1b      	ldr	r3, [r3, #32]
 801792c:	4798      	blx	r3
 801792e:	f8b9 3000 	ldrh.w	r3, [r9]
 8017932:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017936:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801793a:	fb01 2303 	mla	r3, r1, r3, r2
 801793e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017942:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8017946:	4418      	add	r0, r3
 8017948:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801794c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8017950:	930b      	str	r3, [sp, #44]	; 0x2c
 8017952:	f04f 0e00 	mov.w	lr, #0
 8017956:	fa1f f987 	uxth.w	r9, r7
 801795a:	b289      	uxth	r1, r1
 801795c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801795e:	459e      	cmp	lr, r3
 8017960:	da5c      	bge.n	8017a1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8017962:	1cc3      	adds	r3, r0, #3
 8017964:	46a2      	mov	sl, r4
 8017966:	ebaa 0204 	sub.w	r2, sl, r4
 801796a:	4295      	cmp	r5, r2
 801796c:	dd46      	ble.n	80179fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801796e:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8017972:	f04f 0c03 	mov.w	ip, #3
 8017976:	f04f 0b04 	mov.w	fp, #4
 801797a:	fb1c b202 	smlabb	r2, ip, r2, fp
 801797e:	2fff      	cmp	r7, #255	; 0xff
 8017980:	eb06 0c02 	add.w	ip, r6, r2
 8017984:	f816 b002 	ldrb.w	fp, [r6, r2]
 8017988:	d02f      	beq.n	80179ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801798a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801798e:	fb12 f201 	smulbb	r2, r2, r1
 8017992:	fb0b 2209 	mla	r2, fp, r9, r2
 8017996:	b292      	uxth	r2, r2
 8017998:	f102 0b01 	add.w	fp, r2, #1
 801799c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80179a0:	1212      	asrs	r2, r2, #8
 80179a2:	f803 2c03 	strb.w	r2, [r3, #-3]
 80179a6:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 80179aa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80179ae:	fb1b fb01 	smulbb	fp, fp, r1
 80179b2:	fb02 b209 	mla	r2, r2, r9, fp
 80179b6:	b292      	uxth	r2, r2
 80179b8:	f102 0b01 	add.w	fp, r2, #1
 80179bc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80179c0:	1212      	asrs	r2, r2, #8
 80179c2:	f803 2c02 	strb.w	r2, [r3, #-2]
 80179c6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80179ca:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80179ce:	fb1c fc01 	smulbb	ip, ip, r1
 80179d2:	fb02 c209 	mla	r2, r2, r9, ip
 80179d6:	b292      	uxth	r2, r2
 80179d8:	f102 0c01 	add.w	ip, r2, #1
 80179dc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80179e0:	1212      	asrs	r2, r2, #8
 80179e2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80179e6:	3303      	adds	r3, #3
 80179e8:	e7bd      	b.n	8017966 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 80179ea:	f803 bc03 	strb.w	fp, [r3, #-3]
 80179ee:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80179f2:	f803 2c02 	strb.w	r2, [r3, #-2]
 80179f6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80179fa:	e7f2      	b.n	80179e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 80179fc:	4b0d      	ldr	r3, [pc, #52]	; (8017a34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80179fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a00:	881b      	ldrh	r3, [r3, #0]
 8017a02:	1b5b      	subs	r3, r3, r5
 8017a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a08:	4413      	add	r3, r2
 8017a0a:	4418      	add	r0, r3
 8017a0c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017a10:	1b5b      	subs	r3, r3, r5
 8017a12:	4443      	add	r3, r8
 8017a14:	441c      	add	r4, r3
 8017a16:	f10e 0e01 	add.w	lr, lr, #1
 8017a1a:	e79f      	b.n	801795c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8017a1c:	4b06      	ldr	r3, [pc, #24]	; (8017a38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8017a1e:	6818      	ldr	r0, [r3, #0]
 8017a20:	6803      	ldr	r3, [r0, #0]
 8017a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a24:	4798      	blx	r3
 8017a26:	e77a      	b.n	801791e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8017a28:	0802134b 	.word	0x0802134b
 8017a2c:	08021a26 	.word	0x08021a26
 8017a30:	08021503 	.word	0x08021503
 8017a34:	200084e6 	.word	0x200084e6
 8017a38:	200084ec 	.word	0x200084ec

08017a3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8017a3c:	b570      	push	{r4, r5, r6, lr}
 8017a3e:	780d      	ldrb	r5, [r1, #0]
 8017a40:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8017a44:	2d01      	cmp	r5, #1
 8017a46:	d00d      	beq.n	8017a64 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8017a48:	d307      	bcc.n	8017a5a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8017a4a:	2d02      	cmp	r5, #2
 8017a4c:	d10f      	bne.n	8017a6e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8017a4e:	4b08      	ldr	r3, [pc, #32]	; (8017a70 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8017a50:	4a08      	ldr	r2, [pc, #32]	; (8017a74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8017a52:	4809      	ldr	r0, [pc, #36]	; (8017a78 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8017a54:	215b      	movs	r1, #91	; 0x5b
 8017a56:	f005 fe6b 	bl	801d730 <__assert_func>
 8017a5a:	9404      	str	r4, [sp, #16]
 8017a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a60:	f7ff be04 	b.w	801766c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8017a64:	9404      	str	r4, [sp, #16]
 8017a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a6a:	f7ff bef7 	b.w	801785c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8017a6e:	bd70      	pop	{r4, r5, r6, pc}
 8017a70:	08021300 	.word	0x08021300
 8017a74:	080219a4 	.word	0x080219a4
 8017a78:	08021503 	.word	0x08021503

08017a7c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8017a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a80:	4605      	mov	r5, r0
 8017a82:	b08f      	sub	sp, #60	; 0x3c
 8017a84:	460c      	mov	r4, r1
 8017a86:	461f      	mov	r7, r3
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d04e      	beq.n	8017b2a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8017a8c:	6808      	ldr	r0, [r1, #0]
 8017a8e:	6849      	ldr	r1, [r1, #4]
 8017a90:	4e81      	ldr	r6, [pc, #516]	; (8017c98 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8017a92:	ab0a      	add	r3, sp, #40	; 0x28
 8017a94:	c303      	stmia	r3!, {r0, r1}
 8017a96:	6810      	ldr	r0, [r2, #0]
 8017a98:	6851      	ldr	r1, [r2, #4]
 8017a9a:	ab0c      	add	r3, sp, #48	; 0x30
 8017a9c:	c303      	stmia	r3!, {r0, r1}
 8017a9e:	a80a      	add	r0, sp, #40	; 0x28
 8017aa0:	f7fb fb64 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017aa4:	4621      	mov	r1, r4
 8017aa6:	a80c      	add	r0, sp, #48	; 0x30
 8017aa8:	f7fb fb48 	bl	801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017aac:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017ab0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017ab4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017ab8:	6830      	ldr	r0, [r6, #0]
 8017aba:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 8017abe:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 8017ac2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017ac6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8017aca:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8017ace:	440a      	add	r2, r1
 8017ad0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017ad4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8017ad8:	4413      	add	r3, r2
 8017ada:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017ade:	6803      	ldr	r3, [r0, #0]
 8017ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ae2:	4798      	blx	r3
 8017ae4:	2fff      	cmp	r7, #255	; 0xff
 8017ae6:	4633      	mov	r3, r6
 8017ae8:	4e6c      	ldr	r6, [pc, #432]	; (8017c9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8017aea:	d021      	beq.n	8017b30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8017aec:	f010 0f04 	tst.w	r0, #4
 8017af0:	6818      	ldr	r0, [r3, #0]
 8017af2:	d020      	beq.n	8017b36 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 8017af4:	2100      	movs	r1, #0
 8017af6:	f04f 0e01 	mov.w	lr, #1
 8017afa:	f8d0 c000 	ldr.w	ip, [r0]
 8017afe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017b02:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8017b06:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8017b0a:	8836      	ldrh	r6, [r6, #0]
 8017b0c:	9703      	str	r7, [sp, #12]
 8017b0e:	e9cd 1604 	strd	r1, r6, [sp, #16]
 8017b12:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017b16:	9102      	str	r1, [sp, #8]
 8017b18:	b2a4      	uxth	r4, r4
 8017b1a:	fa1f f188 	uxth.w	r1, r8
 8017b1e:	9101      	str	r1, [sp, #4]
 8017b20:	9400      	str	r4, [sp, #0]
 8017b22:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 8017b26:	4629      	mov	r1, r5
 8017b28:	47a0      	blx	r4
 8017b2a:	b00f      	add	sp, #60	; 0x3c
 8017b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b30:	f010 0f01 	tst.w	r0, #1
 8017b34:	e7dc      	b.n	8017af0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	6a1b      	ldr	r3, [r3, #32]
 8017b3a:	4798      	blx	r3
 8017b3c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017b40:	8833      	ldrh	r3, [r6, #0]
 8017b42:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8017b46:	fb01 2303 	mla	r3, r1, r3, r2
 8017b4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b4e:	2fff      	cmp	r7, #255	; 0xff
 8017b50:	4418      	add	r0, r3
 8017b52:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8017b56:	d128      	bne.n	8017baa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 8017b58:	0051      	lsls	r1, r2, #1
 8017b5a:	2700      	movs	r7, #0
 8017b5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b60:	4547      	cmp	r7, r8
 8017b62:	f280 8092 	bge.w	8017c8a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 8017b66:	4684      	mov	ip, r0
 8017b68:	f04f 0e00 	mov.w	lr, #0
 8017b6c:	45a6      	cmp	lr, r4
 8017b6e:	f10c 0c03 	add.w	ip, ip, #3
 8017b72:	da7c      	bge.n	8017c6e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 8017b74:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 8017b78:	ea4f 2a29 	mov.w	sl, r9, asr #8
 8017b7c:	ea4f 03e9 	mov.w	r3, r9, asr #3
 8017b80:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8017b84:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8017b88:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 8017b8c:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 8017b90:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8017b94:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 8017b98:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8017b9c:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8017ba0:	f80c ac01 	strb.w	sl, [ip, #-1]
 8017ba4:	f10e 0e01 	add.w	lr, lr, #1
 8017ba8:	e7e0      	b.n	8017b6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 8017baa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8017bae:	ea6f 0c07 	mvn.w	ip, r7
 8017bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8017bb4:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8017bb8:	f04f 0900 	mov.w	r9, #0
 8017bbc:	b2bb      	uxth	r3, r7
 8017bbe:	fa5f fc8c 	uxtb.w	ip, ip
 8017bc2:	45c1      	cmp	r9, r8
 8017bc4:	da61      	bge.n	8017c8a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 8017bc6:	4601      	mov	r1, r0
 8017bc8:	f04f 0e00 	mov.w	lr, #0
 8017bcc:	45a6      	cmp	lr, r4
 8017bce:	f101 0103 	add.w	r1, r1, #3
 8017bd2:	da3b      	bge.n	8017c4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 8017bd4:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 8017bd8:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 8017bdc:	1216      	asrs	r6, r2, #8
 8017bde:	10d7      	asrs	r7, r2, #3
 8017be0:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 8017be4:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 8017be8:	b2d2      	uxtb	r2, r2
 8017bea:	fb1b fb0c 	smulbb	fp, fp, ip
 8017bee:	fb02 b203 	mla	r2, r2, r3, fp
 8017bf2:	b292      	uxth	r2, r2
 8017bf4:	f102 0b01 	add.w	fp, r2, #1
 8017bf8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8017bfc:	1212      	asrs	r2, r2, #8
 8017bfe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017c02:	f801 2c03 	strb.w	r2, [r1, #-3]
 8017c06:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8017c0a:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8017c0e:	fb17 f703 	smulbb	r7, r7, r3
 8017c12:	fb02 770c 	mla	r7, r2, ip, r7
 8017c16:	b2bf      	uxth	r7, r7
 8017c18:	1c7a      	adds	r2, r7, #1
 8017c1a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017c1e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017c22:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8017c26:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8017c2a:	fb16 f603 	smulbb	r6, r6, r3
 8017c2e:	fb02 660c 	mla	r6, r2, ip, r6
 8017c32:	b2b6      	uxth	r6, r6
 8017c34:	1c72      	adds	r2, r6, #1
 8017c36:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8017c3a:	123f      	asrs	r7, r7, #8
 8017c3c:	1236      	asrs	r6, r6, #8
 8017c3e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8017c42:	f801 6c01 	strb.w	r6, [r1, #-1]
 8017c46:	f10e 0e01 	add.w	lr, lr, #1
 8017c4a:	e7bf      	b.n	8017bcc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 8017c4c:	4a13      	ldr	r2, [pc, #76]	; (8017c9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8017c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017c50:	8812      	ldrh	r2, [r2, #0]
 8017c52:	1b12      	subs	r2, r2, r4
 8017c54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c58:	440a      	add	r2, r1
 8017c5a:	4410      	add	r0, r2
 8017c5c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8017c60:	1b12      	subs	r2, r2, r4
 8017c62:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8017c66:	4415      	add	r5, r2
 8017c68:	f109 0901 	add.w	r9, r9, #1
 8017c6c:	e7a9      	b.n	8017bc2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 8017c6e:	8833      	ldrh	r3, [r6, #0]
 8017c70:	1b1b      	subs	r3, r3, r4
 8017c72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c76:	4413      	add	r3, r2
 8017c78:	4418      	add	r0, r3
 8017c7a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017c7e:	1b1b      	subs	r3, r3, r4
 8017c80:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017c84:	441d      	add	r5, r3
 8017c86:	3701      	adds	r7, #1
 8017c88:	e76a      	b.n	8017b60 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 8017c8a:	4b03      	ldr	r3, [pc, #12]	; (8017c98 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8017c8c:	6818      	ldr	r0, [r3, #0]
 8017c8e:	6803      	ldr	r3, [r0, #0]
 8017c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c92:	4798      	blx	r3
 8017c94:	e749      	b.n	8017b2a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8017c96:	bf00      	nop
 8017c98:	200084ec 	.word	0x200084ec
 8017c9c:	200084e6 	.word	0x200084e6

08017ca0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8017ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca4:	460c      	mov	r4, r1
 8017ca6:	b08b      	sub	sp, #44	; 0x2c
 8017ca8:	4680      	mov	r8, r0
 8017caa:	6808      	ldr	r0, [r1, #0]
 8017cac:	6849      	ldr	r1, [r1, #4]
 8017cae:	469a      	mov	sl, r3
 8017cb0:	ab06      	add	r3, sp, #24
 8017cb2:	c303      	stmia	r3!, {r0, r1}
 8017cb4:	6810      	ldr	r0, [r2, #0]
 8017cb6:	6851      	ldr	r1, [r2, #4]
 8017cb8:	ab08      	add	r3, sp, #32
 8017cba:	c303      	stmia	r3!, {r0, r1}
 8017cbc:	a806      	add	r0, sp, #24
 8017cbe:	f7fb fa55 	bl	801316c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017cc2:	4621      	mov	r1, r4
 8017cc4:	a808      	add	r0, sp, #32
 8017cc6:	f7fb fa39 	bl	801313c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017cca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017cce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017cd2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017cd6:	4c5d      	ldr	r4, [pc, #372]	; (8017e4c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8017cd8:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8017cdc:	6820      	ldr	r0, [r4, #0]
 8017cde:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8017ce2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017ce6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8017cea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017cee:	440a      	add	r2, r1
 8017cf0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017cf4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017cf8:	4413      	add	r3, r2
 8017cfa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017cfe:	6803      	ldr	r3, [r0, #0]
 8017d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d02:	4798      	blx	r3
 8017d04:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017d08:	d118      	bne.n	8017d3c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8017d0a:	f010 0f20 	tst.w	r0, #32
 8017d0e:	6820      	ldr	r0, [r4, #0]
 8017d10:	d017      	beq.n	8017d42 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8017d12:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8017d16:	6801      	ldr	r1, [r0, #0]
 8017d18:	9402      	str	r4, [sp, #8]
 8017d1a:	b2bf      	uxth	r7, r7
 8017d1c:	fa1f f489 	uxth.w	r4, r9
 8017d20:	f8cd a00c 	str.w	sl, [sp, #12]
 8017d24:	9401      	str	r4, [sp, #4]
 8017d26:	9700      	str	r7, [sp, #0]
 8017d28:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017d2a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017d2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017d32:	4641      	mov	r1, r8
 8017d34:	47a0      	blx	r4
 8017d36:	b00b      	add	sp, #44	; 0x2c
 8017d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017d40:	e7e5      	b.n	8017d0e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8017d42:	6803      	ldr	r3, [r0, #0]
 8017d44:	6a1b      	ldr	r3, [r3, #32]
 8017d46:	4798      	blx	r3
 8017d48:	4b41      	ldr	r3, [pc, #260]	; (8017e50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8017d4a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8017d4e:	881a      	ldrh	r2, [r3, #0]
 8017d50:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8017d54:	fb04 1202 	mla	r2, r4, r2, r1
 8017d58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d5c:	4410      	add	r0, r2
 8017d5e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8017d62:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8017d66:	0092      	lsls	r2, r2, #2
 8017d68:	9105      	str	r1, [sp, #20]
 8017d6a:	9204      	str	r2, [sp, #16]
 8017d6c:	f04f 0c00 	mov.w	ip, #0
 8017d70:	45cc      	cmp	ip, r9
 8017d72:	da65      	bge.n	8017e40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8017d74:	1cc4      	adds	r4, r0, #3
 8017d76:	f108 0504 	add.w	r5, r8, #4
 8017d7a:	f04f 0e00 	mov.w	lr, #0
 8017d7e:	45be      	cmp	lr, r7
 8017d80:	da4d      	bge.n	8017e1e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8017d82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017d86:	b181      	cbz	r1, 8017daa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8017d88:	29ff      	cmp	r1, #255	; 0xff
 8017d8a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8017d8e:	d111      	bne.n	8017db4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8017d90:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017d94:	d10e      	bne.n	8017db4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8017d96:	f804 bc03 	strb.w	fp, [r4, #-3]
 8017d9a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8017d9e:	f804 2c02 	strb.w	r2, [r4, #-2]
 8017da2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8017da6:	f804 2c01 	strb.w	r2, [r4, #-1]
 8017daa:	f10e 0e01 	add.w	lr, lr, #1
 8017dae:	3403      	adds	r4, #3
 8017db0:	3504      	adds	r5, #4
 8017db2:	e7e4      	b.n	8017d7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8017db4:	fb0a f101 	mul.w	r1, sl, r1
 8017db8:	1c4a      	adds	r2, r1, #1
 8017dba:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8017dbe:	1212      	asrs	r2, r2, #8
 8017dc0:	b296      	uxth	r6, r2
 8017dc2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8017dc6:	43d2      	mvns	r2, r2
 8017dc8:	b2d2      	uxtb	r2, r2
 8017dca:	fb1b fb06 	smulbb	fp, fp, r6
 8017dce:	fb01 b102 	mla	r1, r1, r2, fp
 8017dd2:	b289      	uxth	r1, r1
 8017dd4:	f101 0b01 	add.w	fp, r1, #1
 8017dd8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017ddc:	1209      	asrs	r1, r1, #8
 8017dde:	f804 1c03 	strb.w	r1, [r4, #-3]
 8017de2:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8017de6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8017dea:	fb1b fb02 	smulbb	fp, fp, r2
 8017dee:	fb01 b106 	mla	r1, r1, r6, fp
 8017df2:	b289      	uxth	r1, r1
 8017df4:	f101 0b01 	add.w	fp, r1, #1
 8017df8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017dfc:	1209      	asrs	r1, r1, #8
 8017dfe:	f804 1c02 	strb.w	r1, [r4, #-2]
 8017e02:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8017e06:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8017e0a:	fb11 f202 	smulbb	r2, r1, r2
 8017e0e:	fb0b 2206 	mla	r2, fp, r6, r2
 8017e12:	b292      	uxth	r2, r2
 8017e14:	1c56      	adds	r6, r2, #1
 8017e16:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8017e1a:	1212      	asrs	r2, r2, #8
 8017e1c:	e7c3      	b.n	8017da6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8017e1e:	881a      	ldrh	r2, [r3, #0]
 8017e20:	9905      	ldr	r1, [sp, #20]
 8017e22:	1bd2      	subs	r2, r2, r7
 8017e24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e28:	440a      	add	r2, r1
 8017e2a:	4410      	add	r0, r2
 8017e2c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017e30:	9904      	ldr	r1, [sp, #16]
 8017e32:	1bd2      	subs	r2, r2, r7
 8017e34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017e38:	4490      	add	r8, r2
 8017e3a:	f10c 0c01 	add.w	ip, ip, #1
 8017e3e:	e797      	b.n	8017d70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8017e40:	4b02      	ldr	r3, [pc, #8]	; (8017e4c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8017e42:	6818      	ldr	r0, [r3, #0]
 8017e44:	6803      	ldr	r3, [r0, #0]
 8017e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e48:	4798      	blx	r3
 8017e4a:	e774      	b.n	8017d36 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8017e4c:	200084ec 	.word	0x200084ec
 8017e50:	200084e6 	.word	0x200084e6

08017e54 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8017e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e58:	b085      	sub	sp, #20
 8017e5a:	4606      	mov	r6, r0
 8017e5c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8017e60:	460c      	mov	r4, r1
 8017e62:	4691      	mov	r9, r2
 8017e64:	4698      	mov	r8, r3
 8017e66:	b3a5      	cbz	r5, 8017ed2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8017e68:	4608      	mov	r0, r1
 8017e6a:	f7fd fa0b 	bl	8015284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e6e:	4607      	mov	r7, r0
 8017e70:	4620      	mov	r0, r4
 8017e72:	f7fd fa41 	bl	80152f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017e76:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8017e80:	f8ad 800a 	strh.w	r8, [sp, #10]
 8017e84:	f8ad 700c 	strh.w	r7, [sp, #12]
 8017e88:	f7fd fb4e 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e8c:	b1a0      	cbz	r0, 8017eb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8017e8e:	4620      	mov	r0, r4
 8017e90:	f7fd fb4a 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e94:	2801      	cmp	r0, #1
 8017e96:	d00f      	beq.n	8017eb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f7fd fb45 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e9e:	2802      	cmp	r0, #2
 8017ea0:	d00a      	beq.n	8017eb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	f7fd fb40 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017ea8:	280b      	cmp	r0, #11
 8017eaa:	d005      	beq.n	8017eb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8017eac:	4b21      	ldr	r3, [pc, #132]	; (8017f34 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 8017eae:	4a22      	ldr	r2, [pc, #136]	; (8017f38 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 8017eb0:	4822      	ldr	r0, [pc, #136]	; (8017f3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 8017eb2:	213f      	movs	r1, #63	; 0x3f
 8017eb4:	f005 fc3c 	bl	801d730 <__assert_func>
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f7fd fb35 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017ebe:	2802      	cmp	r0, #2
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	d109      	bne.n	8017ed8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 8017ec4:	f7fd faac 	bl	8015420 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017ec8:	462b      	mov	r3, r5
 8017eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ecc:	a902      	add	r1, sp, #8
 8017ece:	f7ff fee7 	bl	8017ca0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017ed2:	b005      	add	sp, #20
 8017ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ed8:	f7fd fb26 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017edc:	280b      	cmp	r0, #11
 8017ede:	4620      	mov	r0, r4
 8017ee0:	d10d      	bne.n	8017efe <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8017ee2:	f7fd fa9d 	bl	8015420 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017ee6:	4606      	mov	r6, r0
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f7fd facb 	bl	8015484 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8017eee:	9500      	str	r5, [sp, #0]
 8017ef0:	4601      	mov	r1, r0
 8017ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ef4:	aa02      	add	r2, sp, #8
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f7ff fda0 	bl	8017a3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8017efc:	e7e9      	b.n	8017ed2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8017efe:	f7fd fb13 	bl	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017f02:	b940      	cbnz	r0, 8017f16 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 8017f04:	4620      	mov	r0, r4
 8017f06:	f7fd fa8b 	bl	8015420 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017f0a:	462b      	mov	r3, r5
 8017f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f0e:	a902      	add	r1, sp, #8
 8017f10:	f7ff fdb4 	bl	8017a7c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8017f14:	e7dd      	b.n	8017ed2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8017f16:	6833      	ldr	r3, [r6, #0]
 8017f18:	4620      	mov	r0, r4
 8017f1a:	68df      	ldr	r7, [r3, #12]
 8017f1c:	f7fd fa80 	bl	8015420 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017f20:	2300      	movs	r3, #0
 8017f22:	e9cd 5300 	strd	r5, r3, [sp]
 8017f26:	4601      	mov	r1, r0
 8017f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f2a:	aa02      	add	r2, sp, #8
 8017f2c:	4630      	mov	r0, r6
 8017f2e:	47b8      	blx	r7
 8017f30:	e7cf      	b.n	8017ed2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8017f32:	bf00      	nop
 8017f34:	08021399 	.word	0x08021399
 8017f38:	08021aaf 	.word	0x08021aaf
 8017f3c:	08021503 	.word	0x08021503

08017f40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8017f40:	b570      	push	{r4, r5, r6, lr}
 8017f42:	9d04      	ldr	r5, [sp, #16]
 8017f44:	460c      	mov	r4, r1
 8017f46:	4619      	mov	r1, r3
 8017f48:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017f4c:	2a0c      	cmp	r2, #12
 8017f4e:	d826      	bhi.n	8017f9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8017f50:	e8df f002 	tbb	[pc, r2]
 8017f54:	200e1407 	.word	0x200e1407
 8017f58:	20202020 	.word	0x20202020
 8017f5c:	20202020 	.word	0x20202020
 8017f60:	20          	.byte	0x20
 8017f61:	00          	.byte	0x00
 8017f62:	4b0f      	ldr	r3, [pc, #60]	; (8017fa0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8017f64:	4a0f      	ldr	r2, [pc, #60]	; (8017fa4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8017f66:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8017f6a:	480f      	ldr	r0, [pc, #60]	; (8017fa8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8017f6c:	f005 fbe0 	bl	801d730 <__assert_func>
 8017f70:	462a      	mov	r2, r5
 8017f72:	4620      	mov	r0, r4
 8017f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f78:	f7ff be92 	b.w	8017ca0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017f7c:	2600      	movs	r6, #0
 8017f7e:	6802      	ldr	r2, [r0, #0]
 8017f80:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8017f84:	68d6      	ldr	r6, [r2, #12]
 8017f86:	462b      	mov	r3, r5
 8017f88:	460a      	mov	r2, r1
 8017f8a:	46b4      	mov	ip, r6
 8017f8c:	4621      	mov	r1, r4
 8017f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f92:	4760      	bx	ip
 8017f94:	4b05      	ldr	r3, [pc, #20]	; (8017fac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8017f96:	4a03      	ldr	r2, [pc, #12]	; (8017fa4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8017f98:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8017f9c:	e7e5      	b.n	8017f6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8017f9e:	bd70      	pop	{r4, r5, r6, pc}
 8017fa0:	080216da 	.word	0x080216da
 8017fa4:	08021d97 	.word	0x08021d97
 8017fa8:	08021503 	.word	0x08021503
 8017fac:	0802171b 	.word	0x0802171b

08017fb0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8017fb0:	b158      	cbz	r0, 8017fca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8017fb2:	2902      	cmp	r1, #2
 8017fb4:	d00f      	beq.n	8017fd6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8017fb6:	2903      	cmp	r1, #3
 8017fb8:	d010      	beq.n	8017fdc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8017fba:	2901      	cmp	r1, #1
 8017fbc:	d101      	bne.n	8017fc2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8017fbe:	2001      	movs	r0, #1
 8017fc0:	4770      	bx	lr
 8017fc2:	4b08      	ldr	r3, [pc, #32]	; (8017fe4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8017fc4:	8819      	ldrh	r1, [r3, #0]
 8017fc6:	4248      	negs	r0, r1
 8017fc8:	4770      	bx	lr
 8017fca:	2902      	cmp	r1, #2
 8017fcc:	d006      	beq.n	8017fdc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8017fce:	2903      	cmp	r1, #3
 8017fd0:	d0f7      	beq.n	8017fc2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8017fd2:	2901      	cmp	r1, #1
 8017fd4:	d1f3      	bne.n	8017fbe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8017fd6:	4b03      	ldr	r3, [pc, #12]	; (8017fe4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8017fd8:	8818      	ldrh	r0, [r3, #0]
 8017fda:	4770      	bx	lr
 8017fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017fe0:	4770      	bx	lr
 8017fe2:	bf00      	nop
 8017fe4:	200084e6 	.word	0x200084e6

08017fe8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8017fe8:	b170      	cbz	r0, 8018008 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8017fea:	2902      	cmp	r1, #2
 8017fec:	d012      	beq.n	8018014 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8017fee:	2903      	cmp	r1, #3
 8017ff0:	d006      	beq.n	8018000 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8017ff2:	2901      	cmp	r1, #1
 8017ff4:	d001      	beq.n	8017ffa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8017ff6:	2001      	movs	r0, #1
 8017ff8:	4770      	bx	lr
 8017ffa:	4b08      	ldr	r3, [pc, #32]	; (801801c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8017ffc:	8818      	ldrh	r0, [r3, #0]
 8017ffe:	4770      	bx	lr
 8018000:	4b06      	ldr	r3, [pc, #24]	; (801801c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8018002:	8818      	ldrh	r0, [r3, #0]
 8018004:	4240      	negs	r0, r0
 8018006:	4770      	bx	lr
 8018008:	2902      	cmp	r1, #2
 801800a:	d0f9      	beq.n	8018000 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801800c:	2903      	cmp	r1, #3
 801800e:	d0f2      	beq.n	8017ff6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8018010:	2901      	cmp	r1, #1
 8018012:	d1f2      	bne.n	8017ffa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8018014:	f04f 30ff 	mov.w	r0, #4294967295
 8018018:	4770      	bx	lr
 801801a:	bf00      	nop
 801801c:	200084e6 	.word	0x200084e6

08018020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8018020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018024:	b097      	sub	sp, #92	; 0x5c
 8018026:	910b      	str	r1, [sp, #44]	; 0x2c
 8018028:	a912      	add	r1, sp, #72	; 0x48
 801802a:	e881 000c 	stmia.w	r1, {r2, r3}
 801802e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8018032:	9308      	str	r3, [sp, #32]
 8018034:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8018038:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801803c:	9310      	str	r3, [sp, #64]	; 0x40
 801803e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8018042:	930c      	str	r3, [sp, #48]	; 0x30
 8018044:	7b4b      	ldrb	r3, [r1, #13]
 8018046:	798d      	ldrb	r5, [r1, #6]
 8018048:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801804c:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8018050:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8018054:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8018058:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801805c:	0158      	lsls	r0, r3, #5
 801805e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018062:	4328      	orrs	r0, r5
 8018064:	9007      	str	r0, [sp, #28]
 8018066:	f000 8182 	beq.w	801836e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 801806a:	011b      	lsls	r3, r3, #4
 801806c:	79c8      	ldrb	r0, [r1, #7]
 801806e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018072:	4303      	orrs	r3, r0
 8018074:	9309      	str	r3, [sp, #36]	; 0x24
 8018076:	f000 817a 	beq.w	801836e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 801807a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801807e:	b29b      	uxth	r3, r3
 8018080:	2f00      	cmp	r7, #0
 8018082:	f000 8120 	beq.w	80182c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 8018086:	1aff      	subs	r7, r7, r3
 8018088:	b2bf      	uxth	r7, r7
 801808a:	043b      	lsls	r3, r7, #16
 801808c:	d502      	bpl.n	8018094 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801808e:	1bf6      	subs	r6, r6, r7
 8018090:	b236      	sxth	r6, r6
 8018092:	2700      	movs	r7, #0
 8018094:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018098:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801809c:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 80180a0:	428e      	cmp	r6, r1
 80180a2:	b28b      	uxth	r3, r1
 80180a4:	bfbf      	itttt	lt
 80180a6:	18ff      	addlt	r7, r7, r3
 80180a8:	1bbe      	sublt	r6, r7, r6
 80180aa:	b2b7      	uxthlt	r7, r6
 80180ac:	460e      	movlt	r6, r1
 80180ae:	8891      	ldrh	r1, [r2, #4]
 80180b0:	440b      	add	r3, r1
 80180b2:	b21b      	sxth	r3, r3
 80180b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80180b6:	88d3      	ldrh	r3, [r2, #6]
 80180b8:	9a08      	ldr	r2, [sp, #32]
 80180ba:	449a      	add	sl, r3
 80180bc:	fa0f f38a 	sxth.w	r3, sl
 80180c0:	930e      	str	r3, [sp, #56]	; 0x38
 80180c2:	4bb3      	ldr	r3, [pc, #716]	; (8018390 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 80180c4:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80180c8:	f893 b000 	ldrb.w	fp, [r3]
 80180cc:	f10b 3cff 	add.w	ip, fp, #4294967295
 80180d0:	f1dc 0300 	rsbs	r3, ip, #0
 80180d4:	eb43 030c 	adc.w	r3, r3, ip
 80180d8:	930d      	str	r3, [sp, #52]	; 0x34
 80180da:	4631      	mov	r1, r6
 80180dc:	464b      	mov	r3, r9
 80180de:	a812      	add	r0, sp, #72	; 0x48
 80180e0:	f7fa ff1d 	bl	8012f1e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80180e4:	4631      	mov	r1, r6
 80180e6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80180ea:	464b      	mov	r3, r9
 80180ec:	9a08      	ldr	r2, [sp, #32]
 80180ee:	a812      	add	r0, sp, #72	; 0x48
 80180f0:	f7fa ff2d 	bl	8012f4e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80180f4:	a916      	add	r1, sp, #88	; 0x58
 80180f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80180fa:	a815      	add	r0, sp, #84	; 0x54
 80180fc:	f7fb f808 	bl	8013110 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8018100:	f1b9 0f00 	cmp.w	r9, #0
 8018104:	f040 80e2 	bne.w	80182cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ac>
 8018108:	f1bb 0f01 	cmp.w	fp, #1
 801810c:	f040 80e6 	bne.w	80182dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2bc>
 8018110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018112:	2b00      	cmp	r3, #0
 8018114:	f040 8130 	bne.w	8018378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 8018118:	4b9e      	ldr	r3, [pc, #632]	; (8018394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801811a:	6818      	ldr	r0, [r3, #0]
 801811c:	6803      	ldr	r3, [r0, #0]
 801811e:	6a1b      	ldr	r3, [r3, #32]
 8018120:	4798      	blx	r3
 8018122:	4a9d      	ldr	r2, [pc, #628]	; (8018398 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8018124:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8018128:	8811      	ldrh	r1, [r2, #0]
 801812a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801812e:	fb01 2303 	mla	r3, r1, r3, r2
 8018132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018136:	18c3      	adds	r3, r0, r3
 8018138:	9309      	str	r3, [sp, #36]	; 0x24
 801813a:	2301      	movs	r3, #1
 801813c:	fa03 f308 	lsl.w	r3, r3, r8
 8018140:	3b01      	subs	r3, #1
 8018142:	b2db      	uxtb	r3, r3
 8018144:	f1b8 0f01 	cmp.w	r8, #1
 8018148:	9311      	str	r3, [sp, #68]	; 0x44
 801814a:	f000 8117 	beq.w	801837c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801814e:	f1b8 0f02 	cmp.w	r8, #2
 8018152:	f000 8115 	beq.w	8018380 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8018156:	f1b8 0f04 	cmp.w	r8, #4
 801815a:	bf14      	ite	ne
 801815c:	2301      	movne	r3, #1
 801815e:	2311      	moveq	r3, #17
 8018160:	930a      	str	r3, [sp, #40]	; 0x28
 8018162:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018164:	b153      	cbz	r3, 801817c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8018166:	9a07      	ldr	r2, [sp, #28]
 8018168:	2508      	movs	r5, #8
 801816a:	fb95 f3f8 	sdiv	r3, r5, r8
 801816e:	1e5d      	subs	r5, r3, #1
 8018170:	4415      	add	r5, r2
 8018172:	fb95 f5f3 	sdiv	r5, r5, r3
 8018176:	fb15 f503 	smulbb	r5, r5, r3
 801817a:	b2ad      	uxth	r5, r5
 801817c:	b907      	cbnz	r7, 8018180 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801817e:	b174      	cbz	r4, 801819e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17e>
 8018180:	fb15 7304 	smlabb	r3, r5, r4, r7
 8018184:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018186:	fb13 f308 	smulbb	r3, r3, r8
 801818a:	b29b      	uxth	r3, r3
 801818c:	ebaa 0a04 	sub.w	sl, sl, r4
 8018190:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8018194:	9226      	str	r2, [sp, #152]	; 0x98
 8018196:	fa1f fa8a 	uxth.w	sl, sl
 801819a:	f003 0407 	and.w	r4, r3, #7
 801819e:	4649      	mov	r1, r9
 80181a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80181a2:	f7ff ff05 	bl	8017fb0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80181a6:	4649      	mov	r1, r9
 80181a8:	4683      	mov	fp, r0
 80181aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80181ac:	f7ff ff1c 	bl	8017fe8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80181b0:	9a08      	ldr	r2, [sp, #32]
 80181b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181b4:	1a9b      	subs	r3, r3, r2
 80181b6:	459a      	cmp	sl, r3
 80181b8:	bfa8      	it	ge
 80181ba:	469a      	movge	sl, r3
 80181bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181be:	1bf6      	subs	r6, r6, r7
 80181c0:	1b9e      	subs	r6, r3, r6
 80181c2:	9b07      	ldr	r3, [sp, #28]
 80181c4:	429e      	cmp	r6, r3
 80181c6:	bfd4      	ite	le
 80181c8:	ebc7 0706 	rsble	r7, r7, r6
 80181cc:	ebc7 0703 	rsbgt	r7, r7, r3
 80181d0:	1bed      	subs	r5, r5, r7
 80181d2:	fb08 f305 	mul.w	r3, r8, r5
 80181d6:	9308      	str	r3, [sp, #32]
 80181d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80181da:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80181de:	930d      	str	r3, [sp, #52]	; 0x34
 80181e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80181e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80181e6:	930e      	str	r3, [sp, #56]	; 0x38
 80181e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80181ea:	b2de      	uxtb	r6, r3
 80181ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80181ee:	781a      	ldrb	r2, [r3, #0]
 80181f0:	fb0b 0017 	mls	r0, fp, r7, r0
 80181f4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80181f8:	4122      	asrs	r2, r4
 80181fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80181fe:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8018202:	b2d2      	uxtb	r2, r2
 8018204:	9307      	str	r3, [sp, #28]
 8018206:	fb03 0b0b 	mla	fp, r3, fp, r0
 801820a:	f1ba 0f00 	cmp.w	sl, #0
 801820e:	f340 80d8 	ble.w	80183c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8018212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018214:	46be      	mov	lr, r7
 8018216:	f1be 0f00 	cmp.w	lr, #0
 801821a:	f340 80bf 	ble.w	801839c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801821e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018220:	4013      	ands	r3, r2
 8018222:	d03e      	beq.n	80182a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 8018224:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018226:	fb13 f300 	smulbb	r3, r3, r0
 801822a:	2bfe      	cmp	r3, #254	; 0xfe
 801822c:	dd03      	ble.n	8018236 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 801822e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018230:	28ff      	cmp	r0, #255	; 0xff
 8018232:	f000 80a7 	beq.w	8018384 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 8018236:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018238:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801823a:	fb10 f303 	smulbb	r3, r0, r3
 801823e:	b29b      	uxth	r3, r3
 8018240:	1c58      	adds	r0, r3, #1
 8018242:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8018246:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801824a:	fa1f fc83 	uxth.w	ip, r3
 801824e:	7808      	ldrb	r0, [r1, #0]
 8018250:	43db      	mvns	r3, r3
 8018252:	b2db      	uxtb	r3, r3
 8018254:	fb16 f90c 	smulbb	r9, r6, ip
 8018258:	fb00 9003 	mla	r0, r0, r3, r9
 801825c:	b280      	uxth	r0, r0
 801825e:	f100 0901 	add.w	r9, r0, #1
 8018262:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8018266:	1200      	asrs	r0, r0, #8
 8018268:	7008      	strb	r0, [r1, #0]
 801826a:	7848      	ldrb	r0, [r1, #1]
 801826c:	fb15 f90c 	smulbb	r9, r5, ip
 8018270:	fb00 9003 	mla	r0, r0, r3, r9
 8018274:	b280      	uxth	r0, r0
 8018276:	f100 0901 	add.w	r9, r0, #1
 801827a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801827e:	1200      	asrs	r0, r0, #8
 8018280:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018282:	7048      	strb	r0, [r1, #1]
 8018284:	7888      	ldrb	r0, [r1, #2]
 8018286:	fb15 fc0c 	smulbb	ip, r5, ip
 801828a:	fb00 cc03 	mla	ip, r0, r3, ip
 801828e:	fa1f fc8c 	uxth.w	ip, ip
 8018292:	f10c 0301 	add.w	r3, ip, #1
 8018296:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801829a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801829e:	f881 c002 	strb.w	ip, [r1, #2]
 80182a2:	4444      	add	r4, r8
 80182a4:	b2a4      	uxth	r4, r4
 80182a6:	2c07      	cmp	r4, #7
 80182a8:	bf81      	itttt	hi
 80182aa:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80182ac:	785a      	ldrbhi	r2, [r3, #1]
 80182ae:	3301      	addhi	r3, #1
 80182b0:	9326      	strhi	r3, [sp, #152]	; 0x98
 80182b2:	9b07      	ldr	r3, [sp, #28]
 80182b4:	bf9a      	itte	ls
 80182b6:	fa42 f208 	asrls.w	r2, r2, r8
 80182ba:	b2d2      	uxtbls	r2, r2
 80182bc:	2400      	movhi	r4, #0
 80182be:	4419      	add	r1, r3
 80182c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80182c4:	e7a7      	b.n	8018216 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 80182c6:	441e      	add	r6, r3
 80182c8:	b236      	sxth	r6, r6
 80182ca:	e6e3      	b.n	8018094 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80182cc:	f1b9 0f01 	cmp.w	r9, #1
 80182d0:	f47f af1e 	bne.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80182d4:	f1bb 0f01 	cmp.w	fp, #1
 80182d8:	f47f af1a 	bne.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80182dc:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8018394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80182e0:	f8db 0000 	ldr.w	r0, [fp]
 80182e4:	6803      	ldr	r3, [r0, #0]
 80182e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182e8:	4798      	blx	r3
 80182ea:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 80182ee:	465a      	mov	r2, fp
 80182f0:	d006      	beq.n	8018300 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 80182f2:	f1b8 0f04 	cmp.w	r8, #4
 80182f6:	d13d      	bne.n	8018374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x354>
 80182f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182fa:	3300      	adds	r3, #0
 80182fc:	bf18      	it	ne
 80182fe:	2301      	movne	r3, #1
 8018300:	05c0      	lsls	r0, r0, #23
 8018302:	d567      	bpl.n	80183d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8018304:	f1b8 0f08 	cmp.w	r8, #8
 8018308:	d164      	bne.n	80183d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801830a:	2b00      	cmp	r3, #0
 801830c:	bf0c      	ite	eq
 801830e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8018312:	2180      	movne	r1, #128	; 0x80
 8018314:	2f00      	cmp	r7, #0
 8018316:	f47f aefb 	bne.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801831a:	2c00      	cmp	r4, #0
 801831c:	f47f aef8 	bne.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018320:	9b07      	ldr	r3, [sp, #28]
 8018322:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018324:	18f3      	adds	r3, r6, r3
 8018326:	4283      	cmp	r3, r0
 8018328:	f73f aef2 	bgt.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801832c:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 8018330:	4403      	add	r3, r0
 8018332:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018334:	4283      	cmp	r3, r0
 8018336:	f73f aeeb 	bgt.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801833a:	6810      	ldr	r0, [r2, #0]
 801833c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8018340:	6804      	ldr	r4, [r0, #0]
 8018342:	9105      	str	r1, [sp, #20]
 8018344:	f1b8 0f08 	cmp.w	r8, #8
 8018348:	bf18      	it	ne
 801834a:	3501      	addne	r5, #1
 801834c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801834e:	9104      	str	r1, [sp, #16]
 8018350:	bf18      	it	ne
 8018352:	f025 0501 	bicne.w	r5, r5, #1
 8018356:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018358:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801835c:	bf18      	it	ne
 801835e:	b2ad      	uxthne	r5, r5
 8018360:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018364:	e9cd 5a00 	strd	r5, sl, [sp]
 8018368:	9926      	ldr	r1, [sp, #152]	; 0x98
 801836a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801836c:	47a0      	blx	r4
 801836e:	b017      	add	sp, #92	; 0x5c
 8018370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018374:	2300      	movs	r3, #0
 8018376:	e7c3      	b.n	8018300 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8018378:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801837a:	e6d2      	b.n	8018122 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801837c:	23ff      	movs	r3, #255	; 0xff
 801837e:	e6ef      	b.n	8018160 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8018380:	2355      	movs	r3, #85	; 0x55
 8018382:	e6ed      	b.n	8018160 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8018384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018386:	704b      	strb	r3, [r1, #1]
 8018388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801838a:	700e      	strb	r6, [r1, #0]
 801838c:	708b      	strb	r3, [r1, #2]
 801838e:	e788      	b.n	80182a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 8018390:	200084e4 	.word	0x200084e4
 8018394:	200084ec 	.word	0x200084ec
 8018398:	200084e6 	.word	0x200084e6
 801839c:	9b08      	ldr	r3, [sp, #32]
 801839e:	b153      	cbz	r3, 80183b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80183a0:	441c      	add	r4, r3
 80183a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80183a4:	b2a4      	uxth	r4, r4
 80183a6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80183aa:	f004 0407 	and.w	r4, r4, #7
 80183ae:	781a      	ldrb	r2, [r3, #0]
 80183b0:	9326      	str	r3, [sp, #152]	; 0x98
 80183b2:	4122      	asrs	r2, r4
 80183b4:	b2d2      	uxtb	r2, r2
 80183b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183b8:	445b      	add	r3, fp
 80183ba:	9309      	str	r3, [sp, #36]	; 0x24
 80183bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80183c0:	e723      	b.n	801820a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 80183c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d1d2      	bne.n	801836e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80183c8:	4b05      	ldr	r3, [pc, #20]	; (80183e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c0>)
 80183ca:	6818      	ldr	r0, [r3, #0]
 80183cc:	6803      	ldr	r3, [r0, #0]
 80183ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183d0:	4798      	blx	r3
 80183d2:	e7cc      	b.n	801836e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	f43f ae9b 	beq.w	8018110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80183da:	2180      	movs	r1, #128	; 0x80
 80183dc:	e79a      	b.n	8018314 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f4>
 80183de:	bf00      	nop
 80183e0:	200084ec 	.word	0x200084ec

080183e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80183e4:	b538      	push	{r3, r4, r5, lr}
 80183e6:	4c15      	ldr	r4, [pc, #84]	; (801843c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80183e8:	7823      	ldrb	r3, [r4, #0]
 80183ea:	f3bf 8f5b 	dmb	ish
 80183ee:	07da      	lsls	r2, r3, #31
 80183f0:	4605      	mov	r5, r0
 80183f2:	d40b      	bmi.n	801840c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80183f4:	4620      	mov	r0, r4
 80183f6:	f005 f971 	bl	801d6dc <__cxa_guard_acquire>
 80183fa:	b138      	cbz	r0, 801840c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80183fc:	4620      	mov	r0, r4
 80183fe:	f005 f979 	bl	801d6f4 <__cxa_guard_release>
 8018402:	4a0f      	ldr	r2, [pc, #60]	; (8018440 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018404:	490f      	ldr	r1, [pc, #60]	; (8018444 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8018406:	4810      	ldr	r0, [pc, #64]	; (8018448 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018408:	f005 f95e 	bl	801d6c8 <__aeabi_atexit>
 801840c:	4c0f      	ldr	r4, [pc, #60]	; (801844c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801840e:	7823      	ldrb	r3, [r4, #0]
 8018410:	f3bf 8f5b 	dmb	ish
 8018414:	07db      	lsls	r3, r3, #31
 8018416:	d40b      	bmi.n	8018430 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018418:	4620      	mov	r0, r4
 801841a:	f005 f95f 	bl	801d6dc <__cxa_guard_acquire>
 801841e:	b138      	cbz	r0, 8018430 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018420:	4620      	mov	r0, r4
 8018422:	f005 f967 	bl	801d6f4 <__cxa_guard_release>
 8018426:	4a06      	ldr	r2, [pc, #24]	; (8018440 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018428:	4909      	ldr	r1, [pc, #36]	; (8018450 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801842a:	480a      	ldr	r0, [pc, #40]	; (8018454 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801842c:	f005 f94c 	bl	801d6c8 <__aeabi_atexit>
 8018430:	4b05      	ldr	r3, [pc, #20]	; (8018448 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018432:	612b      	str	r3, [r5, #16]
 8018434:	4b07      	ldr	r3, [pc, #28]	; (8018454 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018436:	616b      	str	r3, [r5, #20]
 8018438:	bd38      	pop	{r3, r4, r5, pc}
 801843a:	bf00      	nop
 801843c:	200085d8 	.word	0x200085d8
 8018440:	20000000 	.word	0x20000000
 8018444:	08016dc7 	.word	0x08016dc7
 8018448:	200000d8 	.word	0x200000d8
 801844c:	200085dc 	.word	0x200085dc
 8018450:	08016dc5 	.word	0x08016dc5
 8018454:	200000dc 	.word	0x200000dc

08018458 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8018458:	b538      	push	{r3, r4, r5, lr}
 801845a:	4c15      	ldr	r4, [pc, #84]	; (80184b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801845c:	7823      	ldrb	r3, [r4, #0]
 801845e:	f3bf 8f5b 	dmb	ish
 8018462:	07da      	lsls	r2, r3, #31
 8018464:	4605      	mov	r5, r0
 8018466:	d40b      	bmi.n	8018480 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018468:	4620      	mov	r0, r4
 801846a:	f005 f937 	bl	801d6dc <__cxa_guard_acquire>
 801846e:	b138      	cbz	r0, 8018480 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018470:	4620      	mov	r0, r4
 8018472:	f005 f93f 	bl	801d6f4 <__cxa_guard_release>
 8018476:	4a0f      	ldr	r2, [pc, #60]	; (80184b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018478:	490f      	ldr	r1, [pc, #60]	; (80184b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801847a:	4810      	ldr	r0, [pc, #64]	; (80184bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801847c:	f005 f924 	bl	801d6c8 <__aeabi_atexit>
 8018480:	4c0f      	ldr	r4, [pc, #60]	; (80184c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018482:	7823      	ldrb	r3, [r4, #0]
 8018484:	f3bf 8f5b 	dmb	ish
 8018488:	07db      	lsls	r3, r3, #31
 801848a:	d40b      	bmi.n	80184a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801848c:	4620      	mov	r0, r4
 801848e:	f005 f925 	bl	801d6dc <__cxa_guard_acquire>
 8018492:	b138      	cbz	r0, 80184a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018494:	4620      	mov	r0, r4
 8018496:	f005 f92d 	bl	801d6f4 <__cxa_guard_release>
 801849a:	4a06      	ldr	r2, [pc, #24]	; (80184b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801849c:	4909      	ldr	r1, [pc, #36]	; (80184c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801849e:	480a      	ldr	r0, [pc, #40]	; (80184c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80184a0:	f005 f912 	bl	801d6c8 <__aeabi_atexit>
 80184a4:	4b05      	ldr	r3, [pc, #20]	; (80184bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80184a6:	60ab      	str	r3, [r5, #8]
 80184a8:	4b07      	ldr	r3, [pc, #28]	; (80184c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80184aa:	60eb      	str	r3, [r5, #12]
 80184ac:	bd38      	pop	{r3, r4, r5, pc}
 80184ae:	bf00      	nop
 80184b0:	200085b8 	.word	0x200085b8
 80184b4:	20000000 	.word	0x20000000
 80184b8:	08016dcb 	.word	0x08016dcb
 80184bc:	200000b8 	.word	0x200000b8
 80184c0:	200085bc 	.word	0x200085bc
 80184c4:	08016dc9 	.word	0x08016dc9
 80184c8:	200000bc 	.word	0x200000bc

080184cc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80184cc:	b510      	push	{r4, lr}
 80184ce:	4604      	mov	r4, r0
 80184d0:	f7ff ff88 	bl	80183e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80184d4:	4620      	mov	r0, r4
 80184d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184da:	f7ff bfbd 	b.w	8018458 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080184e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	4c15      	ldr	r4, [pc, #84]	; (8018538 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80184e4:	7823      	ldrb	r3, [r4, #0]
 80184e6:	f3bf 8f5b 	dmb	ish
 80184ea:	07da      	lsls	r2, r3, #31
 80184ec:	4605      	mov	r5, r0
 80184ee:	d40b      	bmi.n	8018508 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80184f0:	4620      	mov	r0, r4
 80184f2:	f005 f8f3 	bl	801d6dc <__cxa_guard_acquire>
 80184f6:	b138      	cbz	r0, 8018508 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80184f8:	4620      	mov	r0, r4
 80184fa:	f005 f8fb 	bl	801d6f4 <__cxa_guard_release>
 80184fe:	4a0f      	ldr	r2, [pc, #60]	; (801853c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018500:	490f      	ldr	r1, [pc, #60]	; (8018540 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8018502:	4810      	ldr	r0, [pc, #64]	; (8018544 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018504:	f005 f8e0 	bl	801d6c8 <__aeabi_atexit>
 8018508:	4c0f      	ldr	r4, [pc, #60]	; (8018548 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801850a:	7823      	ldrb	r3, [r4, #0]
 801850c:	f3bf 8f5b 	dmb	ish
 8018510:	07db      	lsls	r3, r3, #31
 8018512:	d40b      	bmi.n	801852c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018514:	4620      	mov	r0, r4
 8018516:	f005 f8e1 	bl	801d6dc <__cxa_guard_acquire>
 801851a:	b138      	cbz	r0, 801852c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801851c:	4620      	mov	r0, r4
 801851e:	f005 f8e9 	bl	801d6f4 <__cxa_guard_release>
 8018522:	4a06      	ldr	r2, [pc, #24]	; (801853c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018524:	4909      	ldr	r1, [pc, #36]	; (801854c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018526:	480a      	ldr	r0, [pc, #40]	; (8018550 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018528:	f005 f8ce 	bl	801d6c8 <__aeabi_atexit>
 801852c:	4b05      	ldr	r3, [pc, #20]	; (8018544 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801852e:	622b      	str	r3, [r5, #32]
 8018530:	4b07      	ldr	r3, [pc, #28]	; (8018550 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018532:	626b      	str	r3, [r5, #36]	; 0x24
 8018534:	bd38      	pop	{r3, r4, r5, pc}
 8018536:	bf00      	nop
 8018538:	200085e0 	.word	0x200085e0
 801853c:	20000000 	.word	0x20000000
 8018540:	08016dbf 	.word	0x08016dbf
 8018544:	200000e0 	.word	0x200000e0
 8018548:	200085e4 	.word	0x200085e4
 801854c:	08016dbd 	.word	0x08016dbd
 8018550:	200000e4 	.word	0x200000e4

08018554 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018554:	b538      	push	{r3, r4, r5, lr}
 8018556:	4c15      	ldr	r4, [pc, #84]	; (80185ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8018558:	7823      	ldrb	r3, [r4, #0]
 801855a:	f3bf 8f5b 	dmb	ish
 801855e:	07da      	lsls	r2, r3, #31
 8018560:	4605      	mov	r5, r0
 8018562:	d40b      	bmi.n	801857c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018564:	4620      	mov	r0, r4
 8018566:	f005 f8b9 	bl	801d6dc <__cxa_guard_acquire>
 801856a:	b138      	cbz	r0, 801857c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801856c:	4620      	mov	r0, r4
 801856e:	f005 f8c1 	bl	801d6f4 <__cxa_guard_release>
 8018572:	4a0f      	ldr	r2, [pc, #60]	; (80185b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018574:	490f      	ldr	r1, [pc, #60]	; (80185b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018576:	4810      	ldr	r0, [pc, #64]	; (80185b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018578:	f005 f8a6 	bl	801d6c8 <__aeabi_atexit>
 801857c:	4c0f      	ldr	r4, [pc, #60]	; (80185bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801857e:	7823      	ldrb	r3, [r4, #0]
 8018580:	f3bf 8f5b 	dmb	ish
 8018584:	07db      	lsls	r3, r3, #31
 8018586:	d40b      	bmi.n	80185a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018588:	4620      	mov	r0, r4
 801858a:	f005 f8a7 	bl	801d6dc <__cxa_guard_acquire>
 801858e:	b138      	cbz	r0, 80185a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018590:	4620      	mov	r0, r4
 8018592:	f005 f8af 	bl	801d6f4 <__cxa_guard_release>
 8018596:	4a06      	ldr	r2, [pc, #24]	; (80185b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018598:	4909      	ldr	r1, [pc, #36]	; (80185c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801859a:	480a      	ldr	r0, [pc, #40]	; (80185c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801859c:	f005 f894 	bl	801d6c8 <__aeabi_atexit>
 80185a0:	4b05      	ldr	r3, [pc, #20]	; (80185b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80185a2:	61ab      	str	r3, [r5, #24]
 80185a4:	4b07      	ldr	r3, [pc, #28]	; (80185c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80185a6:	61eb      	str	r3, [r5, #28]
 80185a8:	bd38      	pop	{r3, r4, r5, pc}
 80185aa:	bf00      	nop
 80185ac:	200085c0 	.word	0x200085c0
 80185b0:	20000000 	.word	0x20000000
 80185b4:	08016dc3 	.word	0x08016dc3
 80185b8:	200000c0 	.word	0x200000c0
 80185bc:	200085c4 	.word	0x200085c4
 80185c0:	08016dc1 	.word	0x08016dc1
 80185c4:	200000c4 	.word	0x200000c4

080185c8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80185c8:	b510      	push	{r4, lr}
 80185ca:	4604      	mov	r4, r0
 80185cc:	f7ff ff88 	bl	80184e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80185d0:	4620      	mov	r0, r4
 80185d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185d6:	f7ff bfbd 	b.w	8018554 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080185dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4c15      	ldr	r4, [pc, #84]	; (8018634 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80185e0:	7823      	ldrb	r3, [r4, #0]
 80185e2:	f3bf 8f5b 	dmb	ish
 80185e6:	07da      	lsls	r2, r3, #31
 80185e8:	4605      	mov	r5, r0
 80185ea:	d40b      	bmi.n	8018604 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80185ec:	4620      	mov	r0, r4
 80185ee:	f005 f875 	bl	801d6dc <__cxa_guard_acquire>
 80185f2:	b138      	cbz	r0, 8018604 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80185f4:	4620      	mov	r0, r4
 80185f6:	f005 f87d 	bl	801d6f4 <__cxa_guard_release>
 80185fa:	4a0f      	ldr	r2, [pc, #60]	; (8018638 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80185fc:	490f      	ldr	r1, [pc, #60]	; (801863c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80185fe:	4810      	ldr	r0, [pc, #64]	; (8018640 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018600:	f005 f862 	bl	801d6c8 <__aeabi_atexit>
 8018604:	4c0f      	ldr	r4, [pc, #60]	; (8018644 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8018606:	7823      	ldrb	r3, [r4, #0]
 8018608:	f3bf 8f5b 	dmb	ish
 801860c:	07db      	lsls	r3, r3, #31
 801860e:	d40b      	bmi.n	8018628 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018610:	4620      	mov	r0, r4
 8018612:	f005 f863 	bl	801d6dc <__cxa_guard_acquire>
 8018616:	b138      	cbz	r0, 8018628 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018618:	4620      	mov	r0, r4
 801861a:	f005 f86b 	bl	801d6f4 <__cxa_guard_release>
 801861e:	4a06      	ldr	r2, [pc, #24]	; (8018638 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018620:	4909      	ldr	r1, [pc, #36]	; (8018648 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018622:	480a      	ldr	r0, [pc, #40]	; (801864c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018624:	f005 f850 	bl	801d6c8 <__aeabi_atexit>
 8018628:	4b05      	ldr	r3, [pc, #20]	; (8018640 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801862a:	632b      	str	r3, [r5, #48]	; 0x30
 801862c:	4b07      	ldr	r3, [pc, #28]	; (801864c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801862e:	636b      	str	r3, [r5, #52]	; 0x34
 8018630:	bd38      	pop	{r3, r4, r5, pc}
 8018632:	bf00      	nop
 8018634:	200085c8 	.word	0x200085c8
 8018638:	20000000 	.word	0x20000000
 801863c:	08016db7 	.word	0x08016db7
 8018640:	200000c8 	.word	0x200000c8
 8018644:	200085cc 	.word	0x200085cc
 8018648:	08016db5 	.word	0x08016db5
 801864c:	200000cc 	.word	0x200000cc

08018650 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018650:	b538      	push	{r3, r4, r5, lr}
 8018652:	4c15      	ldr	r4, [pc, #84]	; (80186a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018654:	7823      	ldrb	r3, [r4, #0]
 8018656:	f3bf 8f5b 	dmb	ish
 801865a:	07da      	lsls	r2, r3, #31
 801865c:	4605      	mov	r5, r0
 801865e:	d40b      	bmi.n	8018678 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018660:	4620      	mov	r0, r4
 8018662:	f005 f83b 	bl	801d6dc <__cxa_guard_acquire>
 8018666:	b138      	cbz	r0, 8018678 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018668:	4620      	mov	r0, r4
 801866a:	f005 f843 	bl	801d6f4 <__cxa_guard_release>
 801866e:	4a0f      	ldr	r2, [pc, #60]	; (80186ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018670:	490f      	ldr	r1, [pc, #60]	; (80186b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018672:	4810      	ldr	r0, [pc, #64]	; (80186b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018674:	f005 f828 	bl	801d6c8 <__aeabi_atexit>
 8018678:	4c0f      	ldr	r4, [pc, #60]	; (80186b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801867a:	7823      	ldrb	r3, [r4, #0]
 801867c:	f3bf 8f5b 	dmb	ish
 8018680:	07db      	lsls	r3, r3, #31
 8018682:	d40b      	bmi.n	801869c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018684:	4620      	mov	r0, r4
 8018686:	f005 f829 	bl	801d6dc <__cxa_guard_acquire>
 801868a:	b138      	cbz	r0, 801869c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801868c:	4620      	mov	r0, r4
 801868e:	f005 f831 	bl	801d6f4 <__cxa_guard_release>
 8018692:	4a06      	ldr	r2, [pc, #24]	; (80186ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018694:	4909      	ldr	r1, [pc, #36]	; (80186bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018696:	480a      	ldr	r0, [pc, #40]	; (80186c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018698:	f005 f816 	bl	801d6c8 <__aeabi_atexit>
 801869c:	4b05      	ldr	r3, [pc, #20]	; (80186b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801869e:	62ab      	str	r3, [r5, #40]	; 0x28
 80186a0:	4b07      	ldr	r3, [pc, #28]	; (80186c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80186a2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80186a4:	bd38      	pop	{r3, r4, r5, pc}
 80186a6:	bf00      	nop
 80186a8:	200085a0 	.word	0x200085a0
 80186ac:	20000000 	.word	0x20000000
 80186b0:	08016dbb 	.word	0x08016dbb
 80186b4:	200000a0 	.word	0x200000a0
 80186b8:	200085a4 	.word	0x200085a4
 80186bc:	08016db9 	.word	0x08016db9
 80186c0:	200000a4 	.word	0x200000a4

080186c4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80186c4:	b510      	push	{r4, lr}
 80186c6:	4604      	mov	r4, r0
 80186c8:	f7ff ff88 	bl	80185dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80186cc:	4620      	mov	r0, r4
 80186ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186d2:	f7ff bfbd 	b.w	8018650 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080186d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80186d8:	b538      	push	{r3, r4, r5, lr}
 80186da:	4c15      	ldr	r4, [pc, #84]	; (8018730 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80186dc:	7823      	ldrb	r3, [r4, #0]
 80186de:	f3bf 8f5b 	dmb	ish
 80186e2:	07da      	lsls	r2, r3, #31
 80186e4:	4605      	mov	r5, r0
 80186e6:	d40b      	bmi.n	8018700 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80186e8:	4620      	mov	r0, r4
 80186ea:	f004 fff7 	bl	801d6dc <__cxa_guard_acquire>
 80186ee:	b138      	cbz	r0, 8018700 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80186f0:	4620      	mov	r0, r4
 80186f2:	f004 ffff 	bl	801d6f4 <__cxa_guard_release>
 80186f6:	4a0f      	ldr	r2, [pc, #60]	; (8018734 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80186f8:	490f      	ldr	r1, [pc, #60]	; (8018738 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80186fa:	4810      	ldr	r0, [pc, #64]	; (801873c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80186fc:	f004 ffe4 	bl	801d6c8 <__aeabi_atexit>
 8018700:	4c0f      	ldr	r4, [pc, #60]	; (8018740 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018702:	7823      	ldrb	r3, [r4, #0]
 8018704:	f3bf 8f5b 	dmb	ish
 8018708:	07db      	lsls	r3, r3, #31
 801870a:	d40b      	bmi.n	8018724 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801870c:	4620      	mov	r0, r4
 801870e:	f004 ffe5 	bl	801d6dc <__cxa_guard_acquire>
 8018712:	b138      	cbz	r0, 8018724 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018714:	4620      	mov	r0, r4
 8018716:	f004 ffed 	bl	801d6f4 <__cxa_guard_release>
 801871a:	4a06      	ldr	r2, [pc, #24]	; (8018734 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801871c:	4909      	ldr	r1, [pc, #36]	; (8018744 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801871e:	480a      	ldr	r0, [pc, #40]	; (8018748 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018720:	f004 ffd2 	bl	801d6c8 <__aeabi_atexit>
 8018724:	4b05      	ldr	r3, [pc, #20]	; (801873c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018726:	642b      	str	r3, [r5, #64]	; 0x40
 8018728:	4b07      	ldr	r3, [pc, #28]	; (8018748 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801872a:	646b      	str	r3, [r5, #68]	; 0x44
 801872c:	bd38      	pop	{r3, r4, r5, pc}
 801872e:	bf00      	nop
 8018730:	200085d0 	.word	0x200085d0
 8018734:	20000000 	.word	0x20000000
 8018738:	08016daf 	.word	0x08016daf
 801873c:	200000d0 	.word	0x200000d0
 8018740:	200085d4 	.word	0x200085d4
 8018744:	08016dad 	.word	0x08016dad
 8018748:	200000d4 	.word	0x200000d4

0801874c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801874c:	b538      	push	{r3, r4, r5, lr}
 801874e:	4c15      	ldr	r4, [pc, #84]	; (80187a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018750:	7823      	ldrb	r3, [r4, #0]
 8018752:	f3bf 8f5b 	dmb	ish
 8018756:	07da      	lsls	r2, r3, #31
 8018758:	4605      	mov	r5, r0
 801875a:	d40b      	bmi.n	8018774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801875c:	4620      	mov	r0, r4
 801875e:	f004 ffbd 	bl	801d6dc <__cxa_guard_acquire>
 8018762:	b138      	cbz	r0, 8018774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018764:	4620      	mov	r0, r4
 8018766:	f004 ffc5 	bl	801d6f4 <__cxa_guard_release>
 801876a:	4a0f      	ldr	r2, [pc, #60]	; (80187a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801876c:	490f      	ldr	r1, [pc, #60]	; (80187ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801876e:	4810      	ldr	r0, [pc, #64]	; (80187b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018770:	f004 ffaa 	bl	801d6c8 <__aeabi_atexit>
 8018774:	4c0f      	ldr	r4, [pc, #60]	; (80187b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018776:	7823      	ldrb	r3, [r4, #0]
 8018778:	f3bf 8f5b 	dmb	ish
 801877c:	07db      	lsls	r3, r3, #31
 801877e:	d40b      	bmi.n	8018798 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018780:	4620      	mov	r0, r4
 8018782:	f004 ffab 	bl	801d6dc <__cxa_guard_acquire>
 8018786:	b138      	cbz	r0, 8018798 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018788:	4620      	mov	r0, r4
 801878a:	f004 ffb3 	bl	801d6f4 <__cxa_guard_release>
 801878e:	4a06      	ldr	r2, [pc, #24]	; (80187a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018790:	4909      	ldr	r1, [pc, #36]	; (80187b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018792:	480a      	ldr	r0, [pc, #40]	; (80187bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018794:	f004 ff98 	bl	801d6c8 <__aeabi_atexit>
 8018798:	4b05      	ldr	r3, [pc, #20]	; (80187b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801879a:	63ab      	str	r3, [r5, #56]	; 0x38
 801879c:	4b07      	ldr	r3, [pc, #28]	; (80187bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801879e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80187a0:	bd38      	pop	{r3, r4, r5, pc}
 80187a2:	bf00      	nop
 80187a4:	200085b0 	.word	0x200085b0
 80187a8:	20000000 	.word	0x20000000
 80187ac:	08016db3 	.word	0x08016db3
 80187b0:	200000b0 	.word	0x200000b0
 80187b4:	200085b4 	.word	0x200085b4
 80187b8:	08016db1 	.word	0x08016db1
 80187bc:	200000b4 	.word	0x200000b4

080187c0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80187c0:	b510      	push	{r4, lr}
 80187c2:	4604      	mov	r4, r0
 80187c4:	f7ff ff88 	bl	80186d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80187c8:	4620      	mov	r0, r4
 80187ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187ce:	f7ff bfbd 	b.w	801874c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080187d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80187d4:	b538      	push	{r3, r4, r5, lr}
 80187d6:	4c15      	ldr	r4, [pc, #84]	; (801882c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80187d8:	7823      	ldrb	r3, [r4, #0]
 80187da:	f3bf 8f5b 	dmb	ish
 80187de:	07da      	lsls	r2, r3, #31
 80187e0:	4605      	mov	r5, r0
 80187e2:	d40b      	bmi.n	80187fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80187e4:	4620      	mov	r0, r4
 80187e6:	f004 ff79 	bl	801d6dc <__cxa_guard_acquire>
 80187ea:	b138      	cbz	r0, 80187fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80187ec:	4620      	mov	r0, r4
 80187ee:	f004 ff81 	bl	801d6f4 <__cxa_guard_release>
 80187f2:	4a0f      	ldr	r2, [pc, #60]	; (8018830 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80187f4:	490f      	ldr	r1, [pc, #60]	; (8018834 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80187f6:	4810      	ldr	r0, [pc, #64]	; (8018838 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80187f8:	f004 ff66 	bl	801d6c8 <__aeabi_atexit>
 80187fc:	4c0f      	ldr	r4, [pc, #60]	; (801883c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80187fe:	7823      	ldrb	r3, [r4, #0]
 8018800:	f3bf 8f5b 	dmb	ish
 8018804:	07db      	lsls	r3, r3, #31
 8018806:	d40b      	bmi.n	8018820 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018808:	4620      	mov	r0, r4
 801880a:	f004 ff67 	bl	801d6dc <__cxa_guard_acquire>
 801880e:	b138      	cbz	r0, 8018820 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018810:	4620      	mov	r0, r4
 8018812:	f004 ff6f 	bl	801d6f4 <__cxa_guard_release>
 8018816:	4a06      	ldr	r2, [pc, #24]	; (8018830 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018818:	4909      	ldr	r1, [pc, #36]	; (8018840 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801881a:	480a      	ldr	r0, [pc, #40]	; (8018844 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801881c:	f004 ff54 	bl	801d6c8 <__aeabi_atexit>
 8018820:	4b05      	ldr	r3, [pc, #20]	; (8018838 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018822:	652b      	str	r3, [r5, #80]	; 0x50
 8018824:	4b07      	ldr	r3, [pc, #28]	; (8018844 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018826:	656b      	str	r3, [r5, #84]	; 0x54
 8018828:	bd38      	pop	{r3, r4, r5, pc}
 801882a:	bf00      	nop
 801882c:	200085a8 	.word	0x200085a8
 8018830:	20000000 	.word	0x20000000
 8018834:	08016da7 	.word	0x08016da7
 8018838:	200000a8 	.word	0x200000a8
 801883c:	200085ac 	.word	0x200085ac
 8018840:	08016da5 	.word	0x08016da5
 8018844:	200000ac 	.word	0x200000ac

08018848 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018848:	b538      	push	{r3, r4, r5, lr}
 801884a:	4c15      	ldr	r4, [pc, #84]	; (80188a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801884c:	7823      	ldrb	r3, [r4, #0]
 801884e:	f3bf 8f5b 	dmb	ish
 8018852:	07da      	lsls	r2, r3, #31
 8018854:	4605      	mov	r5, r0
 8018856:	d40b      	bmi.n	8018870 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018858:	4620      	mov	r0, r4
 801885a:	f004 ff3f 	bl	801d6dc <__cxa_guard_acquire>
 801885e:	b138      	cbz	r0, 8018870 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018860:	4620      	mov	r0, r4
 8018862:	f004 ff47 	bl	801d6f4 <__cxa_guard_release>
 8018866:	4a0f      	ldr	r2, [pc, #60]	; (80188a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018868:	490f      	ldr	r1, [pc, #60]	; (80188a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801886a:	4810      	ldr	r0, [pc, #64]	; (80188ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801886c:	f004 ff2c 	bl	801d6c8 <__aeabi_atexit>
 8018870:	4c0f      	ldr	r4, [pc, #60]	; (80188b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018872:	7823      	ldrb	r3, [r4, #0]
 8018874:	f3bf 8f5b 	dmb	ish
 8018878:	07db      	lsls	r3, r3, #31
 801887a:	d40b      	bmi.n	8018894 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801887c:	4620      	mov	r0, r4
 801887e:	f004 ff2d 	bl	801d6dc <__cxa_guard_acquire>
 8018882:	b138      	cbz	r0, 8018894 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018884:	4620      	mov	r0, r4
 8018886:	f004 ff35 	bl	801d6f4 <__cxa_guard_release>
 801888a:	4a06      	ldr	r2, [pc, #24]	; (80188a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801888c:	4909      	ldr	r1, [pc, #36]	; (80188b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801888e:	480a      	ldr	r0, [pc, #40]	; (80188b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018890:	f004 ff1a 	bl	801d6c8 <__aeabi_atexit>
 8018894:	4b05      	ldr	r3, [pc, #20]	; (80188ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018896:	64ab      	str	r3, [r5, #72]	; 0x48
 8018898:	4b07      	ldr	r3, [pc, #28]	; (80188b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801889a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801889c:	bd38      	pop	{r3, r4, r5, pc}
 801889e:	bf00      	nop
 80188a0:	20008598 	.word	0x20008598
 80188a4:	20000000 	.word	0x20000000
 80188a8:	08016dab 	.word	0x08016dab
 80188ac:	20000098 	.word	0x20000098
 80188b0:	2000859c 	.word	0x2000859c
 80188b4:	08016da9 	.word	0x08016da9
 80188b8:	2000009c 	.word	0x2000009c

080188bc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80188bc:	b510      	push	{r4, lr}
 80188be:	4604      	mov	r4, r0
 80188c0:	f7ff ff88 	bl	80187d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80188c4:	4620      	mov	r0, r4
 80188c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188ca:	f7ff bfbd 	b.w	8018848 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080188ce <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80188ce:	b510      	push	{r4, lr}
 80188d0:	4604      	mov	r4, r0
 80188d2:	f7ff fff3 	bl	80188bc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80188d6:	4620      	mov	r0, r4
 80188d8:	f7ff ff72 	bl	80187c0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80188dc:	4620      	mov	r0, r4
 80188de:	f7ff fe73 	bl	80185c8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80188e2:	4620      	mov	r0, r4
 80188e4:	f7ff fdf2 	bl	80184cc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80188e8:	4620      	mov	r0, r4
 80188ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188ee:	f7ff bee9 	b.w	80186c4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080188f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80188f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f8:	b087      	sub	sp, #28
 80188fa:	7888      	ldrb	r0, [r1, #2]
 80188fc:	9001      	str	r0, [sp, #4]
 80188fe:	7848      	ldrb	r0, [r1, #1]
 8018900:	9002      	str	r0, [sp, #8]
 8018902:	7808      	ldrb	r0, [r1, #0]
 8018904:	9100      	str	r1, [sp, #0]
 8018906:	9901      	ldr	r1, [sp, #4]
 8018908:	9003      	str	r0, [sp, #12]
 801890a:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801890e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8018912:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8018916:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801891a:	9902      	ldr	r1, [sp, #8]
 801891c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8018920:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8018924:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018928:	4616      	mov	r6, r2
 801892a:	fb05 ca0e 	mla	sl, r5, lr, ip
 801892e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8018932:	2d00      	cmp	r5, #0
 8018934:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018938:	9005      	str	r0, [sp, #20]
 801893a:	eb06 080a 	add.w	r8, r6, sl
 801893e:	db4a      	blt.n	80189d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8018940:	45a9      	cmp	r9, r5
 8018942:	dd48      	ble.n	80189d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8018944:	f1bc 0f00 	cmp.w	ip, #0
 8018948:	db43      	blt.n	80189d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801894a:	45e6      	cmp	lr, ip
 801894c:	dd41      	ble.n	80189d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801894e:	f816 600a 	ldrb.w	r6, [r6, sl]
 8018952:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018956:	441e      	add	r6, r3
 8018958:	f11c 0001 	adds.w	r0, ip, #1
 801895c:	d43e      	bmi.n	80189dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801895e:	4586      	cmp	lr, r0
 8018960:	dd3c      	ble.n	80189dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8018962:	2a00      	cmp	r2, #0
 8018964:	d03a      	beq.n	80189dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8018966:	f898 0001 	ldrb.w	r0, [r8, #1]
 801896a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801896e:	4418      	add	r0, r3
 8018970:	3501      	adds	r5, #1
 8018972:	d437      	bmi.n	80189e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8018974:	45a9      	cmp	r9, r5
 8018976:	dd35      	ble.n	80189e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8018978:	b3a4      	cbz	r4, 80189e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801897a:	f1bc 0f00 	cmp.w	ip, #0
 801897e:	db2f      	blt.n	80189e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8018980:	45e6      	cmp	lr, ip
 8018982:	dd2d      	ble.n	80189e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8018984:	f818 500e 	ldrb.w	r5, [r8, lr]
 8018988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801898c:	441d      	add	r5, r3
 801898e:	f11c 0c01 	adds.w	ip, ip, #1
 8018992:	d42a      	bmi.n	80189ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8018994:	45e6      	cmp	lr, ip
 8018996:	dd28      	ble.n	80189ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8018998:	b33a      	cbz	r2, 80189ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801899a:	44c6      	add	lr, r8
 801899c:	f89e c001 	ldrb.w	ip, [lr, #1]
 80189a0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80189a4:	4463      	add	r3, ip
 80189a6:	ea6f 0c07 	mvn.w	ip, r7
 80189aa:	2a0f      	cmp	r2, #15
 80189ac:	fa5f fc8c 	uxtb.w	ip, ip
 80189b0:	f896 a000 	ldrb.w	sl, [r6]
 80189b4:	f890 b000 	ldrb.w	fp, [r0]
 80189b8:	f895 9000 	ldrb.w	r9, [r5]
 80189bc:	7819      	ldrb	r1, [r3, #0]
 80189be:	d801      	bhi.n	80189c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80189c0:	2c0f      	cmp	r4, #15
 80189c2:	d914      	bls.n	80189ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80189c4:	4b40      	ldr	r3, [pc, #256]	; (8018ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80189c6:	4a41      	ldr	r2, [pc, #260]	; (8018acc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80189c8:	4841      	ldr	r0, [pc, #260]	; (8018ad0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80189ca:	f240 11a5 	movw	r1, #421	; 0x1a5
 80189ce:	f004 feaf 	bl	801d730 <__assert_func>
 80189d2:	ae05      	add	r6, sp, #20
 80189d4:	e7c0      	b.n	8018958 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80189d6:	a805      	add	r0, sp, #20
 80189d8:	4606      	mov	r6, r0
 80189da:	e7c9      	b.n	8018970 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80189dc:	a805      	add	r0, sp, #20
 80189de:	e7c7      	b.n	8018970 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80189e0:	ad05      	add	r5, sp, #20
 80189e2:	e7d4      	b.n	801898e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80189e4:	ab05      	add	r3, sp, #20
 80189e6:	461d      	mov	r5, r3
 80189e8:	e7dd      	b.n	80189a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80189ea:	ab05      	add	r3, sp, #20
 80189ec:	e7db      	b.n	80189a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80189ee:	b292      	uxth	r2, r2
 80189f0:	b2a4      	uxth	r4, r4
 80189f2:	fb02 f804 	mul.w	r8, r2, r4
 80189f6:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80189fa:	0112      	lsls	r2, r2, #4
 80189fc:	b2a4      	uxth	r4, r4
 80189fe:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8018a02:	eba2 0208 	sub.w	r2, r2, r8
 8018a06:	b292      	uxth	r2, r2
 8018a08:	ebae 0e04 	sub.w	lr, lr, r4
 8018a0c:	fa1f fe8e 	uxth.w	lr, lr
 8018a10:	fb02 fb0b 	mul.w	fp, r2, fp
 8018a14:	fb0e ba0a 	mla	sl, lr, sl, fp
 8018a18:	fb04 aa09 	mla	sl, r4, r9, sl
 8018a1c:	fb08 aa01 	mla	sl, r8, r1, sl
 8018a20:	9903      	ldr	r1, [sp, #12]
 8018a22:	fa1f fc8c 	uxth.w	ip, ip
 8018a26:	fb11 f90c 	smulbb	r9, r1, ip
 8018a2a:	b2bf      	uxth	r7, r7
 8018a2c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8018a30:	fb0a 9a07 	mla	sl, sl, r7, r9
 8018a34:	fa1f fa8a 	uxth.w	sl, sl
 8018a38:	f10a 0901 	add.w	r9, sl, #1
 8018a3c:	9900      	ldr	r1, [sp, #0]
 8018a3e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8018a42:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018a46:	f881 a000 	strb.w	sl, [r1]
 8018a4a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018a4e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018a52:	9902      	ldr	r1, [sp, #8]
 8018a54:	fb02 fa0a 	mul.w	sl, r2, sl
 8018a58:	fb0e aa09 	mla	sl, lr, r9, sl
 8018a5c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018a60:	fb04 aa09 	mla	sl, r4, r9, sl
 8018a64:	f893 9001 	ldrb.w	r9, [r3, #1]
 8018a68:	fb08 a909 	mla	r9, r8, r9, sl
 8018a6c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018a70:	fb11 fa0c 	smulbb	sl, r1, ip
 8018a74:	fb09 a907 	mla	r9, r9, r7, sl
 8018a78:	fa1f f989 	uxth.w	r9, r9
 8018a7c:	f109 0a01 	add.w	sl, r9, #1
 8018a80:	9900      	ldr	r1, [sp, #0]
 8018a82:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018a86:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a8a:	f881 9001 	strb.w	r9, [r1, #1]
 8018a8e:	7880      	ldrb	r0, [r0, #2]
 8018a90:	78b6      	ldrb	r6, [r6, #2]
 8018a92:	789b      	ldrb	r3, [r3, #2]
 8018a94:	4342      	muls	r2, r0
 8018a96:	78a8      	ldrb	r0, [r5, #2]
 8018a98:	fb0e 2206 	mla	r2, lr, r6, r2
 8018a9c:	fb04 2400 	mla	r4, r4, r0, r2
 8018aa0:	fb08 4803 	mla	r8, r8, r3, r4
 8018aa4:	9b01      	ldr	r3, [sp, #4]
 8018aa6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018aaa:	fb13 fc0c 	smulbb	ip, r3, ip
 8018aae:	fb08 c707 	mla	r7, r8, r7, ip
 8018ab2:	b2bf      	uxth	r7, r7
 8018ab4:	f107 0c01 	add.w	ip, r7, #1
 8018ab8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8018abc:	123f      	asrs	r7, r7, #8
 8018abe:	708f      	strb	r7, [r1, #2]
 8018ac0:	b007      	add	sp, #28
 8018ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac6:	bf00      	nop
 8018ac8:	080216c9 	.word	0x080216c9
 8018acc:	08021bbe 	.word	0x08021bbe
 8018ad0:	08021792 	.word	0x08021792

08018ad4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad8:	ed2d 8b08 	vpush	{d8-d11}
 8018adc:	b095      	sub	sp, #84	; 0x54
 8018ade:	eeb0 aa40 	vmov.f32	s20, s0
 8018ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8018ae4:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8018ae8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8018aea:	930c      	str	r3, [sp, #48]	; 0x30
 8018aec:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8018af0:	9310      	str	r3, [sp, #64]	; 0x40
 8018af2:	910f      	str	r1, [sp, #60]	; 0x3c
 8018af4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8018af8:	9013      	str	r0, [sp, #76]	; 0x4c
 8018afa:	6860      	ldr	r0, [r4, #4]
 8018afc:	9212      	str	r2, [sp, #72]	; 0x48
 8018afe:	fb00 1303 	mla	r3, r0, r3, r1
 8018b02:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018b04:	6821      	ldr	r1, [r4, #0]
 8018b06:	6854      	ldr	r4, [r2, #4]
 8018b08:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8018b0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b10:	18cb      	adds	r3, r1, r3
 8018b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b14:	6813      	ldr	r3, [r2, #0]
 8018b16:	930e      	str	r3, [sp, #56]	; 0x38
 8018b18:	1d23      	adds	r3, r4, #4
 8018b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8018b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b1e:	43db      	mvns	r3, r3
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	eef0 9a60 	vmov.f32	s19, s1
 8018b26:	eeb0 9a41 	vmov.f32	s18, s2
 8018b2a:	eeb0 8a62 	vmov.f32	s16, s5
 8018b2e:	eef0 8a43 	vmov.f32	s17, s6
 8018b32:	eef0 ba44 	vmov.f32	s23, s8
 8018b36:	eeb0 ba64 	vmov.f32	s22, s9
 8018b3a:	eef0 aa45 	vmov.f32	s21, s10
 8018b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8018b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	dc03      	bgt.n	8018b4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8018b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	f340 823c 	ble.w	8018fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8018b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	f340 8115 	ble.w	8018d80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8018b56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018b58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018b5a:	1412      	asrs	r2, r2, #16
 8018b5c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018b60:	d431      	bmi.n	8018bc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018b62:	1c51      	adds	r1, r2, #1
 8018b64:	428d      	cmp	r5, r1
 8018b66:	dd31      	ble.n	8018bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	db2f      	blt.n	8018bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8018b6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018b6e:	1c59      	adds	r1, r3, #1
 8018b70:	4288      	cmp	r0, r1
 8018b72:	dd2b      	ble.n	8018bcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8018b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018b78:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018b7a:	3b01      	subs	r3, #1
 8018b7c:	fb02 1203 	mla	r2, r2, r3, r1
 8018b80:	1412      	asrs	r2, r2, #16
 8018b82:	d42d      	bmi.n	8018be0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8018b84:	3201      	adds	r2, #1
 8018b86:	4295      	cmp	r5, r2
 8018b88:	dd2a      	ble.n	8018be0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8018b8a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018b8c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018b8e:	fb02 1303 	mla	r3, r2, r3, r1
 8018b92:	141b      	asrs	r3, r3, #16
 8018b94:	d424      	bmi.n	8018be0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8018b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b98:	3301      	adds	r3, #1
 8018b9a:	429a      	cmp	r2, r3
 8018b9c:	dd20      	ble.n	8018be0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8018b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ba0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8018ba4:	f103 0c03 	add.w	ip, r3, #3
 8018ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018baa:	9311      	str	r3, [sp, #68]	; 0x44
 8018bac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	f300 814f 	bgt.w	8018e52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8018bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018bb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018bbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018bc0:	441a      	add	r2, r3
 8018bc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8018bc4:	e0de      	b.n	8018d84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8018bc6:	1c51      	adds	r1, r2, #1
 8018bc8:	f040 80cb 	bne.w	8018d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8018bcc:	42aa      	cmp	r2, r5
 8018bce:	f280 80c8 	bge.w	8018d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8018bd2:	1c5f      	adds	r7, r3, #1
 8018bd4:	f2c0 80c5 	blt.w	8018d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8018bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	f280 80c1 	bge.w	8018d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8018be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018be2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018be4:	9311      	str	r3, [sp, #68]	; 0x44
 8018be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	dde3      	ble.n	8018bb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8018bec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018bee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8018bf0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018bf2:	141a      	asrs	r2, r3, #16
 8018bf4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018bf6:	1400      	asrs	r0, r0, #16
 8018bf8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018bfc:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8018c00:	f100 810e 	bmi.w	8018e20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8018c04:	1c46      	adds	r6, r0, #1
 8018c06:	42b5      	cmp	r5, r6
 8018c08:	f340 810c 	ble.w	8018e24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8018c0c:	2a00      	cmp	r2, #0
 8018c0e:	f2c0 8109 	blt.w	8018e24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8018c12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018c14:	1c56      	adds	r6, r2, #1
 8018c16:	42b4      	cmp	r4, r6
 8018c18:	f340 8104 	ble.w	8018e24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8018c1c:	fb02 0005 	mla	r0, r2, r5, r0
 8018c20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018c24:	f814 e000 	ldrb.w	lr, [r4, r0]
 8018c28:	4402      	add	r2, r0
 8018c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018c30:	eb00 080e 	add.w	r8, r0, lr
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	f000 80e4 	beq.w	8018e02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8018c3a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8018c3e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018c42:	4484      	add	ip, r0
 8018c44:	2900      	cmp	r1, #0
 8018c46:	f000 80e5 	beq.w	8018e14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8018c4a:	1950      	adds	r0, r2, r5
 8018c4c:	5d52      	ldrb	r2, [r2, r5]
 8018c4e:	7840      	ldrb	r0, [r0, #1]
 8018c50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018c52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018c56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018c5a:	4422      	add	r2, r4
 8018c5c:	4420      	add	r0, r4
 8018c5e:	b29b      	uxth	r3, r3
 8018c60:	b289      	uxth	r1, r1
 8018c62:	fb03 fa01 	mul.w	sl, r3, r1
 8018c66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018c68:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8018c6c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8018c70:	f89c e000 	ldrb.w	lr, [ip]
 8018c74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018c76:	011b      	lsls	r3, r3, #4
 8018c78:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8018c7c:	b289      	uxth	r1, r1
 8018c7e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8018c82:	eba3 030a 	sub.w	r3, r3, sl
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	eba9 0901 	sub.w	r9, r9, r1
 8018c8c:	fa1f f989 	uxth.w	r9, r9
 8018c90:	fb03 fe0e 	mul.w	lr, r3, lr
 8018c94:	fb09 ee0b 	mla	lr, r9, fp, lr
 8018c98:	f892 b000 	ldrb.w	fp, [r2]
 8018c9c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018ca0:	f890 b000 	ldrb.w	fp, [r0]
 8018ca4:	fb0a ee0b 	mla	lr, sl, fp, lr
 8018ca8:	f897 b000 	ldrb.w	fp, [r7]
 8018cac:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018cb0:	fb1b fb04 	smulbb	fp, fp, r4
 8018cb4:	fb0e be06 	mla	lr, lr, r6, fp
 8018cb8:	fa1f fe8e 	uxth.w	lr, lr
 8018cbc:	f10e 0b01 	add.w	fp, lr, #1
 8018cc0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8018cc4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8018cc8:	f887 b000 	strb.w	fp, [r7]
 8018ccc:	f89c e001 	ldrb.w	lr, [ip, #1]
 8018cd0:	f898 b001 	ldrb.w	fp, [r8, #1]
 8018cd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8018cd8:	fb09 ee0b 	mla	lr, r9, fp, lr
 8018cdc:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018ce0:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018ce4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018ce8:	fb0a ee0b 	mla	lr, sl, fp, lr
 8018cec:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018cf0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018cf4:	fb1b fb04 	smulbb	fp, fp, r4
 8018cf8:	fb0e be06 	mla	lr, lr, r6, fp
 8018cfc:	fa1f fe8e 	uxth.w	lr, lr
 8018d00:	f10e 0b01 	add.w	fp, lr, #1
 8018d04:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8018d08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018d0c:	f887 e001 	strb.w	lr, [r7, #1]
 8018d10:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018d14:	f898 e002 	ldrb.w	lr, [r8, #2]
 8018d18:	fb03 f30c 	mul.w	r3, r3, ip
 8018d1c:	fb09 330e 	mla	r3, r9, lr, r3
 8018d20:	f892 e002 	ldrb.w	lr, [r2, #2]
 8018d24:	7882      	ldrb	r2, [r0, #2]
 8018d26:	fb01 310e 	mla	r1, r1, lr, r3
 8018d2a:	fb0a 1a02 	mla	sl, sl, r2, r1
 8018d2e:	78b9      	ldrb	r1, [r7, #2]
 8018d30:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8018d34:	fb11 f104 	smulbb	r1, r1, r4
 8018d38:	fb0a 1606 	mla	r6, sl, r6, r1
 8018d3c:	b2b6      	uxth	r6, r6
 8018d3e:	1c73      	adds	r3, r6, #1
 8018d40:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8018d44:	1236      	asrs	r6, r6, #8
 8018d46:	70be      	strb	r6, [r7, #2]
 8018d48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018d4a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018d4c:	4413      	add	r3, r2
 8018d4e:	9327      	str	r3, [sp, #156]	; 0x9c
 8018d50:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018d52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018d54:	4413      	add	r3, r2
 8018d56:	9328      	str	r3, [sp, #160]	; 0xa0
 8018d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018d5a:	3b01      	subs	r3, #1
 8018d5c:	3703      	adds	r7, #3
 8018d5e:	9311      	str	r3, [sp, #68]	; 0x44
 8018d60:	e741      	b.n	8018be6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8018d62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018d64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018d66:	4413      	add	r3, r2
 8018d68:	9327      	str	r3, [sp, #156]	; 0x9c
 8018d6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018d6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018d6e:	4413      	add	r3, r2
 8018d70:	9328      	str	r3, [sp, #160]	; 0xa0
 8018d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d74:	3b01      	subs	r3, #1
 8018d76:	930a      	str	r3, [sp, #40]	; 0x28
 8018d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d7a:	3303      	adds	r3, #3
 8018d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d7e:	e6e6      	b.n	8018b4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8018d80:	f47f aef8 	bne.w	8018b74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8018d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f340 811d 	ble.w	8018fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8018d8c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018d94:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018d98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018d9a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018d9e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018da2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018da6:	eef0 6a48 	vmov.f32	s13, s16
 8018daa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018dae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018db2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018db6:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8018dba:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018dbe:	eef0 6a68 	vmov.f32	s13, s17
 8018dc2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018dc6:	ee18 2a10 	vmov	r2, s16
 8018dca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dd2:	ee18 2a90 	vmov	r2, s17
 8018dd6:	9329      	str	r3, [sp, #164]	; 0xa4
 8018dd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dde:	932a      	str	r3, [sp, #168]	; 0xa8
 8018de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018de2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018de4:	3b01      	subs	r3, #1
 8018de6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018dea:	930f      	str	r3, [sp, #60]	; 0x3c
 8018dec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018dee:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8018df2:	bf08      	it	eq
 8018df4:	4613      	moveq	r3, r2
 8018df6:	930a      	str	r3, [sp, #40]	; 0x28
 8018df8:	eef0 8a67 	vmov.f32	s17, s15
 8018dfc:	eeb0 8a47 	vmov.f32	s16, s14
 8018e00:	e69e      	b.n	8018b40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8018e02:	b151      	cbz	r1, 8018e1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8018e04:	5d52      	ldrb	r2, [r2, r5]
 8018e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e0c:	4402      	add	r2, r0
 8018e0e:	4640      	mov	r0, r8
 8018e10:	46c4      	mov	ip, r8
 8018e12:	e724      	b.n	8018c5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8018e14:	4640      	mov	r0, r8
 8018e16:	4642      	mov	r2, r8
 8018e18:	e721      	b.n	8018c5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8018e1a:	4640      	mov	r0, r8
 8018e1c:	4642      	mov	r2, r8
 8018e1e:	e7f7      	b.n	8018e10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8018e20:	1c46      	adds	r6, r0, #1
 8018e22:	d191      	bne.n	8018d48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018e24:	4285      	cmp	r5, r0
 8018e26:	dd8f      	ble.n	8018d48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018e28:	1c54      	adds	r4, r2, #1
 8018e2a:	db8d      	blt.n	8018d48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018e2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018e2e:	4294      	cmp	r4, r2
 8018e30:	dd8a      	ble.n	8018d48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018e32:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8018e36:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e3a:	9002      	str	r0, [sp, #8]
 8018e3c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8018e40:	e9cd 5300 	strd	r5, r3, [sp]
 8018e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e48:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018e4a:	4639      	mov	r1, r7
 8018e4c:	f7ff fd52 	bl	80188f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8018e50:	e77a      	b.n	8018d48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018e52:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8018e54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018e56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018e58:	1410      	asrs	r0, r2, #16
 8018e5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018e5e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018e60:	1412      	asrs	r2, r2, #16
 8018e62:	fb05 2000 	mla	r0, r5, r0, r2
 8018e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e68:	f814 8000 	ldrb.w	r8, [r4, r0]
 8018e6c:	4402      	add	r2, r0
 8018e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e70:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018e74:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018e78:	eb00 0708 	add.w	r7, r0, r8
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	f000 8093 	beq.w	8018fa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8018e82:	7856      	ldrb	r6, [r2, #1]
 8018e84:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018e88:	4406      	add	r6, r0
 8018e8a:	2900      	cmp	r1, #0
 8018e8c:	f000 8095 	beq.w	8018fba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8018e90:	1950      	adds	r0, r2, r5
 8018e92:	5d52      	ldrb	r2, [r2, r5]
 8018e94:	7840      	ldrb	r0, [r0, #1]
 8018e96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018e98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018ea0:	4422      	add	r2, r4
 8018ea2:	4420      	add	r0, r4
 8018ea4:	b29b      	uxth	r3, r3
 8018ea6:	b289      	uxth	r1, r1
 8018ea8:	fb03 f901 	mul.w	r9, r3, r1
 8018eac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018eae:	011b      	lsls	r3, r3, #4
 8018eb0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018eb4:	f814 b008 	ldrb.w	fp, [r4, r8]
 8018eb8:	f896 8000 	ldrb.w	r8, [r6]
 8018ebc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018ebe:	b289      	uxth	r1, r1
 8018ec0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8018ec4:	eba3 0309 	sub.w	r3, r3, r9
 8018ec8:	b29b      	uxth	r3, r3
 8018eca:	ebae 0e01 	sub.w	lr, lr, r1
 8018ece:	fa1f fe8e 	uxth.w	lr, lr
 8018ed2:	fb03 f808 	mul.w	r8, r3, r8
 8018ed6:	fb0e 880b 	mla	r8, lr, fp, r8
 8018eda:	f892 b000 	ldrb.w	fp, [r2]
 8018ede:	fb01 880b 	mla	r8, r1, fp, r8
 8018ee2:	f890 b000 	ldrb.w	fp, [r0]
 8018ee6:	fb09 880b 	mla	r8, r9, fp, r8
 8018eea:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8018eee:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018ef2:	fb1b fb04 	smulbb	fp, fp, r4
 8018ef6:	fb08 b80a 	mla	r8, r8, sl, fp
 8018efa:	fa1f f888 	uxth.w	r8, r8
 8018efe:	f108 0b01 	add.w	fp, r8, #1
 8018f02:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f06:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f0a:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8018f0e:	f896 8001 	ldrb.w	r8, [r6, #1]
 8018f12:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018f16:	fb03 f808 	mul.w	r8, r3, r8
 8018f1a:	fb0e 880b 	mla	r8, lr, fp, r8
 8018f1e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018f22:	fb01 880b 	mla	r8, r1, fp, r8
 8018f26:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018f2a:	fb09 880b 	mla	r8, r9, fp, r8
 8018f2e:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8018f32:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018f36:	fb1b fb04 	smulbb	fp, fp, r4
 8018f3a:	fb08 b80a 	mla	r8, r8, sl, fp
 8018f3e:	fa1f f888 	uxth.w	r8, r8
 8018f42:	f108 0b01 	add.w	fp, r8, #1
 8018f46:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f4e:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8018f52:	78b6      	ldrb	r6, [r6, #2]
 8018f54:	78bf      	ldrb	r7, [r7, #2]
 8018f56:	4373      	muls	r3, r6
 8018f58:	7896      	ldrb	r6, [r2, #2]
 8018f5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018f5c:	fb0e 3307 	mla	r3, lr, r7, r3
 8018f60:	fb01 3306 	mla	r3, r1, r6, r3
 8018f64:	7886      	ldrb	r6, [r0, #2]
 8018f66:	fb09 3906 	mla	r9, r9, r6, r3
 8018f6a:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 8018f6e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018f72:	fb13 f304 	smulbb	r3, r3, r4
 8018f76:	fb09 390a 	mla	r9, r9, sl, r3
 8018f7a:	fa1f f989 	uxth.w	r9, r9
 8018f7e:	f109 0301 	add.w	r3, r9, #1
 8018f82:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8018f86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018f88:	4413      	add	r3, r2
 8018f8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8018f8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018f8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018f90:	4413      	add	r3, r2
 8018f92:	9328      	str	r3, [sp, #160]	; 0xa0
 8018f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018f96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f9a:	3b01      	subs	r3, #1
 8018f9c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8018fa0:	9311      	str	r3, [sp, #68]	; 0x44
 8018fa2:	f10c 0c03 	add.w	ip, ip, #3
 8018fa6:	e601      	b.n	8018bac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8018fa8:	b151      	cbz	r1, 8018fc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8018faa:	5d52      	ldrb	r2, [r2, r5]
 8018fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018fae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018fb2:	4402      	add	r2, r0
 8018fb4:	4638      	mov	r0, r7
 8018fb6:	463e      	mov	r6, r7
 8018fb8:	e774      	b.n	8018ea4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8018fba:	4638      	mov	r0, r7
 8018fbc:	463a      	mov	r2, r7
 8018fbe:	e771      	b.n	8018ea4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8018fc0:	4638      	mov	r0, r7
 8018fc2:	463a      	mov	r2, r7
 8018fc4:	e7f7      	b.n	8018fb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8018fc6:	b015      	add	sp, #84	; 0x54
 8018fc8:	ecbd 8b08 	vpop	{d8-d11}
 8018fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8018fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd4:	780d      	ldrb	r5, [r1, #0]
 8018fd6:	f891 9002 	ldrb.w	r9, [r1, #2]
 8018fda:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8018fde:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8018fe2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8018fe6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018fea:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8018fee:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8018ff2:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8018ff6:	f891 9001 	ldrb.w	r9, [r1, #1]
 8018ffa:	fb06 470c 	mla	r7, r6, ip, r4
 8018ffe:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8019002:	2e00      	cmp	r6, #0
 8019004:	eb02 0e07 	add.w	lr, r2, r7
 8019008:	9501      	str	r5, [sp, #4]
 801900a:	db46      	blt.n	801909a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801900c:	45b0      	cmp	r8, r6
 801900e:	dd44      	ble.n	801909a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8019010:	2c00      	cmp	r4, #0
 8019012:	db40      	blt.n	8019096 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8019014:	45a4      	cmp	ip, r4
 8019016:	dd3e      	ble.n	8019096 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8019018:	5dd7      	ldrb	r7, [r2, r7]
 801901a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801901e:	441f      	add	r7, r3
 8019020:	1c62      	adds	r2, r4, #1
 8019022:	d43d      	bmi.n	80190a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8019024:	4594      	cmp	ip, r2
 8019026:	dd3b      	ble.n	80190a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8019028:	f1ba 0f00 	cmp.w	sl, #0
 801902c:	d038      	beq.n	80190a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801902e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8019032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019036:	441d      	add	r5, r3
 8019038:	3601      	adds	r6, #1
 801903a:	d435      	bmi.n	80190a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801903c:	45b0      	cmp	r8, r6
 801903e:	dd33      	ble.n	80190a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8019040:	b390      	cbz	r0, 80190a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8019042:	2c00      	cmp	r4, #0
 8019044:	db2e      	blt.n	80190a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8019046:	45a4      	cmp	ip, r4
 8019048:	dd2c      	ble.n	80190a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801904a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801904e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019052:	441e      	add	r6, r3
 8019054:	1c62      	adds	r2, r4, #1
 8019056:	d42a      	bmi.n	80190ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8019058:	4594      	cmp	ip, r2
 801905a:	dd28      	ble.n	80190ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801905c:	f1ba 0f00 	cmp.w	sl, #0
 8019060:	d025      	beq.n	80190ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8019062:	44f4      	add	ip, lr
 8019064:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019068:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801906c:	4413      	add	r3, r2
 801906e:	f1ba 0f0f 	cmp.w	sl, #15
 8019072:	f897 8000 	ldrb.w	r8, [r7]
 8019076:	f895 9000 	ldrb.w	r9, [r5]
 801907a:	f896 e000 	ldrb.w	lr, [r6]
 801907e:	f893 c000 	ldrb.w	ip, [r3]
 8019082:	d801      	bhi.n	8019088 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8019084:	280f      	cmp	r0, #15
 8019086:	d914      	bls.n	80190b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8019088:	4b29      	ldr	r3, [pc, #164]	; (8019130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801908a:	4a2a      	ldr	r2, [pc, #168]	; (8019134 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801908c:	482a      	ldr	r0, [pc, #168]	; (8019138 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801908e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8019092:	f004 fb4d 	bl	801d730 <__assert_func>
 8019096:	af01      	add	r7, sp, #4
 8019098:	e7c2      	b.n	8019020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801909a:	ad01      	add	r5, sp, #4
 801909c:	462f      	mov	r7, r5
 801909e:	e7cb      	b.n	8019038 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80190a0:	ad01      	add	r5, sp, #4
 80190a2:	e7c9      	b.n	8019038 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80190a4:	ae01      	add	r6, sp, #4
 80190a6:	e7d5      	b.n	8019054 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 80190a8:	ab01      	add	r3, sp, #4
 80190aa:	461e      	mov	r6, r3
 80190ac:	e7df      	b.n	801906e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80190ae:	ab01      	add	r3, sp, #4
 80190b0:	e7dd      	b.n	801906e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80190b2:	fa1f f48a 	uxth.w	r4, sl
 80190b6:	b280      	uxth	r0, r0
 80190b8:	fb04 fa00 	mul.w	sl, r4, r0
 80190bc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80190c0:	0124      	lsls	r4, r4, #4
 80190c2:	b282      	uxth	r2, r0
 80190c4:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80190c8:	eba4 000a 	sub.w	r0, r4, sl
 80190cc:	b280      	uxth	r0, r0
 80190ce:	ebab 0b02 	sub.w	fp, fp, r2
 80190d2:	fa1f fb8b 	uxth.w	fp, fp
 80190d6:	fb00 f909 	mul.w	r9, r0, r9
 80190da:	fb0b 9808 	mla	r8, fp, r8, r9
 80190de:	fb02 8e0e 	mla	lr, r2, lr, r8
 80190e2:	fb0a ec0c 	mla	ip, sl, ip, lr
 80190e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80190ea:	f881 c000 	strb.w	ip, [r1]
 80190ee:	786c      	ldrb	r4, [r5, #1]
 80190f0:	f897 c001 	ldrb.w	ip, [r7, #1]
 80190f4:	4344      	muls	r4, r0
 80190f6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80190fa:	7874      	ldrb	r4, [r6, #1]
 80190fc:	fb02 cc04 	mla	ip, r2, r4, ip
 8019100:	785c      	ldrb	r4, [r3, #1]
 8019102:	fb0a c404 	mla	r4, sl, r4, ip
 8019106:	1224      	asrs	r4, r4, #8
 8019108:	704c      	strb	r4, [r1, #1]
 801910a:	78ad      	ldrb	r5, [r5, #2]
 801910c:	78bc      	ldrb	r4, [r7, #2]
 801910e:	4368      	muls	r0, r5
 8019110:	fb0b 0b04 	mla	fp, fp, r4, r0
 8019114:	78b0      	ldrb	r0, [r6, #2]
 8019116:	fb02 b000 	mla	r0, r2, r0, fp
 801911a:	789a      	ldrb	r2, [r3, #2]
 801911c:	fb0a 0a02 	mla	sl, sl, r2, r0
 8019120:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019124:	f881 a002 	strb.w	sl, [r1, #2]
 8019128:	b003      	add	sp, #12
 801912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801912e:	bf00      	nop
 8019130:	080216c9 	.word	0x080216c9
 8019134:	08021bbe 	.word	0x08021bbe
 8019138:	08021792 	.word	0x08021792

0801913c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019140:	ed2d 8b0a 	vpush	{d8-d12}
 8019144:	b08f      	sub	sp, #60	; 0x3c
 8019146:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801914a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801914c:	9307      	str	r3, [sp, #28]
 801914e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8019152:	9309      	str	r3, [sp, #36]	; 0x24
 8019154:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8019158:	900d      	str	r0, [sp, #52]	; 0x34
 801915a:	6860      	ldr	r0, [r4, #4]
 801915c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801915e:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8019162:	fb00 1303 	mla	r3, r0, r3, r1
 8019166:	6821      	ldr	r1, [r4, #0]
 8019168:	6854      	ldr	r4, [r2, #4]
 801916a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801916e:	18cb      	adds	r3, r1, r3
 8019170:	9308      	str	r3, [sp, #32]
 8019172:	6813      	ldr	r3, [r2, #0]
 8019174:	930a      	str	r3, [sp, #40]	; 0x28
 8019176:	eeb0 aa40 	vmov.f32	s20, s0
 801917a:	eef0 9a60 	vmov.f32	s19, s1
 801917e:	eeb0 9a41 	vmov.f32	s18, s2
 8019182:	eeb0 8a62 	vmov.f32	s16, s5
 8019186:	eef0 8a43 	vmov.f32	s17, s6
 801918a:	eeb0 ca44 	vmov.f32	s24, s8
 801918e:	eef0 ba64 	vmov.f32	s23, s9
 8019192:	eeb0 ba45 	vmov.f32	s22, s10
 8019196:	3404      	adds	r4, #4
 8019198:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801919c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801919e:	2b00      	cmp	r3, #0
 80191a0:	dc03      	bgt.n	80191aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80191a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	f340 81d2 	ble.w	801954e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80191aa:	9b07      	ldr	r3, [sp, #28]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	f340 80e3 	ble.w	8019378 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80191b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80191b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80191b6:	1412      	asrs	r2, r2, #16
 80191b8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80191bc:	d42f      	bmi.n	801921e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80191be:	1c51      	adds	r1, r2, #1
 80191c0:	428d      	cmp	r5, r1
 80191c2:	dd2f      	ble.n	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	db2d      	blt.n	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80191c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191ca:	1c59      	adds	r1, r3, #1
 80191cc:	4288      	cmp	r0, r1
 80191ce:	dd29      	ble.n	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80191d0:	9b07      	ldr	r3, [sp, #28]
 80191d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80191d4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80191d6:	3b01      	subs	r3, #1
 80191d8:	fb02 1203 	mla	r2, r2, r3, r1
 80191dc:	1412      	asrs	r2, r2, #16
 80191de:	d42b      	bmi.n	8019238 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80191e0:	3201      	adds	r2, #1
 80191e2:	4295      	cmp	r5, r2
 80191e4:	dd28      	ble.n	8019238 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80191e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80191e8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80191ea:	fb02 1303 	mla	r3, r2, r3, r1
 80191ee:	141b      	asrs	r3, r3, #16
 80191f0:	d422      	bmi.n	8019238 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80191f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80191f4:	3301      	adds	r3, #1
 80191f6:	429a      	cmp	r2, r3
 80191f8:	dd1e      	ble.n	8019238 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80191fa:	9b08      	ldr	r3, [sp, #32]
 80191fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019200:	f103 0803 	add.w	r8, r3, #3
 8019204:	f1ba 0f00 	cmp.w	sl, #0
 8019208:	f300 8119 	bgt.w	801943e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801920c:	9b07      	ldr	r3, [sp, #28]
 801920e:	9a08      	ldr	r2, [sp, #32]
 8019210:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019218:	441a      	add	r2, r3
 801921a:	9208      	str	r2, [sp, #32]
 801921c:	e0ae      	b.n	801937c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801921e:	1c51      	adds	r1, r2, #1
 8019220:	f040 809b 	bne.w	801935a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8019224:	42aa      	cmp	r2, r5
 8019226:	f280 8098 	bge.w	801935a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801922a:	1c5a      	adds	r2, r3, #1
 801922c:	f2c0 8095 	blt.w	801935a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8019230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019232:	4293      	cmp	r3, r2
 8019234:	f280 8091 	bge.w	801935a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8019238:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801923c:	f1bb 0f00 	cmp.w	fp, #0
 8019240:	dde4      	ble.n	801920c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8019242:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019244:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8019246:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019248:	141a      	asrs	r2, r3, #16
 801924a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801924c:	1400      	asrs	r0, r0, #16
 801924e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019252:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8019256:	f100 80dc 	bmi.w	8019412 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801925a:	1c47      	adds	r7, r0, #1
 801925c:	42bd      	cmp	r5, r7
 801925e:	f340 80da 	ble.w	8019416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8019262:	2a00      	cmp	r2, #0
 8019264:	f2c0 80d7 	blt.w	8019416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8019268:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801926a:	f102 0c01 	add.w	ip, r2, #1
 801926e:	4567      	cmp	r7, ip
 8019270:	f340 80d1 	ble.w	8019416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8019274:	fb02 0005 	mla	r0, r2, r5, r0
 8019278:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801927a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801927c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8019280:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019284:	4402      	add	r2, r0
 8019286:	eb04 0c08 	add.w	ip, r4, r8
 801928a:	2b00      	cmp	r3, #0
 801928c:	f000 80b3 	beq.w	80193f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8019290:	7857      	ldrb	r7, [r2, #1]
 8019292:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019296:	4427      	add	r7, r4
 8019298:	2900      	cmp	r1, #0
 801929a:	f000 80b4 	beq.w	8019406 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801929e:	1950      	adds	r0, r2, r5
 80192a0:	5d52      	ldrb	r2, [r2, r5]
 80192a2:	7840      	ldrb	r0, [r0, #1]
 80192a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80192ac:	4422      	add	r2, r4
 80192ae:	4420      	add	r0, r4
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	b289      	uxth	r1, r1
 80192b4:	fb03 f901 	mul.w	r9, r3, r1
 80192b8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80192bc:	011b      	lsls	r3, r3, #4
 80192be:	f814 a008 	ldrb.w	sl, [r4, r8]
 80192c2:	f897 8000 	ldrb.w	r8, [r7]
 80192c6:	b289      	uxth	r1, r1
 80192c8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80192cc:	eba3 0309 	sub.w	r3, r3, r9
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	ebae 0e01 	sub.w	lr, lr, r1
 80192d6:	fa1f fe8e 	uxth.w	lr, lr
 80192da:	fb03 f808 	mul.w	r8, r3, r8
 80192de:	fb0e 880a 	mla	r8, lr, sl, r8
 80192e2:	f892 a000 	ldrb.w	sl, [r2]
 80192e6:	fb01 880a 	mla	r8, r1, sl, r8
 80192ea:	f890 a000 	ldrb.w	sl, [r0]
 80192ee:	fb09 880a 	mla	r8, r9, sl, r8
 80192f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80192f6:	f886 8000 	strb.w	r8, [r6]
 80192fa:	f897 8001 	ldrb.w	r8, [r7, #1]
 80192fe:	f89c a001 	ldrb.w	sl, [ip, #1]
 8019302:	fb03 f808 	mul.w	r8, r3, r8
 8019306:	fb0e 880a 	mla	r8, lr, sl, r8
 801930a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801930e:	fb01 880a 	mla	r8, r1, sl, r8
 8019312:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019316:	fb09 880a 	mla	r8, r9, sl, r8
 801931a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801931e:	f886 8001 	strb.w	r8, [r6, #1]
 8019322:	78bf      	ldrb	r7, [r7, #2]
 8019324:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019328:	7892      	ldrb	r2, [r2, #2]
 801932a:	437b      	muls	r3, r7
 801932c:	fb0e 330c 	mla	r3, lr, ip, r3
 8019330:	fb01 3102 	mla	r1, r1, r2, r3
 8019334:	7882      	ldrb	r2, [r0, #2]
 8019336:	fb09 1902 	mla	r9, r9, r2, r1
 801933a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801933e:	f886 9002 	strb.w	r9, [r6, #2]
 8019342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019344:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019346:	4413      	add	r3, r2
 8019348:	9323      	str	r3, [sp, #140]	; 0x8c
 801934a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801934c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801934e:	4413      	add	r3, r2
 8019350:	3603      	adds	r6, #3
 8019352:	9324      	str	r3, [sp, #144]	; 0x90
 8019354:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019358:	e770      	b.n	801923c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801935a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801935c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801935e:	4413      	add	r3, r2
 8019360:	9323      	str	r3, [sp, #140]	; 0x8c
 8019362:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019364:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019366:	4413      	add	r3, r2
 8019368:	9324      	str	r3, [sp, #144]	; 0x90
 801936a:	9b07      	ldr	r3, [sp, #28]
 801936c:	3b01      	subs	r3, #1
 801936e:	9307      	str	r3, [sp, #28]
 8019370:	9b08      	ldr	r3, [sp, #32]
 8019372:	3303      	adds	r3, #3
 8019374:	9308      	str	r3, [sp, #32]
 8019376:	e718      	b.n	80191aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019378:	f47f af2a 	bne.w	80191d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801937c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801937e:	2b00      	cmp	r3, #0
 8019380:	f340 80e5 	ble.w	801954e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8019384:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8019388:	ee79 9aab 	vadd.f32	s19, s19, s23
 801938c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8019390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019392:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8019396:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801939a:	eef0 6a48 	vmov.f32	s13, s16
 801939e:	ee69 7a27 	vmul.f32	s15, s18, s15
 80193a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80193aa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80193ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80193b2:	eef0 6a68 	vmov.f32	s13, s17
 80193b6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80193ba:	ee18 2a10 	vmov	r2, s16
 80193be:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80193c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80193c6:	ee18 2a90 	vmov	r2, s17
 80193ca:	9325      	str	r3, [sp, #148]	; 0x94
 80193cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80193ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80193d2:	9326      	str	r3, [sp, #152]	; 0x98
 80193d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193d8:	3b01      	subs	r3, #1
 80193da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193de:	930b      	str	r3, [sp, #44]	; 0x2c
 80193e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80193e2:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 80193e6:	bf08      	it	eq
 80193e8:	4613      	moveq	r3, r2
 80193ea:	9307      	str	r3, [sp, #28]
 80193ec:	eef0 8a67 	vmov.f32	s17, s15
 80193f0:	eeb0 8a47 	vmov.f32	s16, s14
 80193f4:	e6d2      	b.n	801919c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80193f6:	b149      	cbz	r1, 801940c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80193f8:	5d52      	ldrb	r2, [r2, r5]
 80193fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80193fe:	4422      	add	r2, r4
 8019400:	4660      	mov	r0, ip
 8019402:	4667      	mov	r7, ip
 8019404:	e754      	b.n	80192b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8019406:	4660      	mov	r0, ip
 8019408:	4662      	mov	r2, ip
 801940a:	e751      	b.n	80192b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801940c:	4660      	mov	r0, ip
 801940e:	4662      	mov	r2, ip
 8019410:	e7f7      	b.n	8019402 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8019412:	1c47      	adds	r7, r0, #1
 8019414:	d195      	bne.n	8019342 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8019416:	4285      	cmp	r5, r0
 8019418:	dd93      	ble.n	8019342 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801941a:	1c57      	adds	r7, r2, #1
 801941c:	db91      	blt.n	8019342 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801941e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019420:	4297      	cmp	r7, r2
 8019422:	dd8e      	ble.n	8019342 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8019424:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019428:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801942c:	e9cd 5700 	strd	r5, r7, [sp]
 8019430:	4623      	mov	r3, r4
 8019432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019434:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019436:	4631      	mov	r1, r6
 8019438:	f7ff fdca 	bl	8018fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801943c:	e781      	b.n	8019342 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801943e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019440:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019444:	1410      	asrs	r0, r2, #16
 8019446:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801944a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801944c:	1412      	asrs	r2, r2, #16
 801944e:	fb05 2000 	mla	r0, r5, r0, r2
 8019452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019454:	f816 e000 	ldrb.w	lr, [r6, r0]
 8019458:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801945c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019460:	4402      	add	r2, r0
 8019462:	eb04 070e 	add.w	r7, r4, lr
 8019466:	2b00      	cmp	r3, #0
 8019468:	d063      	beq.n	8019532 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801946a:	7856      	ldrb	r6, [r2, #1]
 801946c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019470:	4426      	add	r6, r4
 8019472:	2900      	cmp	r1, #0
 8019474:	d065      	beq.n	8019542 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8019476:	1950      	adds	r0, r2, r5
 8019478:	5d52      	ldrb	r2, [r2, r5]
 801947a:	7840      	ldrb	r0, [r0, #1]
 801947c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019484:	4422      	add	r2, r4
 8019486:	4420      	add	r0, r4
 8019488:	b29b      	uxth	r3, r3
 801948a:	b289      	uxth	r1, r1
 801948c:	fb03 f901 	mul.w	r9, r3, r1
 8019490:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019494:	011b      	lsls	r3, r3, #4
 8019496:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801949a:	f896 e000 	ldrb.w	lr, [r6]
 801949e:	b289      	uxth	r1, r1
 80194a0:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80194a4:	eba3 0309 	sub.w	r3, r3, r9
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	ebac 0c01 	sub.w	ip, ip, r1
 80194ae:	fa1f fc8c 	uxth.w	ip, ip
 80194b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80194b6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80194ba:	f892 b000 	ldrb.w	fp, [r2]
 80194be:	fb01 ee0b 	mla	lr, r1, fp, lr
 80194c2:	f890 b000 	ldrb.w	fp, [r0]
 80194c6:	fb09 ee0b 	mla	lr, r9, fp, lr
 80194ca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80194ce:	f808 ec03 	strb.w	lr, [r8, #-3]
 80194d2:	f896 e001 	ldrb.w	lr, [r6, #1]
 80194d6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80194da:	fb03 fe0e 	mul.w	lr, r3, lr
 80194de:	fb0c ee0b 	mla	lr, ip, fp, lr
 80194e2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80194e6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80194ea:	f890 b001 	ldrb.w	fp, [r0, #1]
 80194ee:	fb09 ee0b 	mla	lr, r9, fp, lr
 80194f2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80194f6:	f808 ec02 	strb.w	lr, [r8, #-2]
 80194fa:	78b6      	ldrb	r6, [r6, #2]
 80194fc:	78bf      	ldrb	r7, [r7, #2]
 80194fe:	4373      	muls	r3, r6
 8019500:	7896      	ldrb	r6, [r2, #2]
 8019502:	7882      	ldrb	r2, [r0, #2]
 8019504:	fb0c 3307 	mla	r3, ip, r7, r3
 8019508:	fb01 3306 	mla	r3, r1, r6, r3
 801950c:	fb09 3902 	mla	r9, r9, r2, r3
 8019510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019512:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019514:	4413      	add	r3, r2
 8019516:	9323      	str	r3, [sp, #140]	; 0x8c
 8019518:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801951a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801951c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019520:	4413      	add	r3, r2
 8019522:	f808 9c01 	strb.w	r9, [r8, #-1]
 8019526:	9324      	str	r3, [sp, #144]	; 0x90
 8019528:	f108 0803 	add.w	r8, r8, #3
 801952c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019530:	e668      	b.n	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019532:	b149      	cbz	r1, 8019548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8019534:	5d52      	ldrb	r2, [r2, r5]
 8019536:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801953a:	4422      	add	r2, r4
 801953c:	4638      	mov	r0, r7
 801953e:	463e      	mov	r6, r7
 8019540:	e7a2      	b.n	8019488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8019542:	4638      	mov	r0, r7
 8019544:	463a      	mov	r2, r7
 8019546:	e79f      	b.n	8019488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8019548:	4638      	mov	r0, r7
 801954a:	463a      	mov	r2, r7
 801954c:	e7f7      	b.n	801953e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801954e:	b00f      	add	sp, #60	; 0x3c
 8019550:	ecbd 8b0a 	vpop	{d8-d12}
 8019554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8019558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801955c:	b087      	sub	sp, #28
 801955e:	7888      	ldrb	r0, [r1, #2]
 8019560:	9002      	str	r0, [sp, #8]
 8019562:	7848      	ldrb	r0, [r1, #1]
 8019564:	9003      	str	r0, [sp, #12]
 8019566:	7808      	ldrb	r0, [r1, #0]
 8019568:	9e02      	ldr	r6, [sp, #8]
 801956a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801956e:	9004      	str	r0, [sp, #16]
 8019570:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8019574:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019578:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801957c:	9e03      	ldr	r6, [sp, #12]
 801957e:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8019582:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8019586:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801958a:	fb04 7508 	mla	r5, r4, r8, r7
 801958e:	2c00      	cmp	r4, #0
 8019590:	eb02 0905 	add.w	r9, r2, r5
 8019594:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8019598:	db45      	blt.n	8019626 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801959a:	45a2      	cmp	sl, r4
 801959c:	dd43      	ble.n	8019626 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801959e:	2f00      	cmp	r7, #0
 80195a0:	db3f      	blt.n	8019622 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80195a2:	45b8      	cmp	r8, r7
 80195a4:	dd3d      	ble.n	8019622 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80195a6:	5d52      	ldrb	r2, [r2, r5]
 80195a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80195ac:	1c7a      	adds	r2, r7, #1
 80195ae:	d43d      	bmi.n	801962c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80195b0:	4590      	cmp	r8, r2
 80195b2:	dd3b      	ble.n	801962c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80195b4:	f1bc 0f00 	cmp.w	ip, #0
 80195b8:	d038      	beq.n	801962c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80195ba:	f899 2001 	ldrb.w	r2, [r9, #1]
 80195be:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80195c2:	3401      	adds	r4, #1
 80195c4:	d436      	bmi.n	8019634 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80195c6:	45a2      	cmp	sl, r4
 80195c8:	dd34      	ble.n	8019634 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80195ca:	f1be 0f00 	cmp.w	lr, #0
 80195ce:	d031      	beq.n	8019634 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80195d0:	2f00      	cmp	r7, #0
 80195d2:	db2d      	blt.n	8019630 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80195d4:	45b8      	cmp	r8, r7
 80195d6:	dd2b      	ble.n	8019630 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80195d8:	f819 2008 	ldrb.w	r2, [r9, r8]
 80195dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80195e0:	3701      	adds	r7, #1
 80195e2:	d409      	bmi.n	80195f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80195e4:	45b8      	cmp	r8, r7
 80195e6:	dd07      	ble.n	80195f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80195e8:	f1bc 0f00 	cmp.w	ip, #0
 80195ec:	d004      	beq.n	80195f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80195ee:	44c8      	add	r8, r9
 80195f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80195f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80195f8:	f1bc 0f0f 	cmp.w	ip, #15
 80195fc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019600:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8019604:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019608:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801960c:	d802      	bhi.n	8019614 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801960e:	f1be 0f0f 	cmp.w	lr, #15
 8019612:	d911      	bls.n	8019638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8019614:	4b77      	ldr	r3, [pc, #476]	; (80197f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8019616:	4a78      	ldr	r2, [pc, #480]	; (80197f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8019618:	4878      	ldr	r0, [pc, #480]	; (80197fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801961a:	f240 11a5 	movw	r1, #421	; 0x1a5
 801961e:	f004 f887 	bl	801d730 <__assert_func>
 8019622:	4606      	mov	r6, r0
 8019624:	e7c2      	b.n	80195ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8019626:	4605      	mov	r5, r0
 8019628:	4606      	mov	r6, r0
 801962a:	e7ca      	b.n	80195c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801962c:	4605      	mov	r5, r0
 801962e:	e7c8      	b.n	80195c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8019630:	4604      	mov	r4, r0
 8019632:	e7d5      	b.n	80195e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8019634:	4604      	mov	r4, r0
 8019636:	e7df      	b.n	80195f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8019638:	fa1f fc8c 	uxth.w	ip, ip
 801963c:	fa1f f28e 	uxth.w	r2, lr
 8019640:	fb02 fe0c 	mul.w	lr, r2, ip
 8019644:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8019648:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801964c:	ebac 070e 	sub.w	r7, ip, lr
 8019650:	b292      	uxth	r2, r2
 8019652:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8019656:	b2bf      	uxth	r7, r7
 8019658:	1a9b      	subs	r3, r3, r2
 801965a:	b29b      	uxth	r3, r3
 801965c:	fb07 fc0a 	mul.w	ip, r7, sl
 8019660:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019664:	fb02 cc09 	mla	ip, r2, r9, ip
 8019668:	fb0e cc08 	mla	ip, lr, r8, ip
 801966c:	9301      	str	r3, [sp, #4]
 801966e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019672:	9305      	str	r3, [sp, #20]
 8019674:	2b00      	cmp	r3, #0
 8019676:	f000 80b9 	beq.w	80197ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801967a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801967e:	fb0b fc0c 	mul.w	ip, fp, ip
 8019682:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019686:	fb0b f606 	mul.w	r6, fp, r6
 801968a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801968e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019692:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019696:	44dc      	add	ip, fp
 8019698:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801969c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80196a0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80196a4:	fb0a fb0b 	mul.w	fp, sl, fp
 80196a8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80196ac:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80196b0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80196b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80196b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80196bc:	44dc      	add	ip, fp
 80196be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80196c2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80196c6:	fb09 fb0b 	mul.w	fp, r9, fp
 80196ca:	fb09 f904 	mul.w	r9, r9, r4
 80196ce:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80196d2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80196d6:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 80196da:	fb08 f404 	mul.w	r4, r8, r4
 80196de:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80196e2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80196e6:	fb08 f800 	mul.w	r8, r8, r0
 80196ea:	fb0a fa05 	mul.w	sl, sl, r5
 80196ee:	0a20      	lsrs	r0, r4, #8
 80196f0:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 80196f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80196f8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80196fc:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8019700:	4404      	add	r4, r0
 8019702:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8019706:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801970a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801970e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8019712:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019716:	9801      	ldr	r0, [sp, #4]
 8019718:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801971c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019720:	fb0c fc07 	mul.w	ip, ip, r7
 8019724:	445d      	add	r5, fp
 8019726:	0a24      	lsrs	r4, r4, #8
 8019728:	fb03 cc00 	mla	ip, r3, r0, ip
 801972c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019730:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019734:	0a2d      	lsrs	r5, r5, #8
 8019736:	fb04 cc0e 	mla	ip, r4, lr, ip
 801973a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801973e:	0a36      	lsrs	r6, r6, #8
 8019740:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019744:	fb05 cc02 	mla	ip, r5, r2, ip
 8019748:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801974c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019750:	fb07 f70a 	mul.w	r7, r7, sl
 8019754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019758:	fb00 7606 	mla	r6, r0, r6, r7
 801975c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019760:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019764:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8019768:	fb0e 6e08 	mla	lr, lr, r8, r6
 801976c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8019770:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8019774:	9c04      	ldr	r4, [sp, #16]
 8019776:	fb02 ec0c 	mla	ip, r2, ip, lr
 801977a:	9a05      	ldr	r2, [sp, #20]
 801977c:	b280      	uxth	r0, r0
 801977e:	4342      	muls	r2, r0
 8019780:	1c53      	adds	r3, r2, #1
 8019782:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019786:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801978a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801978e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8019792:	ea45 0c0c 	orr.w	ip, r5, ip
 8019796:	b2db      	uxtb	r3, r3
 8019798:	fb14 f403 	smulbb	r4, r4, r3
 801979c:	fa5f f28c 	uxtb.w	r2, ip
 80197a0:	fb02 4200 	mla	r2, r2, r0, r4
 80197a4:	b292      	uxth	r2, r2
 80197a6:	1c54      	adds	r4, r2, #1
 80197a8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80197ac:	9c03      	ldr	r4, [sp, #12]
 80197ae:	1212      	asrs	r2, r2, #8
 80197b0:	fb14 f403 	smulbb	r4, r4, r3
 80197b4:	700a      	strb	r2, [r1, #0]
 80197b6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80197ba:	fb02 4200 	mla	r2, r2, r0, r4
 80197be:	b292      	uxth	r2, r2
 80197c0:	1c54      	adds	r4, r2, #1
 80197c2:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80197c6:	1212      	asrs	r2, r2, #8
 80197c8:	704a      	strb	r2, [r1, #1]
 80197ca:	9a02      	ldr	r2, [sp, #8]
 80197cc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80197d0:	fb12 f303 	smulbb	r3, r2, r3
 80197d4:	fb0c 3c00 	mla	ip, ip, r0, r3
 80197d8:	fa1f fc8c 	uxth.w	ip, ip
 80197dc:	f10c 0301 	add.w	r3, ip, #1
 80197e0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80197e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80197e8:	f881 c002 	strb.w	ip, [r1, #2]
 80197ec:	b007      	add	sp, #28
 80197ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197f2:	bf00      	nop
 80197f4:	080216c9 	.word	0x080216c9
 80197f8:	08021bbe 	.word	0x08021bbe
 80197fc:	08021792 	.word	0x08021792

08019800 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019804:	ed2d 8b08 	vpush	{d8-d11}
 8019808:	b09b      	sub	sp, #108	; 0x6c
 801980a:	eeb0 aa40 	vmov.f32	s20, s0
 801980e:	930a      	str	r3, [sp, #40]	; 0x28
 8019810:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8019814:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8019816:	9312      	str	r3, [sp, #72]	; 0x48
 8019818:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801981c:	9114      	str	r1, [sp, #80]	; 0x50
 801981e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019820:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8019824:	9019      	str	r0, [sp, #100]	; 0x64
 8019826:	6868      	ldr	r0, [r5, #4]
 8019828:	9218      	str	r2, [sp, #96]	; 0x60
 801982a:	fb00 1303 	mla	r3, r0, r3, r1
 801982e:	6829      	ldr	r1, [r5, #0]
 8019830:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8019832:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8019836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801983a:	18cb      	adds	r3, r1, r3
 801983c:	930d      	str	r3, [sp, #52]	; 0x34
 801983e:	6813      	ldr	r3, [r2, #0]
 8019840:	9313      	str	r3, [sp, #76]	; 0x4c
 8019842:	6853      	ldr	r3, [r2, #4]
 8019844:	3304      	adds	r3, #4
 8019846:	eef0 9a60 	vmov.f32	s19, s1
 801984a:	eeb0 9a41 	vmov.f32	s18, s2
 801984e:	eeb0 8a62 	vmov.f32	s16, s5
 8019852:	eef0 8a43 	vmov.f32	s17, s6
 8019856:	eef0 ba44 	vmov.f32	s23, s8
 801985a:	eeb0 ba64 	vmov.f32	s22, s9
 801985e:	eef0 aa45 	vmov.f32	s21, s10
 8019862:	9309      	str	r3, [sp, #36]	; 0x24
 8019864:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019866:	2b00      	cmp	r3, #0
 8019868:	dc03      	bgt.n	8019872 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801986a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801986c:	2b00      	cmp	r3, #0
 801986e:	f340 8353 	ble.w	8019f18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8019872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019874:	2b00      	cmp	r3, #0
 8019876:	f340 81a3 	ble.w	8019bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c0>
 801987a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801987c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801987e:	1412      	asrs	r2, r2, #16
 8019880:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019884:	d431      	bmi.n	80198ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8019886:	1c51      	adds	r1, r2, #1
 8019888:	428c      	cmp	r4, r1
 801988a:	dd31      	ble.n	80198f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801988c:	2b00      	cmp	r3, #0
 801988e:	db2f      	blt.n	80198f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8019890:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019892:	1c59      	adds	r1, r3, #1
 8019894:	4288      	cmp	r0, r1
 8019896:	dd2b      	ble.n	80198f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8019898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801989a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801989c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801989e:	3b01      	subs	r3, #1
 80198a0:	fb02 1203 	mla	r2, r2, r3, r1
 80198a4:	1412      	asrs	r2, r2, #16
 80198a6:	d42d      	bmi.n	8019904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80198a8:	3201      	adds	r2, #1
 80198aa:	4294      	cmp	r4, r2
 80198ac:	dd2a      	ble.n	8019904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80198ae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80198b0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80198b2:	fb02 1303 	mla	r3, r2, r3, r1
 80198b6:	141b      	asrs	r3, r3, #16
 80198b8:	d424      	bmi.n	8019904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80198ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198bc:	3301      	adds	r3, #1
 80198be:	429a      	cmp	r2, r3
 80198c0:	dd20      	ble.n	8019904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80198c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198c4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80198c8:	f103 0e03 	add.w	lr, r3, #3
 80198cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198ce:	9315      	str	r3, [sp, #84]	; 0x54
 80198d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	f300 81df 	bgt.w	8019c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x496>
 80198d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80198dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80198e4:	441a      	add	r2, r3
 80198e6:	920d      	str	r2, [sp, #52]	; 0x34
 80198e8:	e16c      	b.n	8019bc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c4>
 80198ea:	1c51      	adds	r1, r2, #1
 80198ec:	f040 8159 	bne.w	8019ba2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 80198f0:	42a2      	cmp	r2, r4
 80198f2:	f280 8156 	bge.w	8019ba2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 80198f6:	1c5a      	adds	r2, r3, #1
 80198f8:	f2c0 8153 	blt.w	8019ba2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 80198fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198fe:	4293      	cmp	r3, r2
 8019900:	f280 814f 	bge.w	8019ba2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8019904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019906:	9316      	str	r3, [sp, #88]	; 0x58
 8019908:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801990a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801990e:	9315      	str	r3, [sp, #84]	; 0x54
 8019910:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019912:	2b00      	cmp	r3, #0
 8019914:	dde0      	ble.n	80198d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8019916:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019918:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801991a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801991e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8019920:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019924:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019926:	1412      	asrs	r2, r2, #16
 8019928:	ea4f 4323 	mov.w	r3, r3, asr #16
 801992c:	f100 819a 	bmi.w	8019c64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x464>
 8019930:	1c55      	adds	r5, r2, #1
 8019932:	42ac      	cmp	r4, r5
 8019934:	f340 8198 	ble.w	8019c68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 8019938:	2b00      	cmp	r3, #0
 801993a:	f2c0 8195 	blt.w	8019c68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 801993e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8019940:	1c5d      	adds	r5, r3, #1
 8019942:	42af      	cmp	r7, r5
 8019944:	f340 8190 	ble.w	8019c68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 8019948:	fb03 2304 	mla	r3, r3, r4, r2
 801994c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801994e:	18d5      	adds	r5, r2, r3
 8019950:	5cd3      	ldrb	r3, [r2, r3]
 8019952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019958:	0e1f      	lsrs	r7, r3, #24
 801995a:	2800      	cmp	r0, #0
 801995c:	f000 8171 	beq.w	8019c42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x442>
 8019960:	f895 c001 	ldrb.w	ip, [r5, #1]
 8019964:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019968:	920e      	str	r2, [sp, #56]	; 0x38
 801996a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801996e:	2900      	cmp	r1, #0
 8019970:	f000 8172 	beq.w	8019c58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x458>
 8019974:	eb05 0c04 	add.w	ip, r5, r4
 8019978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801997a:	5d2d      	ldrb	r5, [r5, r4]
 801997c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8019980:	950b      	str	r5, [sp, #44]	; 0x2c
 8019982:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019986:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801998a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801998c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019990:	920f      	str	r2, [sp, #60]	; 0x3c
 8019992:	0e15      	lsrs	r5, r2, #24
 8019994:	b280      	uxth	r0, r0
 8019996:	b289      	uxth	r1, r1
 8019998:	fb00 fa01 	mul.w	sl, r0, r1
 801999c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80199a0:	0100      	lsls	r0, r0, #4
 80199a2:	eba0 080a 	sub.w	r8, r0, sl
 80199a6:	b289      	uxth	r1, r1
 80199a8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80199ac:	fa1f f888 	uxth.w	r8, r8
 80199b0:	1a52      	subs	r2, r2, r1
 80199b2:	b292      	uxth	r2, r2
 80199b4:	fb08 f00e 	mul.w	r0, r8, lr
 80199b8:	fb02 0007 	mla	r0, r2, r7, r0
 80199bc:	fb01 0009 	mla	r0, r1, r9, r0
 80199c0:	fb0a 0005 	mla	r0, sl, r5, r0
 80199c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80199c8:	2800      	cmp	r0, #0
 80199ca:	f000 80dd 	beq.w	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80199ce:	2fff      	cmp	r7, #255	; 0xff
 80199d0:	d01a      	beq.n	8019a08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 80199d2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80199d6:	fb07 fc0c 	mul.w	ip, r7, ip
 80199da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80199de:	435f      	muls	r7, r3
 80199e0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80199e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80199e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80199ec:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80199f0:	4463      	add	r3, ip
 80199f2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80199f6:	0a1b      	lsrs	r3, r3, #8
 80199f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80199fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019a00:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8019a04:	ea43 030b 	orr.w	r3, r3, fp
 8019a08:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019a0c:	d01e      	beq.n	8019a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24c>
 8019a0e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019a10:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8019a14:	fb0e fb0b 	mul.w	fp, lr, fp
 8019a18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019a1c:	fb0e fe07 	mul.w	lr, lr, r7
 8019a20:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019a24:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8019a28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a30:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8019a34:	44dc      	add	ip, fp
 8019a36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019a3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a42:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019a46:	ea4c 070e 	orr.w	r7, ip, lr
 8019a4a:	970e      	str	r7, [sp, #56]	; 0x38
 8019a4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019a50:	d01e      	beq.n	8019a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8019a52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019a54:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8019a58:	fb09 fe0e 	mul.w	lr, r9, lr
 8019a5c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019a60:	fb09 f907 	mul.w	r9, r9, r7
 8019a64:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019a68:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8019a6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a70:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8019a74:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019a78:	44f4      	add	ip, lr
 8019a7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019a82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a86:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019a8a:	ea4c 0709 	orr.w	r7, ip, r9
 8019a8e:	970b      	str	r7, [sp, #44]	; 0x2c
 8019a90:	2dff      	cmp	r5, #255	; 0xff
 8019a92:	d01c      	beq.n	8019ace <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8019a94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019a96:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8019a9a:	fb05 fe0e 	mul.w	lr, r5, lr
 8019a9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019aa2:	437d      	muls	r5, r7
 8019aa4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019aa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019aac:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8019ab0:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8019ab4:	44f4      	add	ip, lr
 8019ab6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8019aba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019abe:	0a2d      	lsrs	r5, r5, #8
 8019ac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ac4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019ac8:	ea4c 0505 	orr.w	r5, ip, r5
 8019acc:	950f      	str	r5, [sp, #60]	; 0x3c
 8019ace:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019ad0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019ad4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8019ad8:	fb08 f505 	mul.w	r5, r8, r5
 8019adc:	fb02 5507 	mla	r5, r2, r7, r5
 8019ae0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019ae2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019ae6:	fb01 5507 	mla	r5, r1, r7, r5
 8019aea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019aec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019af0:	fb0a 5507 	mla	r5, sl, r7, r5
 8019af4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019af6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019afa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019afe:	fb08 f807 	mul.w	r8, r8, r7
 8019b02:	fb02 8303 	mla	r3, r2, r3, r8
 8019b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019b08:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b0e:	fb01 330c 	mla	r3, r1, ip, r3
 8019b12:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019b16:	fb0a 3a01 	mla	sl, sl, r1, r3
 8019b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b1c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019b1e:	4343      	muls	r3, r0
 8019b20:	0a2d      	lsrs	r5, r5, #8
 8019b22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b26:	1c58      	adds	r0, r3, #1
 8019b28:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019b2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b30:	ea45 050a 	orr.w	r5, r5, sl
 8019b34:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019b38:	b2ea      	uxtb	r2, r5
 8019b3a:	7833      	ldrb	r3, [r6, #0]
 8019b3c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019b40:	b2c0      	uxtb	r0, r0
 8019b42:	fb12 f201 	smulbb	r2, r2, r1
 8019b46:	fb03 2300 	mla	r3, r3, r0, r2
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	1c5a      	adds	r2, r3, #1
 8019b4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b52:	7872      	ldrb	r2, [r6, #1]
 8019b54:	121b      	asrs	r3, r3, #8
 8019b56:	fb12 f200 	smulbb	r2, r2, r0
 8019b5a:	7033      	strb	r3, [r6, #0]
 8019b5c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019b60:	fb03 2301 	mla	r3, r3, r1, r2
 8019b64:	b29b      	uxth	r3, r3
 8019b66:	1c5a      	adds	r2, r3, #1
 8019b68:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b6c:	121b      	asrs	r3, r3, #8
 8019b6e:	7073      	strb	r3, [r6, #1]
 8019b70:	78b3      	ldrb	r3, [r6, #2]
 8019b72:	0c2d      	lsrs	r5, r5, #16
 8019b74:	fb13 f000 	smulbb	r0, r3, r0
 8019b78:	fb05 0501 	mla	r5, r5, r1, r0
 8019b7c:	b2ad      	uxth	r5, r5
 8019b7e:	1c6b      	adds	r3, r5, #1
 8019b80:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019b84:	122d      	asrs	r5, r5, #8
 8019b86:	70b5      	strb	r5, [r6, #2]
 8019b88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019b8a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019b8c:	4413      	add	r3, r2
 8019b8e:	932d      	str	r3, [sp, #180]	; 0xb4
 8019b90:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8019b92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019b94:	4413      	add	r3, r2
 8019b96:	932e      	str	r3, [sp, #184]	; 0xb8
 8019b98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019b9a:	3b01      	subs	r3, #1
 8019b9c:	3603      	adds	r6, #3
 8019b9e:	9316      	str	r3, [sp, #88]	; 0x58
 8019ba0:	e6b6      	b.n	8019910 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8019ba2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019ba4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019ba6:	4413      	add	r3, r2
 8019ba8:	932d      	str	r3, [sp, #180]	; 0xb4
 8019baa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8019bac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019bae:	4413      	add	r3, r2
 8019bb0:	932e      	str	r3, [sp, #184]	; 0xb8
 8019bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bb4:	3b01      	subs	r3, #1
 8019bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8019bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bba:	3303      	adds	r3, #3
 8019bbc:	930d      	str	r3, [sp, #52]	; 0x34
 8019bbe:	e658      	b.n	8019872 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019bc0:	f47f ae6a 	bne.w	8019898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019bc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	f340 81a6 	ble.w	8019f18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8019bcc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019bd4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019bd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019bda:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019bde:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019be2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019be6:	eef0 6a48 	vmov.f32	s13, s16
 8019bea:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019bee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019bf2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019bf6:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8019bfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019bfe:	eef0 6a68 	vmov.f32	s13, s17
 8019c02:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019c06:	ee18 2a10 	vmov	r2, s16
 8019c0a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c12:	ee18 2a90 	vmov	r2, s17
 8019c16:	932f      	str	r3, [sp, #188]	; 0xbc
 8019c18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c1e:	9330      	str	r3, [sp, #192]	; 0xc0
 8019c20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019c22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019c24:	3b01      	subs	r3, #1
 8019c26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c2a:	9314      	str	r3, [sp, #80]	; 0x50
 8019c2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c2e:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8019c32:	bf08      	it	eq
 8019c34:	4613      	moveq	r3, r2
 8019c36:	930a      	str	r3, [sp, #40]	; 0x28
 8019c38:	eef0 8a67 	vmov.f32	s17, s15
 8019c3c:	eeb0 8a47 	vmov.f32	s16, s14
 8019c40:	e610      	b.n	8019864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019c42:	b161      	cbz	r1, 8019c5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8019c44:	5d2a      	ldrb	r2, [r5, r4]
 8019c46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019c48:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019c4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8019c4e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8019c52:	25ff      	movs	r5, #255	; 0xff
 8019c54:	46ae      	mov	lr, r5
 8019c56:	e69d      	b.n	8019994 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x194>
 8019c58:	25ff      	movs	r5, #255	; 0xff
 8019c5a:	46a9      	mov	r9, r5
 8019c5c:	e69a      	b.n	8019994 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x194>
 8019c5e:	25ff      	movs	r5, #255	; 0xff
 8019c60:	46a9      	mov	r9, r5
 8019c62:	e7f7      	b.n	8019c54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8019c64:	1c57      	adds	r7, r2, #1
 8019c66:	d18f      	bne.n	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8019c68:	4294      	cmp	r4, r2
 8019c6a:	dd8d      	ble.n	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8019c6c:	1c5d      	adds	r5, r3, #1
 8019c6e:	db8b      	blt.n	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8019c70:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019c72:	429d      	cmp	r5, r3
 8019c74:	dd88      	ble.n	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8019c76:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8019c7a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019c7e:	9202      	str	r2, [sp, #8]
 8019c80:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8019c84:	e9cd 4300 	strd	r4, r3, [sp]
 8019c88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c8c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019c8e:	4631      	mov	r1, r6
 8019c90:	f7ff fc62 	bl	8019558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8019c94:	e778      	b.n	8019b88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8019c96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019c98:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019c9a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8019c9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019ca0:	1412      	asrs	r2, r2, #16
 8019ca2:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8019ca6:	141b      	asrs	r3, r3, #16
 8019ca8:	fb04 2303 	mla	r3, r4, r3, r2
 8019cac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019cae:	18d5      	adds	r5, r2, r3
 8019cb0:	5cd3      	ldrb	r3, [r2, r3]
 8019cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019cb8:	0e1e      	lsrs	r6, r3, #24
 8019cba:	2900      	cmp	r1, #0
 8019cbc:	f000 811b 	beq.w	8019ef6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8019cc0:	786a      	ldrb	r2, [r5, #1]
 8019cc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019cc4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8019cc8:	9210      	str	r2, [sp, #64]	; 0x40
 8019cca:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019cce:	2800      	cmp	r0, #0
 8019cd0:	f000 811c 	beq.w	8019f0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 8019cd4:	192a      	adds	r2, r5, r4
 8019cd6:	5d2d      	ldrb	r5, [r5, r4]
 8019cd8:	7852      	ldrb	r2, [r2, #1]
 8019cda:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8019cde:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8019ce2:	950c      	str	r5, [sp, #48]	; 0x30
 8019ce4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019ce8:	9211      	str	r2, [sp, #68]	; 0x44
 8019cea:	0e15      	lsrs	r5, r2, #24
 8019cec:	b289      	uxth	r1, r1
 8019cee:	b280      	uxth	r0, r0
 8019cf0:	fb01 fa00 	mul.w	sl, r1, r0
 8019cf4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8019cf8:	0109      	lsls	r1, r1, #4
 8019cfa:	eba1 080a 	sub.w	r8, r1, sl
 8019cfe:	b280      	uxth	r0, r0
 8019d00:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8019d04:	fa1f f888 	uxth.w	r8, r8
 8019d08:	1a12      	subs	r2, r2, r0
 8019d0a:	b292      	uxth	r2, r2
 8019d0c:	fb08 f10c 	mul.w	r1, r8, ip
 8019d10:	fb02 1106 	mla	r1, r2, r6, r1
 8019d14:	fb00 1109 	mla	r1, r0, r9, r1
 8019d18:	fb0a 1105 	mla	r1, sl, r5, r1
 8019d1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019d20:	2900      	cmp	r1, #0
 8019d22:	f000 80da 	beq.w	8019eda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6da>
 8019d26:	2eff      	cmp	r6, #255	; 0xff
 8019d28:	d016      	beq.n	8019d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x558>
 8019d2a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8019d2e:	4377      	muls	r7, r6
 8019d30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019d34:	435e      	muls	r6, r3
 8019d36:	0a3b      	lsrs	r3, r7, #8
 8019d38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019d3c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019d40:	443b      	add	r3, r7
 8019d42:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8019d46:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8019d4a:	0a1b      	lsrs	r3, r3, #8
 8019d4c:	0a3f      	lsrs	r7, r7, #8
 8019d4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019d52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019d56:	433b      	orrs	r3, r7
 8019d58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019d5c:	d01d      	beq.n	8019d9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x59a>
 8019d5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019d60:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019d62:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019d66:	fb0c f606 	mul.w	r6, ip, r6
 8019d6a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019d6e:	fb0c fc07 	mul.w	ip, ip, r7
 8019d72:	0a37      	lsrs	r7, r6, #8
 8019d74:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019d78:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8019d7c:	4437      	add	r7, r6
 8019d7e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8019d82:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019d86:	0a3f      	lsrs	r7, r7, #8
 8019d88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d8c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019d90:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019d94:	ea47 060c 	orr.w	r6, r7, ip
 8019d98:	9610      	str	r6, [sp, #64]	; 0x40
 8019d9a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019d9e:	d01d      	beq.n	8019ddc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5dc>
 8019da0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019da2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019da6:	fb09 fc0c 	mul.w	ip, r9, ip
 8019daa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019dae:	fb09 f906 	mul.w	r9, r9, r6
 8019db2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8019db6:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8019dba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019dbe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019dc2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019dc6:	4467      	add	r7, ip
 8019dc8:	0a3f      	lsrs	r7, r7, #8
 8019dca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019dce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019dd2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019dd6:	ea47 0609 	orr.w	r6, r7, r9
 8019dda:	960c      	str	r6, [sp, #48]	; 0x30
 8019ddc:	2dff      	cmp	r5, #255	; 0xff
 8019dde:	d01a      	beq.n	8019e16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x616>
 8019de0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019de2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019de6:	fb05 fc0c 	mul.w	ip, r5, ip
 8019dea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019dee:	4375      	muls	r5, r6
 8019df0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8019df4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019df8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019dfc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8019e00:	4467      	add	r7, ip
 8019e02:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019e06:	0a3f      	lsrs	r7, r7, #8
 8019e08:	0a2d      	lsrs	r5, r5, #8
 8019e0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019e0e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019e12:	433d      	orrs	r5, r7
 8019e14:	9511      	str	r5, [sp, #68]	; 0x44
 8019e16:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019e18:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019e1c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8019e20:	fb08 f505 	mul.w	r5, r8, r5
 8019e24:	fb02 5506 	mla	r5, r2, r6, r5
 8019e28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019e2a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019e2e:	fb00 5506 	mla	r5, r0, r6, r5
 8019e32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019e34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019e38:	fb0a 5506 	mla	r5, sl, r6, r5
 8019e3c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019e3e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019e42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e46:	fb08 f806 	mul.w	r8, r8, r6
 8019e4a:	fb02 8303 	mla	r3, r2, r3, r8
 8019e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e50:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8019e54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e56:	fb00 3307 	mla	r3, r0, r7, r3
 8019e5a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019e5e:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8019e62:	0a2d      	lsrs	r5, r5, #8
 8019e64:	fb01 f30b 	mul.w	r3, r1, fp
 8019e68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e6c:	1c59      	adds	r1, r3, #1
 8019e6e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019e72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019e76:	ea45 050c 	orr.w	r5, r5, ip
 8019e7a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019e7e:	b2ea      	uxtb	r2, r5
 8019e80:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019e84:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019e88:	b2c9      	uxtb	r1, r1
 8019e8a:	fb12 f20b 	smulbb	r2, r2, fp
 8019e8e:	fb03 2301 	mla	r3, r3, r1, r2
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	1c5a      	adds	r2, r3, #1
 8019e96:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019e9a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019e9e:	121b      	asrs	r3, r3, #8
 8019ea0:	fb12 f201 	smulbb	r2, r2, r1
 8019ea4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019ea8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019eac:	fb03 230b 	mla	r3, r3, fp, r2
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	1c5a      	adds	r2, r3, #1
 8019eb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019eb8:	121b      	asrs	r3, r3, #8
 8019eba:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019ebe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019ec2:	0c2d      	lsrs	r5, r5, #16
 8019ec4:	fb13 f101 	smulbb	r1, r3, r1
 8019ec8:	fb05 150b 	mla	r5, r5, fp, r1
 8019ecc:	b2ad      	uxth	r5, r5
 8019ece:	1c69      	adds	r1, r5, #1
 8019ed0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8019ed4:	122d      	asrs	r5, r5, #8
 8019ed6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019eda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019edc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019ede:	4413      	add	r3, r2
 8019ee0:	932d      	str	r3, [sp, #180]	; 0xb4
 8019ee2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8019ee4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019ee6:	4413      	add	r3, r2
 8019ee8:	932e      	str	r3, [sp, #184]	; 0xb8
 8019eea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019eec:	3b01      	subs	r3, #1
 8019eee:	f10e 0e03 	add.w	lr, lr, #3
 8019ef2:	9315      	str	r3, [sp, #84]	; 0x54
 8019ef4:	e4ec      	b.n	80198d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8019ef6:	b160      	cbz	r0, 8019f12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 8019ef8:	5d2a      	ldrb	r2, [r5, r4]
 8019efa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019efc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019f00:	920c      	str	r2, [sp, #48]	; 0x30
 8019f02:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8019f06:	25ff      	movs	r5, #255	; 0xff
 8019f08:	46ac      	mov	ip, r5
 8019f0a:	e6ef      	b.n	8019cec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8019f0c:	25ff      	movs	r5, #255	; 0xff
 8019f0e:	46a9      	mov	r9, r5
 8019f10:	e6ec      	b.n	8019cec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8019f12:	25ff      	movs	r5, #255	; 0xff
 8019f14:	46a9      	mov	r9, r5
 8019f16:	e7f7      	b.n	8019f08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 8019f18:	b01b      	add	sp, #108	; 0x6c
 8019f1a:	ecbd 8b08 	vpop	{d8-d11}
 8019f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019f24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8019f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f28:	b085      	sub	sp, #20
 8019f2a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8019f2e:	7888      	ldrb	r0, [r1, #2]
 8019f30:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8019f34:	9000      	str	r0, [sp, #0]
 8019f36:	7848      	ldrb	r0, [r1, #1]
 8019f38:	9001      	str	r0, [sp, #4]
 8019f3a:	fb04 560c 	mla	r6, r4, ip, r5
 8019f3e:	7808      	ldrb	r0, [r1, #0]
 8019f40:	9002      	str	r0, [sp, #8]
 8019f42:	4692      	mov	sl, r2
 8019f44:	eb02 0e06 	add.w	lr, r2, r6
 8019f48:	9a00      	ldr	r2, [sp, #0]
 8019f4a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8019f4e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8019f52:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019f56:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8019f5a:	9a01      	ldr	r2, [sp, #4]
 8019f5c:	2c00      	cmp	r4, #0
 8019f5e:	4698      	mov	r8, r3
 8019f60:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8019f64:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019f68:	db3e      	blt.n	8019fe8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8019f6a:	45a1      	cmp	r9, r4
 8019f6c:	dd3c      	ble.n	8019fe8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8019f6e:	2d00      	cmp	r5, #0
 8019f70:	db38      	blt.n	8019fe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8019f72:	45ac      	cmp	ip, r5
 8019f74:	dd36      	ble.n	8019fe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8019f76:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8019f7a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8019f7e:	1c6e      	adds	r6, r5, #1
 8019f80:	d435      	bmi.n	8019fee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8019f82:	45b4      	cmp	ip, r6
 8019f84:	dd33      	ble.n	8019fee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8019f86:	b393      	cbz	r3, 8019fee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8019f88:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8019f8c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8019f90:	3401      	adds	r4, #1
 8019f92:	d430      	bmi.n	8019ff6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8019f94:	45a1      	cmp	r9, r4
 8019f96:	dd2e      	ble.n	8019ff6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8019f98:	b36f      	cbz	r7, 8019ff6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8019f9a:	2d00      	cmp	r5, #0
 8019f9c:	db29      	blt.n	8019ff2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8019f9e:	45ac      	cmp	ip, r5
 8019fa0:	dd27      	ble.n	8019ff2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8019fa2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8019fa6:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8019faa:	3501      	adds	r5, #1
 8019fac:	d407      	bmi.n	8019fbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8019fae:	45ac      	cmp	ip, r5
 8019fb0:	dd05      	ble.n	8019fbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8019fb2:	b123      	cbz	r3, 8019fbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8019fb4:	44f4      	add	ip, lr
 8019fb6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019fba:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8019fbe:	2b0f      	cmp	r3, #15
 8019fc0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019fc4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019fc8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019fcc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8019fd0:	d801      	bhi.n	8019fd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8019fd2:	2f0f      	cmp	r7, #15
 8019fd4:	d911      	bls.n	8019ffa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8019fd6:	4b76      	ldr	r3, [pc, #472]	; (801a1b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8019fd8:	4a76      	ldr	r2, [pc, #472]	; (801a1b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8019fda:	4877      	ldr	r0, [pc, #476]	; (801a1b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8019fdc:	f240 11a5 	movw	r1, #421	; 0x1a5
 8019fe0:	f003 fba6 	bl	801d730 <__assert_func>
 8019fe4:	4602      	mov	r2, r0
 8019fe6:	e7ca      	b.n	8019f7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8019fe8:	4606      	mov	r6, r0
 8019fea:	4602      	mov	r2, r0
 8019fec:	e7d0      	b.n	8019f90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8019fee:	4606      	mov	r6, r0
 8019ff0:	e7ce      	b.n	8019f90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8019ff2:	4604      	mov	r4, r0
 8019ff4:	e7d9      	b.n	8019faa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8019ff6:	4604      	mov	r4, r0
 8019ff8:	e7e1      	b.n	8019fbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	b2bf      	uxth	r7, r7
 8019ffe:	fb07 fe03 	mul.w	lr, r7, r3
 801a002:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a006:	011b      	lsls	r3, r3, #4
 801a008:	eba3 0c0e 	sub.w	ip, r3, lr
 801a00c:	b2bf      	uxth	r7, r7
 801a00e:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801a012:	fa1f fc8c 	uxth.w	ip, ip
 801a016:	1bed      	subs	r5, r5, r7
 801a018:	b2ad      	uxth	r5, r5
 801a01a:	fb0c f30a 	mul.w	r3, ip, sl
 801a01e:	fb05 330b 	mla	r3, r5, fp, r3
 801a022:	fb07 3309 	mla	r3, r7, r9, r3
 801a026:	fb0e 3308 	mla	r3, lr, r8, r3
 801a02a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a02e:	9303      	str	r3, [sp, #12]
 801a030:	2b00      	cmp	r3, #0
 801a032:	f000 80b9 	beq.w	801a1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801a036:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a03a:	d018      	beq.n	801a06e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801a03c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801a040:	fb0b f303 	mul.w	r3, fp, r3
 801a044:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a048:	fb0b fb02 	mul.w	fp, fp, r2
 801a04c:	0a1a      	lsrs	r2, r3, #8
 801a04e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a052:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801a056:	441a      	add	r2, r3
 801a058:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801a05c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801a060:	0a12      	lsrs	r2, r2, #8
 801a062:	0a1b      	lsrs	r3, r3, #8
 801a064:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a06c:	431a      	orrs	r2, r3
 801a06e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a072:	d019      	beq.n	801a0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801a074:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801a078:	fb0a fb0b 	mul.w	fp, sl, fp
 801a07c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a080:	fb0a fa06 	mul.w	sl, sl, r6
 801a084:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801a088:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a08c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a090:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801a094:	445e      	add	r6, fp
 801a096:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a09a:	0a36      	lsrs	r6, r6, #8
 801a09c:	0a1b      	lsrs	r3, r3, #8
 801a09e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a0a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a0a6:	431e      	orrs	r6, r3
 801a0a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a0ac:	d019      	beq.n	801a0e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801a0ae:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a0b2:	fb09 fa0a 	mul.w	sl, r9, sl
 801a0b6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a0ba:	fb09 f904 	mul.w	r9, r9, r4
 801a0be:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a0c2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a0c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a0ca:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801a0ce:	4454      	add	r4, sl
 801a0d0:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801a0d4:	0a24      	lsrs	r4, r4, #8
 801a0d6:	0a1b      	lsrs	r3, r3, #8
 801a0d8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a0dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a0e0:	431c      	orrs	r4, r3
 801a0e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a0e6:	d019      	beq.n	801a11c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801a0e8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801a0ec:	fb08 f909 	mul.w	r9, r8, r9
 801a0f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a0f4:	fb08 f800 	mul.w	r8, r8, r0
 801a0f8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801a0fc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a100:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a104:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801a108:	4448      	add	r0, r9
 801a10a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801a10e:	0a00      	lsrs	r0, r0, #8
 801a110:	0a1b      	lsrs	r3, r3, #8
 801a112:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a11a:	4318      	orrs	r0, r3
 801a11c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801a120:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801a124:	fb0c f808 	mul.w	r8, ip, r8
 801a128:	fb05 8803 	mla	r8, r5, r3, r8
 801a12c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801a130:	fb07 8803 	mla	r8, r7, r3, r8
 801a134:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801a138:	fb0e 8303 	mla	r3, lr, r3, r8
 801a13c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a140:	0a1b      	lsrs	r3, r3, #8
 801a142:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a146:	fb0c f606 	mul.w	r6, ip, r6
 801a14a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801a14e:	fb05 6202 	mla	r2, r5, r2, r6
 801a152:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801a156:	fb07 2703 	mla	r7, r7, r3, r2
 801a15a:	9a03      	ldr	r2, [sp, #12]
 801a15c:	9c02      	ldr	r4, [sp, #8]
 801a15e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801a162:	43d2      	mvns	r2, r2
 801a164:	b2d2      	uxtb	r2, r2
 801a166:	fb0e 7303 	mla	r3, lr, r3, r7
 801a16a:	4354      	muls	r4, r2
 801a16c:	0a1b      	lsrs	r3, r3, #8
 801a16e:	1c60      	adds	r0, r4, #1
 801a170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a174:	ea48 0303 	orr.w	r3, r8, r3
 801a178:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801a17c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a180:	7008      	strb	r0, [r1, #0]
 801a182:	9801      	ldr	r0, [sp, #4]
 801a184:	4350      	muls	r0, r2
 801a186:	1c44      	adds	r4, r0, #1
 801a188:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801a18c:	0a18      	lsrs	r0, r3, #8
 801a18e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801a192:	7048      	strb	r0, [r1, #1]
 801a194:	9800      	ldr	r0, [sp, #0]
 801a196:	4350      	muls	r0, r2
 801a198:	4602      	mov	r2, r0
 801a19a:	3001      	adds	r0, #1
 801a19c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a1a0:	0c1b      	lsrs	r3, r3, #16
 801a1a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a1a6:	708b      	strb	r3, [r1, #2]
 801a1a8:	b005      	add	sp, #20
 801a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ae:	bf00      	nop
 801a1b0:	080216c9 	.word	0x080216c9
 801a1b4:	08021bbe 	.word	0x08021bbe
 801a1b8:	08021792 	.word	0x08021792

0801a1bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c0:	ed2d 8b08 	vpush	{d8-d11}
 801a1c4:	b097      	sub	sp, #92	; 0x5c
 801a1c6:	eeb0 aa40 	vmov.f32	s20, s0
 801a1ca:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801a1cc:	9308      	str	r3, [sp, #32]
 801a1ce:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801a1d2:	9112      	str	r1, [sp, #72]	; 0x48
 801a1d4:	9310      	str	r3, [sp, #64]	; 0x40
 801a1d6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a1da:	9015      	str	r0, [sp, #84]	; 0x54
 801a1dc:	6868      	ldr	r0, [r5, #4]
 801a1de:	9214      	str	r2, [sp, #80]	; 0x50
 801a1e0:	fb00 1303 	mla	r3, r0, r3, r1
 801a1e4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801a1e6:	6829      	ldr	r1, [r5, #0]
 801a1e8:	6855      	ldr	r5, [r2, #4]
 801a1ea:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801a1ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1f2:	18cb      	adds	r3, r1, r3
 801a1f4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1f6:	6813      	ldr	r3, [r2, #0]
 801a1f8:	9311      	str	r3, [sp, #68]	; 0x44
 801a1fa:	eef0 9a60 	vmov.f32	s19, s1
 801a1fe:	eeb0 9a41 	vmov.f32	s18, s2
 801a202:	eeb0 8a62 	vmov.f32	s16, s5
 801a206:	eef0 8a43 	vmov.f32	s17, s6
 801a20a:	eef0 ba44 	vmov.f32	s23, s8
 801a20e:	eeb0 ba64 	vmov.f32	s22, s9
 801a212:	eef0 aa45 	vmov.f32	s21, s10
 801a216:	3504      	adds	r5, #4
 801a218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	dc03      	bgt.n	801a226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a21e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a220:	2b00      	cmp	r3, #0
 801a222:	f340 8334 	ble.w	801a88e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801a226:	9b08      	ldr	r3, [sp, #32]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	f340 8191 	ble.w	801a550 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 801a22e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a230:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a232:	1412      	asrs	r2, r2, #16
 801a234:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a238:	d42f      	bmi.n	801a29a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801a23a:	1c51      	adds	r1, r2, #1
 801a23c:	428c      	cmp	r4, r1
 801a23e:	dd2f      	ble.n	801a2a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a240:	2b00      	cmp	r3, #0
 801a242:	db2d      	blt.n	801a2a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a244:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a246:	1c59      	adds	r1, r3, #1
 801a248:	4288      	cmp	r0, r1
 801a24a:	dd29      	ble.n	801a2a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a24c:	9b08      	ldr	r3, [sp, #32]
 801a24e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a250:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a252:	3b01      	subs	r3, #1
 801a254:	fb02 1203 	mla	r2, r2, r3, r1
 801a258:	1412      	asrs	r2, r2, #16
 801a25a:	d42b      	bmi.n	801a2b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801a25c:	3201      	adds	r2, #1
 801a25e:	4294      	cmp	r4, r2
 801a260:	dd28      	ble.n	801a2b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801a262:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a264:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a266:	fb02 1303 	mla	r3, r2, r3, r1
 801a26a:	141b      	asrs	r3, r3, #16
 801a26c:	d422      	bmi.n	801a2b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801a26e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a270:	3301      	adds	r3, #1
 801a272:	429a      	cmp	r2, r3
 801a274:	dd1e      	ble.n	801a2b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801a276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a278:	f103 0803 	add.w	r8, r3, #3
 801a27c:	9b08      	ldr	r3, [sp, #32]
 801a27e:	9307      	str	r3, [sp, #28]
 801a280:	9b07      	ldr	r3, [sp, #28]
 801a282:	2b00      	cmp	r3, #0
 801a284:	f300 81cb 	bgt.w	801a61e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801a288:	9b08      	ldr	r3, [sp, #32]
 801a28a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a28c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a290:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a294:	441a      	add	r2, r3
 801a296:	920b      	str	r2, [sp, #44]	; 0x2c
 801a298:	e15c      	b.n	801a554 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801a29a:	1c51      	adds	r1, r2, #1
 801a29c:	f040 8149 	bne.w	801a532 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801a2a0:	42a2      	cmp	r2, r4
 801a2a2:	f280 8146 	bge.w	801a532 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801a2a6:	1c5a      	adds	r2, r3, #1
 801a2a8:	f2c0 8143 	blt.w	801a532 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801a2ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	f280 813f 	bge.w	801a532 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801a2b4:	9b08      	ldr	r3, [sp, #32]
 801a2b6:	9313      	str	r3, [sp, #76]	; 0x4c
 801a2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2ba:	9307      	str	r3, [sp, #28]
 801a2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	dde2      	ble.n	801a288 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801a2c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a2c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a2c6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a2ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a2cc:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801a2d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a2d2:	1412      	asrs	r2, r2, #16
 801a2d4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a2d8:	f100 818b 	bmi.w	801a5f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x436>
 801a2dc:	1c56      	adds	r6, r2, #1
 801a2de:	42b4      	cmp	r4, r6
 801a2e0:	f340 8189 	ble.w	801a5f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	f2c0 8186 	blt.w	801a5f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801a2ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a2ec:	1c5e      	adds	r6, r3, #1
 801a2ee:	42b7      	cmp	r7, r6
 801a2f0:	f340 8181 	ble.w	801a5f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801a2f4:	fb03 2304 	mla	r3, r3, r4, r2
 801a2f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a2fa:	18d6      	adds	r6, r2, r3
 801a2fc:	5cd3      	ldrb	r3, [r2, r3]
 801a2fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a302:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a306:	2900      	cmp	r1, #0
 801a308:	f000 8163 	beq.w	801a5d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801a30c:	7872      	ldrb	r2, [r6, #1]
 801a30e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a312:	920c      	str	r2, [sp, #48]	; 0x30
 801a314:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801a318:	2800      	cmp	r0, #0
 801a31a:	f000 8164 	beq.w	801a5e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 801a31e:	1932      	adds	r2, r6, r4
 801a320:	5d36      	ldrb	r6, [r6, r4]
 801a322:	7852      	ldrb	r2, [r2, #1]
 801a324:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801a328:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a32c:	9609      	str	r6, [sp, #36]	; 0x24
 801a32e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a332:	920d      	str	r2, [sp, #52]	; 0x34
 801a334:	0e16      	lsrs	r6, r2, #24
 801a336:	b289      	uxth	r1, r1
 801a338:	b280      	uxth	r0, r0
 801a33a:	fb01 fb00 	mul.w	fp, r1, r0
 801a33e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801a342:	0109      	lsls	r1, r1, #4
 801a344:	eba1 090b 	sub.w	r9, r1, fp
 801a348:	b280      	uxth	r0, r0
 801a34a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801a34e:	fa1f f989 	uxth.w	r9, r9
 801a352:	1a12      	subs	r2, r2, r0
 801a354:	b292      	uxth	r2, r2
 801a356:	fb09 f108 	mul.w	r1, r9, r8
 801a35a:	fb02 110c 	mla	r1, r2, ip, r1
 801a35e:	fb00 110a 	mla	r1, r0, sl, r1
 801a362:	fb0b 1106 	mla	r1, fp, r6, r1
 801a366:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a36a:	2900      	cmp	r1, #0
 801a36c:	f000 80d2 	beq.w	801a514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a370:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a374:	d01b      	beq.n	801a3ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 801a376:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a37a:	fb0c fe0e 	mul.w	lr, ip, lr
 801a37e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a382:	fb0c fc03 	mul.w	ip, ip, r3
 801a386:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801a38a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a38e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a392:	4473      	add	r3, lr
 801a394:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801a398:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801a39c:	0a1b      	lsrs	r3, r3, #8
 801a39e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a3a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a3a6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a3aa:	ea43 030e 	orr.w	r3, r3, lr
 801a3ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a3b2:	d01e      	beq.n	801a3f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801a3b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a3b6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801a3ba:	fb08 fc0c 	mul.w	ip, r8, ip
 801a3be:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801a3c2:	fb08 f80e 	mul.w	r8, r8, lr
 801a3c6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a3ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a3d2:	44e6      	add	lr, ip
 801a3d4:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801a3d8:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801a3dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a3e0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a3e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3e8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a3ec:	ea4e 0708 	orr.w	r7, lr, r8
 801a3f0:	970c      	str	r7, [sp, #48]	; 0x30
 801a3f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a3f6:	d01e      	beq.n	801a436 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801a3f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a3fa:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801a3fe:	fb0a f808 	mul.w	r8, sl, r8
 801a402:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801a406:	fb0a fa0c 	mul.w	sl, sl, ip
 801a40a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801a40e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a412:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801a416:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a41a:	44c6      	add	lr, r8
 801a41c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a420:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a424:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a428:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a42c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a430:	ea4e 070a 	orr.w	r7, lr, sl
 801a434:	9709      	str	r7, [sp, #36]	; 0x24
 801a436:	2eff      	cmp	r6, #255	; 0xff
 801a438:	d01d      	beq.n	801a476 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801a43a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a43c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801a440:	fb06 f808 	mul.w	r8, r6, r8
 801a444:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801a448:	fb06 f60c 	mul.w	r6, r6, ip
 801a44c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801a450:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a454:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801a458:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a45c:	44c6      	add	lr, r8
 801a45e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a462:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a466:	0a36      	lsrs	r6, r6, #8
 801a468:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a46c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a470:	ea4e 0606 	orr.w	r6, lr, r6
 801a474:	960d      	str	r6, [sp, #52]	; 0x34
 801a476:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a478:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a47a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a47e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a482:	fb09 f606 	mul.w	r6, r9, r6
 801a486:	fb02 660c 	mla	r6, r2, ip, r6
 801a48a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801a48e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a490:	fb00 660c 	mla	r6, r0, ip, r6
 801a494:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801a498:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a49a:	fb0b 660c 	mla	r6, fp, ip, r6
 801a49e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801a4a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a4a6:	fb09 f90c 	mul.w	r9, r9, ip
 801a4aa:	fb02 9303 	mla	r3, r2, r3, r9
 801a4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4b0:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801a4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4b6:	fb00 330e 	mla	r3, r0, lr, r3
 801a4ba:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a4be:	fb0b 3b00 	mla	fp, fp, r0, r3
 801a4c2:	9b07      	ldr	r3, [sp, #28]
 801a4c4:	43c9      	mvns	r1, r1
 801a4c6:	781b      	ldrb	r3, [r3, #0]
 801a4c8:	b2c9      	uxtb	r1, r1
 801a4ca:	fb03 f201 	mul.w	r2, r3, r1
 801a4ce:	0a36      	lsrs	r6, r6, #8
 801a4d0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a4d4:	1c53      	adds	r3, r2, #1
 801a4d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a4da:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a4de:	ea46 060b 	orr.w	r6, r6, fp
 801a4e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a4e6:	9a07      	ldr	r2, [sp, #28]
 801a4e8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801a4ec:	7013      	strb	r3, [r2, #0]
 801a4ee:	7853      	ldrb	r3, [r2, #1]
 801a4f0:	434b      	muls	r3, r1
 801a4f2:	1c5a      	adds	r2, r3, #1
 801a4f4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a4f8:	0a33      	lsrs	r3, r6, #8
 801a4fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a4fe:	9a07      	ldr	r2, [sp, #28]
 801a500:	7053      	strb	r3, [r2, #1]
 801a502:	7893      	ldrb	r3, [r2, #2]
 801a504:	4359      	muls	r1, r3
 801a506:	1c4b      	adds	r3, r1, #1
 801a508:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a50c:	0c36      	lsrs	r6, r6, #16
 801a50e:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801a512:	7096      	strb	r6, [r2, #2]
 801a514:	9b07      	ldr	r3, [sp, #28]
 801a516:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a518:	3303      	adds	r3, #3
 801a51a:	9307      	str	r3, [sp, #28]
 801a51c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a51e:	4413      	add	r3, r2
 801a520:	9329      	str	r3, [sp, #164]	; 0xa4
 801a522:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a524:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a526:	4413      	add	r3, r2
 801a528:	932a      	str	r3, [sp, #168]	; 0xa8
 801a52a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a52c:	3b01      	subs	r3, #1
 801a52e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a530:	e6c4      	b.n	801a2bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801a532:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a534:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a536:	4413      	add	r3, r2
 801a538:	9329      	str	r3, [sp, #164]	; 0xa4
 801a53a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a53c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a53e:	4413      	add	r3, r2
 801a540:	932a      	str	r3, [sp, #168]	; 0xa8
 801a542:	9b08      	ldr	r3, [sp, #32]
 801a544:	3b01      	subs	r3, #1
 801a546:	9308      	str	r3, [sp, #32]
 801a548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a54a:	3303      	adds	r3, #3
 801a54c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a54e:	e66a      	b.n	801a226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a550:	f47f ae7c 	bne.w	801a24c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801a554:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a556:	2b00      	cmp	r3, #0
 801a558:	f340 8199 	ble.w	801a88e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801a55c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a564:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a568:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a56a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a56e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a572:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a576:	eef0 6a48 	vmov.f32	s13, s16
 801a57a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a57e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a582:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a586:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801a58a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a58e:	eef0 6a68 	vmov.f32	s13, s17
 801a592:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a596:	ee18 2a10 	vmov	r2, s16
 801a59a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a59e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5a2:	ee18 2a90 	vmov	r2, s17
 801a5a6:	932b      	str	r3, [sp, #172]	; 0xac
 801a5a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a5aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5ae:	932c      	str	r3, [sp, #176]	; 0xb0
 801a5b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a5b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5b4:	3b01      	subs	r3, #1
 801a5b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5ba:	9312      	str	r3, [sp, #72]	; 0x48
 801a5bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a5be:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801a5c2:	bf08      	it	eq
 801a5c4:	4613      	moveq	r3, r2
 801a5c6:	9308      	str	r3, [sp, #32]
 801a5c8:	eef0 8a67 	vmov.f32	s17, s15
 801a5cc:	eeb0 8a47 	vmov.f32	s16, s14
 801a5d0:	e622      	b.n	801a218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a5d2:	b158      	cbz	r0, 801a5ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801a5d4:	5d32      	ldrb	r2, [r6, r4]
 801a5d6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a5da:	9209      	str	r2, [sp, #36]	; 0x24
 801a5dc:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801a5e0:	26ff      	movs	r6, #255	; 0xff
 801a5e2:	46b0      	mov	r8, r6
 801a5e4:	e6a7      	b.n	801a336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 801a5e6:	26ff      	movs	r6, #255	; 0xff
 801a5e8:	46b2      	mov	sl, r6
 801a5ea:	e6a4      	b.n	801a336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 801a5ec:	26ff      	movs	r6, #255	; 0xff
 801a5ee:	46b2      	mov	sl, r6
 801a5f0:	e7f7      	b.n	801a5e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x426>
 801a5f2:	1c57      	adds	r7, r2, #1
 801a5f4:	d18e      	bne.n	801a514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a5f6:	4294      	cmp	r4, r2
 801a5f8:	dd8c      	ble.n	801a514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a5fa:	1c5e      	adds	r6, r3, #1
 801a5fc:	db8a      	blt.n	801a514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a5fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a600:	429e      	cmp	r6, r3
 801a602:	dd87      	ble.n	801a514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a604:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801a608:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a60c:	e9cd 4600 	strd	r4, r6, [sp]
 801a610:	462b      	mov	r3, r5
 801a612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a614:	9907      	ldr	r1, [sp, #28]
 801a616:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a618:	f7ff fc84 	bl	8019f24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801a61c:	e77a      	b.n	801a514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a61e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a620:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a622:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a626:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a628:	1409      	asrs	r1, r1, #16
 801a62a:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801a62e:	141b      	asrs	r3, r3, #16
 801a630:	fb04 1303 	mla	r3, r4, r3, r1
 801a634:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a636:	18ce      	adds	r6, r1, r3
 801a638:	5ccb      	ldrb	r3, [r1, r3]
 801a63a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a63e:	0e1f      	lsrs	r7, r3, #24
 801a640:	2a00      	cmp	r2, #0
 801a642:	f000 8114 	beq.w	801a86e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 801a646:	7871      	ldrb	r1, [r6, #1]
 801a648:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801a64c:	910e      	str	r1, [sp, #56]	; 0x38
 801a64e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801a652:	2800      	cmp	r0, #0
 801a654:	f000 8115 	beq.w	801a882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 801a658:	1931      	adds	r1, r6, r4
 801a65a:	5d36      	ldrb	r6, [r6, r4]
 801a65c:	7849      	ldrb	r1, [r1, #1]
 801a65e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801a662:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801a666:	960a      	str	r6, [sp, #40]	; 0x28
 801a668:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a66c:	910f      	str	r1, [sp, #60]	; 0x3c
 801a66e:	0e0e      	lsrs	r6, r1, #24
 801a670:	b292      	uxth	r2, r2
 801a672:	b280      	uxth	r0, r0
 801a674:	fb02 fb00 	mul.w	fp, r2, r0
 801a678:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801a67c:	0112      	lsls	r2, r2, #4
 801a67e:	eba2 090b 	sub.w	r9, r2, fp
 801a682:	b280      	uxth	r0, r0
 801a684:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a688:	fa1f f989 	uxth.w	r9, r9
 801a68c:	1a09      	subs	r1, r1, r0
 801a68e:	b289      	uxth	r1, r1
 801a690:	fb09 f20e 	mul.w	r2, r9, lr
 801a694:	fb01 2207 	mla	r2, r1, r7, r2
 801a698:	fb00 220a 	mla	r2, r0, sl, r2
 801a69c:	fb0b 2206 	mla	r2, fp, r6, r2
 801a6a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a6a4:	9213      	str	r2, [sp, #76]	; 0x4c
 801a6a6:	2a00      	cmp	r2, #0
 801a6a8:	f000 80d4 	beq.w	801a854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x698>
 801a6ac:	2fff      	cmp	r7, #255	; 0xff
 801a6ae:	d01a      	beq.n	801a6e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 801a6b0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a6b4:	fb07 fc0c 	mul.w	ip, r7, ip
 801a6b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a6bc:	435f      	muls	r7, r3
 801a6be:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a6c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a6c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a6ca:	4463      	add	r3, ip
 801a6cc:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801a6d0:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801a6d4:	0a1b      	lsrs	r3, r3, #8
 801a6d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a6da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a6de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a6e2:	ea43 030c 	orr.w	r3, r3, ip
 801a6e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a6ea:	d01f      	beq.n	801a72c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x570>
 801a6ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801a6ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a6f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a6f4:	fb0e f707 	mul.w	r7, lr, r7
 801a6f8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a6fc:	fb0e fe0c 	mul.w	lr, lr, ip
 801a700:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a704:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a708:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a70c:	44bc      	add	ip, r7
 801a70e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801a712:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801a716:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a71a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a71e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a722:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a726:	ea4c 020e 	orr.w	r2, ip, lr
 801a72a:	920e      	str	r2, [sp, #56]	; 0x38
 801a72c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a730:	d01e      	beq.n	801a770 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b4>
 801a732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a734:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a738:	fb0a fe0e 	mul.w	lr, sl, lr
 801a73c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801a740:	fb0a fa07 	mul.w	sl, sl, r7
 801a744:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a748:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a74c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a750:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a754:	44f4      	add	ip, lr
 801a756:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a75a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a75e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a762:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a766:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a76a:	ea4c 020a 	orr.w	r2, ip, sl
 801a76e:	920a      	str	r2, [sp, #40]	; 0x28
 801a770:	2eff      	cmp	r6, #255	; 0xff
 801a772:	d01c      	beq.n	801a7ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 801a774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a776:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a77a:	fb06 fe0e 	mul.w	lr, r6, lr
 801a77e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801a782:	437e      	muls	r6, r7
 801a784:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a788:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a78c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a790:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801a794:	44f4      	add	ip, lr
 801a796:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801a79a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a79e:	0a36      	lsrs	r6, r6, #8
 801a7a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a7a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a7a8:	ea4c 0206 	orr.w	r2, ip, r6
 801a7ac:	920f      	str	r2, [sp, #60]	; 0x3c
 801a7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a7b0:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801a7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7b6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801a7ba:	fb09 f606 	mul.w	r6, r9, r6
 801a7be:	fb01 6607 	mla	r6, r1, r7, r6
 801a7c2:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801a7c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7c8:	fb00 6607 	mla	r6, r0, r7, r6
 801a7cc:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801a7d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a7d2:	fb0b 6607 	mla	r6, fp, r7, r6
 801a7d6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801a7da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a7e0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a7e4:	fb09 f907 	mul.w	r9, r9, r7
 801a7e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7ea:	fb01 9303 	mla	r3, r1, r3, r9
 801a7ee:	fb00 330c 	mla	r3, r0, ip, r3
 801a7f2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801a7f6:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801a7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7fc:	43da      	mvns	r2, r3
 801a7fe:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801a802:	b2d2      	uxtb	r2, r2
 801a804:	fb03 f102 	mul.w	r1, r3, r2
 801a808:	0a36      	lsrs	r6, r6, #8
 801a80a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a80e:	1c4b      	adds	r3, r1, #1
 801a810:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a814:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a818:	ea46 060e 	orr.w	r6, r6, lr
 801a81c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a820:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801a824:	f808 3c03 	strb.w	r3, [r8, #-3]
 801a828:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801a82c:	4353      	muls	r3, r2
 801a82e:	1c59      	adds	r1, r3, #1
 801a830:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a834:	0a33      	lsrs	r3, r6, #8
 801a836:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a83a:	f808 3c02 	strb.w	r3, [r8, #-2]
 801a83e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a842:	435a      	muls	r2, r3
 801a844:	1c53      	adds	r3, r2, #1
 801a846:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a84a:	0c36      	lsrs	r6, r6, #16
 801a84c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801a850:	f808 6c01 	strb.w	r6, [r8, #-1]
 801a854:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a856:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a858:	4413      	add	r3, r2
 801a85a:	9329      	str	r3, [sp, #164]	; 0xa4
 801a85c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a85e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a860:	4413      	add	r3, r2
 801a862:	932a      	str	r3, [sp, #168]	; 0xa8
 801a864:	9b07      	ldr	r3, [sp, #28]
 801a866:	f108 0803 	add.w	r8, r8, #3
 801a86a:	3b01      	subs	r3, #1
 801a86c:	e507      	b.n	801a27e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801a86e:	b158      	cbz	r0, 801a888 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801a870:	5d31      	ldrb	r1, [r6, r4]
 801a872:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801a876:	910a      	str	r1, [sp, #40]	; 0x28
 801a878:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801a87c:	26ff      	movs	r6, #255	; 0xff
 801a87e:	46b6      	mov	lr, r6
 801a880:	e6f6      	b.n	801a670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 801a882:	26ff      	movs	r6, #255	; 0xff
 801a884:	46b2      	mov	sl, r6
 801a886:	e6f3      	b.n	801a670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 801a888:	26ff      	movs	r6, #255	; 0xff
 801a88a:	46b2      	mov	sl, r6
 801a88c:	e7f7      	b.n	801a87e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 801a88e:	b017      	add	sp, #92	; 0x5c
 801a890:	ecbd 8b08 	vpop	{d8-d11}
 801a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a898 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a89c:	b08d      	sub	sp, #52	; 0x34
 801a89e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801a8a2:	9103      	str	r1, [sp, #12]
 801a8a4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801a8a8:	910b      	str	r1, [sp, #44]	; 0x2c
 801a8aa:	fb07 5803 	mla	r8, r7, r3, r5
 801a8ae:	9903      	ldr	r1, [sp, #12]
 801a8b0:	9803      	ldr	r0, [sp, #12]
 801a8b2:	9c03      	ldr	r4, [sp, #12]
 801a8b4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a8b8:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801a8bc:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801a8c0:	7809      	ldrb	r1, [r1, #0]
 801a8c2:	7840      	ldrb	r0, [r0, #1]
 801a8c4:	78a4      	ldrb	r4, [r4, #2]
 801a8c6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a8ca:	2f00      	cmp	r7, #0
 801a8cc:	eb02 0608 	add.w	r6, r2, r8
 801a8d0:	db51      	blt.n	801a976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801a8d2:	45be      	cmp	lr, r7
 801a8d4:	dd4f      	ble.n	801a976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801a8d6:	2d00      	cmp	r5, #0
 801a8d8:	db49      	blt.n	801a96e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801a8da:	42ab      	cmp	r3, r5
 801a8dc:	dd47      	ble.n	801a96e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801a8de:	f812 2008 	ldrb.w	r2, [r2, r8]
 801a8e2:	9204      	str	r2, [sp, #16]
 801a8e4:	7872      	ldrb	r2, [r6, #1]
 801a8e6:	9205      	str	r2, [sp, #20]
 801a8e8:	78b2      	ldrb	r2, [r6, #2]
 801a8ea:	9206      	str	r2, [sp, #24]
 801a8ec:	1c6a      	adds	r2, r5, #1
 801a8ee:	d449      	bmi.n	801a984 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801a8f0:	4293      	cmp	r3, r2
 801a8f2:	dd47      	ble.n	801a984 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801a8f4:	f1bc 0f00 	cmp.w	ip, #0
 801a8f8:	d044      	beq.n	801a984 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801a8fa:	7972      	ldrb	r2, [r6, #5]
 801a8fc:	f896 b003 	ldrb.w	fp, [r6, #3]
 801a900:	f896 a004 	ldrb.w	sl, [r6, #4]
 801a904:	9201      	str	r2, [sp, #4]
 801a906:	3701      	adds	r7, #1
 801a908:	d444      	bmi.n	801a994 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801a90a:	45be      	cmp	lr, r7
 801a90c:	dd42      	ble.n	801a994 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801a90e:	f1b9 0f00 	cmp.w	r9, #0
 801a912:	f000 80c1 	beq.w	801aa98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801a916:	2d00      	cmp	r5, #0
 801a918:	db38      	blt.n	801a98c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801a91a:	42ab      	cmp	r3, r5
 801a91c:	dd36      	ble.n	801a98c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801a91e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a922:	f816 8002 	ldrb.w	r8, [r6, r2]
 801a926:	2203      	movs	r2, #3
 801a928:	fb03 6702 	mla	r7, r3, r2, r6
 801a92c:	fb03 6202 	mla	r2, r3, r2, r6
 801a930:	787f      	ldrb	r7, [r7, #1]
 801a932:	f892 e002 	ldrb.w	lr, [r2, #2]
 801a936:	9702      	str	r7, [sp, #8]
 801a938:	3501      	adds	r5, #1
 801a93a:	d432      	bmi.n	801a9a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801a93c:	42ab      	cmp	r3, r5
 801a93e:	dd30      	ble.n	801a9a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801a940:	f1bc 0f00 	cmp.w	ip, #0
 801a944:	d031      	beq.n	801a9aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801a946:	2703      	movs	r7, #3
 801a948:	fb13 7207 	smlabb	r2, r3, r7, r7
 801a94c:	5cb5      	ldrb	r5, [r6, r2]
 801a94e:	fb03 6207 	mla	r2, r3, r7, r6
 801a952:	fb03 6307 	mla	r3, r3, r7, r6
 801a956:	7912      	ldrb	r2, [r2, #4]
 801a958:	795e      	ldrb	r6, [r3, #5]
 801a95a:	f1bc 0f0f 	cmp.w	ip, #15
 801a95e:	d927      	bls.n	801a9b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801a960:	4b53      	ldr	r3, [pc, #332]	; (801aab0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801a962:	4a54      	ldr	r2, [pc, #336]	; (801aab4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801a964:	4854      	ldr	r0, [pc, #336]	; (801aab8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801a966:	f240 11a5 	movw	r1, #421	; 0x1a5
 801a96a:	f002 fee1 	bl	801d730 <__assert_func>
 801a96e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801a972:	9104      	str	r1, [sp, #16]
 801a974:	e7ba      	b.n	801a8ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801a976:	9401      	str	r4, [sp, #4]
 801a978:	4682      	mov	sl, r0
 801a97a:	468b      	mov	fp, r1
 801a97c:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801a980:	9104      	str	r1, [sp, #16]
 801a982:	e7c0      	b.n	801a906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801a984:	9401      	str	r4, [sp, #4]
 801a986:	4682      	mov	sl, r0
 801a988:	468b      	mov	fp, r1
 801a98a:	e7bc      	b.n	801a906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801a98c:	46a6      	mov	lr, r4
 801a98e:	9002      	str	r0, [sp, #8]
 801a990:	4688      	mov	r8, r1
 801a992:	e7d1      	b.n	801a938 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801a994:	4626      	mov	r6, r4
 801a996:	4602      	mov	r2, r0
 801a998:	460d      	mov	r5, r1
 801a99a:	46a6      	mov	lr, r4
 801a99c:	9002      	str	r0, [sp, #8]
 801a99e:	4688      	mov	r8, r1
 801a9a0:	e7db      	b.n	801a95a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801a9a2:	4626      	mov	r6, r4
 801a9a4:	4602      	mov	r2, r0
 801a9a6:	460d      	mov	r5, r1
 801a9a8:	e7d7      	b.n	801a95a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801a9aa:	4626      	mov	r6, r4
 801a9ac:	4602      	mov	r2, r0
 801a9ae:	460d      	mov	r5, r1
 801a9b0:	f1b9 0f0f 	cmp.w	r9, #15
 801a9b4:	d8d4      	bhi.n	801a960 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801a9b6:	fa1f f38c 	uxth.w	r3, ip
 801a9ba:	fa1f fc89 	uxth.w	ip, r9
 801a9be:	fb03 f70c 	mul.w	r7, r3, ip
 801a9c2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801a9c6:	011b      	lsls	r3, r3, #4
 801a9c8:	9707      	str	r7, [sp, #28]
 801a9ca:	fa1f fc8c 	uxth.w	ip, ip
 801a9ce:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801a9d2:	eba7 070c 	sub.w	r7, r7, ip
 801a9d6:	b2bf      	uxth	r7, r7
 801a9d8:	9709      	str	r7, [sp, #36]	; 0x24
 801a9da:	9f07      	ldr	r7, [sp, #28]
 801a9dc:	1bdb      	subs	r3, r3, r7
 801a9de:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801a9e2:	9708      	str	r7, [sp, #32]
 801a9e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a9e6:	b29b      	uxth	r3, r3
 801a9e8:	930a      	str	r3, [sp, #40]	; 0x28
 801a9ea:	ea6f 0907 	mvn.w	r9, r7
 801a9ee:	fb03 fb0b 	mul.w	fp, r3, fp
 801a9f2:	9f04      	ldr	r7, [sp, #16]
 801a9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9f6:	fb03 bb07 	mla	fp, r3, r7, fp
 801a9fa:	9f07      	ldr	r7, [sp, #28]
 801a9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9fe:	fb0c b808 	mla	r8, ip, r8, fp
 801aa02:	fa5f f989 	uxtb.w	r9, r9
 801aa06:	fb07 8805 	mla	r8, r7, r5, r8
 801aa0a:	9d08      	ldr	r5, [sp, #32]
 801aa0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801aa0e:	fb11 f109 	smulbb	r1, r1, r9
 801aa12:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801aa16:	fb08 1805 	mla	r8, r8, r5, r1
 801aa1a:	fa1f f888 	uxth.w	r8, r8
 801aa1e:	f108 0101 	add.w	r1, r8, #1
 801aa22:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801aa26:	9903      	ldr	r1, [sp, #12]
 801aa28:	9d05      	ldr	r5, [sp, #20]
 801aa2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa2e:	f881 8000 	strb.w	r8, [r1]
 801aa32:	fb03 f10a 	mul.w	r1, r3, sl
 801aa36:	fb07 1105 	mla	r1, r7, r5, r1
 801aa3a:	9d02      	ldr	r5, [sp, #8]
 801aa3c:	fb0c 1105 	mla	r1, ip, r5, r1
 801aa40:	9d07      	ldr	r5, [sp, #28]
 801aa42:	fb05 1102 	mla	r1, r5, r2, r1
 801aa46:	9a08      	ldr	r2, [sp, #32]
 801aa48:	fb10 f009 	smulbb	r0, r0, r9
 801aa4c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801aa50:	fb01 0102 	mla	r1, r1, r2, r0
 801aa54:	b289      	uxth	r1, r1
 801aa56:	1c48      	adds	r0, r1, #1
 801aa58:	9a03      	ldr	r2, [sp, #12]
 801aa5a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801aa5e:	1209      	asrs	r1, r1, #8
 801aa60:	7051      	strb	r1, [r2, #1]
 801aa62:	9a01      	ldr	r2, [sp, #4]
 801aa64:	4353      	muls	r3, r2
 801aa66:	9a06      	ldr	r2, [sp, #24]
 801aa68:	fb07 3702 	mla	r7, r7, r2, r3
 801aa6c:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801aa70:	9b08      	ldr	r3, [sp, #32]
 801aa72:	fb05 c606 	mla	r6, r5, r6, ip
 801aa76:	fb14 f409 	smulbb	r4, r4, r9
 801aa7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801aa7e:	fb06 4603 	mla	r6, r6, r3, r4
 801aa82:	b2b6      	uxth	r6, r6
 801aa84:	f106 0e01 	add.w	lr, r6, #1
 801aa88:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801aa8c:	9b03      	ldr	r3, [sp, #12]
 801aa8e:	1236      	asrs	r6, r6, #8
 801aa90:	709e      	strb	r6, [r3, #2]
 801aa92:	b00d      	add	sp, #52	; 0x34
 801aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa98:	f1bc 0f0f 	cmp.w	ip, #15
 801aa9c:	f63f af60 	bhi.w	801a960 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801aaa0:	4626      	mov	r6, r4
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	460d      	mov	r5, r1
 801aaa6:	46a6      	mov	lr, r4
 801aaa8:	9002      	str	r0, [sp, #8]
 801aaaa:	4688      	mov	r8, r1
 801aaac:	e783      	b.n	801a9b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801aaae:	bf00      	nop
 801aab0:	080216c9 	.word	0x080216c9
 801aab4:	08021bbe 	.word	0x08021bbe
 801aab8:	08021792 	.word	0x08021792

0801aabc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac0:	ed2d 8b08 	vpush	{d8-d11}
 801aac4:	b0a1      	sub	sp, #132	; 0x84
 801aac6:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801aaca:	9307      	str	r3, [sp, #28]
 801aacc:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801aad0:	9308      	str	r3, [sp, #32]
 801aad2:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801aad6:	9210      	str	r2, [sp, #64]	; 0x40
 801aad8:	930a      	str	r3, [sp, #40]	; 0x28
 801aada:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801aadc:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801aae0:	930f      	str	r3, [sp, #60]	; 0x3c
 801aae2:	910e      	str	r1, [sp, #56]	; 0x38
 801aae4:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801aae8:	901f      	str	r0, [sp, #124]	; 0x7c
 801aaea:	6850      	ldr	r0, [r2, #4]
 801aaec:	6812      	ldr	r2, [r2, #0]
 801aaee:	fb00 1303 	mla	r3, r0, r3, r1
 801aaf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaf6:	18d3      	adds	r3, r2, r3
 801aaf8:	9309      	str	r3, [sp, #36]	; 0x24
 801aafa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801aafc:	9908      	ldr	r1, [sp, #32]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	930c      	str	r3, [sp, #48]	; 0x30
 801ab02:	2203      	movs	r2, #3
 801ab04:	f06f 0304 	mvn.w	r3, #4
 801ab08:	fb11 3302 	smlabb	r3, r1, r2, r3
 801ab0c:	930d      	str	r3, [sp, #52]	; 0x34
 801ab0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab10:	43db      	mvns	r3, r3
 801ab12:	b2db      	uxtb	r3, r3
 801ab14:	eeb0 aa40 	vmov.f32	s20, s0
 801ab18:	eef0 9a60 	vmov.f32	s19, s1
 801ab1c:	eeb0 9a41 	vmov.f32	s18, s2
 801ab20:	eeb0 8a62 	vmov.f32	s16, s5
 801ab24:	eef0 8a43 	vmov.f32	s17, s6
 801ab28:	eef0 ba44 	vmov.f32	s23, s8
 801ab2c:	eeb0 ba64 	vmov.f32	s22, s9
 801ab30:	eef0 aa45 	vmov.f32	s21, s10
 801ab34:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	dc03      	bgt.n	801ab44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801ab3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	f340 81df 	ble.w	801af02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801ab44:	9b07      	ldr	r3, [sp, #28]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	f340 80f2 	ble.w	801ad30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ab4c:	ea5f 4228 	movs.w	r2, r8, asr #16
 801ab50:	ea4f 432b 	mov.w	r3, fp, asr #16
 801ab54:	d430      	bmi.n	801abb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ab56:	9808      	ldr	r0, [sp, #32]
 801ab58:	1c51      	adds	r1, r2, #1
 801ab5a:	4281      	cmp	r1, r0
 801ab5c:	da2f      	bge.n	801abbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	db2d      	blt.n	801abbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ab62:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ab64:	1c59      	adds	r1, r3, #1
 801ab66:	4288      	cmp	r0, r1
 801ab68:	dd29      	ble.n	801abbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ab6a:	9b07      	ldr	r3, [sp, #28]
 801ab6c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801ab6e:	3b01      	subs	r3, #1
 801ab70:	fb02 8203 	mla	r2, r2, r3, r8
 801ab74:	1412      	asrs	r2, r2, #16
 801ab76:	d42d      	bmi.n	801abd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ab78:	9908      	ldr	r1, [sp, #32]
 801ab7a:	3201      	adds	r2, #1
 801ab7c:	4291      	cmp	r1, r2
 801ab7e:	dd29      	ble.n	801abd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ab80:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801ab82:	fb02 b303 	mla	r3, r2, r3, fp
 801ab86:	141b      	asrs	r3, r3, #16
 801ab88:	d424      	bmi.n	801abd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ab8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab8c:	3301      	adds	r3, #1
 801ab8e:	429a      	cmp	r2, r3
 801ab90:	dd20      	ble.n	801abd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ab92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab94:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ab98:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801ab9c:	1cde      	adds	r6, r3, #3
 801ab9e:	f1bc 0f00 	cmp.w	ip, #0
 801aba2:	f300 811f 	bgt.w	801ade4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801aba6:	9b07      	ldr	r3, [sp, #28]
 801aba8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801abac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801abb2:	4423      	add	r3, r4
 801abb4:	9309      	str	r3, [sp, #36]	; 0x24
 801abb6:	e0bd      	b.n	801ad34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801abb8:	1c57      	adds	r7, r2, #1
 801abba:	f040 80ae 	bne.w	801ad1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801abbe:	9908      	ldr	r1, [sp, #32]
 801abc0:	428a      	cmp	r2, r1
 801abc2:	f280 80aa 	bge.w	801ad1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801abc6:	1c5e      	adds	r6, r3, #1
 801abc8:	f2c0 80a7 	blt.w	801ad1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801abcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abce:	4293      	cmp	r3, r2
 801abd0:	f280 80a3 	bge.w	801ad1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801abd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801abd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801abda:	f1ba 0f00 	cmp.w	sl, #0
 801abde:	dde2      	ble.n	801aba6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801abe0:	ea5f 4028 	movs.w	r0, r8, asr #16
 801abe4:	ea4f 412b 	mov.w	r1, fp, asr #16
 801abe8:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801abec:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801abf0:	f100 80df 	bmi.w	801adb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801abf4:	9f08      	ldr	r7, [sp, #32]
 801abf6:	1c45      	adds	r5, r0, #1
 801abf8:	42af      	cmp	r7, r5
 801abfa:	f340 80dc 	ble.w	801adb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801abfe:	2900      	cmp	r1, #0
 801ac00:	f2c0 80d9 	blt.w	801adb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ac04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ac06:	1c4d      	adds	r5, r1, #1
 801ac08:	42af      	cmp	r7, r5
 801ac0a:	f340 80d4 	ble.w	801adb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ac0e:	9d08      	ldr	r5, [sp, #32]
 801ac10:	fb05 0101 	mla	r1, r5, r1, r0
 801ac14:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ac16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ac1a:	1845      	adds	r5, r0, r1
 801ac1c:	5c40      	ldrb	r0, [r0, r1]
 801ac1e:	792f      	ldrb	r7, [r5, #4]
 801ac20:	9711      	str	r7, [sp, #68]	; 0x44
 801ac22:	796f      	ldrb	r7, [r5, #5]
 801ac24:	7869      	ldrb	r1, [r5, #1]
 801ac26:	f895 e002 	ldrb.w	lr, [r5, #2]
 801ac2a:	f895 9003 	ldrb.w	r9, [r5, #3]
 801ac2e:	9712      	str	r7, [sp, #72]	; 0x48
 801ac30:	b17a      	cbz	r2, 801ac52 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801ac32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ac34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ac36:	3505      	adds	r5, #5
 801ac38:	19ef      	adds	r7, r5, r7
 801ac3a:	5d2d      	ldrb	r5, [r5, r4]
 801ac3c:	787c      	ldrb	r4, [r7, #1]
 801ac3e:	9415      	str	r4, [sp, #84]	; 0x54
 801ac40:	78bc      	ldrb	r4, [r7, #2]
 801ac42:	9417      	str	r4, [sp, #92]	; 0x5c
 801ac44:	78fc      	ldrb	r4, [r7, #3]
 801ac46:	9414      	str	r4, [sp, #80]	; 0x50
 801ac48:	793c      	ldrb	r4, [r7, #4]
 801ac4a:	9416      	str	r4, [sp, #88]	; 0x58
 801ac4c:	797c      	ldrb	r4, [r7, #5]
 801ac4e:	9513      	str	r5, [sp, #76]	; 0x4c
 801ac50:	9418      	str	r4, [sp, #96]	; 0x60
 801ac52:	b29b      	uxth	r3, r3
 801ac54:	b292      	uxth	r2, r2
 801ac56:	fb03 f702 	mul.w	r7, r3, r2
 801ac5a:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801ac5e:	011b      	lsls	r3, r3, #4
 801ac60:	b292      	uxth	r2, r2
 801ac62:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ac66:	1bdb      	subs	r3, r3, r7
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	ebac 0c02 	sub.w	ip, ip, r2
 801ac6e:	fa1f fc8c 	uxth.w	ip, ip
 801ac72:	fb03 f909 	mul.w	r9, r3, r9
 801ac76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac78:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801ac7c:	fb0c 9000 	mla	r0, ip, r0, r9
 801ac80:	fb02 0004 	mla	r0, r2, r4, r0
 801ac84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac86:	f896 9000 	ldrb.w	r9, [r6]
 801ac8a:	fb07 0004 	mla	r0, r7, r4, r0
 801ac8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac90:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ac94:	fb19 f904 	smulbb	r9, r9, r4
 801ac98:	fb00 9005 	mla	r0, r0, r5, r9
 801ac9c:	b280      	uxth	r0, r0
 801ac9e:	f100 0901 	add.w	r9, r0, #1
 801aca2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801aca6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aca8:	4358      	muls	r0, r3
 801acaa:	fb0c 0101 	mla	r1, ip, r1, r0
 801acae:	9815      	ldr	r0, [sp, #84]	; 0x54
 801acb0:	fb02 1100 	mla	r1, r2, r0, r1
 801acb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 801acb6:	fb07 1100 	mla	r1, r7, r0, r1
 801acba:	7870      	ldrb	r0, [r6, #1]
 801acbc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801acc0:	fb10 f004 	smulbb	r0, r0, r4
 801acc4:	fb01 0105 	mla	r1, r1, r5, r0
 801acc8:	b289      	uxth	r1, r1
 801acca:	1c48      	adds	r0, r1, #1
 801accc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801acd0:	1209      	asrs	r1, r1, #8
 801acd2:	7071      	strb	r1, [r6, #1]
 801acd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801acd6:	434b      	muls	r3, r1
 801acd8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801acda:	fb0c 330e 	mla	r3, ip, lr, r3
 801acde:	fb02 3201 	mla	r2, r2, r1, r3
 801ace2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ace4:	fb07 2703 	mla	r7, r7, r3, r2
 801ace8:	78b2      	ldrb	r2, [r6, #2]
 801acea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801acee:	fb12 f204 	smulbb	r2, r2, r4
 801acf2:	fb07 2505 	mla	r5, r7, r5, r2
 801acf6:	b2ad      	uxth	r5, r5
 801acf8:	1c6f      	adds	r7, r5, #1
 801acfa:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801acfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad02:	122d      	asrs	r5, r5, #8
 801ad04:	f886 9000 	strb.w	r9, [r6]
 801ad08:	70b5      	strb	r5, [r6, #2]
 801ad0a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801ad0c:	4498      	add	r8, r3
 801ad0e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ad10:	3603      	adds	r6, #3
 801ad12:	449b      	add	fp, r3
 801ad14:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad18:	e75f      	b.n	801abda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801ad1a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801ad1c:	4498      	add	r8, r3
 801ad1e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ad20:	449b      	add	fp, r3
 801ad22:	9b07      	ldr	r3, [sp, #28]
 801ad24:	3b01      	subs	r3, #1
 801ad26:	9307      	str	r3, [sp, #28]
 801ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad2a:	3303      	adds	r3, #3
 801ad2c:	9309      	str	r3, [sp, #36]	; 0x24
 801ad2e:	e709      	b.n	801ab44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801ad30:	f47f af1b 	bne.w	801ab6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801ad34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	f340 80e3 	ble.w	801af02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801ad3c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ad40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad44:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ad48:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ad4a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ad4e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ad52:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ad56:	eef0 6a48 	vmov.f32	s13, s16
 801ad5a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ad5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad62:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ad66:	ee16 8a90 	vmov	r8, s13
 801ad6a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ad6e:	eef0 6a68 	vmov.f32	s13, s17
 801ad72:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ad76:	ee18 2a10 	vmov	r2, s16
 801ad7a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ad7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad82:	ee18 2a90 	vmov	r2, s17
 801ad86:	9335      	str	r3, [sp, #212]	; 0xd4
 801ad88:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ad8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad8e:	9336      	str	r3, [sp, #216]	; 0xd8
 801ad90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad94:	3b01      	subs	r3, #1
 801ad96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad9a:	930e      	str	r3, [sp, #56]	; 0x38
 801ad9c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ad9e:	bf08      	it	eq
 801ada0:	4613      	moveq	r3, r2
 801ada2:	ee16 ba90 	vmov	fp, s13
 801ada6:	9307      	str	r3, [sp, #28]
 801ada8:	eef0 8a67 	vmov.f32	s17, s15
 801adac:	eeb0 8a47 	vmov.f32	s16, s14
 801adb0:	e6c1      	b.n	801ab36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801adb2:	1c45      	adds	r5, r0, #1
 801adb4:	d1a9      	bne.n	801ad0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801adb6:	9c08      	ldr	r4, [sp, #32]
 801adb8:	42a0      	cmp	r0, r4
 801adba:	daa6      	bge.n	801ad0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801adbc:	1c4c      	adds	r4, r1, #1
 801adbe:	dba4      	blt.n	801ad0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801adc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801adc2:	428c      	cmp	r4, r1
 801adc4:	dda1      	ble.n	801ad0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801adc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801adc8:	9001      	str	r0, [sp, #4]
 801adca:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801add0:	9300      	str	r3, [sp, #0]
 801add2:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801add6:	9b08      	ldr	r3, [sp, #32]
 801add8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adda:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801addc:	4631      	mov	r1, r6
 801adde:	f7ff fd5b 	bl	801a898 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801ade2:	e792      	b.n	801ad0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ade4:	9c08      	ldr	r4, [sp, #32]
 801ade6:	ea4f 4228 	mov.w	r2, r8, asr #16
 801adea:	ea4f 402b 	mov.w	r0, fp, asr #16
 801adee:	fb04 2000 	mla	r0, r4, r0, r2
 801adf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adf4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801adf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801adfa:	4402      	add	r2, r0
 801adfc:	5c25      	ldrb	r5, [r4, r0]
 801adfe:	7894      	ldrb	r4, [r2, #2]
 801ae00:	9411      	str	r4, [sp, #68]	; 0x44
 801ae02:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801ae06:	7954      	ldrb	r4, [r2, #5]
 801ae08:	7850      	ldrb	r0, [r2, #1]
 801ae0a:	f892 a003 	ldrb.w	sl, [r2, #3]
 801ae0e:	f892 9004 	ldrb.w	r9, [r2, #4]
 801ae12:	9412      	str	r4, [sp, #72]	; 0x48
 801ae14:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801ae18:	b171      	cbz	r1, 801ae38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ae1a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ae1c:	3205      	adds	r2, #5
 801ae1e:	1917      	adds	r7, r2, r4
 801ae20:	5d12      	ldrb	r2, [r2, r4]
 801ae22:	9219      	str	r2, [sp, #100]	; 0x64
 801ae24:	787a      	ldrb	r2, [r7, #1]
 801ae26:	921b      	str	r2, [sp, #108]	; 0x6c
 801ae28:	78ba      	ldrb	r2, [r7, #2]
 801ae2a:	921d      	str	r2, [sp, #116]	; 0x74
 801ae2c:	78fa      	ldrb	r2, [r7, #3]
 801ae2e:	921a      	str	r2, [sp, #104]	; 0x68
 801ae30:	793a      	ldrb	r2, [r7, #4]
 801ae32:	921c      	str	r2, [sp, #112]	; 0x70
 801ae34:	797a      	ldrb	r2, [r7, #5]
 801ae36:	921e      	str	r2, [sp, #120]	; 0x78
 801ae38:	b29b      	uxth	r3, r3
 801ae3a:	b289      	uxth	r1, r1
 801ae3c:	fb03 f201 	mul.w	r2, r3, r1
 801ae40:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801ae44:	011b      	lsls	r3, r3, #4
 801ae46:	b289      	uxth	r1, r1
 801ae48:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801ae4c:	1a9b      	subs	r3, r3, r2
 801ae4e:	b29b      	uxth	r3, r3
 801ae50:	1a7f      	subs	r7, r7, r1
 801ae52:	b2bf      	uxth	r7, r7
 801ae54:	fb03 fa0a 	mul.w	sl, r3, sl
 801ae58:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801ae5a:	fb07 a505 	mla	r5, r7, r5, sl
 801ae5e:	fb01 5504 	mla	r5, r1, r4, r5
 801ae62:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ae64:	f816 ac03 	ldrb.w	sl, [r6, #-3]
 801ae68:	fb02 5504 	mla	r5, r2, r4, r5
 801ae6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ae6e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ae72:	fb1a fa04 	smulbb	sl, sl, r4
 801ae76:	fb05 a50e 	mla	r5, r5, lr, sl
 801ae7a:	b2ad      	uxth	r5, r5
 801ae7c:	fb03 f909 	mul.w	r9, r3, r9
 801ae80:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801ae82:	f105 0a01 	add.w	sl, r5, #1
 801ae86:	fb07 9000 	mla	r0, r7, r0, r9
 801ae8a:	fb01 0004 	mla	r0, r1, r4, r0
 801ae8e:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801ae92:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ae94:	122d      	asrs	r5, r5, #8
 801ae96:	fb02 0004 	mla	r0, r2, r4, r0
 801ae9a:	f806 5c03 	strb.w	r5, [r6, #-3]
 801ae9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aea0:	f816 5c02 	ldrb.w	r5, [r6, #-2]
 801aea4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801aea8:	fb15 f504 	smulbb	r5, r5, r4
 801aeac:	fb00 500e 	mla	r0, r0, lr, r5
 801aeb0:	b280      	uxth	r0, r0
 801aeb2:	1c45      	adds	r5, r0, #1
 801aeb4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801aeb8:	1200      	asrs	r0, r0, #8
 801aeba:	f806 0c02 	strb.w	r0, [r6, #-2]
 801aebe:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aec0:	4343      	muls	r3, r0
 801aec2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aec4:	fb07 3300 	mla	r3, r7, r0, r3
 801aec8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801aeca:	fb01 3100 	mla	r1, r1, r0, r3
 801aece:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801aed0:	fb02 1203 	mla	r2, r2, r3, r1
 801aed4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801aed8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801aedc:	fb11 f104 	smulbb	r1, r1, r4
 801aee0:	fb02 120e 	mla	r2, r2, lr, r1
 801aee4:	b292      	uxth	r2, r2
 801aee6:	1c53      	adds	r3, r2, #1
 801aee8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801aeec:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801aeee:	4498      	add	r8, r3
 801aef0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801aef2:	1212      	asrs	r2, r2, #8
 801aef4:	f806 2c01 	strb.w	r2, [r6, #-1]
 801aef8:	449b      	add	fp, r3
 801aefa:	3603      	adds	r6, #3
 801aefc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801af00:	e64d      	b.n	801ab9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801af02:	b021      	add	sp, #132	; 0x84
 801af04:	ecbd 8b08 	vpop	{d8-d11}
 801af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af10:	b085      	sub	sp, #20
 801af12:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801af16:	fb07 ce03 	mla	lr, r7, r3, ip
 801af1a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801af1e:	9403      	str	r4, [sp, #12]
 801af20:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801af24:	2f00      	cmp	r7, #0
 801af26:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801af2a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801af2e:	780c      	ldrb	r4, [r1, #0]
 801af30:	784d      	ldrb	r5, [r1, #1]
 801af32:	788e      	ldrb	r6, [r1, #2]
 801af34:	eb02 0b0e 	add.w	fp, r2, lr
 801af38:	db56      	blt.n	801afe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801af3a:	45b9      	cmp	r9, r7
 801af3c:	dd54      	ble.n	801afe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801af3e:	f1bc 0f00 	cmp.w	ip, #0
 801af42:	db4d      	blt.n	801afe0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801af44:	4563      	cmp	r3, ip
 801af46:	dd4b      	ble.n	801afe0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801af48:	f812 200e 	ldrb.w	r2, [r2, lr]
 801af4c:	9200      	str	r2, [sp, #0]
 801af4e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801af52:	9201      	str	r2, [sp, #4]
 801af54:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801af58:	9202      	str	r2, [sp, #8]
 801af5a:	f11c 0201 	adds.w	r2, ip, #1
 801af5e:	d44a      	bmi.n	801aff6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801af60:	4293      	cmp	r3, r2
 801af62:	dd48      	ble.n	801aff6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801af64:	2800      	cmp	r0, #0
 801af66:	d046      	beq.n	801aff6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801af68:	f89b e003 	ldrb.w	lr, [fp, #3]
 801af6c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801af70:	f89b a005 	ldrb.w	sl, [fp, #5]
 801af74:	3701      	adds	r7, #1
 801af76:	d446      	bmi.n	801b006 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801af78:	45b9      	cmp	r9, r7
 801af7a:	dd44      	ble.n	801b006 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801af7c:	9a03      	ldr	r2, [sp, #12]
 801af7e:	2a00      	cmp	r2, #0
 801af80:	d045      	beq.n	801b00e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801af82:	f1bc 0f00 	cmp.w	ip, #0
 801af86:	db3a      	blt.n	801affe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801af88:	4563      	cmp	r3, ip
 801af8a:	dd38      	ble.n	801affe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801af8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801af90:	f04f 0903 	mov.w	r9, #3
 801af94:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801af98:	fb03 b209 	mla	r2, r3, r9, fp
 801af9c:	fb03 b909 	mla	r9, r3, r9, fp
 801afa0:	7852      	ldrb	r2, [r2, #1]
 801afa2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801afa6:	f11c 0c01 	adds.w	ip, ip, #1
 801afaa:	d40d      	bmi.n	801afc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801afac:	4563      	cmp	r3, ip
 801afae:	dd0b      	ble.n	801afc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801afb0:	b160      	cbz	r0, 801afcc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801afb2:	2603      	movs	r6, #3
 801afb4:	fb13 6406 	smlabb	r4, r3, r6, r6
 801afb8:	fb03 b506 	mla	r5, r3, r6, fp
 801afbc:	fb03 b306 	mla	r3, r3, r6, fp
 801afc0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801afc4:	792d      	ldrb	r5, [r5, #4]
 801afc6:	795e      	ldrb	r6, [r3, #5]
 801afc8:	280f      	cmp	r0, #15
 801afca:	d802      	bhi.n	801afd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801afcc:	9b03      	ldr	r3, [sp, #12]
 801afce:	2b0f      	cmp	r3, #15
 801afd0:	d922      	bls.n	801b018 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801afd2:	4b2f      	ldr	r3, [pc, #188]	; (801b090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801afd4:	4a2f      	ldr	r2, [pc, #188]	; (801b094 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801afd6:	4830      	ldr	r0, [pc, #192]	; (801b098 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801afd8:	f240 11a5 	movw	r1, #421	; 0x1a5
 801afdc:	f002 fba8 	bl	801d730 <__assert_func>
 801afe0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801afe4:	9400      	str	r4, [sp, #0]
 801afe6:	e7b8      	b.n	801af5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801afe8:	46b2      	mov	sl, r6
 801afea:	46a8      	mov	r8, r5
 801afec:	46a6      	mov	lr, r4
 801afee:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801aff2:	9400      	str	r4, [sp, #0]
 801aff4:	e7be      	b.n	801af74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801aff6:	46b2      	mov	sl, r6
 801aff8:	46a8      	mov	r8, r5
 801affa:	46a6      	mov	lr, r4
 801affc:	e7ba      	b.n	801af74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801affe:	46b1      	mov	r9, r6
 801b000:	462a      	mov	r2, r5
 801b002:	4627      	mov	r7, r4
 801b004:	e7cf      	b.n	801afa6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b006:	46b1      	mov	r9, r6
 801b008:	462a      	mov	r2, r5
 801b00a:	4627      	mov	r7, r4
 801b00c:	e7dc      	b.n	801afc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b00e:	280f      	cmp	r0, #15
 801b010:	d8df      	bhi.n	801afd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b012:	46b1      	mov	r9, r6
 801b014:	462a      	mov	r2, r5
 801b016:	4627      	mov	r7, r4
 801b018:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801b01c:	b280      	uxth	r0, r0
 801b01e:	fb00 f30b 	mul.w	r3, r0, fp
 801b022:	0100      	lsls	r0, r0, #4
 801b024:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801b028:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801b02c:	1ac0      	subs	r0, r0, r3
 801b02e:	fa1f fb8b 	uxth.w	fp, fp
 801b032:	b280      	uxth	r0, r0
 801b034:	9003      	str	r0, [sp, #12]
 801b036:	ebac 0c0b 	sub.w	ip, ip, fp
 801b03a:	fb00 fe0e 	mul.w	lr, r0, lr
 801b03e:	9800      	ldr	r0, [sp, #0]
 801b040:	fa1f fc8c 	uxth.w	ip, ip
 801b044:	fb0c ee00 	mla	lr, ip, r0, lr
 801b048:	9803      	ldr	r0, [sp, #12]
 801b04a:	fb00 f808 	mul.w	r8, r0, r8
 801b04e:	9801      	ldr	r0, [sp, #4]
 801b050:	fb0c 8800 	mla	r8, ip, r0, r8
 801b054:	fb0b 8202 	mla	r2, fp, r2, r8
 801b058:	fb03 2505 	mla	r5, r3, r5, r2
 801b05c:	9a03      	ldr	r2, [sp, #12]
 801b05e:	fb02 f00a 	mul.w	r0, r2, sl
 801b062:	9a02      	ldr	r2, [sp, #8]
 801b064:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b068:	fb0b ee07 	mla	lr, fp, r7, lr
 801b06c:	fb0b c909 	mla	r9, fp, r9, ip
 801b070:	fb03 ee04 	mla	lr, r3, r4, lr
 801b074:	fb03 9606 	mla	r6, r3, r6, r9
 801b078:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b07c:	122d      	asrs	r5, r5, #8
 801b07e:	1236      	asrs	r6, r6, #8
 801b080:	f881 e000 	strb.w	lr, [r1]
 801b084:	704d      	strb	r5, [r1, #1]
 801b086:	708e      	strb	r6, [r1, #2]
 801b088:	b005      	add	sp, #20
 801b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b08e:	bf00      	nop
 801b090:	080216c9 	.word	0x080216c9
 801b094:	08021bbe 	.word	0x08021bbe
 801b098:	08021792 	.word	0x08021792

0801b09c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0a0:	ed2d 8b0a 	vpush	{d8-d12}
 801b0a4:	b09d      	sub	sp, #116	; 0x74
 801b0a6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801b0aa:	9306      	str	r3, [sp, #24]
 801b0ac:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801b0b0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801b0b2:	9307      	str	r3, [sp, #28]
 801b0b4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801b0b8:	9309      	str	r3, [sp, #36]	; 0x24
 801b0ba:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801b0be:	901b      	str	r0, [sp, #108]	; 0x6c
 801b0c0:	6850      	ldr	r0, [r2, #4]
 801b0c2:	6812      	ldr	r2, [r2, #0]
 801b0c4:	fb00 1303 	mla	r3, r0, r3, r1
 801b0c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0cc:	18d3      	adds	r3, r2, r3
 801b0ce:	9308      	str	r3, [sp, #32]
 801b0d0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801b0d2:	9907      	ldr	r1, [sp, #28]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	930a      	str	r3, [sp, #40]	; 0x28
 801b0d8:	2203      	movs	r2, #3
 801b0da:	f06f 0304 	mvn.w	r3, #4
 801b0de:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 801b0e2:	fb11 3302 	smlabb	r3, r1, r2, r3
 801b0e6:	eeb0 aa40 	vmov.f32	s20, s0
 801b0ea:	eef0 9a60 	vmov.f32	s19, s1
 801b0ee:	eeb0 9a41 	vmov.f32	s18, s2
 801b0f2:	eeb0 8a62 	vmov.f32	s16, s5
 801b0f6:	eef0 8a43 	vmov.f32	s17, s6
 801b0fa:	eeb0 ca44 	vmov.f32	s24, s8
 801b0fe:	eef0 ba64 	vmov.f32	s23, s9
 801b102:	eeb0 ba45 	vmov.f32	s22, s10
 801b106:	930b      	str	r3, [sp, #44]	; 0x2c
 801b108:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801b10c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b10e:	2b00      	cmp	r3, #0
 801b110:	dc03      	bgt.n	801b11a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b114:	2b00      	cmp	r3, #0
 801b116:	f340 8193 	ble.w	801b440 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801b11a:	9b06      	ldr	r3, [sp, #24]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	f340 80d0 	ble.w	801b2c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 801b122:	1432      	asrs	r2, r6, #16
 801b124:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b128:	d42f      	bmi.n	801b18a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b12a:	9807      	ldr	r0, [sp, #28]
 801b12c:	1c51      	adds	r1, r2, #1
 801b12e:	4281      	cmp	r1, r0
 801b130:	da2e      	bge.n	801b190 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b132:	2b00      	cmp	r3, #0
 801b134:	db2c      	blt.n	801b190 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b136:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b138:	1c59      	adds	r1, r3, #1
 801b13a:	4288      	cmp	r0, r1
 801b13c:	dd28      	ble.n	801b190 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b13e:	9b06      	ldr	r3, [sp, #24]
 801b140:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801b142:	3b01      	subs	r3, #1
 801b144:	fb02 6203 	mla	r2, r2, r3, r6
 801b148:	1412      	asrs	r2, r2, #16
 801b14a:	d42c      	bmi.n	801b1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b14c:	9907      	ldr	r1, [sp, #28]
 801b14e:	3201      	adds	r2, #1
 801b150:	4291      	cmp	r1, r2
 801b152:	dd28      	ble.n	801b1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b154:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801b156:	fb02 5303 	mla	r3, r2, r3, r5
 801b15a:	141b      	asrs	r3, r3, #16
 801b15c:	d423      	bmi.n	801b1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b160:	3301      	adds	r3, #1
 801b162:	429a      	cmp	r2, r3
 801b164:	dd1f      	ble.n	801b1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b166:	9b08      	ldr	r3, [sp, #32]
 801b168:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b16c:	f103 0c03 	add.w	ip, r3, #3
 801b170:	f1be 0f00 	cmp.w	lr, #0
 801b174:	f300 80fa 	bgt.w	801b36c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801b178:	9b06      	ldr	r3, [sp, #24]
 801b17a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b17e:	9b08      	ldr	r3, [sp, #32]
 801b180:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b184:	4423      	add	r3, r4
 801b186:	9308      	str	r3, [sp, #32]
 801b188:	e09d      	b.n	801b2c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801b18a:	1c51      	adds	r1, r2, #1
 801b18c:	f040 808e 	bne.w	801b2ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801b190:	9907      	ldr	r1, [sp, #28]
 801b192:	428a      	cmp	r2, r1
 801b194:	f280 808a 	bge.w	801b2ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801b198:	1c5f      	adds	r7, r3, #1
 801b19a:	f2c0 8087 	blt.w	801b2ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801b19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1a0:	4293      	cmp	r3, r2
 801b1a2:	f280 8083 	bge.w	801b2ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801b1a6:	9f06      	ldr	r7, [sp, #24]
 801b1a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b1ac:	2f00      	cmp	r7, #0
 801b1ae:	dde3      	ble.n	801b178 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801b1b0:	1432      	asrs	r2, r6, #16
 801b1b2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b1b6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b1ba:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 801b1be:	f100 80bf 	bmi.w	801b340 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 801b1c2:	9c07      	ldr	r4, [sp, #28]
 801b1c4:	1c50      	adds	r0, r2, #1
 801b1c6:	4284      	cmp	r4, r0
 801b1c8:	f340 80bc 	ble.w	801b344 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	f2c0 80b9 	blt.w	801b344 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801b1d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b1d4:	1c58      	adds	r0, r3, #1
 801b1d6:	4284      	cmp	r4, r0
 801b1d8:	f340 80b4 	ble.w	801b344 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801b1dc:	9807      	ldr	r0, [sp, #28]
 801b1de:	fb00 2303 	mla	r3, r0, r3, r2
 801b1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b1e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1ea:	441a      	add	r2, r3
 801b1ec:	f810 c003 	ldrb.w	ip, [r0, r3]
 801b1f0:	7953      	ldrb	r3, [r2, #5]
 801b1f2:	7850      	ldrb	r0, [r2, #1]
 801b1f4:	f892 e002 	ldrb.w	lr, [r2, #2]
 801b1f8:	f892 9003 	ldrb.w	r9, [r2, #3]
 801b1fc:	f892 8004 	ldrb.w	r8, [r2, #4]
 801b200:	930e      	str	r3, [sp, #56]	; 0x38
 801b202:	f1bb 0f00 	cmp.w	fp, #0
 801b206:	d00f      	beq.n	801b228 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801b208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b20a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b20c:	3205      	adds	r2, #5
 801b20e:	18d3      	adds	r3, r2, r3
 801b210:	5d12      	ldrb	r2, [r2, r4]
 801b212:	920f      	str	r2, [sp, #60]	; 0x3c
 801b214:	785a      	ldrb	r2, [r3, #1]
 801b216:	9211      	str	r2, [sp, #68]	; 0x44
 801b218:	789a      	ldrb	r2, [r3, #2]
 801b21a:	9213      	str	r2, [sp, #76]	; 0x4c
 801b21c:	78da      	ldrb	r2, [r3, #3]
 801b21e:	9210      	str	r2, [sp, #64]	; 0x40
 801b220:	791a      	ldrb	r2, [r3, #4]
 801b222:	795b      	ldrb	r3, [r3, #5]
 801b224:	9212      	str	r2, [sp, #72]	; 0x48
 801b226:	9314      	str	r3, [sp, #80]	; 0x50
 801b228:	b28b      	uxth	r3, r1
 801b22a:	fa1f f28b 	uxth.w	r2, fp
 801b22e:	fb03 fb02 	mul.w	fp, r3, r2
 801b232:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801b236:	011b      	lsls	r3, r3, #4
 801b238:	b292      	uxth	r2, r2
 801b23a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801b23e:	eba3 030b 	sub.w	r3, r3, fp
 801b242:	b29b      	uxth	r3, r3
 801b244:	1a89      	subs	r1, r1, r2
 801b246:	b289      	uxth	r1, r1
 801b248:	fb03 f808 	mul.w	r8, r3, r8
 801b24c:	fb01 8800 	mla	r8, r1, r0, r8
 801b250:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b252:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b254:	fb02 8800 	mla	r8, r2, r0, r8
 801b258:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b25a:	fb0b 8800 	mla	r8, fp, r0, r8
 801b25e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b260:	fb03 f909 	mul.w	r9, r3, r9
 801b264:	4343      	muls	r3, r0
 801b266:	fb01 330e 	mla	r3, r1, lr, r3
 801b26a:	fb01 990c 	mla	r9, r1, ip, r9
 801b26e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801b270:	fb02 9904 	mla	r9, r2, r4, r9
 801b274:	fb02 3201 	mla	r2, r2, r1, r3
 801b278:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b27a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b27c:	fb0b 9904 	mla	r9, fp, r4, r9
 801b280:	fb0b 2b03 	mla	fp, fp, r3, r2
 801b284:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b288:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b28c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801b290:	f88a 9000 	strb.w	r9, [sl]
 801b294:	f88a 8001 	strb.w	r8, [sl, #1]
 801b298:	f88a b002 	strb.w	fp, [sl, #2]
 801b29c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b29e:	441e      	add	r6, r3
 801b2a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b2a2:	f10a 0a03 	add.w	sl, sl, #3
 801b2a6:	441d      	add	r5, r3
 801b2a8:	3f01      	subs	r7, #1
 801b2aa:	e77f      	b.n	801b1ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801b2ac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b2ae:	441e      	add	r6, r3
 801b2b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b2b2:	441d      	add	r5, r3
 801b2b4:	9b06      	ldr	r3, [sp, #24]
 801b2b6:	3b01      	subs	r3, #1
 801b2b8:	9306      	str	r3, [sp, #24]
 801b2ba:	9b08      	ldr	r3, [sp, #32]
 801b2bc:	3303      	adds	r3, #3
 801b2be:	9308      	str	r3, [sp, #32]
 801b2c0:	e72b      	b.n	801b11a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b2c2:	f47f af3c 	bne.w	801b13e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	f340 80b9 	ble.w	801b440 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801b2ce:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801b2d2:	ee79 9aab 	vadd.f32	s19, s19, s23
 801b2d6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801b2da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b2dc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801b2e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b2e4:	eef0 6a48 	vmov.f32	s13, s16
 801b2e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b2ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2f0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b2f4:	ee16 6a90 	vmov	r6, s13
 801b2f8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b2fc:	eef0 6a68 	vmov.f32	s13, s17
 801b300:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b304:	ee18 2a10 	vmov	r2, s16
 801b308:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b30c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b310:	ee18 2a90 	vmov	r2, s17
 801b314:	9333      	str	r3, [sp, #204]	; 0xcc
 801b316:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b318:	fb92 f3f3 	sdiv	r3, r2, r3
 801b31c:	9334      	str	r3, [sp, #208]	; 0xd0
 801b31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b322:	3b01      	subs	r3, #1
 801b324:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b328:	930c      	str	r3, [sp, #48]	; 0x30
 801b32a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b32c:	bf08      	it	eq
 801b32e:	4613      	moveq	r3, r2
 801b330:	ee16 5a90 	vmov	r5, s13
 801b334:	9306      	str	r3, [sp, #24]
 801b336:	eef0 8a67 	vmov.f32	s17, s15
 801b33a:	eeb0 8a47 	vmov.f32	s16, s14
 801b33e:	e6e5      	b.n	801b10c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b340:	1c54      	adds	r4, r2, #1
 801b342:	d1ab      	bne.n	801b29c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801b344:	9807      	ldr	r0, [sp, #28]
 801b346:	4282      	cmp	r2, r0
 801b348:	daa8      	bge.n	801b29c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801b34a:	1c58      	adds	r0, r3, #1
 801b34c:	dba6      	blt.n	801b29c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801b34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b350:	4298      	cmp	r0, r3
 801b352:	dda3      	ble.n	801b29c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801b354:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801b358:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 801b35c:	9000      	str	r0, [sp, #0]
 801b35e:	9b07      	ldr	r3, [sp, #28]
 801b360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b362:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b364:	4651      	mov	r1, sl
 801b366:	f7ff fdd1 	bl	801af0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b36a:	e797      	b.n	801b29c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801b36c:	9c07      	ldr	r4, [sp, #28]
 801b36e:	1431      	asrs	r1, r6, #16
 801b370:	1428      	asrs	r0, r5, #16
 801b372:	fb04 1000 	mla	r0, r4, r0, r1
 801b376:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b378:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b37a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b37e:	4401      	add	r1, r0
 801b380:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b384:	5c20      	ldrb	r0, [r4, r0]
 801b386:	900e      	str	r0, [sp, #56]	; 0x38
 801b388:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801b38c:	7848      	ldrb	r0, [r1, #1]
 801b38e:	f891 8002 	ldrb.w	r8, [r1, #2]
 801b392:	f891 a003 	ldrb.w	sl, [r1, #3]
 801b396:	f891 9004 	ldrb.w	r9, [r1, #4]
 801b39a:	f891 b005 	ldrb.w	fp, [r1, #5]
 801b39e:	b172      	cbz	r2, 801b3be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 801b3a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b3a2:	3105      	adds	r1, #5
 801b3a4:	190f      	adds	r7, r1, r4
 801b3a6:	5d09      	ldrb	r1, [r1, r4]
 801b3a8:	9115      	str	r1, [sp, #84]	; 0x54
 801b3aa:	7879      	ldrb	r1, [r7, #1]
 801b3ac:	9117      	str	r1, [sp, #92]	; 0x5c
 801b3ae:	78b9      	ldrb	r1, [r7, #2]
 801b3b0:	9119      	str	r1, [sp, #100]	; 0x64
 801b3b2:	78f9      	ldrb	r1, [r7, #3]
 801b3b4:	9116      	str	r1, [sp, #88]	; 0x58
 801b3b6:	7939      	ldrb	r1, [r7, #4]
 801b3b8:	9118      	str	r1, [sp, #96]	; 0x60
 801b3ba:	7979      	ldrb	r1, [r7, #5]
 801b3bc:	911a      	str	r1, [sp, #104]	; 0x68
 801b3be:	b29b      	uxth	r3, r3
 801b3c0:	b292      	uxth	r2, r2
 801b3c2:	fb03 f102 	mul.w	r1, r3, r2
 801b3c6:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801b3ca:	011b      	lsls	r3, r3, #4
 801b3cc:	b292      	uxth	r2, r2
 801b3ce:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b3d2:	1a5b      	subs	r3, r3, r1
 801b3d4:	b29b      	uxth	r3, r3
 801b3d6:	1abf      	subs	r7, r7, r2
 801b3d8:	b2bf      	uxth	r7, r7
 801b3da:	fb03 f909 	mul.w	r9, r3, r9
 801b3de:	fb07 9900 	mla	r9, r7, r0, r9
 801b3e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b3e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b3e6:	fb02 9900 	mla	r9, r2, r0, r9
 801b3ea:	9818      	ldr	r0, [sp, #96]	; 0x60
 801b3ec:	fb03 fa0a 	mul.w	sl, r3, sl
 801b3f0:	fb01 9900 	mla	r9, r1, r0, r9
 801b3f4:	fb07 aa04 	mla	sl, r7, r4, sl
 801b3f8:	fb03 f30b 	mul.w	r3, r3, fp
 801b3fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b3fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b400:	fb07 3308 	mla	r3, r7, r8, r3
 801b404:	fb02 aa04 	mla	sl, r2, r4, sl
 801b408:	fb02 3200 	mla	r2, r2, r0, r3
 801b40c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b40e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b410:	fb01 aa04 	mla	sl, r1, r4, sl
 801b414:	fb01 2103 	mla	r1, r1, r3, r2
 801b418:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b41a:	441e      	add	r6, r3
 801b41c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b41e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b422:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b426:	1209      	asrs	r1, r1, #8
 801b428:	f80c ac03 	strb.w	sl, [ip, #-3]
 801b42c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801b430:	f80c 1c01 	strb.w	r1, [ip, #-1]
 801b434:	441d      	add	r5, r3
 801b436:	f10c 0c03 	add.w	ip, ip, #3
 801b43a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b43e:	e697      	b.n	801b170 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801b440:	b01d      	add	sp, #116	; 0x74
 801b442:	ecbd 8b0a 	vpop	{d8-d12}
 801b446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b44c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b450:	b085      	sub	sp, #20
 801b452:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801b456:	7888      	ldrb	r0, [r1, #2]
 801b458:	9000      	str	r0, [sp, #0]
 801b45a:	7848      	ldrb	r0, [r1, #1]
 801b45c:	9001      	str	r0, [sp, #4]
 801b45e:	fb04 c603 	mla	r6, r4, r3, ip
 801b462:	7808      	ldrb	r0, [r1, #0]
 801b464:	9002      	str	r0, [sp, #8]
 801b466:	4691      	mov	r9, r2
 801b468:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801b46c:	9a00      	ldr	r2, [sp, #0]
 801b46e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801b472:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801b476:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801b47a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801b47e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801b482:	9a01      	ldr	r2, [sp, #4]
 801b484:	2c00      	cmp	r4, #0
 801b486:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801b48a:	db3a      	blt.n	801b502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801b48c:	45a0      	cmp	r8, r4
 801b48e:	dd38      	ble.n	801b502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801b490:	f1bc 0f00 	cmp.w	ip, #0
 801b494:	db33      	blt.n	801b4fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801b496:	4563      	cmp	r3, ip
 801b498:	dd31      	ble.n	801b4fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801b49a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801b49e:	f11c 0601 	adds.w	r6, ip, #1
 801b4a2:	d431      	bmi.n	801b508 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801b4a4:	42b3      	cmp	r3, r6
 801b4a6:	dd2f      	ble.n	801b508 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801b4a8:	b375      	cbz	r5, 801b508 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801b4aa:	f8de 6004 	ldr.w	r6, [lr, #4]
 801b4ae:	3401      	adds	r4, #1
 801b4b0:	d42e      	bmi.n	801b510 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801b4b2:	45a0      	cmp	r8, r4
 801b4b4:	dd2c      	ble.n	801b510 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801b4b6:	b35f      	cbz	r7, 801b510 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801b4b8:	f1bc 0f00 	cmp.w	ip, #0
 801b4bc:	db26      	blt.n	801b50c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801b4be:	4563      	cmp	r3, ip
 801b4c0:	dd24      	ble.n	801b50c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801b4c2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801b4c6:	f11c 0c01 	adds.w	ip, ip, #1
 801b4ca:	d405      	bmi.n	801b4d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b4cc:	4563      	cmp	r3, ip
 801b4ce:	dd03      	ble.n	801b4d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b4d0:	b115      	cbz	r5, 801b4d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b4d2:	3301      	adds	r3, #1
 801b4d4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801b4d8:	2d0f      	cmp	r5, #15
 801b4da:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801b4de:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b4e2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b4e6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801b4ea:	d801      	bhi.n	801b4f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 801b4ec:	2f0f      	cmp	r7, #15
 801b4ee:	d911      	bls.n	801b514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 801b4f0:	4b7f      	ldr	r3, [pc, #508]	; (801b6f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801b4f2:	4a80      	ldr	r2, [pc, #512]	; (801b6f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801b4f4:	4880      	ldr	r0, [pc, #512]	; (801b6f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801b4f6:	f240 11a5 	movw	r1, #421	; 0x1a5
 801b4fa:	f002 f919 	bl	801d730 <__assert_func>
 801b4fe:	4602      	mov	r2, r0
 801b500:	e7cd      	b.n	801b49e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 801b502:	4606      	mov	r6, r0
 801b504:	4602      	mov	r2, r0
 801b506:	e7d2      	b.n	801b4ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801b508:	4606      	mov	r6, r0
 801b50a:	e7d0      	b.n	801b4ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801b50c:	4604      	mov	r4, r0
 801b50e:	e7da      	b.n	801b4c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 801b510:	4604      	mov	r4, r0
 801b512:	e7e1      	b.n	801b4d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b514:	b2ab      	uxth	r3, r5
 801b516:	b2bf      	uxth	r7, r7
 801b518:	fb03 fe07 	mul.w	lr, r3, r7
 801b51c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801b520:	011b      	lsls	r3, r3, #4
 801b522:	eba3 0c0e 	sub.w	ip, r3, lr
 801b526:	b2bf      	uxth	r7, r7
 801b528:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801b52c:	fa1f fc8c 	uxth.w	ip, ip
 801b530:	1bed      	subs	r5, r5, r7
 801b532:	b2ad      	uxth	r5, r5
 801b534:	fb0c f30a 	mul.w	r3, ip, sl
 801b538:	fb05 330b 	mla	r3, r5, fp, r3
 801b53c:	fb07 3309 	mla	r3, r7, r9, r3
 801b540:	fb0e 3308 	mla	r3, lr, r8, r3
 801b544:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b548:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b54c:	9303      	str	r3, [sp, #12]
 801b54e:	d018      	beq.n	801b582 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x136>
 801b550:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b554:	fb0b f303 	mul.w	r3, fp, r3
 801b558:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b55c:	fb0b fb02 	mul.w	fp, fp, r2
 801b560:	0a1a      	lsrs	r2, r3, #8
 801b562:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b566:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801b56a:	441a      	add	r2, r3
 801b56c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801b570:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801b574:	0a12      	lsrs	r2, r2, #8
 801b576:	0a1b      	lsrs	r3, r3, #8
 801b578:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b57c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b580:	431a      	orrs	r2, r3
 801b582:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b586:	d019      	beq.n	801b5bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x170>
 801b588:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801b58c:	fb0a fb0b 	mul.w	fp, sl, fp
 801b590:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b594:	fb0a fa06 	mul.w	sl, sl, r6
 801b598:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801b59c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b5a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b5a4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801b5a8:	445e      	add	r6, fp
 801b5aa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b5ae:	0a36      	lsrs	r6, r6, #8
 801b5b0:	0a1b      	lsrs	r3, r3, #8
 801b5b2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b5b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b5ba:	431e      	orrs	r6, r3
 801b5bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b5c0:	d019      	beq.n	801b5f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1aa>
 801b5c2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801b5c6:	fb09 fa0a 	mul.w	sl, r9, sl
 801b5ca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b5ce:	fb09 f904 	mul.w	r9, r9, r4
 801b5d2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801b5d6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b5da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b5de:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801b5e2:	4454      	add	r4, sl
 801b5e4:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801b5e8:	0a24      	lsrs	r4, r4, #8
 801b5ea:	0a1b      	lsrs	r3, r3, #8
 801b5ec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b5f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b5f4:	431c      	orrs	r4, r3
 801b5f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b5fa:	d019      	beq.n	801b630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e4>
 801b5fc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801b600:	fb08 f909 	mul.w	r9, r8, r9
 801b604:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b608:	fb08 f800 	mul.w	r8, r8, r0
 801b60c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801b610:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b614:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801b618:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801b61c:	4448      	add	r0, r9
 801b61e:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801b622:	0a00      	lsrs	r0, r0, #8
 801b624:	0a1b      	lsrs	r3, r3, #8
 801b626:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b62a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b62e:	4318      	orrs	r0, r3
 801b630:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b634:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b638:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b63c:	fb0c f808 	mul.w	r8, ip, r8
 801b640:	fb0c f606 	mul.w	r6, ip, r6
 801b644:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b648:	fb05 8803 	mla	r8, r5, r3, r8
 801b64c:	fb05 6202 	mla	r2, r5, r2, r6
 801b650:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801b654:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b658:	fb07 8803 	mla	r8, r7, r3, r8
 801b65c:	fb07 2704 	mla	r7, r7, r4, r2
 801b660:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801b664:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801b668:	9c02      	ldr	r4, [sp, #8]
 801b66a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b66e:	fb0e 8303 	mla	r3, lr, r3, r8
 801b672:	fb0e 7e00 	mla	lr, lr, r0, r7
 801b676:	9803      	ldr	r0, [sp, #12]
 801b678:	b292      	uxth	r2, r2
 801b67a:	0a1b      	lsrs	r3, r3, #8
 801b67c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b680:	4350      	muls	r0, r2
 801b682:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b686:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b68a:	ea43 0e0e 	orr.w	lr, r3, lr
 801b68e:	1c43      	adds	r3, r0, #1
 801b690:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b694:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	fb14 f403 	smulbb	r4, r4, r3
 801b69e:	fa5f f08e 	uxtb.w	r0, lr
 801b6a2:	fb00 4002 	mla	r0, r0, r2, r4
 801b6a6:	b280      	uxth	r0, r0
 801b6a8:	1c44      	adds	r4, r0, #1
 801b6aa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b6ae:	9c01      	ldr	r4, [sp, #4]
 801b6b0:	1200      	asrs	r0, r0, #8
 801b6b2:	fb14 f403 	smulbb	r4, r4, r3
 801b6b6:	7008      	strb	r0, [r1, #0]
 801b6b8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801b6bc:	fb00 4002 	mla	r0, r0, r2, r4
 801b6c0:	b280      	uxth	r0, r0
 801b6c2:	1c44      	adds	r4, r0, #1
 801b6c4:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b6c8:	1200      	asrs	r0, r0, #8
 801b6ca:	7048      	strb	r0, [r1, #1]
 801b6cc:	9800      	ldr	r0, [sp, #0]
 801b6ce:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801b6d2:	fb10 f303 	smulbb	r3, r0, r3
 801b6d6:	fb0e 3202 	mla	r2, lr, r2, r3
 801b6da:	b292      	uxth	r2, r2
 801b6dc:	f102 0e01 	add.w	lr, r2, #1
 801b6e0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801b6e4:	1212      	asrs	r2, r2, #8
 801b6e6:	708a      	strb	r2, [r1, #2]
 801b6e8:	b005      	add	sp, #20
 801b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ee:	bf00      	nop
 801b6f0:	080216c9 	.word	0x080216c9
 801b6f4:	08021bbe 	.word	0x08021bbe
 801b6f8:	08021792 	.word	0x08021792

0801b6fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b700:	ed2d 8b08 	vpush	{d8-d11}
 801b704:	b099      	sub	sp, #100	; 0x64
 801b706:	eeb0 aa40 	vmov.f32	s20, s0
 801b70a:	9306      	str	r3, [sp, #24]
 801b70c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801b710:	9307      	str	r3, [sp, #28]
 801b712:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801b716:	9216      	str	r2, [sp, #88]	; 0x58
 801b718:	9310      	str	r3, [sp, #64]	; 0x40
 801b71a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801b71c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801b720:	9112      	str	r1, [sp, #72]	; 0x48
 801b722:	9315      	str	r3, [sp, #84]	; 0x54
 801b724:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801b728:	9017      	str	r0, [sp, #92]	; 0x5c
 801b72a:	6850      	ldr	r0, [r2, #4]
 801b72c:	6812      	ldr	r2, [r2, #0]
 801b72e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b730:	fb00 1303 	mla	r3, r0, r3, r1
 801b734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b738:	18d3      	adds	r3, r2, r3
 801b73a:	930a      	str	r3, [sp, #40]	; 0x28
 801b73c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	9311      	str	r3, [sp, #68]	; 0x44
 801b742:	9b07      	ldr	r3, [sp, #28]
 801b744:	009b      	lsls	r3, r3, #2
 801b746:	eef0 9a60 	vmov.f32	s19, s1
 801b74a:	eeb0 9a41 	vmov.f32	s18, s2
 801b74e:	eeb0 8a62 	vmov.f32	s16, s5
 801b752:	eef0 8a43 	vmov.f32	s17, s6
 801b756:	eef0 ba44 	vmov.f32	s23, s8
 801b75a:	eeb0 ba64 	vmov.f32	s22, s9
 801b75e:	eef0 aa45 	vmov.f32	s21, s10
 801b762:	930e      	str	r3, [sp, #56]	; 0x38
 801b764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b766:	2b00      	cmp	r3, #0
 801b768:	dc03      	bgt.n	801b772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801b76a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	f340 833d 	ble.w	801bdec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f0>
 801b772:	9b06      	ldr	r3, [sp, #24]
 801b774:	2b00      	cmp	r3, #0
 801b776:	f340 8199 	ble.w	801baac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801b77a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b77c:	1412      	asrs	r2, r2, #16
 801b77e:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b782:	d432      	bmi.n	801b7ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b784:	9807      	ldr	r0, [sp, #28]
 801b786:	1c51      	adds	r1, r2, #1
 801b788:	4288      	cmp	r0, r1
 801b78a:	dd31      	ble.n	801b7f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	db2f      	blt.n	801b7f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b790:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b792:	1c59      	adds	r1, r3, #1
 801b794:	4288      	cmp	r0, r1
 801b796:	dd2b      	ble.n	801b7f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b798:	9b06      	ldr	r3, [sp, #24]
 801b79a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b79c:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b79e:	3b01      	subs	r3, #1
 801b7a0:	fb02 1203 	mla	r2, r2, r3, r1
 801b7a4:	1412      	asrs	r2, r2, #16
 801b7a6:	d42e      	bmi.n	801b806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b7a8:	9907      	ldr	r1, [sp, #28]
 801b7aa:	3201      	adds	r2, #1
 801b7ac:	4291      	cmp	r1, r2
 801b7ae:	dd2a      	ble.n	801b806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b7b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801b7b2:	fb02 4303 	mla	r3, r2, r3, r4
 801b7b6:	141b      	asrs	r3, r3, #16
 801b7b8:	d425      	bmi.n	801b806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b7ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b7bc:	3301      	adds	r3, #1
 801b7be:	429a      	cmp	r2, r3
 801b7c0:	dd21      	ble.n	801b806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7c4:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801b7c8:	f103 0e03 	add.w	lr, r3, #3
 801b7cc:	9b06      	ldr	r3, [sp, #24]
 801b7ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801b7d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	f300 81d3 	bgt.w	801bb7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x482>
 801b7d8:	9b06      	ldr	r3, [sp, #24]
 801b7da:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7e4:	4423      	add	r3, r4
 801b7e6:	930a      	str	r3, [sp, #40]	; 0x28
 801b7e8:	e162      	b.n	801bab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b7ea:	1c51      	adds	r1, r2, #1
 801b7ec:	f040 8151 	bne.w	801ba92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801b7f0:	9907      	ldr	r1, [sp, #28]
 801b7f2:	428a      	cmp	r2, r1
 801b7f4:	f280 814d 	bge.w	801ba92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801b7f8:	1c5a      	adds	r2, r3, #1
 801b7fa:	f2c0 814a 	blt.w	801ba92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801b7fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b800:	4293      	cmp	r3, r2
 801b802:	f280 8146 	bge.w	801ba92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801b806:	9b06      	ldr	r3, [sp, #24]
 801b808:	9314      	str	r3, [sp, #80]	; 0x50
 801b80a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b80c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801b810:	9313      	str	r3, [sp, #76]	; 0x4c
 801b812:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b814:	2b00      	cmp	r3, #0
 801b816:	dddf      	ble.n	801b7d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801b818:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b81a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801b81e:	1412      	asrs	r2, r2, #16
 801b820:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b824:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b828:	f100 8190 	bmi.w	801bb4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801b82c:	9f07      	ldr	r7, [sp, #28]
 801b82e:	1c55      	adds	r5, r2, #1
 801b830:	42af      	cmp	r7, r5
 801b832:	f340 818d 	ble.w	801bb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801b836:	2b00      	cmp	r3, #0
 801b838:	f2c0 818a 	blt.w	801bb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801b83c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b83e:	1c5d      	adds	r5, r3, #1
 801b840:	42af      	cmp	r7, r5
 801b842:	f340 8185 	ble.w	801bb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801b846:	9d07      	ldr	r5, [sp, #28]
 801b848:	fb03 2305 	mla	r3, r3, r5, r2
 801b84c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b84e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b856:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b85a:	2800      	cmp	r0, #0
 801b85c:	f000 8167 	beq.w	801bb2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x432>
 801b860:	686a      	ldr	r2, [r5, #4]
 801b862:	920b      	str	r2, [sp, #44]	; 0x2c
 801b864:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b868:	2900      	cmp	r1, #0
 801b86a:	f000 8169 	beq.w	801bb40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 801b86e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b870:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801b872:	18aa      	adds	r2, r5, r2
 801b874:	59ed      	ldr	r5, [r5, r7]
 801b876:	6852      	ldr	r2, [r2, #4]
 801b878:	9508      	str	r5, [sp, #32]
 801b87a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801b87e:	920c      	str	r2, [sp, #48]	; 0x30
 801b880:	0e15      	lsrs	r5, r2, #24
 801b882:	b280      	uxth	r0, r0
 801b884:	b289      	uxth	r1, r1
 801b886:	fb00 fb01 	mul.w	fp, r0, r1
 801b88a:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801b88e:	0100      	lsls	r0, r0, #4
 801b890:	eba0 090b 	sub.w	r9, r0, fp
 801b894:	b289      	uxth	r1, r1
 801b896:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801b89a:	fa1f f989 	uxth.w	r9, r9
 801b89e:	1a52      	subs	r2, r2, r1
 801b8a0:	b292      	uxth	r2, r2
 801b8a2:	fb09 f008 	mul.w	r0, r9, r8
 801b8a6:	fb02 000c 	mla	r0, r2, ip, r0
 801b8aa:	fb01 000a 	mla	r0, r1, sl, r0
 801b8ae:	fb0b 0005 	mla	r0, fp, r5, r0
 801b8b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b8b6:	2800      	cmp	r0, #0
 801b8b8:	f000 80e0 	beq.w	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801b8bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b8c0:	d01b      	beq.n	801b8fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801b8c2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b8c6:	fb0c fe0e 	mul.w	lr, ip, lr
 801b8ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b8ce:	fb0c fc03 	mul.w	ip, ip, r3
 801b8d2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801b8d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b8da:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b8de:	4473      	add	r3, lr
 801b8e0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801b8e4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801b8e8:	0a1b      	lsrs	r3, r3, #8
 801b8ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b8f2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b8f6:	ea43 030e 	orr.w	r3, r3, lr
 801b8fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b8fe:	d01e      	beq.n	801b93e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x242>
 801b900:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b902:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801b906:	fb08 fc0c 	mul.w	ip, r8, ip
 801b90a:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801b90e:	fb08 f80e 	mul.w	r8, r8, lr
 801b912:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b916:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b91a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b91e:	44e6      	add	lr, ip
 801b920:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801b924:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801b928:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b92c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b930:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b934:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b938:	ea4e 0708 	orr.w	r7, lr, r8
 801b93c:	970b      	str	r7, [sp, #44]	; 0x2c
 801b93e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b942:	d01e      	beq.n	801b982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x286>
 801b944:	9f08      	ldr	r7, [sp, #32]
 801b946:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801b94a:	fb0a f808 	mul.w	r8, sl, r8
 801b94e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801b952:	fb0a fa0c 	mul.w	sl, sl, ip
 801b956:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b95a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b95e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b962:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b966:	44c6      	add	lr, r8
 801b968:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b96c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b974:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b978:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b97c:	ea4e 070a 	orr.w	r7, lr, sl
 801b980:	9708      	str	r7, [sp, #32]
 801b982:	2dff      	cmp	r5, #255	; 0xff
 801b984:	d01d      	beq.n	801b9c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801b986:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b988:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801b98c:	fb05 f808 	mul.w	r8, r5, r8
 801b990:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801b994:	fb05 f50c 	mul.w	r5, r5, ip
 801b998:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b99c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b9a0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b9a4:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801b9a8:	44c6      	add	lr, r8
 801b9aa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b9ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b9b2:	0a2d      	lsrs	r5, r5, #8
 801b9b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b9b8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b9bc:	ea4e 0505 	orr.w	r5, lr, r5
 801b9c0:	950c      	str	r5, [sp, #48]	; 0x30
 801b9c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b9c4:	9f08      	ldr	r7, [sp, #32]
 801b9c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b9ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b9ce:	fb09 f505 	mul.w	r5, r9, r5
 801b9d2:	fb02 550c 	mla	r5, r2, ip, r5
 801b9d6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801b9da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b9dc:	fb01 550c 	mla	r5, r1, ip, r5
 801b9e0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801b9e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b9e6:	fb0b 550c 	mla	r5, fp, ip, r5
 801b9ea:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801b9ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b9f2:	fb09 f90c 	mul.w	r9, r9, ip
 801b9f6:	fb02 9303 	mla	r3, r2, r3, r9
 801b9fa:	9a08      	ldr	r2, [sp, #32]
 801b9fc:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801ba00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ba02:	fb01 330e 	mla	r3, r1, lr, r3
 801ba06:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ba0a:	fb0b 3b01 	mla	fp, fp, r1, r3
 801ba0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ba10:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ba12:	4343      	muls	r3, r0
 801ba14:	0a2d      	lsrs	r5, r5, #8
 801ba16:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ba1a:	1c58      	adds	r0, r3, #1
 801ba1c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ba20:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ba24:	ea45 050b 	orr.w	r5, r5, fp
 801ba28:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ba2c:	b2ea      	uxtb	r2, r5
 801ba2e:	7833      	ldrb	r3, [r6, #0]
 801ba30:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ba34:	b2c0      	uxtb	r0, r0
 801ba36:	fb12 f201 	smulbb	r2, r2, r1
 801ba3a:	fb03 2300 	mla	r3, r3, r0, r2
 801ba3e:	b29b      	uxth	r3, r3
 801ba40:	1c5a      	adds	r2, r3, #1
 801ba42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ba46:	7872      	ldrb	r2, [r6, #1]
 801ba48:	121b      	asrs	r3, r3, #8
 801ba4a:	fb12 f200 	smulbb	r2, r2, r0
 801ba4e:	7033      	strb	r3, [r6, #0]
 801ba50:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ba54:	fb03 2301 	mla	r3, r3, r1, r2
 801ba58:	b29b      	uxth	r3, r3
 801ba5a:	1c5a      	adds	r2, r3, #1
 801ba5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ba60:	121b      	asrs	r3, r3, #8
 801ba62:	7073      	strb	r3, [r6, #1]
 801ba64:	78b3      	ldrb	r3, [r6, #2]
 801ba66:	0c2d      	lsrs	r5, r5, #16
 801ba68:	fb13 f000 	smulbb	r0, r3, r0
 801ba6c:	fb05 0501 	mla	r5, r5, r1, r0
 801ba70:	b2ad      	uxth	r5, r5
 801ba72:	1c6b      	adds	r3, r5, #1
 801ba74:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ba78:	122d      	asrs	r5, r5, #8
 801ba7a:	70b5      	strb	r5, [r6, #2]
 801ba7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ba7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ba80:	4413      	add	r3, r2
 801ba82:	932b      	str	r3, [sp, #172]	; 0xac
 801ba84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba86:	441c      	add	r4, r3
 801ba88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ba8a:	3b01      	subs	r3, #1
 801ba8c:	3603      	adds	r6, #3
 801ba8e:	9314      	str	r3, [sp, #80]	; 0x50
 801ba90:	e6bf      	b.n	801b812 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x116>
 801ba92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ba94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ba96:	4413      	add	r3, r2
 801ba98:	932b      	str	r3, [sp, #172]	; 0xac
 801ba9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba9c:	441c      	add	r4, r3
 801ba9e:	9b06      	ldr	r3, [sp, #24]
 801baa0:	3b01      	subs	r3, #1
 801baa2:	9306      	str	r3, [sp, #24]
 801baa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801baa6:	3303      	adds	r3, #3
 801baa8:	930a      	str	r3, [sp, #40]	; 0x28
 801baaa:	e662      	b.n	801b772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801baac:	f47f ae74 	bne.w	801b798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801bab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	f340 819a 	ble.w	801bdec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f0>
 801bab8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801babc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bac0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bac4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bac6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801baca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bace:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bad2:	eef0 6a48 	vmov.f32	s13, s16
 801bad6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bada:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bade:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bae2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801bae6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801baea:	eef0 6a68 	vmov.f32	s13, s17
 801baee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801baf2:	ee18 2a10 	vmov	r2, s16
 801baf6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bafa:	fb92 f3f3 	sdiv	r3, r2, r3
 801bafe:	ee18 2a90 	vmov	r2, s17
 801bb02:	932d      	str	r3, [sp, #180]	; 0xb4
 801bb04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb06:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb0a:	932e      	str	r3, [sp, #184]	; 0xb8
 801bb0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bb0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bb10:	3b01      	subs	r3, #1
 801bb12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb16:	9312      	str	r3, [sp, #72]	; 0x48
 801bb18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb1a:	bf08      	it	eq
 801bb1c:	4613      	moveq	r3, r2
 801bb1e:	ee16 4a90 	vmov	r4, s13
 801bb22:	9306      	str	r3, [sp, #24]
 801bb24:	eef0 8a67 	vmov.f32	s17, s15
 801bb28:	eeb0 8a47 	vmov.f32	s16, s14
 801bb2c:	e61a      	b.n	801b764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801bb2e:	b151      	cbz	r1, 801bb46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 801bb30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb32:	58aa      	ldr	r2, [r5, r2]
 801bb34:	9208      	str	r2, [sp, #32]
 801bb36:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801bb3a:	25ff      	movs	r5, #255	; 0xff
 801bb3c:	46a8      	mov	r8, r5
 801bb3e:	e6a0      	b.n	801b882 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x186>
 801bb40:	25ff      	movs	r5, #255	; 0xff
 801bb42:	46aa      	mov	sl, r5
 801bb44:	e69d      	b.n	801b882 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x186>
 801bb46:	25ff      	movs	r5, #255	; 0xff
 801bb48:	46aa      	mov	sl, r5
 801bb4a:	e7f7      	b.n	801bb3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801bb4c:	1c57      	adds	r7, r2, #1
 801bb4e:	d195      	bne.n	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801bb50:	9d07      	ldr	r5, [sp, #28]
 801bb52:	4295      	cmp	r5, r2
 801bb54:	dd92      	ble.n	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801bb56:	1c5d      	adds	r5, r3, #1
 801bb58:	db90      	blt.n	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801bb5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bb5c:	429d      	cmp	r5, r3
 801bb5e:	dd8d      	ble.n	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801bb60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801bb62:	9201      	str	r2, [sp, #4]
 801bb64:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801bb68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb6a:	9300      	str	r3, [sp, #0]
 801bb6c:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801bb70:	9b07      	ldr	r3, [sp, #28]
 801bb72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bb76:	4631      	mov	r1, r6
 801bb78:	f7ff fc68 	bl	801b44c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801bb7c:	e77e      	b.n	801ba7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801bb7e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bb80:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801bb82:	9d07      	ldr	r5, [sp, #28]
 801bb84:	1412      	asrs	r2, r2, #16
 801bb86:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801bb8a:	1423      	asrs	r3, r4, #16
 801bb8c:	fb05 2303 	mla	r3, r5, r3, r2
 801bb90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb92:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801bb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bb9a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801bb9e:	0e1e      	lsrs	r6, r3, #24
 801bba0:	2900      	cmp	r1, #0
 801bba2:	f000 8114 	beq.w	801bdce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801bba6:	686a      	ldr	r2, [r5, #4]
 801bba8:	920d      	str	r2, [sp, #52]	; 0x34
 801bbaa:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801bbae:	2800      	cmp	r0, #0
 801bbb0:	f000 8116 	beq.w	801bde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e4>
 801bbb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bbb6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801bbb8:	18aa      	adds	r2, r5, r2
 801bbba:	59ed      	ldr	r5, [r5, r7]
 801bbbc:	6852      	ldr	r2, [r2, #4]
 801bbbe:	9509      	str	r5, [sp, #36]	; 0x24
 801bbc0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801bbc4:	920f      	str	r2, [sp, #60]	; 0x3c
 801bbc6:	0e15      	lsrs	r5, r2, #24
 801bbc8:	b289      	uxth	r1, r1
 801bbca:	b280      	uxth	r0, r0
 801bbcc:	fb01 fa00 	mul.w	sl, r1, r0
 801bbd0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801bbd4:	0109      	lsls	r1, r1, #4
 801bbd6:	eba1 080a 	sub.w	r8, r1, sl
 801bbda:	b280      	uxth	r0, r0
 801bbdc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801bbe0:	fa1f f888 	uxth.w	r8, r8
 801bbe4:	1a12      	subs	r2, r2, r0
 801bbe6:	b292      	uxth	r2, r2
 801bbe8:	fb08 f10c 	mul.w	r1, r8, ip
 801bbec:	fb02 1106 	mla	r1, r2, r6, r1
 801bbf0:	fb00 1109 	mla	r1, r0, r9, r1
 801bbf4:	fb0a 1105 	mla	r1, sl, r5, r1
 801bbf8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801bbfc:	2900      	cmp	r1, #0
 801bbfe:	f000 80da 	beq.w	801bdb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ba>
 801bc02:	2eff      	cmp	r6, #255	; 0xff
 801bc04:	d016      	beq.n	801bc34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x538>
 801bc06:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801bc0a:	4377      	muls	r7, r6
 801bc0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bc10:	435e      	muls	r6, r3
 801bc12:	0a3b      	lsrs	r3, r7, #8
 801bc14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bc18:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bc1c:	443b      	add	r3, r7
 801bc1e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801bc22:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801bc26:	0a1b      	lsrs	r3, r3, #8
 801bc28:	0a3f      	lsrs	r7, r7, #8
 801bc2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bc2e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bc32:	433b      	orrs	r3, r7
 801bc34:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bc38:	d01d      	beq.n	801bc76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x57a>
 801bc3a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801bc3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801bc3e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bc42:	fb0c f606 	mul.w	r6, ip, r6
 801bc46:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bc4a:	fb0c fc07 	mul.w	ip, ip, r7
 801bc4e:	0a37      	lsrs	r7, r6, #8
 801bc50:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc54:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bc58:	4437      	add	r7, r6
 801bc5a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801bc5e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801bc62:	0a3f      	lsrs	r7, r7, #8
 801bc64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc68:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc6c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bc70:	ea47 060c 	orr.w	r6, r7, ip
 801bc74:	960d      	str	r6, [sp, #52]	; 0x34
 801bc76:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bc7a:	d01d      	beq.n	801bcb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5bc>
 801bc7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bc7e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801bc82:	fb09 fc0c 	mul.w	ip, r9, ip
 801bc86:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bc8a:	fb09 f906 	mul.w	r9, r9, r6
 801bc8e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801bc92:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801bc96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc9a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bc9e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801bca2:	4467      	add	r7, ip
 801bca4:	0a3f      	lsrs	r7, r7, #8
 801bca6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bcaa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bcae:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bcb2:	ea47 0609 	orr.w	r6, r7, r9
 801bcb6:	9609      	str	r6, [sp, #36]	; 0x24
 801bcb8:	2dff      	cmp	r5, #255	; 0xff
 801bcba:	d01a      	beq.n	801bcf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f6>
 801bcbc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bcbe:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801bcc2:	fb05 fc0c 	mul.w	ip, r5, ip
 801bcc6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bcca:	4375      	muls	r5, r6
 801bccc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801bcd0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bcd4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bcd8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801bcdc:	4467      	add	r7, ip
 801bcde:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801bce2:	0a3f      	lsrs	r7, r7, #8
 801bce4:	0a2d      	lsrs	r5, r5, #8
 801bce6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bcea:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801bcee:	433d      	orrs	r5, r7
 801bcf0:	950f      	str	r5, [sp, #60]	; 0x3c
 801bcf2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bcf4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801bcf8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801bcfc:	fb08 f505 	mul.w	r5, r8, r5
 801bd00:	fb02 5506 	mla	r5, r2, r6, r5
 801bd04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bd06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bd0a:	fb00 5506 	mla	r5, r0, r6, r5
 801bd0e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bd10:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bd14:	fb0a 5506 	mla	r5, sl, r6, r5
 801bd18:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801bd1a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bd1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bd22:	fb08 f806 	mul.w	r8, r8, r6
 801bd26:	fb02 8303 	mla	r3, r2, r3, r8
 801bd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd2c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801bd30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd32:	fb00 3307 	mla	r3, r0, r7, r3
 801bd36:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801bd3a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801bd3e:	0a2d      	lsrs	r5, r5, #8
 801bd40:	fb01 f30b 	mul.w	r3, r1, fp
 801bd44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd48:	1c59      	adds	r1, r3, #1
 801bd4a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801bd4e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bd52:	ea45 050c 	orr.w	r5, r5, ip
 801bd56:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801bd5a:	b2ea      	uxtb	r2, r5
 801bd5c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801bd60:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801bd64:	b2c9      	uxtb	r1, r1
 801bd66:	fb12 f20b 	smulbb	r2, r2, fp
 801bd6a:	fb03 2301 	mla	r3, r3, r1, r2
 801bd6e:	b29b      	uxth	r3, r3
 801bd70:	1c5a      	adds	r2, r3, #1
 801bd72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bd76:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801bd7a:	121b      	asrs	r3, r3, #8
 801bd7c:	fb12 f201 	smulbb	r2, r2, r1
 801bd80:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801bd84:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801bd88:	fb03 230b 	mla	r3, r3, fp, r2
 801bd8c:	b29b      	uxth	r3, r3
 801bd8e:	1c5a      	adds	r2, r3, #1
 801bd90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bd94:	121b      	asrs	r3, r3, #8
 801bd96:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801bd9a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801bd9e:	0c2d      	lsrs	r5, r5, #16
 801bda0:	fb13 f101 	smulbb	r1, r3, r1
 801bda4:	fb05 150b 	mla	r5, r5, fp, r1
 801bda8:	b2ad      	uxth	r5, r5
 801bdaa:	1c69      	adds	r1, r5, #1
 801bdac:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801bdb0:	122d      	asrs	r5, r5, #8
 801bdb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801bdb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bdb8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801bdba:	4413      	add	r3, r2
 801bdbc:	932b      	str	r3, [sp, #172]	; 0xac
 801bdbe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bdc0:	441c      	add	r4, r3
 801bdc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bdc4:	3b01      	subs	r3, #1
 801bdc6:	f10e 0e03 	add.w	lr, lr, #3
 801bdca:	9313      	str	r3, [sp, #76]	; 0x4c
 801bdcc:	e500      	b.n	801b7d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801bdce:	b150      	cbz	r0, 801bde6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801bdd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdd2:	58aa      	ldr	r2, [r5, r2]
 801bdd4:	9209      	str	r2, [sp, #36]	; 0x24
 801bdd6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801bdda:	25ff      	movs	r5, #255	; 0xff
 801bddc:	46ac      	mov	ip, r5
 801bdde:	e6f3      	b.n	801bbc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4cc>
 801bde0:	25ff      	movs	r5, #255	; 0xff
 801bde2:	46a9      	mov	r9, r5
 801bde4:	e6f0      	b.n	801bbc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4cc>
 801bde6:	25ff      	movs	r5, #255	; 0xff
 801bde8:	46a9      	mov	r9, r5
 801bdea:	e7f7      	b.n	801bddc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 801bdec:	b019      	add	sp, #100	; 0x64
 801bdee:	ecbd 8b08 	vpop	{d8-d11}
 801bdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bdf8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdfc:	b085      	sub	sp, #20
 801bdfe:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801be02:	7888      	ldrb	r0, [r1, #2]
 801be04:	9000      	str	r0, [sp, #0]
 801be06:	7848      	ldrb	r0, [r1, #1]
 801be08:	9001      	str	r0, [sp, #4]
 801be0a:	fb04 c603 	mla	r6, r4, r3, ip
 801be0e:	7808      	ldrb	r0, [r1, #0]
 801be10:	9002      	str	r0, [sp, #8]
 801be12:	4691      	mov	r9, r2
 801be14:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801be18:	9a00      	ldr	r2, [sp, #0]
 801be1a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801be1e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801be22:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801be26:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801be2a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801be2e:	9a01      	ldr	r2, [sp, #4]
 801be30:	2c00      	cmp	r4, #0
 801be32:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801be36:	db3a      	blt.n	801beae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801be38:	45a0      	cmp	r8, r4
 801be3a:	dd38      	ble.n	801beae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801be3c:	f1bc 0f00 	cmp.w	ip, #0
 801be40:	db33      	blt.n	801beaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801be42:	4563      	cmp	r3, ip
 801be44:	dd31      	ble.n	801beaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801be46:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801be4a:	f11c 0601 	adds.w	r6, ip, #1
 801be4e:	d431      	bmi.n	801beb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801be50:	42b3      	cmp	r3, r6
 801be52:	dd2f      	ble.n	801beb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801be54:	b375      	cbz	r5, 801beb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801be56:	f8de 6004 	ldr.w	r6, [lr, #4]
 801be5a:	3401      	adds	r4, #1
 801be5c:	d42e      	bmi.n	801bebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801be5e:	45a0      	cmp	r8, r4
 801be60:	dd2c      	ble.n	801bebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801be62:	b35f      	cbz	r7, 801bebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801be64:	f1bc 0f00 	cmp.w	ip, #0
 801be68:	db26      	blt.n	801beb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801be6a:	4563      	cmp	r3, ip
 801be6c:	dd24      	ble.n	801beb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801be6e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801be72:	f11c 0c01 	adds.w	ip, ip, #1
 801be76:	d405      	bmi.n	801be84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801be78:	4563      	cmp	r3, ip
 801be7a:	dd03      	ble.n	801be84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801be7c:	b115      	cbz	r5, 801be84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801be7e:	3301      	adds	r3, #1
 801be80:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801be84:	2d0f      	cmp	r5, #15
 801be86:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801be8a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801be8e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801be92:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801be96:	d801      	bhi.n	801be9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 801be98:	2f0f      	cmp	r7, #15
 801be9a:	d911      	bls.n	801bec0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 801be9c:	4b76      	ldr	r3, [pc, #472]	; (801c078 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801be9e:	4a77      	ldr	r2, [pc, #476]	; (801c07c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 801bea0:	4877      	ldr	r0, [pc, #476]	; (801c080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 801bea2:	f240 11a5 	movw	r1, #421	; 0x1a5
 801bea6:	f001 fc43 	bl	801d730 <__assert_func>
 801beaa:	4602      	mov	r2, r0
 801beac:	e7cd      	b.n	801be4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 801beae:	4606      	mov	r6, r0
 801beb0:	4602      	mov	r2, r0
 801beb2:	e7d2      	b.n	801be5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801beb4:	4606      	mov	r6, r0
 801beb6:	e7d0      	b.n	801be5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801beb8:	4604      	mov	r4, r0
 801beba:	e7da      	b.n	801be72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 801bebc:	4604      	mov	r4, r0
 801bebe:	e7e1      	b.n	801be84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bec0:	b2ab      	uxth	r3, r5
 801bec2:	b2bf      	uxth	r7, r7
 801bec4:	fb03 fe07 	mul.w	lr, r3, r7
 801bec8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801becc:	011b      	lsls	r3, r3, #4
 801bece:	eba3 0c0e 	sub.w	ip, r3, lr
 801bed2:	b2bf      	uxth	r7, r7
 801bed4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801bed8:	fa1f fc8c 	uxth.w	ip, ip
 801bedc:	1bed      	subs	r5, r5, r7
 801bede:	b2ad      	uxth	r5, r5
 801bee0:	fb0c f30a 	mul.w	r3, ip, sl
 801bee4:	fb05 330b 	mla	r3, r5, fp, r3
 801bee8:	fb07 3309 	mla	r3, r7, r9, r3
 801beec:	fb0e 3308 	mla	r3, lr, r8, r3
 801bef0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bef4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bef8:	9303      	str	r3, [sp, #12]
 801befa:	d018      	beq.n	801bf2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x136>
 801befc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801bf00:	fb0b f303 	mul.w	r3, fp, r3
 801bf04:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bf08:	fb0b fb02 	mul.w	fp, fp, r2
 801bf0c:	0a1a      	lsrs	r2, r3, #8
 801bf0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bf12:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801bf16:	441a      	add	r2, r3
 801bf18:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801bf1c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801bf20:	0a12      	lsrs	r2, r2, #8
 801bf22:	0a1b      	lsrs	r3, r3, #8
 801bf24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bf28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf2c:	431a      	orrs	r2, r3
 801bf2e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bf32:	d019      	beq.n	801bf68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x170>
 801bf34:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801bf38:	fb0a fb0b 	mul.w	fp, sl, fp
 801bf3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bf40:	fb0a fa06 	mul.w	sl, sl, r6
 801bf44:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801bf48:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf4c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bf50:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801bf54:	445e      	add	r6, fp
 801bf56:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801bf5a:	0a36      	lsrs	r6, r6, #8
 801bf5c:	0a1b      	lsrs	r3, r3, #8
 801bf5e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf66:	431e      	orrs	r6, r3
 801bf68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bf6c:	d019      	beq.n	801bfa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1aa>
 801bf6e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801bf72:	fb09 fa0a 	mul.w	sl, r9, sl
 801bf76:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bf7a:	fb09 f904 	mul.w	r9, r9, r4
 801bf7e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801bf82:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bf86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bf8a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801bf8e:	4454      	add	r4, sl
 801bf90:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801bf94:	0a24      	lsrs	r4, r4, #8
 801bf96:	0a1b      	lsrs	r3, r3, #8
 801bf98:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bf9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bfa0:	431c      	orrs	r4, r3
 801bfa2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bfa6:	d019      	beq.n	801bfdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e4>
 801bfa8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801bfac:	fb08 f909 	mul.w	r9, r8, r9
 801bfb0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bfb4:	fb08 f800 	mul.w	r8, r8, r0
 801bfb8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801bfbc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bfc0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801bfc4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801bfc8:	4448      	add	r0, r9
 801bfca:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801bfce:	0a00      	lsrs	r0, r0, #8
 801bfd0:	0a1b      	lsrs	r3, r3, #8
 801bfd2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bfd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bfda:	4318      	orrs	r0, r3
 801bfdc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801bfe0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bfe4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801bfe8:	fb0c f808 	mul.w	r8, ip, r8
 801bfec:	fb0c f606 	mul.w	r6, ip, r6
 801bff0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bff4:	fb05 8803 	mla	r8, r5, r3, r8
 801bff8:	fb05 6202 	mla	r2, r5, r2, r6
 801bffc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801c000:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c004:	fb07 8803 	mla	r8, r7, r3, r8
 801c008:	fb07 2704 	mla	r7, r7, r4, r2
 801c00c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801c010:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c014:	fb0e 8303 	mla	r3, lr, r3, r8
 801c018:	fb0e 7e00 	mla	lr, lr, r0, r7
 801c01c:	0a1b      	lsrs	r3, r3, #8
 801c01e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c022:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c026:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c02a:	ea43 0e0e 	orr.w	lr, r3, lr
 801c02e:	9b03      	ldr	r3, [sp, #12]
 801c030:	9802      	ldr	r0, [sp, #8]
 801c032:	43db      	mvns	r3, r3
 801c034:	b2db      	uxtb	r3, r3
 801c036:	4358      	muls	r0, r3
 801c038:	1c42      	adds	r2, r0, #1
 801c03a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c03e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c042:	700a      	strb	r2, [r1, #0]
 801c044:	9a01      	ldr	r2, [sp, #4]
 801c046:	435a      	muls	r2, r3
 801c048:	1c50      	adds	r0, r2, #1
 801c04a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c04e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801c052:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c056:	704a      	strb	r2, [r1, #1]
 801c058:	9a00      	ldr	r2, [sp, #0]
 801c05a:	435a      	muls	r2, r3
 801c05c:	4613      	mov	r3, r2
 801c05e:	3201      	adds	r2, #1
 801c060:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c064:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c068:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c06c:	f881 e002 	strb.w	lr, [r1, #2]
 801c070:	b005      	add	sp, #20
 801c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c076:	bf00      	nop
 801c078:	080216c9 	.word	0x080216c9
 801c07c:	08021bbe 	.word	0x08021bbe
 801c080:	08021792 	.word	0x08021792

0801c084 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c088:	ed2d 8b08 	vpush	{d8-d11}
 801c08c:	b097      	sub	sp, #92	; 0x5c
 801c08e:	eeb0 aa40 	vmov.f32	s20, s0
 801c092:	9306      	str	r3, [sp, #24]
 801c094:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801c098:	9307      	str	r3, [sp, #28]
 801c09a:	9214      	str	r2, [sp, #80]	; 0x50
 801c09c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801c0a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c0a2:	9112      	str	r1, [sp, #72]	; 0x48
 801c0a4:	9310      	str	r3, [sp, #64]	; 0x40
 801c0a6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c0aa:	9015      	str	r0, [sp, #84]	; 0x54
 801c0ac:	6850      	ldr	r0, [r2, #4]
 801c0ae:	6812      	ldr	r2, [r2, #0]
 801c0b0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801c0b2:	fb00 1303 	mla	r3, r0, r3, r1
 801c0b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0ba:	18d3      	adds	r3, r2, r3
 801c0bc:	930a      	str	r3, [sp, #40]	; 0x28
 801c0be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	9311      	str	r3, [sp, #68]	; 0x44
 801c0c4:	9b07      	ldr	r3, [sp, #28]
 801c0c6:	009b      	lsls	r3, r3, #2
 801c0c8:	eef0 9a60 	vmov.f32	s19, s1
 801c0cc:	eeb0 9a41 	vmov.f32	s18, s2
 801c0d0:	eeb0 8a62 	vmov.f32	s16, s5
 801c0d4:	eef0 8a43 	vmov.f32	s17, s6
 801c0d8:	eef0 ba44 	vmov.f32	s23, s8
 801c0dc:	eeb0 ba64 	vmov.f32	s22, s9
 801c0e0:	eef0 aa45 	vmov.f32	s21, s10
 801c0e4:	930e      	str	r3, [sp, #56]	; 0x38
 801c0e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	dc03      	bgt.n	801c0f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c0ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	f340 832e 	ble.w	801c750 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801c0f4:	9b06      	ldr	r3, [sp, #24]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	f340 8187 	ble.w	801c40a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c0fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c0fe:	1412      	asrs	r2, r2, #16
 801c100:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c104:	d42f      	bmi.n	801c166 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801c106:	9807      	ldr	r0, [sp, #28]
 801c108:	1c51      	adds	r1, r2, #1
 801c10a:	4288      	cmp	r0, r1
 801c10c:	dd2e      	ble.n	801c16c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c10e:	2b00      	cmp	r3, #0
 801c110:	db2c      	blt.n	801c16c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c112:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c114:	1c59      	adds	r1, r3, #1
 801c116:	4288      	cmp	r0, r1
 801c118:	dd28      	ble.n	801c16c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c11a:	9b06      	ldr	r3, [sp, #24]
 801c11c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c11e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c120:	3b01      	subs	r3, #1
 801c122:	fb02 1203 	mla	r2, r2, r3, r1
 801c126:	1412      	asrs	r2, r2, #16
 801c128:	d42b      	bmi.n	801c182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c12a:	9907      	ldr	r1, [sp, #28]
 801c12c:	3201      	adds	r2, #1
 801c12e:	4291      	cmp	r1, r2
 801c130:	dd27      	ble.n	801c182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c132:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801c134:	fb02 4303 	mla	r3, r2, r3, r4
 801c138:	141b      	asrs	r3, r3, #16
 801c13a:	d422      	bmi.n	801c182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c13c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c13e:	3301      	adds	r3, #1
 801c140:	429a      	cmp	r2, r3
 801c142:	dd1e      	ble.n	801c182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c146:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c14a:	1cdd      	adds	r5, r3, #3
 801c14c:	f1bb 0f00 	cmp.w	fp, #0
 801c150:	f300 81c4 	bgt.w	801c4dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x458>
 801c154:	9b06      	ldr	r3, [sp, #24]
 801c156:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c15c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c160:	4423      	add	r3, r4
 801c162:	930a      	str	r3, [sp, #40]	; 0x28
 801c164:	e153      	b.n	801c40e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801c166:	1c51      	adds	r1, r2, #1
 801c168:	f040 8142 	bne.w	801c3f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801c16c:	9907      	ldr	r1, [sp, #28]
 801c16e:	428a      	cmp	r2, r1
 801c170:	f280 813e 	bge.w	801c3f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801c174:	1c5a      	adds	r2, r3, #1
 801c176:	f2c0 813b 	blt.w	801c3f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801c17a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c17c:	4293      	cmp	r3, r2
 801c17e:	f280 8137 	bge.w	801c3f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801c182:	9b06      	ldr	r3, [sp, #24]
 801c184:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c186:	9313      	str	r3, [sp, #76]	; 0x4c
 801c188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	dde2      	ble.n	801c154 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801c18e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c190:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c192:	1409      	asrs	r1, r1, #16
 801c194:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c198:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801c19c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c1a0:	f100 8186 	bmi.w	801c4b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42c>
 801c1a4:	9f07      	ldr	r7, [sp, #28]
 801c1a6:	1c4e      	adds	r6, r1, #1
 801c1a8:	42b7      	cmp	r7, r6
 801c1aa:	f340 8183 	ble.w	801c4b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	f2c0 8180 	blt.w	801c4b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801c1b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c1b6:	1c5e      	adds	r6, r3, #1
 801c1b8:	42b7      	cmp	r7, r6
 801c1ba:	f340 817b 	ble.w	801c4b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801c1be:	9e07      	ldr	r6, [sp, #28]
 801c1c0:	fb03 1306 	mla	r3, r3, r6, r1
 801c1c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c1c6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801c1ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c1ce:	0e1f      	lsrs	r7, r3, #24
 801c1d0:	2a00      	cmp	r2, #0
 801c1d2:	f000 815b 	beq.w	801c48c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x408>
 801c1d6:	6871      	ldr	r1, [r6, #4]
 801c1d8:	910b      	str	r1, [sp, #44]	; 0x2c
 801c1da:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801c1de:	2800      	cmp	r0, #0
 801c1e0:	f000 815d 	beq.w	801c49e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801c1e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c1e6:	eb06 0c01 	add.w	ip, r6, r1
 801c1ea:	5876      	ldr	r6, [r6, r1]
 801c1ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c1f0:	9608      	str	r6, [sp, #32]
 801c1f2:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801c1f6:	910c      	str	r1, [sp, #48]	; 0x30
 801c1f8:	0e0e      	lsrs	r6, r1, #24
 801c1fa:	b292      	uxth	r2, r2
 801c1fc:	b280      	uxth	r0, r0
 801c1fe:	fb02 fa00 	mul.w	sl, r2, r0
 801c202:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c206:	0112      	lsls	r2, r2, #4
 801c208:	eba2 080a 	sub.w	r8, r2, sl
 801c20c:	b280      	uxth	r0, r0
 801c20e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c212:	fa1f f888 	uxth.w	r8, r8
 801c216:	1a09      	subs	r1, r1, r0
 801c218:	b289      	uxth	r1, r1
 801c21a:	fb08 f20e 	mul.w	r2, r8, lr
 801c21e:	fb01 2207 	mla	r2, r1, r7, r2
 801c222:	fb00 2209 	mla	r2, r0, r9, r2
 801c226:	fb0a 2206 	mla	r2, sl, r6, r2
 801c22a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c22e:	2a00      	cmp	r2, #0
 801c230:	f000 80d3 	beq.w	801c3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c234:	2fff      	cmp	r7, #255	; 0xff
 801c236:	d01a      	beq.n	801c26e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801c238:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c23c:	fb07 fc0c 	mul.w	ip, r7, ip
 801c240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c244:	435f      	muls	r7, r3
 801c246:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c24a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c24e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c252:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801c256:	4463      	add	r3, ip
 801c258:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801c25c:	0a1b      	lsrs	r3, r3, #8
 801c25e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c262:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c266:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c26a:	ea43 030b 	orr.w	r3, r3, fp
 801c26e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c272:	d01e      	beq.n	801c2b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801c274:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c276:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801c27a:	fb0e fb0b 	mul.w	fp, lr, fp
 801c27e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c282:	fb0e fe07 	mul.w	lr, lr, r7
 801c286:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c28a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801c28e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c292:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c296:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801c29a:	44dc      	add	ip, fp
 801c29c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2a8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c2ac:	ea4c 070e 	orr.w	r7, ip, lr
 801c2b0:	970b      	str	r7, [sp, #44]	; 0x2c
 801c2b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c2b6:	d01e      	beq.n	801c2f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c2b8:	9f08      	ldr	r7, [sp, #32]
 801c2ba:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c2be:	fb09 fe0e 	mul.w	lr, r9, lr
 801c2c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c2c6:	fb09 f907 	mul.w	r9, r9, r7
 801c2ca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c2ce:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801c2d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2d6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c2da:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c2de:	44f4      	add	ip, lr
 801c2e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c2e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2ec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c2f0:	ea4c 0709 	orr.w	r7, ip, r9
 801c2f4:	9708      	str	r7, [sp, #32]
 801c2f6:	2eff      	cmp	r6, #255	; 0xff
 801c2f8:	d01c      	beq.n	801c334 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c2fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c2fc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c300:	fb06 fe0e 	mul.w	lr, r6, lr
 801c304:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c308:	437e      	muls	r6, r7
 801c30a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c30e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c312:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c316:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801c31a:	44f4      	add	ip, lr
 801c31c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801c320:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c324:	0a36      	lsrs	r6, r6, #8
 801c326:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c32a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c32e:	ea4c 0606 	orr.w	r6, ip, r6
 801c332:	960c      	str	r6, [sp, #48]	; 0x30
 801c334:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801c336:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c33a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801c33e:	fb08 f606 	mul.w	r6, r8, r6
 801c342:	fb01 6607 	mla	r6, r1, r7, r6
 801c346:	9f08      	ldr	r7, [sp, #32]
 801c348:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c34c:	fb00 6607 	mla	r6, r0, r7, r6
 801c350:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c352:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c356:	fb0a 6607 	mla	r6, sl, r7, r6
 801c35a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c35c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c364:	fb08 f807 	mul.w	r8, r8, r7
 801c368:	fb01 8303 	mla	r3, r1, r3, r8
 801c36c:	9908      	ldr	r1, [sp, #32]
 801c36e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801c372:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c374:	fb00 330c 	mla	r3, r0, ip, r3
 801c378:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c37c:	fb0a 3a00 	mla	sl, sl, r0, r3
 801c380:	0a36      	lsrs	r6, r6, #8
 801c382:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c386:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c38a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c38e:	ea46 060a 	orr.w	r6, r6, sl
 801c392:	2aff      	cmp	r2, #255	; 0xff
 801c394:	b2f0      	uxtb	r0, r6
 801c396:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801c39a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801c39e:	f000 8084 	beq.w	801c4aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x426>
 801c3a2:	782b      	ldrb	r3, [r5, #0]
 801c3a4:	43d2      	mvns	r2, r2
 801c3a6:	b2d2      	uxtb	r2, r2
 801c3a8:	fb03 f702 	mul.w	r7, r3, r2
 801c3ac:	1c7b      	adds	r3, r7, #1
 801c3ae:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801c3b2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c3b6:	702b      	strb	r3, [r5, #0]
 801c3b8:	786b      	ldrb	r3, [r5, #1]
 801c3ba:	fb03 f002 	mul.w	r0, r3, r2
 801c3be:	1c43      	adds	r3, r0, #1
 801c3c0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c3c4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c3c8:	706b      	strb	r3, [r5, #1]
 801c3ca:	78ab      	ldrb	r3, [r5, #2]
 801c3cc:	4353      	muls	r3, r2
 801c3ce:	1c5a      	adds	r2, r3, #1
 801c3d0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c3d4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801c3d8:	70ae      	strb	r6, [r5, #2]
 801c3da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c3dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c3de:	4413      	add	r3, r2
 801c3e0:	9329      	str	r3, [sp, #164]	; 0xa4
 801c3e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c3e4:	441c      	add	r4, r3
 801c3e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c3e8:	3b01      	subs	r3, #1
 801c3ea:	3503      	adds	r5, #3
 801c3ec:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3ee:	e6cb      	b.n	801c188 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c3f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c3f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c3f4:	4413      	add	r3, r2
 801c3f6:	9329      	str	r3, [sp, #164]	; 0xa4
 801c3f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c3fa:	441c      	add	r4, r3
 801c3fc:	9b06      	ldr	r3, [sp, #24]
 801c3fe:	3b01      	subs	r3, #1
 801c400:	9306      	str	r3, [sp, #24]
 801c402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c404:	3303      	adds	r3, #3
 801c406:	930a      	str	r3, [sp, #40]	; 0x28
 801c408:	e674      	b.n	801c0f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c40a:	f47f ae86 	bne.w	801c11a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c40e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c410:	2b00      	cmp	r3, #0
 801c412:	f340 819d 	ble.w	801c750 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801c416:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c41a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c41e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c422:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c424:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c428:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c42c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c430:	eef0 6a48 	vmov.f32	s13, s16
 801c434:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c438:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c43c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c440:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801c444:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c448:	eef0 6a68 	vmov.f32	s13, s17
 801c44c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c450:	ee18 2a10 	vmov	r2, s16
 801c454:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c458:	fb92 f3f3 	sdiv	r3, r2, r3
 801c45c:	ee18 2a90 	vmov	r2, s17
 801c460:	932b      	str	r3, [sp, #172]	; 0xac
 801c462:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c464:	fb92 f3f3 	sdiv	r3, r2, r3
 801c468:	932c      	str	r3, [sp, #176]	; 0xb0
 801c46a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c46c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c46e:	3b01      	subs	r3, #1
 801c470:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c474:	9312      	str	r3, [sp, #72]	; 0x48
 801c476:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c478:	bf08      	it	eq
 801c47a:	4613      	moveq	r3, r2
 801c47c:	ee16 4a90 	vmov	r4, s13
 801c480:	9306      	str	r3, [sp, #24]
 801c482:	eef0 8a67 	vmov.f32	s17, s15
 801c486:	eeb0 8a47 	vmov.f32	s16, s14
 801c48a:	e62c      	b.n	801c0e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801c48c:	b150      	cbz	r0, 801c4a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x420>
 801c48e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c490:	5871      	ldr	r1, [r6, r1]
 801c492:	9108      	str	r1, [sp, #32]
 801c494:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801c498:	26ff      	movs	r6, #255	; 0xff
 801c49a:	46b6      	mov	lr, r6
 801c49c:	e6ad      	b.n	801c1fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x176>
 801c49e:	26ff      	movs	r6, #255	; 0xff
 801c4a0:	46b1      	mov	r9, r6
 801c4a2:	e6aa      	b.n	801c1fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x176>
 801c4a4:	26ff      	movs	r6, #255	; 0xff
 801c4a6:	46b1      	mov	r9, r6
 801c4a8:	e7f7      	b.n	801c49a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801c4aa:	7028      	strb	r0, [r5, #0]
 801c4ac:	7069      	strb	r1, [r5, #1]
 801c4ae:	e793      	b.n	801c3d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801c4b0:	1c4f      	adds	r7, r1, #1
 801c4b2:	d192      	bne.n	801c3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c4b4:	9e07      	ldr	r6, [sp, #28]
 801c4b6:	428e      	cmp	r6, r1
 801c4b8:	dd8f      	ble.n	801c3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c4ba:	1c5e      	adds	r6, r3, #1
 801c4bc:	db8d      	blt.n	801c3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c4be:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c4c0:	429e      	cmp	r6, r3
 801c4c2:	dd8a      	ble.n	801c3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c4c4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801c4c8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801c4cc:	9600      	str	r6, [sp, #0]
 801c4ce:	9b07      	ldr	r3, [sp, #28]
 801c4d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c4d4:	4629      	mov	r1, r5
 801c4d6:	f7ff fc8f 	bl	801bdf8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801c4da:	e77e      	b.n	801c3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c4dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c4de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c4e0:	9e07      	ldr	r6, [sp, #28]
 801c4e2:	1409      	asrs	r1, r1, #16
 801c4e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c4e8:	1423      	asrs	r3, r4, #16
 801c4ea:	fb06 1303 	mla	r3, r6, r3, r1
 801c4ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c4f0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801c4f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c4f8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c4fc:	0e1f      	lsrs	r7, r3, #24
 801c4fe:	2a00      	cmp	r2, #0
 801c500:	f000 8112 	beq.w	801c728 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 801c504:	6871      	ldr	r1, [r6, #4]
 801c506:	910d      	str	r1, [sp, #52]	; 0x34
 801c508:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801c50c:	2800      	cmp	r0, #0
 801c50e:	f000 8114 	beq.w	801c73a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801c512:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c514:	eb06 0c01 	add.w	ip, r6, r1
 801c518:	5876      	ldr	r6, [r6, r1]
 801c51a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801c51e:	9609      	str	r6, [sp, #36]	; 0x24
 801c520:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801c524:	910f      	str	r1, [sp, #60]	; 0x3c
 801c526:	0e0e      	lsrs	r6, r1, #24
 801c528:	b292      	uxth	r2, r2
 801c52a:	b280      	uxth	r0, r0
 801c52c:	fb02 fa00 	mul.w	sl, r2, r0
 801c530:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c534:	0112      	lsls	r2, r2, #4
 801c536:	eba2 080a 	sub.w	r8, r2, sl
 801c53a:	b280      	uxth	r0, r0
 801c53c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c540:	fa1f f888 	uxth.w	r8, r8
 801c544:	1a09      	subs	r1, r1, r0
 801c546:	b289      	uxth	r1, r1
 801c548:	fb08 f20e 	mul.w	r2, r8, lr
 801c54c:	fb01 2207 	mla	r2, r1, r7, r2
 801c550:	fb00 2209 	mla	r2, r0, r9, r2
 801c554:	fb0a 2206 	mla	r2, sl, r6, r2
 801c558:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c55c:	2a00      	cmp	r2, #0
 801c55e:	f000 80d9 	beq.w	801c714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 801c562:	2fff      	cmp	r7, #255	; 0xff
 801c564:	d01a      	beq.n	801c59c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x518>
 801c566:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c56a:	fb07 fc0c 	mul.w	ip, r7, ip
 801c56e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c572:	435f      	muls	r7, r3
 801c574:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c578:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c57c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c580:	4463      	add	r3, ip
 801c582:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801c586:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801c58a:	0a1b      	lsrs	r3, r3, #8
 801c58c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c590:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c594:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c598:	ea43 030c 	orr.w	r3, r3, ip
 801c59c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c5a0:	d021      	beq.n	801c5e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x562>
 801c5a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c5a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c5a8:	fb0e f707 	mul.w	r7, lr, r7
 801c5ac:	9713      	str	r7, [sp, #76]	; 0x4c
 801c5ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c5b0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801c5b4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c5b6:	fb0e fe0c 	mul.w	lr, lr, ip
 801c5ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c5be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c5c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c5c6:	44bc      	add	ip, r7
 801c5c8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801c5cc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801c5d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c5d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c5d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c5dc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c5e0:	ea4c 070e 	orr.w	r7, ip, lr
 801c5e4:	970d      	str	r7, [sp, #52]	; 0x34
 801c5e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c5ea:	d01e      	beq.n	801c62a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a6>
 801c5ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c5ee:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c5f2:	fb09 fe0e 	mul.w	lr, r9, lr
 801c5f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c5fa:	fb09 f907 	mul.w	r9, r9, r7
 801c5fe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c602:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801c606:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c60a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c60e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c612:	44f4      	add	ip, lr
 801c614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c618:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c61c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c620:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c624:	ea4c 0709 	orr.w	r7, ip, r9
 801c628:	9709      	str	r7, [sp, #36]	; 0x24
 801c62a:	2eff      	cmp	r6, #255	; 0xff
 801c62c:	d01c      	beq.n	801c668 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e4>
 801c62e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c630:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c634:	fb06 fe0e 	mul.w	lr, r6, lr
 801c638:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c63c:	437e      	muls	r6, r7
 801c63e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c642:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c646:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c64a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801c64e:	44f4      	add	ip, lr
 801c650:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801c654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c658:	0a36      	lsrs	r6, r6, #8
 801c65a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c65e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c662:	ea4c 0606 	orr.w	r6, ip, r6
 801c666:	960f      	str	r6, [sp, #60]	; 0x3c
 801c668:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801c66a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c66e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801c672:	fb08 f606 	mul.w	r6, r8, r6
 801c676:	fb01 6607 	mla	r6, r1, r7, r6
 801c67a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c67c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c680:	fb00 6607 	mla	r6, r0, r7, r6
 801c684:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c686:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c68a:	fb0a 6607 	mla	r6, sl, r7, r6
 801c68e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c690:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c698:	fb08 f807 	mul.w	r8, r8, r7
 801c69c:	fb01 8303 	mla	r3, r1, r3, r8
 801c6a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c6a2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801c6a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c6a8:	fb00 330c 	mla	r3, r0, ip, r3
 801c6ac:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801c6b0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801c6b4:	0a36      	lsrs	r6, r6, #8
 801c6b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c6ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c6be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c6c2:	ea46 060e 	orr.w	r6, r6, lr
 801c6c6:	2aff      	cmp	r2, #255	; 0xff
 801c6c8:	b2f0      	uxtb	r0, r6
 801c6ca:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801c6ce:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801c6d2:	d038      	beq.n	801c746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 801c6d4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801c6d8:	43d2      	mvns	r2, r2
 801c6da:	b2d2      	uxtb	r2, r2
 801c6dc:	4357      	muls	r7, r2
 801c6de:	1c7b      	adds	r3, r7, #1
 801c6e0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801c6e4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c6e8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 801c6ec:	f805 3c03 	strb.w	r3, [r5, #-3]
 801c6f0:	4350      	muls	r0, r2
 801c6f2:	1c43      	adds	r3, r0, #1
 801c6f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c6f8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c6fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c700:	f805 1c02 	strb.w	r1, [r5, #-2]
 801c704:	4353      	muls	r3, r2
 801c706:	1c5a      	adds	r2, r3, #1
 801c708:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c70c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801c710:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c714:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c716:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c718:	4413      	add	r3, r2
 801c71a:	9329      	str	r3, [sp, #164]	; 0xa4
 801c71c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c71e:	3503      	adds	r5, #3
 801c720:	441c      	add	r4, r3
 801c722:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c726:	e511      	b.n	801c14c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c728:	b150      	cbz	r0, 801c740 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801c72a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c72c:	5871      	ldr	r1, [r6, r1]
 801c72e:	9109      	str	r1, [sp, #36]	; 0x24
 801c730:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801c734:	26ff      	movs	r6, #255	; 0xff
 801c736:	46b6      	mov	lr, r6
 801c738:	e6f6      	b.n	801c528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a4>
 801c73a:	26ff      	movs	r6, #255	; 0xff
 801c73c:	46b1      	mov	r9, r6
 801c73e:	e6f3      	b.n	801c528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a4>
 801c740:	26ff      	movs	r6, #255	; 0xff
 801c742:	46b1      	mov	r9, r6
 801c744:	e7f7      	b.n	801c736 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 801c746:	f805 0c03 	strb.w	r0, [r5, #-3]
 801c74a:	f805 1c02 	strb.w	r1, [r5, #-2]
 801c74e:	e7df      	b.n	801c710 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 801c750:	b017      	add	sp, #92	; 0x5c
 801c752:	ecbd 8b08 	vpop	{d8-d11}
 801c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c75c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801c75c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c760:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801c764:	2800      	cmp	r0, #0
 801c766:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c76a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801c76e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801c772:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801c776:	fb0c 0e03 	mla	lr, ip, r3, r0
 801c77a:	db6b      	blt.n	801c854 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801c77c:	4580      	cmp	r8, r0
 801c77e:	dd69      	ble.n	801c854 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801c780:	f1bc 0f00 	cmp.w	ip, #0
 801c784:	db66      	blt.n	801c854 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801c786:	45e1      	cmp	r9, ip
 801c788:	dd64      	ble.n	801c854 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801c78a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801c78e:	f01e 0f01 	tst.w	lr, #1
 801c792:	5d16      	ldrb	r6, [r2, r4]
 801c794:	bf0c      	ite	eq
 801c796:	f006 060f 	andeq.w	r6, r6, #15
 801c79a:	1136      	asrne	r6, r6, #4
 801c79c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c7a0:	b2f6      	uxtb	r6, r6
 801c7a2:	f110 0a01 	adds.w	sl, r0, #1
 801c7a6:	d457      	bmi.n	801c858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801c7a8:	45d0      	cmp	r8, sl
 801c7aa:	dd55      	ble.n	801c858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801c7ac:	f1bc 0f00 	cmp.w	ip, #0
 801c7b0:	db52      	blt.n	801c858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801c7b2:	45e1      	cmp	r9, ip
 801c7b4:	dd50      	ble.n	801c858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801c7b6:	2f00      	cmp	r7, #0
 801c7b8:	f000 80ac 	beq.w	801c914 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801c7bc:	f10e 0b01 	add.w	fp, lr, #1
 801c7c0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801c7c4:	f01b 0f01 	tst.w	fp, #1
 801c7c8:	5d14      	ldrb	r4, [r2, r4]
 801c7ca:	bf0c      	ite	eq
 801c7cc:	f004 040f 	andeq.w	r4, r4, #15
 801c7d0:	1124      	asrne	r4, r4, #4
 801c7d2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c7d6:	b2e4      	uxtb	r4, r4
 801c7d8:	2d00      	cmp	r5, #0
 801c7da:	f000 8096 	beq.w	801c90a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801c7de:	2800      	cmp	r0, #0
 801c7e0:	f10c 0c01 	add.w	ip, ip, #1
 801c7e4:	db3c      	blt.n	801c860 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801c7e6:	4580      	cmp	r8, r0
 801c7e8:	dd3a      	ble.n	801c860 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801c7ea:	f1bc 0f00 	cmp.w	ip, #0
 801c7ee:	db37      	blt.n	801c860 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801c7f0:	45e1      	cmp	r9, ip
 801c7f2:	dd35      	ble.n	801c860 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801c7f4:	eb03 0b0e 	add.w	fp, r3, lr
 801c7f8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801c7fc:	f01b 0f01 	tst.w	fp, #1
 801c800:	5c10      	ldrb	r0, [r2, r0]
 801c802:	bf0c      	ite	eq
 801c804:	f000 000f 	andeq.w	r0, r0, #15
 801c808:	1100      	asrne	r0, r0, #4
 801c80a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c80e:	b2c0      	uxtb	r0, r0
 801c810:	f1ba 0f00 	cmp.w	sl, #0
 801c814:	db26      	blt.n	801c864 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801c816:	45d0      	cmp	r8, sl
 801c818:	dd24      	ble.n	801c864 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801c81a:	f1bc 0f00 	cmp.w	ip, #0
 801c81e:	db21      	blt.n	801c864 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801c820:	45e1      	cmp	r9, ip
 801c822:	dd1f      	ble.n	801c864 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801c824:	b307      	cbz	r7, 801c868 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801c826:	3301      	adds	r3, #1
 801c828:	449e      	add	lr, r3
 801c82a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c82e:	f01e 0f01 	tst.w	lr, #1
 801c832:	5cd3      	ldrb	r3, [r2, r3]
 801c834:	bf0c      	ite	eq
 801c836:	f003 030f 	andeq.w	r3, r3, #15
 801c83a:	111b      	asrne	r3, r3, #4
 801c83c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c840:	b2db      	uxtb	r3, r3
 801c842:	2f0f      	cmp	r7, #15
 801c844:	d911      	bls.n	801c86a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801c846:	4b35      	ldr	r3, [pc, #212]	; (801c91c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801c848:	4a35      	ldr	r2, [pc, #212]	; (801c920 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801c84a:	4836      	ldr	r0, [pc, #216]	; (801c924 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801c84c:	f240 11a5 	movw	r1, #421	; 0x1a5
 801c850:	f000 ff6e 	bl	801d730 <__assert_func>
 801c854:	2600      	movs	r6, #0
 801c856:	e7a4      	b.n	801c7a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801c858:	2400      	movs	r4, #0
 801c85a:	e7bd      	b.n	801c7d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801c85c:	463c      	mov	r4, r7
 801c85e:	e7be      	b.n	801c7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801c860:	2000      	movs	r0, #0
 801c862:	e7d5      	b.n	801c810 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801c864:	2300      	movs	r3, #0
 801c866:	e7ec      	b.n	801c842 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801c868:	463b      	mov	r3, r7
 801c86a:	2d0f      	cmp	r5, #15
 801c86c:	d8eb      	bhi.n	801c846 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801c86e:	b2bf      	uxth	r7, r7
 801c870:	b2ad      	uxth	r5, r5
 801c872:	fb07 f205 	mul.w	r2, r7, r5
 801c876:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801c87a:	013f      	lsls	r7, r7, #4
 801c87c:	b2ad      	uxth	r5, r5
 801c87e:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801c882:	1abf      	subs	r7, r7, r2
 801c884:	ebac 0c05 	sub.w	ip, ip, r5
 801c888:	b2bf      	uxth	r7, r7
 801c88a:	fa1f fc8c 	uxth.w	ip, ip
 801c88e:	437c      	muls	r4, r7
 801c890:	fb06 440c 	mla	r4, r6, ip, r4
 801c894:	fb05 4400 	mla	r4, r5, r0, r4
 801c898:	fb02 4203 	mla	r2, r2, r3, r4
 801c89c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c8a0:	b38a      	cbz	r2, 801c906 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801c8a2:	4b21      	ldr	r3, [pc, #132]	; (801c928 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801c8a4:	681c      	ldr	r4, [r3, #0]
 801c8a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801c8aa:	4353      	muls	r3, r2
 801c8ac:	1c5a      	adds	r2, r3, #1
 801c8ae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c8b2:	1212      	asrs	r2, r2, #8
 801c8b4:	b290      	uxth	r0, r2
 801c8b6:	43d2      	mvns	r2, r2
 801c8b8:	b2d3      	uxtb	r3, r2
 801c8ba:	b2e5      	uxtb	r5, r4
 801c8bc:	780a      	ldrb	r2, [r1, #0]
 801c8be:	fb15 f500 	smulbb	r5, r5, r0
 801c8c2:	fb02 5203 	mla	r2, r2, r3, r5
 801c8c6:	b292      	uxth	r2, r2
 801c8c8:	1c55      	adds	r5, r2, #1
 801c8ca:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c8ce:	784d      	ldrb	r5, [r1, #1]
 801c8d0:	1212      	asrs	r2, r2, #8
 801c8d2:	fb15 f503 	smulbb	r5, r5, r3
 801c8d6:	700a      	strb	r2, [r1, #0]
 801c8d8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801c8dc:	fb02 5200 	mla	r2, r2, r0, r5
 801c8e0:	b292      	uxth	r2, r2
 801c8e2:	1c55      	adds	r5, r2, #1
 801c8e4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c8e8:	1212      	asrs	r2, r2, #8
 801c8ea:	704a      	strb	r2, [r1, #1]
 801c8ec:	788a      	ldrb	r2, [r1, #2]
 801c8ee:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801c8f2:	fb12 f303 	smulbb	r3, r2, r3
 801c8f6:	fb04 3300 	mla	r3, r4, r0, r3
 801c8fa:	b29b      	uxth	r3, r3
 801c8fc:	1c5a      	adds	r2, r3, #1
 801c8fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c902:	121b      	asrs	r3, r3, #8
 801c904:	708b      	strb	r3, [r1, #2]
 801c906:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c90a:	2f0f      	cmp	r7, #15
 801c90c:	d89b      	bhi.n	801c846 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801c90e:	462b      	mov	r3, r5
 801c910:	4628      	mov	r0, r5
 801c912:	e7ac      	b.n	801c86e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801c914:	2d00      	cmp	r5, #0
 801c916:	d1a1      	bne.n	801c85c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801c918:	462c      	mov	r4, r5
 801c91a:	e7f8      	b.n	801c90e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801c91c:	080216c9 	.word	0x080216c9
 801c920:	08021bbe 	.word	0x08021bbe
 801c924:	08021792 	.word	0x08021792
 801c928:	200084f4 	.word	0x200084f4

0801c92c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c930:	ed2d 8b08 	vpush	{d8-d11}
 801c934:	b097      	sub	sp, #92	; 0x5c
 801c936:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801c93a:	9308      	str	r3, [sp, #32]
 801c93c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801c940:	9214      	str	r2, [sp, #80]	; 0x50
 801c942:	9309      	str	r3, [sp, #36]	; 0x24
 801c944:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c946:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801c94a:	910c      	str	r1, [sp, #48]	; 0x30
 801c94c:	930e      	str	r3, [sp, #56]	; 0x38
 801c94e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c952:	9015      	str	r0, [sp, #84]	; 0x54
 801c954:	6850      	ldr	r0, [r2, #4]
 801c956:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 801c95a:	fb00 1803 	mla	r8, r0, r3, r1
 801c95e:	6813      	ldr	r3, [r2, #0]
 801c960:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c964:	4498      	add	r8, r3
 801c966:	f10b 0301 	add.w	r3, fp, #1
 801c96a:	f023 0301 	bic.w	r3, r3, #1
 801c96e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c970:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c972:	681f      	ldr	r7, [r3, #0]
 801c974:	eeb0 aa40 	vmov.f32	s20, s0
 801c978:	eef0 9a60 	vmov.f32	s19, s1
 801c97c:	eeb0 9a41 	vmov.f32	s18, s2
 801c980:	eeb0 8a62 	vmov.f32	s16, s5
 801c984:	eef0 8a43 	vmov.f32	s17, s6
 801c988:	eef0 ba44 	vmov.f32	s23, s8
 801c98c:	eeb0 ba64 	vmov.f32	s22, s9
 801c990:	eef0 aa45 	vmov.f32	s21, s10
 801c994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c996:	2b00      	cmp	r3, #0
 801c998:	dc03      	bgt.n	801c9a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801c99a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	f340 8236 	ble.w	801ce0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801c9a2:	9b08      	ldr	r3, [sp, #32]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	f340 810b 	ble.w	801cbc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c9aa:	142a      	asrs	r2, r5, #16
 801c9ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c9b0:	d42c      	bmi.n	801ca0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801c9b2:	1c51      	adds	r1, r2, #1
 801c9b4:	458b      	cmp	fp, r1
 801c9b6:	dd2c      	ble.n	801ca12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	db2a      	blt.n	801ca12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801c9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c9be:	1c59      	adds	r1, r3, #1
 801c9c0:	4288      	cmp	r0, r1
 801c9c2:	dd26      	ble.n	801ca12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801c9c4:	9b08      	ldr	r3, [sp, #32]
 801c9c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c9c8:	3b01      	subs	r3, #1
 801c9ca:	fb02 5203 	mla	r2, r2, r3, r5
 801c9ce:	1412      	asrs	r2, r2, #16
 801c9d0:	d429      	bmi.n	801ca26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9d2:	3201      	adds	r2, #1
 801c9d4:	4593      	cmp	fp, r2
 801c9d6:	dd26      	ble.n	801ca26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801c9da:	fb02 6303 	mla	r3, r2, r3, r6
 801c9de:	141b      	asrs	r3, r3, #16
 801c9e0:	d421      	bmi.n	801ca26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c9e4:	3301      	adds	r3, #1
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	dd1d      	ble.n	801ca26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9ea:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c9ee:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801c9f2:	f108 0e03 	add.w	lr, r8, #3
 801c9f6:	f1b9 0f00 	cmp.w	r9, #0
 801c9fa:	f300 814e 	bgt.w	801cc9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 801c9fe:	9b08      	ldr	r3, [sp, #32]
 801ca00:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ca04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca08:	44a0      	add	r8, r4
 801ca0a:	e0db      	b.n	801cbc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x298>
 801ca0c:	1c51      	adds	r1, r2, #1
 801ca0e:	f040 80cd 	bne.w	801cbac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ca12:	4593      	cmp	fp, r2
 801ca14:	f340 80ca 	ble.w	801cbac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ca18:	1c5a      	adds	r2, r3, #1
 801ca1a:	f2c0 80c7 	blt.w	801cbac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ca1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca20:	4293      	cmp	r3, r2
 801ca22:	f280 80c3 	bge.w	801cbac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ca26:	9b08      	ldr	r3, [sp, #32]
 801ca28:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801ca2c:	930d      	str	r3, [sp, #52]	; 0x34
 801ca2e:	46c1      	mov	r9, r8
 801ca30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	dde3      	ble.n	801c9fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801ca36:	1428      	asrs	r0, r5, #16
 801ca38:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ca3c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ca40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ca44:	f100 8110 	bmi.w	801cc68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801ca48:	f100 0c01 	add.w	ip, r0, #1
 801ca4c:	45e3      	cmp	fp, ip
 801ca4e:	f340 810d 	ble.w	801cc6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	f2c0 810a 	blt.w	801cc6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801ca58:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ca5a:	f103 0c01 	add.w	ip, r3, #1
 801ca5e:	4564      	cmp	r4, ip
 801ca60:	f340 8104 	ble.w	801cc6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801ca64:	fb03 030a 	mla	r3, r3, sl, r0
 801ca68:	0858      	lsrs	r0, r3, #1
 801ca6a:	07dc      	lsls	r4, r3, #31
 801ca6c:	5c38      	ldrb	r0, [r7, r0]
 801ca6e:	bf54      	ite	pl
 801ca70:	f000 000f 	andpl.w	r0, r0, #15
 801ca74:	1100      	asrmi	r0, r0, #4
 801ca76:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ca7a:	b2c0      	uxtb	r0, r0
 801ca7c:	2a00      	cmp	r2, #0
 801ca7e:	f000 80e0 	beq.w	801cc42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 801ca82:	f103 0e01 	add.w	lr, r3, #1
 801ca86:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801ca8a:	f01e 0f01 	tst.w	lr, #1
 801ca8e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ca92:	bf0c      	ite	eq
 801ca94:	f00c 0c0f 	andeq.w	ip, ip, #15
 801ca98:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ca9c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801caa0:	fa5f f48c 	uxtb.w	r4, ip
 801caa4:	9410      	str	r4, [sp, #64]	; 0x40
 801caa6:	b1f1      	cbz	r1, 801cae6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 801caa8:	4453      	add	r3, sl
 801caaa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801caae:	07dc      	lsls	r4, r3, #31
 801cab0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cab4:	bf54      	ite	pl
 801cab6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801caba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cabe:	3301      	adds	r3, #1
 801cac0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cac4:	fa5f f48c 	uxtb.w	r4, ip
 801cac8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cacc:	940a      	str	r4, [sp, #40]	; 0x28
 801cace:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cad2:	07dc      	lsls	r4, r3, #31
 801cad4:	bf54      	ite	pl
 801cad6:	f00c 030f 	andpl.w	r3, ip, #15
 801cada:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801cade:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cae2:	b2db      	uxtb	r3, r3
 801cae4:	9311      	str	r3, [sp, #68]	; 0x44
 801cae6:	b292      	uxth	r2, r2
 801cae8:	b289      	uxth	r1, r1
 801caea:	fb02 fc01 	mul.w	ip, r2, r1
 801caee:	0113      	lsls	r3, r2, #4
 801caf0:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 801caf4:	b289      	uxth	r1, r1
 801caf6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cafa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cafc:	eba3 030c 	sub.w	r3, r3, ip
 801cb00:	ebae 0e01 	sub.w	lr, lr, r1
 801cb04:	b29b      	uxth	r3, r3
 801cb06:	4353      	muls	r3, r2
 801cb08:	fa1f fe8e 	uxth.w	lr, lr
 801cb0c:	fb00 320e 	mla	r2, r0, lr, r3
 801cb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb12:	fb01 2203 	mla	r2, r1, r3, r2
 801cb16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cb18:	fb0c 2203 	mla	r2, ip, r3, r2
 801cb1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cb20:	2a00      	cmp	r2, #0
 801cb22:	d039      	beq.n	801cb98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801cb24:	4bbc      	ldr	r3, [pc, #752]	; (801ce18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801cb26:	6819      	ldr	r1, [r3, #0]
 801cb28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb2a:	435a      	muls	r2, r3
 801cb2c:	1c53      	adds	r3, r2, #1
 801cb2e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cb32:	1212      	asrs	r2, r2, #8
 801cb34:	b290      	uxth	r0, r2
 801cb36:	43d2      	mvns	r2, r2
 801cb38:	b2d3      	uxtb	r3, r2
 801cb3a:	fa5f fc81 	uxtb.w	ip, r1
 801cb3e:	f899 2000 	ldrb.w	r2, [r9]
 801cb42:	fb1c fc00 	smulbb	ip, ip, r0
 801cb46:	fb02 c203 	mla	r2, r2, r3, ip
 801cb4a:	b292      	uxth	r2, r2
 801cb4c:	f102 0c01 	add.w	ip, r2, #1
 801cb50:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cb54:	f899 c001 	ldrb.w	ip, [r9, #1]
 801cb58:	1212      	asrs	r2, r2, #8
 801cb5a:	fb1c fc03 	smulbb	ip, ip, r3
 801cb5e:	f889 2000 	strb.w	r2, [r9]
 801cb62:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801cb66:	fb02 c200 	mla	r2, r2, r0, ip
 801cb6a:	b292      	uxth	r2, r2
 801cb6c:	f102 0c01 	add.w	ip, r2, #1
 801cb70:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cb74:	1212      	asrs	r2, r2, #8
 801cb76:	f889 2001 	strb.w	r2, [r9, #1]
 801cb7a:	f899 2002 	ldrb.w	r2, [r9, #2]
 801cb7e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801cb82:	fb12 f303 	smulbb	r3, r2, r3
 801cb86:	fb01 3300 	mla	r3, r1, r0, r3
 801cb8a:	b29b      	uxth	r3, r3
 801cb8c:	1c5a      	adds	r2, r3, #1
 801cb8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cb92:	121b      	asrs	r3, r3, #8
 801cb94:	f889 3002 	strb.w	r3, [r9, #2]
 801cb98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cb9a:	441d      	add	r5, r3
 801cb9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cb9e:	441e      	add	r6, r3
 801cba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cba2:	3b01      	subs	r3, #1
 801cba4:	f109 0903 	add.w	r9, r9, #3
 801cba8:	930d      	str	r3, [sp, #52]	; 0x34
 801cbaa:	e741      	b.n	801ca30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801cbac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cbae:	441d      	add	r5, r3
 801cbb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cbb2:	441e      	add	r6, r3
 801cbb4:	9b08      	ldr	r3, [sp, #32]
 801cbb6:	3b01      	subs	r3, #1
 801cbb8:	9308      	str	r3, [sp, #32]
 801cbba:	f108 0803 	add.w	r8, r8, #3
 801cbbe:	e6f0      	b.n	801c9a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801cbc0:	f47f af00 	bne.w	801c9c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801cbc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	f340 8121 	ble.w	801ce0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801cbcc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cbd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cbd4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cbd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cbda:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cbde:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cbe2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cbe6:	eef0 6a48 	vmov.f32	s13, s16
 801cbea:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cbee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbf2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cbf6:	ee16 5a90 	vmov	r5, s13
 801cbfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cbfe:	eef0 6a68 	vmov.f32	s13, s17
 801cc02:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cc06:	ee18 2a10 	vmov	r2, s16
 801cc0a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cc0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc12:	ee18 2a90 	vmov	r2, s17
 801cc16:	932b      	str	r3, [sp, #172]	; 0xac
 801cc18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc1e:	932c      	str	r3, [sp, #176]	; 0xb0
 801cc20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc24:	3b01      	subs	r3, #1
 801cc26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc2a:	930c      	str	r3, [sp, #48]	; 0x30
 801cc2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc2e:	bf08      	it	eq
 801cc30:	4613      	moveq	r3, r2
 801cc32:	ee16 6a90 	vmov	r6, s13
 801cc36:	9308      	str	r3, [sp, #32]
 801cc38:	eef0 8a67 	vmov.f32	s17, s15
 801cc3c:	eeb0 8a47 	vmov.f32	s16, s14
 801cc40:	e6a8      	b.n	801c994 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801cc42:	2900      	cmp	r1, #0
 801cc44:	f43f af4f 	beq.w	801cae6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 801cc48:	4453      	add	r3, sl
 801cc4a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cc4e:	07db      	lsls	r3, r3, #31
 801cc50:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cc54:	bf54      	ite	pl
 801cc56:	f00c 030f 	andpl.w	r3, ip, #15
 801cc5a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801cc5e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cc62:	b2db      	uxtb	r3, r3
 801cc64:	930a      	str	r3, [sp, #40]	; 0x28
 801cc66:	e73e      	b.n	801cae6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 801cc68:	1c44      	adds	r4, r0, #1
 801cc6a:	d195      	bne.n	801cb98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801cc6c:	4583      	cmp	fp, r0
 801cc6e:	dd93      	ble.n	801cb98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801cc70:	1c5c      	adds	r4, r3, #1
 801cc72:	db91      	blt.n	801cb98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801cc74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cc76:	429c      	cmp	r4, r3
 801cc78:	dd8e      	ble.n	801cb98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801cc7a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801cc7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc82:	9002      	str	r0, [sp, #8]
 801cc84:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cc88:	e9cd b300 	strd	fp, r3, [sp]
 801cc8c:	463a      	mov	r2, r7
 801cc8e:	4653      	mov	r3, sl
 801cc90:	4649      	mov	r1, r9
 801cc92:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cc94:	f7ff fd62 	bl	801c75c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801cc98:	e77e      	b.n	801cb98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801cc9a:	142a      	asrs	r2, r5, #16
 801cc9c:	1433      	asrs	r3, r6, #16
 801cc9e:	fb0a 2303 	mla	r3, sl, r3, r2
 801cca2:	085a      	lsrs	r2, r3, #1
 801cca4:	07dc      	lsls	r4, r3, #31
 801cca6:	5cba      	ldrb	r2, [r7, r2]
 801cca8:	bf54      	ite	pl
 801ccaa:	f002 020f 	andpl.w	r2, r2, #15
 801ccae:	1112      	asrmi	r2, r2, #4
 801ccb0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ccb4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ccb8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ccbc:	b2d2      	uxtb	r2, r2
 801ccbe:	2900      	cmp	r1, #0
 801ccc0:	f000 8092 	beq.w	801cde8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4bc>
 801ccc4:	1c5c      	adds	r4, r3, #1
 801ccc6:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 801ccca:	07e4      	lsls	r4, r4, #31
 801cccc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ccd0:	bf54      	ite	pl
 801ccd2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ccd6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ccda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ccde:	fa5f f48c 	uxtb.w	r4, ip
 801cce2:	9412      	str	r4, [sp, #72]	; 0x48
 801cce4:	b1f8      	cbz	r0, 801cd26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801cce6:	4453      	add	r3, sl
 801cce8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ccec:	07dc      	lsls	r4, r3, #31
 801ccee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ccf2:	bf54      	ite	pl
 801ccf4:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ccf8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ccfc:	3301      	adds	r3, #1
 801ccfe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cd02:	fa5f f48c 	uxtb.w	r4, ip
 801cd06:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cd0a:	940b      	str	r4, [sp, #44]	; 0x2c
 801cd0c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cd10:	07dc      	lsls	r4, r3, #31
 801cd12:	bf54      	ite	pl
 801cd14:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cd18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cd1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cd20:	fa5f f38c 	uxtb.w	r3, ip
 801cd24:	9313      	str	r3, [sp, #76]	; 0x4c
 801cd26:	b289      	uxth	r1, r1
 801cd28:	b280      	uxth	r0, r0
 801cd2a:	fb01 f300 	mul.w	r3, r1, r0
 801cd2e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801cd32:	0109      	lsls	r1, r1, #4
 801cd34:	b280      	uxth	r0, r0
 801cd36:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801cd3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cd3c:	1ac9      	subs	r1, r1, r3
 801cd3e:	ebac 0c00 	sub.w	ip, ip, r0
 801cd42:	b289      	uxth	r1, r1
 801cd44:	4361      	muls	r1, r4
 801cd46:	fa1f fc8c 	uxth.w	ip, ip
 801cd4a:	fb02 120c 	mla	r2, r2, ip, r1
 801cd4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cd50:	fb00 2001 	mla	r0, r0, r1, r2
 801cd54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd56:	fb03 0302 	mla	r3, r3, r2, r0
 801cd5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d039      	beq.n	801cdd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 801cd62:	4a2d      	ldr	r2, [pc, #180]	; (801ce18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801cd64:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801cd68:	6810      	ldr	r0, [r2, #0]
 801cd6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd6c:	4353      	muls	r3, r2
 801cd6e:	1c5a      	adds	r2, r3, #1
 801cd70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cd74:	121b      	asrs	r3, r3, #8
 801cd76:	b29a      	uxth	r2, r3
 801cd78:	fa5f fc80 	uxtb.w	ip, r0
 801cd7c:	43db      	mvns	r3, r3
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	fb1c fc02 	smulbb	ip, ip, r2
 801cd84:	fb01 c103 	mla	r1, r1, r3, ip
 801cd88:	b289      	uxth	r1, r1
 801cd8a:	f101 0c01 	add.w	ip, r1, #1
 801cd8e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801cd92:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801cd96:	1209      	asrs	r1, r1, #8
 801cd98:	fb1c fc03 	smulbb	ip, ip, r3
 801cd9c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801cda0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801cda4:	fb01 c102 	mla	r1, r1, r2, ip
 801cda8:	b289      	uxth	r1, r1
 801cdaa:	f101 0c01 	add.w	ip, r1, #1
 801cdae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801cdb2:	1209      	asrs	r1, r1, #8
 801cdb4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801cdb8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801cdbc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801cdc0:	fb11 f303 	smulbb	r3, r1, r3
 801cdc4:	fb00 3002 	mla	r0, r0, r2, r3
 801cdc8:	b280      	uxth	r0, r0
 801cdca:	1c42      	adds	r2, r0, #1
 801cdcc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cdd0:	1200      	asrs	r0, r0, #8
 801cdd2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801cdd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cdd8:	441d      	add	r5, r3
 801cdda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cddc:	f10e 0e03 	add.w	lr, lr, #3
 801cde0:	441e      	add	r6, r3
 801cde2:	f109 39ff 	add.w	r9, r9, #4294967295
 801cde6:	e606      	b.n	801c9f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801cde8:	2800      	cmp	r0, #0
 801cdea:	d09c      	beq.n	801cd26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801cdec:	4453      	add	r3, sl
 801cdee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cdf2:	07db      	lsls	r3, r3, #31
 801cdf4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cdf8:	bf54      	ite	pl
 801cdfa:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cdfe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ce02:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ce06:	fa5f f38c 	uxtb.w	r3, ip
 801ce0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce0c:	e78b      	b.n	801cd26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801ce0e:	b017      	add	sp, #92	; 0x5c
 801ce10:	ecbd 8b08 	vpop	{d8-d11}
 801ce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce18:	200084f4 	.word	0x200084f4

0801ce1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801ce1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce20:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801ce24:	2800      	cmp	r0, #0
 801ce26:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801ce2a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801ce2e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801ce32:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801ce36:	fb0c 0e03 	mla	lr, ip, r3, r0
 801ce3a:	db6b      	blt.n	801cf14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ce3c:	4580      	cmp	r8, r0
 801ce3e:	dd69      	ble.n	801cf14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ce40:	f1bc 0f00 	cmp.w	ip, #0
 801ce44:	db66      	blt.n	801cf14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ce46:	45e1      	cmp	r9, ip
 801ce48:	dd64      	ble.n	801cf14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801ce4a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801ce4e:	f01e 0f01 	tst.w	lr, #1
 801ce52:	5d16      	ldrb	r6, [r2, r4]
 801ce54:	bf0c      	ite	eq
 801ce56:	f006 060f 	andeq.w	r6, r6, #15
 801ce5a:	1136      	asrne	r6, r6, #4
 801ce5c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ce60:	b2f6      	uxtb	r6, r6
 801ce62:	f110 0a01 	adds.w	sl, r0, #1
 801ce66:	d457      	bmi.n	801cf18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ce68:	45d0      	cmp	r8, sl
 801ce6a:	dd55      	ble.n	801cf18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ce6c:	f1bc 0f00 	cmp.w	ip, #0
 801ce70:	db52      	blt.n	801cf18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ce72:	45e1      	cmp	r9, ip
 801ce74:	dd50      	ble.n	801cf18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801ce76:	2f00      	cmp	r7, #0
 801ce78:	f000 80a5 	beq.w	801cfc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801ce7c:	f10e 0b01 	add.w	fp, lr, #1
 801ce80:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801ce84:	f01b 0f01 	tst.w	fp, #1
 801ce88:	5d14      	ldrb	r4, [r2, r4]
 801ce8a:	bf0c      	ite	eq
 801ce8c:	f004 040f 	andeq.w	r4, r4, #15
 801ce90:	1124      	asrne	r4, r4, #4
 801ce92:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ce96:	b2e4      	uxtb	r4, r4
 801ce98:	2d00      	cmp	r5, #0
 801ce9a:	f000 808f 	beq.w	801cfbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801ce9e:	2800      	cmp	r0, #0
 801cea0:	f10c 0c01 	add.w	ip, ip, #1
 801cea4:	db3c      	blt.n	801cf20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801cea6:	4580      	cmp	r8, r0
 801cea8:	dd3a      	ble.n	801cf20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801ceaa:	f1bc 0f00 	cmp.w	ip, #0
 801ceae:	db37      	blt.n	801cf20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801ceb0:	45e1      	cmp	r9, ip
 801ceb2:	dd35      	ble.n	801cf20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801ceb4:	eb03 0b0e 	add.w	fp, r3, lr
 801ceb8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801cebc:	f01b 0f01 	tst.w	fp, #1
 801cec0:	5c10      	ldrb	r0, [r2, r0]
 801cec2:	bf0c      	ite	eq
 801cec4:	f000 000f 	andeq.w	r0, r0, #15
 801cec8:	1100      	asrne	r0, r0, #4
 801ceca:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cece:	b2c0      	uxtb	r0, r0
 801ced0:	f1ba 0f00 	cmp.w	sl, #0
 801ced4:	db26      	blt.n	801cf24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801ced6:	45d0      	cmp	r8, sl
 801ced8:	dd24      	ble.n	801cf24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801ceda:	f1bc 0f00 	cmp.w	ip, #0
 801cede:	db21      	blt.n	801cf24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801cee0:	45e1      	cmp	r9, ip
 801cee2:	dd1f      	ble.n	801cf24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801cee4:	b307      	cbz	r7, 801cf28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801cee6:	3301      	adds	r3, #1
 801cee8:	449e      	add	lr, r3
 801ceea:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ceee:	f01e 0f01 	tst.w	lr, #1
 801cef2:	5cd3      	ldrb	r3, [r2, r3]
 801cef4:	bf0c      	ite	eq
 801cef6:	f003 030f 	andeq.w	r3, r3, #15
 801cefa:	111b      	asrne	r3, r3, #4
 801cefc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cf00:	b2db      	uxtb	r3, r3
 801cf02:	2f0f      	cmp	r7, #15
 801cf04:	d911      	bls.n	801cf2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801cf06:	4b32      	ldr	r3, [pc, #200]	; (801cfd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801cf08:	4a32      	ldr	r2, [pc, #200]	; (801cfd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801cf0a:	4833      	ldr	r0, [pc, #204]	; (801cfd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801cf0c:	f240 11a5 	movw	r1, #421	; 0x1a5
 801cf10:	f000 fc0e 	bl	801d730 <__assert_func>
 801cf14:	2600      	movs	r6, #0
 801cf16:	e7a4      	b.n	801ce62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801cf18:	2400      	movs	r4, #0
 801cf1a:	e7bd      	b.n	801ce98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801cf1c:	463c      	mov	r4, r7
 801cf1e:	e7be      	b.n	801ce9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801cf20:	2000      	movs	r0, #0
 801cf22:	e7d5      	b.n	801ced0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801cf24:	2300      	movs	r3, #0
 801cf26:	e7ec      	b.n	801cf02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801cf28:	463b      	mov	r3, r7
 801cf2a:	2d0f      	cmp	r5, #15
 801cf2c:	d8eb      	bhi.n	801cf06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801cf2e:	b2bf      	uxth	r7, r7
 801cf30:	b2ad      	uxth	r5, r5
 801cf32:	fb07 f205 	mul.w	r2, r7, r5
 801cf36:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801cf3a:	013f      	lsls	r7, r7, #4
 801cf3c:	b2ad      	uxth	r5, r5
 801cf3e:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801cf42:	1abf      	subs	r7, r7, r2
 801cf44:	ebac 0c05 	sub.w	ip, ip, r5
 801cf48:	b2bf      	uxth	r7, r7
 801cf4a:	fa1f fc8c 	uxth.w	ip, ip
 801cf4e:	437c      	muls	r4, r7
 801cf50:	fb06 440c 	mla	r4, r6, ip, r4
 801cf54:	fb05 4400 	mla	r4, r5, r0, r4
 801cf58:	fb02 4303 	mla	r3, r2, r3, r4
 801cf5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cf60:	b353      	cbz	r3, 801cfb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801cf62:	4a1e      	ldr	r2, [pc, #120]	; (801cfdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801cf64:	7808      	ldrb	r0, [r1, #0]
 801cf66:	6814      	ldr	r4, [r2, #0]
 801cf68:	b29a      	uxth	r2, r3
 801cf6a:	b2e5      	uxtb	r5, r4
 801cf6c:	43db      	mvns	r3, r3
 801cf6e:	b2db      	uxtb	r3, r3
 801cf70:	fb15 f502 	smulbb	r5, r5, r2
 801cf74:	fb00 5003 	mla	r0, r0, r3, r5
 801cf78:	b280      	uxth	r0, r0
 801cf7a:	1c45      	adds	r5, r0, #1
 801cf7c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801cf80:	784d      	ldrb	r5, [r1, #1]
 801cf82:	1200      	asrs	r0, r0, #8
 801cf84:	fb15 f503 	smulbb	r5, r5, r3
 801cf88:	7008      	strb	r0, [r1, #0]
 801cf8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801cf8e:	fb00 5002 	mla	r0, r0, r2, r5
 801cf92:	b280      	uxth	r0, r0
 801cf94:	1c45      	adds	r5, r0, #1
 801cf96:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801cf9a:	1200      	asrs	r0, r0, #8
 801cf9c:	7048      	strb	r0, [r1, #1]
 801cf9e:	7888      	ldrb	r0, [r1, #2]
 801cfa0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cfa4:	fb10 f303 	smulbb	r3, r0, r3
 801cfa8:	fb04 3202 	mla	r2, r4, r2, r3
 801cfac:	b292      	uxth	r2, r2
 801cfae:	1c53      	adds	r3, r2, #1
 801cfb0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cfb4:	1212      	asrs	r2, r2, #8
 801cfb6:	708a      	strb	r2, [r1, #2]
 801cfb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfbc:	2f0f      	cmp	r7, #15
 801cfbe:	d8a2      	bhi.n	801cf06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801cfc0:	462b      	mov	r3, r5
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	e7b3      	b.n	801cf2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801cfc6:	2d00      	cmp	r5, #0
 801cfc8:	d1a8      	bne.n	801cf1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801cfca:	462c      	mov	r4, r5
 801cfcc:	e7f8      	b.n	801cfc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801cfce:	bf00      	nop
 801cfd0:	080216c9 	.word	0x080216c9
 801cfd4:	08021bbe 	.word	0x08021bbe
 801cfd8:	08021792 	.word	0x08021792
 801cfdc:	200084f4 	.word	0x200084f4

0801cfe0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfe4:	ed2d 8b08 	vpush	{d8-d11}
 801cfe8:	b095      	sub	sp, #84	; 0x54
 801cfea:	461c      	mov	r4, r3
 801cfec:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801cff0:	9307      	str	r3, [sp, #28]
 801cff2:	920e      	str	r2, [sp, #56]	; 0x38
 801cff4:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801cff8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801cffa:	9109      	str	r1, [sp, #36]	; 0x24
 801cffc:	9308      	str	r3, [sp, #32]
 801cffe:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d002:	9013      	str	r0, [sp, #76]	; 0x4c
 801d004:	6850      	ldr	r0, [r2, #4]
 801d006:	fb00 1803 	mla	r8, r0, r3, r1
 801d00a:	6813      	ldr	r3, [r2, #0]
 801d00c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d010:	4498      	add	r8, r3
 801d012:	9b07      	ldr	r3, [sp, #28]
 801d014:	3301      	adds	r3, #1
 801d016:	f023 0301 	bic.w	r3, r3, #1
 801d01a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d01c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d01e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801d022:	681f      	ldr	r7, [r3, #0]
 801d024:	eeb0 aa40 	vmov.f32	s20, s0
 801d028:	eef0 9a60 	vmov.f32	s19, s1
 801d02c:	eeb0 9a41 	vmov.f32	s18, s2
 801d030:	eeb0 8a62 	vmov.f32	s16, s5
 801d034:	eef0 8a43 	vmov.f32	s17, s6
 801d038:	eef0 ba44 	vmov.f32	s23, s8
 801d03c:	eeb0 ba64 	vmov.f32	s22, s9
 801d040:	eef0 aa45 	vmov.f32	s21, s10
 801d044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d046:	2b00      	cmp	r3, #0
 801d048:	dc03      	bgt.n	801d052 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d04a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	f340 8235 	ble.w	801d4bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>
 801d052:	2c00      	cmp	r4, #0
 801d054:	f340 8108 	ble.w	801d268 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801d058:	142a      	asrs	r2, r5, #16
 801d05a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d05e:	d42b      	bmi.n	801d0b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d060:	9807      	ldr	r0, [sp, #28]
 801d062:	1c51      	adds	r1, r2, #1
 801d064:	4288      	cmp	r0, r1
 801d066:	dd2a      	ble.n	801d0be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801d068:	2b00      	cmp	r3, #0
 801d06a:	db28      	blt.n	801d0be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801d06c:	9808      	ldr	r0, [sp, #32]
 801d06e:	1c59      	adds	r1, r3, #1
 801d070:	4288      	cmp	r0, r1
 801d072:	dd24      	ble.n	801d0be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801d074:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d076:	1e63      	subs	r3, r4, #1
 801d078:	fb02 5203 	mla	r2, r2, r3, r5
 801d07c:	1412      	asrs	r2, r2, #16
 801d07e:	d429      	bmi.n	801d0d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d080:	9907      	ldr	r1, [sp, #28]
 801d082:	3201      	adds	r2, #1
 801d084:	4291      	cmp	r1, r2
 801d086:	dd25      	ble.n	801d0d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d088:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d08a:	fb02 6303 	mla	r3, r2, r3, r6
 801d08e:	141b      	asrs	r3, r3, #16
 801d090:	d420      	bmi.n	801d0d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d092:	9a08      	ldr	r2, [sp, #32]
 801d094:	3301      	adds	r3, #1
 801d096:	429a      	cmp	r2, r3
 801d098:	dd1c      	ble.n	801d0d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d09a:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801d09e:	f108 0e03 	add.w	lr, r8, #3
 801d0a2:	46a1      	mov	r9, r4
 801d0a4:	f1b9 0f00 	cmp.w	r9, #0
 801d0a8:	f300 8153 	bgt.w	801d352 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801d0ac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801d0b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d0b4:	44a0      	add	r8, r4
 801d0b6:	e0d9      	b.n	801d26c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801d0b8:	1c50      	adds	r0, r2, #1
 801d0ba:	f040 80cd 	bne.w	801d258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d0be:	9907      	ldr	r1, [sp, #28]
 801d0c0:	4291      	cmp	r1, r2
 801d0c2:	f340 80c9 	ble.w	801d258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d0c6:	1c59      	adds	r1, r3, #1
 801d0c8:	f2c0 80c6 	blt.w	801d258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d0cc:	9a08      	ldr	r2, [sp, #32]
 801d0ce:	4293      	cmp	r3, r2
 801d0d0:	f280 80c2 	bge.w	801d258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d0d4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801d0d8:	46a3      	mov	fp, r4
 801d0da:	46c1      	mov	r9, r8
 801d0dc:	f1bb 0f00 	cmp.w	fp, #0
 801d0e0:	dde4      	ble.n	801d0ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801d0e2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d0e6:	1428      	asrs	r0, r5, #16
 801d0e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d0ec:	920a      	str	r2, [sp, #40]	; 0x28
 801d0ee:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d0f2:	f100 8114 	bmi.w	801d31e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801d0f6:	9a07      	ldr	r2, [sp, #28]
 801d0f8:	f100 0c01 	add.w	ip, r0, #1
 801d0fc:	4562      	cmp	r2, ip
 801d0fe:	f340 8110 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801d102:	2b00      	cmp	r3, #0
 801d104:	f2c0 810d 	blt.w	801d322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801d108:	9a08      	ldr	r2, [sp, #32]
 801d10a:	f103 0c01 	add.w	ip, r3, #1
 801d10e:	4562      	cmp	r2, ip
 801d110:	f340 8107 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801d114:	fb03 030a 	mla	r3, r3, sl, r0
 801d118:	0858      	lsrs	r0, r3, #1
 801d11a:	07da      	lsls	r2, r3, #31
 801d11c:	5c38      	ldrb	r0, [r7, r0]
 801d11e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d120:	bf54      	ite	pl
 801d122:	f000 000f 	andpl.w	r0, r0, #15
 801d126:	1100      	asrmi	r0, r0, #4
 801d128:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d12c:	b2c0      	uxtb	r0, r0
 801d12e:	2a00      	cmp	r2, #0
 801d130:	f000 80db 	beq.w	801d2ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30a>
 801d134:	f103 0e01 	add.w	lr, r3, #1
 801d138:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801d13c:	f01e 0f01 	tst.w	lr, #1
 801d140:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d144:	bf0c      	ite	eq
 801d146:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d14a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d14e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d152:	fa5f fc8c 	uxtb.w	ip, ip
 801d156:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801d15a:	b1f9      	cbz	r1, 801d19c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801d15c:	4453      	add	r3, sl
 801d15e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d162:	07da      	lsls	r2, r3, #31
 801d164:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d168:	bf54      	ite	pl
 801d16a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d16e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d172:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d176:	3301      	adds	r3, #1
 801d178:	fa5f fc8c 	uxtb.w	ip, ip
 801d17c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 801d180:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d184:	07da      	lsls	r2, r3, #31
 801d186:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d18a:	bf54      	ite	pl
 801d18c:	f00c 030f 	andpl.w	r3, ip, #15
 801d190:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801d194:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d198:	b2db      	uxtb	r3, r3
 801d19a:	9310      	str	r3, [sp, #64]	; 0x40
 801d19c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d1a0:	b289      	uxth	r1, r1
 801d1a2:	fb02 f301 	mul.w	r3, r2, r1
 801d1a6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d1aa:	0112      	lsls	r2, r2, #4
 801d1ac:	fa1f fe81 	uxth.w	lr, r1
 801d1b0:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d1b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d1b6:	1ad2      	subs	r2, r2, r3
 801d1b8:	ebac 0c0e 	sub.w	ip, ip, lr
 801d1bc:	b292      	uxth	r2, r2
 801d1be:	434a      	muls	r2, r1
 801d1c0:	fa1f fc8c 	uxth.w	ip, ip
 801d1c4:	fb00 200c 	mla	r0, r0, ip, r2
 801d1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d1ca:	fb0e 0002 	mla	r0, lr, r2, r0
 801d1ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d1d0:	fb03 0002 	mla	r0, r3, r2, r0
 801d1d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d1d8:	b3a8      	cbz	r0, 801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d1da:	4bbb      	ldr	r3, [pc, #748]	; (801d4c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>)
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	28ff      	cmp	r0, #255	; 0xff
 801d1e0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801d1e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801d1e8:	b2db      	uxtb	r3, r3
 801d1ea:	f000 8091 	beq.w	801d310 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x330>
 801d1ee:	b282      	uxth	r2, r0
 801d1f0:	f899 e000 	ldrb.w	lr, [r9]
 801d1f4:	43c0      	mvns	r0, r0
 801d1f6:	b2c0      	uxtb	r0, r0
 801d1f8:	fb13 f302 	smulbb	r3, r3, r2
 801d1fc:	fb0e 3300 	mla	r3, lr, r0, r3
 801d200:	b29b      	uxth	r3, r3
 801d202:	f103 0e01 	add.w	lr, r3, #1
 801d206:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d20a:	121b      	asrs	r3, r3, #8
 801d20c:	f889 3000 	strb.w	r3, [r9]
 801d210:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d214:	fb11 f102 	smulbb	r1, r1, r2
 801d218:	fb03 1100 	mla	r1, r3, r0, r1
 801d21c:	b289      	uxth	r1, r1
 801d21e:	1c4b      	adds	r3, r1, #1
 801d220:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d224:	f899 3002 	ldrb.w	r3, [r9, #2]
 801d228:	fb1c f202 	smulbb	r2, ip, r2
 801d22c:	fb03 2000 	mla	r0, r3, r0, r2
 801d230:	b280      	uxth	r0, r0
 801d232:	f100 0c01 	add.w	ip, r0, #1
 801d236:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801d23a:	1209      	asrs	r1, r1, #8
 801d23c:	1200      	asrs	r0, r0, #8
 801d23e:	f889 1001 	strb.w	r1, [r9, #1]
 801d242:	f889 0002 	strb.w	r0, [r9, #2]
 801d246:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d248:	441d      	add	r5, r3
 801d24a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d24c:	f109 0903 	add.w	r9, r9, #3
 801d250:	441e      	add	r6, r3
 801d252:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d256:	e741      	b.n	801d0dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d258:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d25a:	441d      	add	r5, r3
 801d25c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d25e:	3c01      	subs	r4, #1
 801d260:	441e      	add	r6, r3
 801d262:	f108 0803 	add.w	r8, r8, #3
 801d266:	e6f4      	b.n	801d052 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d268:	f47f af04 	bne.w	801d074 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801d26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d26e:	2b00      	cmp	r3, #0
 801d270:	f340 8124 	ble.w	801d4bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>
 801d274:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d27c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d280:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d282:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d286:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d28a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d28e:	eef0 6a48 	vmov.f32	s13, s16
 801d292:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d29a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d29e:	ee16 5a90 	vmov	r5, s13
 801d2a2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d2a6:	eef0 6a68 	vmov.f32	s13, s17
 801d2aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d2ae:	ee18 2a10 	vmov	r2, s16
 801d2b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d2b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2ba:	ee18 2a90 	vmov	r2, s17
 801d2be:	9329      	str	r3, [sp, #164]	; 0xa4
 801d2c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d2c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2c6:	932a      	str	r3, [sp, #168]	; 0xa8
 801d2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d2cc:	3b01      	subs	r3, #1
 801d2ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2d2:	9309      	str	r3, [sp, #36]	; 0x24
 801d2d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d2d6:	ee16 6a90 	vmov	r6, s13
 801d2da:	bf14      	ite	ne
 801d2dc:	461c      	movne	r4, r3
 801d2de:	4614      	moveq	r4, r2
 801d2e0:	eef0 8a67 	vmov.f32	s17, s15
 801d2e4:	eeb0 8a47 	vmov.f32	s16, s14
 801d2e8:	e6ac      	b.n	801d044 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d2ea:	2900      	cmp	r1, #0
 801d2ec:	f43f af56 	beq.w	801d19c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801d2f0:	4453      	add	r3, sl
 801d2f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d2f6:	07db      	lsls	r3, r3, #31
 801d2f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d2fc:	bf54      	ite	pl
 801d2fe:	f00c 030f 	andpl.w	r3, ip, #15
 801d302:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801d306:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d30a:	b2db      	uxtb	r3, r3
 801d30c:	930c      	str	r3, [sp, #48]	; 0x30
 801d30e:	e745      	b.n	801d19c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801d310:	f889 3000 	strb.w	r3, [r9]
 801d314:	f889 1001 	strb.w	r1, [r9, #1]
 801d318:	f889 c002 	strb.w	ip, [r9, #2]
 801d31c:	e793      	b.n	801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d31e:	1c42      	adds	r2, r0, #1
 801d320:	d191      	bne.n	801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d322:	9a07      	ldr	r2, [sp, #28]
 801d324:	4282      	cmp	r2, r0
 801d326:	dd8e      	ble.n	801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d328:	1c5a      	adds	r2, r3, #1
 801d32a:	db8c      	blt.n	801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d32c:	9a08      	ldr	r2, [sp, #32]
 801d32e:	429a      	cmp	r2, r3
 801d330:	dd89      	ble.n	801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d334:	9105      	str	r1, [sp, #20]
 801d336:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801d33a:	9b08      	ldr	r3, [sp, #32]
 801d33c:	9301      	str	r3, [sp, #4]
 801d33e:	9b07      	ldr	r3, [sp, #28]
 801d340:	9002      	str	r0, [sp, #8]
 801d342:	9300      	str	r3, [sp, #0]
 801d344:	463a      	mov	r2, r7
 801d346:	4653      	mov	r3, sl
 801d348:	4649      	mov	r1, r9
 801d34a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d34c:	f7ff fd66 	bl	801ce1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801d350:	e779      	b.n	801d246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d352:	142a      	asrs	r2, r5, #16
 801d354:	1433      	asrs	r3, r6, #16
 801d356:	fb0a 2303 	mla	r3, sl, r3, r2
 801d35a:	085a      	lsrs	r2, r3, #1
 801d35c:	07d9      	lsls	r1, r3, #31
 801d35e:	5cba      	ldrb	r2, [r7, r2]
 801d360:	bf54      	ite	pl
 801d362:	f002 020f 	andpl.w	r2, r2, #15
 801d366:	1112      	asrmi	r2, r2, #4
 801d368:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d36c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d370:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801d374:	b2d2      	uxtb	r2, r2
 801d376:	2800      	cmp	r0, #0
 801d378:	f000 8089 	beq.w	801d48e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801d37c:	f103 0b01 	add.w	fp, r3, #1
 801d380:	ea4f 015b 	mov.w	r1, fp, lsr #1
 801d384:	f01b 0f01 	tst.w	fp, #1
 801d388:	5c79      	ldrb	r1, [r7, r1]
 801d38a:	bf0c      	ite	eq
 801d38c:	f001 010f 	andeq.w	r1, r1, #15
 801d390:	1109      	asrne	r1, r1, #4
 801d392:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d396:	b2c9      	uxtb	r1, r1
 801d398:	9111      	str	r1, [sp, #68]	; 0x44
 801d39a:	f1bc 0f00 	cmp.w	ip, #0
 801d39e:	d018      	beq.n	801d3d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 801d3a0:	4453      	add	r3, sl
 801d3a2:	0859      	lsrs	r1, r3, #1
 801d3a4:	f013 0f01 	tst.w	r3, #1
 801d3a8:	5c79      	ldrb	r1, [r7, r1]
 801d3aa:	bf0c      	ite	eq
 801d3ac:	f001 010f 	andeq.w	r1, r1, #15
 801d3b0:	1109      	asrne	r1, r1, #4
 801d3b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d3b6:	b2c9      	uxtb	r1, r1
 801d3b8:	3301      	adds	r3, #1
 801d3ba:	910d      	str	r1, [sp, #52]	; 0x34
 801d3bc:	0859      	lsrs	r1, r3, #1
 801d3be:	07db      	lsls	r3, r3, #31
 801d3c0:	5c79      	ldrb	r1, [r7, r1]
 801d3c2:	bf54      	ite	pl
 801d3c4:	f001 010f 	andpl.w	r1, r1, #15
 801d3c8:	1109      	asrmi	r1, r1, #4
 801d3ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d3ce:	b2c9      	uxtb	r1, r1
 801d3d0:	9112      	str	r1, [sp, #72]	; 0x48
 801d3d2:	b280      	uxth	r0, r0
 801d3d4:	fa1f fc8c 	uxth.w	ip, ip
 801d3d8:	fb00 f30c 	mul.w	r3, r0, ip
 801d3dc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801d3e0:	0100      	lsls	r0, r0, #4
 801d3e2:	fa1f fc8c 	uxth.w	ip, ip
 801d3e6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d3ea:	eba1 010c 	sub.w	r1, r1, ip
 801d3ee:	fa1f fb81 	uxth.w	fp, r1
 801d3f2:	1ac0      	subs	r0, r0, r3
 801d3f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d3f6:	b280      	uxth	r0, r0
 801d3f8:	4348      	muls	r0, r1
 801d3fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d3fc:	fb02 020b 	mla	r2, r2, fp, r0
 801d400:	fb0c 2c01 	mla	ip, ip, r1, r2
 801d404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d406:	fb03 c302 	mla	r3, r3, r2, ip
 801d40a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d40e:	b3ab      	cbz	r3, 801d47c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49c>
 801d410:	4a2d      	ldr	r2, [pc, #180]	; (801d4c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>)
 801d412:	6811      	ldr	r1, [r2, #0]
 801d414:	2bff      	cmp	r3, #255	; 0xff
 801d416:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 801d41a:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801d41e:	b2c9      	uxtb	r1, r1
 801d420:	d045      	beq.n	801d4ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 801d422:	b298      	uxth	r0, r3
 801d424:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 801d428:	43db      	mvns	r3, r3
 801d42a:	b2db      	uxtb	r3, r3
 801d42c:	fb11 f100 	smulbb	r1, r1, r0
 801d430:	fb02 1103 	mla	r1, r2, r3, r1
 801d434:	b289      	uxth	r1, r1
 801d436:	1c4a      	adds	r2, r1, #1
 801d438:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d43c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d440:	fb1c fc00 	smulbb	ip, ip, r0
 801d444:	fb02 cc03 	mla	ip, r2, r3, ip
 801d448:	fa1f fc8c 	uxth.w	ip, ip
 801d44c:	f10c 0201 	add.w	r2, ip, #1
 801d450:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d454:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 801d458:	fb1b f000 	smulbb	r0, fp, r0
 801d45c:	fb02 0303 	mla	r3, r2, r3, r0
 801d460:	b29b      	uxth	r3, r3
 801d462:	1c5a      	adds	r2, r3, #1
 801d464:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d468:	1209      	asrs	r1, r1, #8
 801d46a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d46e:	121b      	asrs	r3, r3, #8
 801d470:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d474:	f80e cc02 	strb.w	ip, [lr, #-2]
 801d478:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801d47c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d47e:	441d      	add	r5, r3
 801d480:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d482:	f10e 0e03 	add.w	lr, lr, #3
 801d486:	441e      	add	r6, r3
 801d488:	f109 39ff 	add.w	r9, r9, #4294967295
 801d48c:	e60a      	b.n	801d0a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801d48e:	f1bc 0f00 	cmp.w	ip, #0
 801d492:	d09e      	beq.n	801d3d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 801d494:	4453      	add	r3, sl
 801d496:	0859      	lsrs	r1, r3, #1
 801d498:	07db      	lsls	r3, r3, #31
 801d49a:	5c79      	ldrb	r1, [r7, r1]
 801d49c:	bf54      	ite	pl
 801d49e:	f001 010f 	andpl.w	r1, r1, #15
 801d4a2:	1109      	asrmi	r1, r1, #4
 801d4a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4a8:	b2c9      	uxtb	r1, r1
 801d4aa:	910d      	str	r1, [sp, #52]	; 0x34
 801d4ac:	e791      	b.n	801d3d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 801d4ae:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d4b2:	f80e cc02 	strb.w	ip, [lr, #-2]
 801d4b6:	f80e bc01 	strb.w	fp, [lr, #-1]
 801d4ba:	e7df      	b.n	801d47c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49c>
 801d4bc:	b015      	add	sp, #84	; 0x54
 801d4be:	ecbd 8b08 	vpop	{d8-d11}
 801d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4c6:	bf00      	nop
 801d4c8:	200084f4 	.word	0x200084f4

0801d4cc <CRC_Lock>:
 801d4cc:	b530      	push	{r4, r5, lr}
 801d4ce:	4a1d      	ldr	r2, [pc, #116]	; (801d544 <CRC_Lock+0x78>)
 801d4d0:	6813      	ldr	r3, [r2, #0]
 801d4d2:	f023 0301 	bic.w	r3, r3, #1
 801d4d6:	6013      	str	r3, [r2, #0]
 801d4d8:	4b1b      	ldr	r3, [pc, #108]	; (801d548 <CRC_Lock+0x7c>)
 801d4da:	681a      	ldr	r2, [r3, #0]
 801d4dc:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d4e0:	4022      	ands	r2, r4
 801d4e2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d4e6:	42aa      	cmp	r2, r5
 801d4e8:	d005      	beq.n	801d4f6 <CRC_Lock+0x2a>
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d4f0:	4023      	ands	r3, r4
 801d4f2:	4293      	cmp	r3, r2
 801d4f4:	d11d      	bne.n	801d532 <CRC_Lock+0x66>
 801d4f6:	4b15      	ldr	r3, [pc, #84]	; (801d54c <CRC_Lock+0x80>)
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	b9d3      	cbnz	r3, 801d532 <CRC_Lock+0x66>
 801d4fc:	4a14      	ldr	r2, [pc, #80]	; (801d550 <CRC_Lock+0x84>)
 801d4fe:	6813      	ldr	r3, [r2, #0]
 801d500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d504:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d508:	d006      	beq.n	801d518 <CRC_Lock+0x4c>
 801d50a:	6813      	ldr	r3, [r2, #0]
 801d50c:	f240 4283 	movw	r2, #1155	; 0x483
 801d510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d514:	4293      	cmp	r3, r2
 801d516:	d10c      	bne.n	801d532 <CRC_Lock+0x66>
 801d518:	4b0e      	ldr	r3, [pc, #56]	; (801d554 <CRC_Lock+0x88>)
 801d51a:	2201      	movs	r2, #1
 801d51c:	601a      	str	r2, [r3, #0]
 801d51e:	681a      	ldr	r2, [r3, #0]
 801d520:	2a00      	cmp	r2, #0
 801d522:	d1fc      	bne.n	801d51e <CRC_Lock+0x52>
 801d524:	4b0c      	ldr	r3, [pc, #48]	; (801d558 <CRC_Lock+0x8c>)
 801d526:	6018      	str	r0, [r3, #0]
 801d528:	6818      	ldr	r0, [r3, #0]
 801d52a:	1a43      	subs	r3, r0, r1
 801d52c:	4258      	negs	r0, r3
 801d52e:	4158      	adcs	r0, r3
 801d530:	bd30      	pop	{r4, r5, pc}
 801d532:	4b0a      	ldr	r3, [pc, #40]	; (801d55c <CRC_Lock+0x90>)
 801d534:	2201      	movs	r2, #1
 801d536:	601a      	str	r2, [r3, #0]
 801d538:	681a      	ldr	r2, [r3, #0]
 801d53a:	2a00      	cmp	r2, #0
 801d53c:	d1fc      	bne.n	801d538 <CRC_Lock+0x6c>
 801d53e:	4b08      	ldr	r3, [pc, #32]	; (801d560 <CRC_Lock+0x94>)
 801d540:	e7f1      	b.n	801d526 <CRC_Lock+0x5a>
 801d542:	bf00      	nop
 801d544:	e0002000 	.word	0xe0002000
 801d548:	e000ed00 	.word	0xe000ed00
 801d54c:	e0042000 	.word	0xe0042000
 801d550:	5c001000 	.word	0x5c001000
 801d554:	58024c08 	.word	0x58024c08
 801d558:	58024c00 	.word	0x58024c00
 801d55c:	40023008 	.word	0x40023008
 801d560:	40023000 	.word	0x40023000

0801d564 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d564:	6101      	str	r1, [r0, #16]
 801d566:	4770      	bx	lr

0801d568 <_ZN8touchgfx8Gestures4tickEv>:
 801d568:	7b83      	ldrb	r3, [r0, #14]
 801d56a:	b14b      	cbz	r3, 801d580 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d56c:	8903      	ldrh	r3, [r0, #8]
 801d56e:	3301      	adds	r3, #1
 801d570:	b29b      	uxth	r3, r3
 801d572:	2b07      	cmp	r3, #7
 801d574:	8103      	strh	r3, [r0, #8]
 801d576:	bf81      	itttt	hi
 801d578:	2300      	movhi	r3, #0
 801d57a:	8143      	strhhi	r3, [r0, #10]
 801d57c:	8183      	strhhi	r3, [r0, #12]
 801d57e:	7383      	strbhi	r3, [r0, #14]
 801d580:	4770      	bx	lr
	...

0801d584 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d584:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d588:	4604      	mov	r4, r0
 801d58a:	8880      	ldrh	r0, [r0, #4]
 801d58c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801d590:	4698      	mov	r8, r3
 801d592:	eba8 0000 	sub.w	r0, r8, r0
 801d596:	4b1c      	ldr	r3, [pc, #112]	; (801d608 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801d598:	9300      	str	r3, [sp, #0]
 801d59a:	b280      	uxth	r0, r0
 801d59c:	2300      	movs	r3, #0
 801d59e:	f88d 3004 	strb.w	r3, [sp, #4]
 801d5a2:	b203      	sxth	r3, r0
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	bfb8      	it	lt
 801d5a8:	4240      	neglt	r0, r0
 801d5aa:	4617      	mov	r7, r2
 801d5ac:	8aa2      	ldrh	r2, [r4, #20]
 801d5ae:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d5b2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d5b6:	bfb8      	it	lt
 801d5b8:	b203      	sxthlt	r3, r0
 801d5ba:	460e      	mov	r6, r1
 801d5bc:	4293      	cmp	r3, r2
 801d5be:	88e1      	ldrh	r1, [r4, #6]
 801d5c0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d5c4:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d5c8:	dc08      	bgt.n	801d5dc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801d5ca:	1a69      	subs	r1, r5, r1
 801d5cc:	b289      	uxth	r1, r1
 801d5ce:	b20b      	sxth	r3, r1
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	bfbc      	itt	lt
 801d5d4:	4249      	neglt	r1, r1
 801d5d6:	b20b      	sxthlt	r3, r1
 801d5d8:	429a      	cmp	r2, r3
 801d5da:	da13      	bge.n	801d604 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801d5dc:	6920      	ldr	r0, [r4, #16]
 801d5de:	6803      	ldr	r3, [r0, #0]
 801d5e0:	4669      	mov	r1, sp
 801d5e2:	685b      	ldr	r3, [r3, #4]
 801d5e4:	4798      	blx	r3
 801d5e6:	eba8 0606 	sub.w	r6, r8, r6
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	1bef      	subs	r7, r5, r7
 801d5ee:	2001      	movs	r0, #1
 801d5f0:	8123      	strh	r3, [r4, #8]
 801d5f2:	8166      	strh	r6, [r4, #10]
 801d5f4:	81a7      	strh	r7, [r4, #12]
 801d5f6:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d5fa:	80e5      	strh	r5, [r4, #6]
 801d5fc:	73a0      	strb	r0, [r4, #14]
 801d5fe:	b004      	add	sp, #16
 801d600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d604:	2000      	movs	r0, #0
 801d606:	e7fa      	b.n	801d5fe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801d608:	08020b24 	.word	0x08020b24

0801d60c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d60e:	461e      	mov	r6, r3
 801d610:	1e4b      	subs	r3, r1, #1
 801d612:	2b01      	cmp	r3, #1
 801d614:	b085      	sub	sp, #20
 801d616:	4604      	mov	r4, r0
 801d618:	460d      	mov	r5, r1
 801d61a:	4617      	mov	r7, r2
 801d61c:	d84b      	bhi.n	801d6b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d61e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d622:	1cd3      	adds	r3, r2, #3
 801d624:	b29b      	uxth	r3, r3
 801d626:	2b06      	cmp	r3, #6
 801d628:	d916      	bls.n	801d658 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d62a:	f8df c098 	ldr.w	ip, [pc, #152]	; 801d6c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801d62e:	f8cd c004 	str.w	ip, [sp, #4]
 801d632:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d636:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d63a:	6900      	ldr	r0, [r0, #16]
 801d63c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d640:	f04f 0c00 	mov.w	ip, #0
 801d644:	f88d c008 	strb.w	ip, [sp, #8]
 801d648:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d64c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d650:	6803      	ldr	r3, [r0, #0]
 801d652:	a901      	add	r1, sp, #4
 801d654:	689b      	ldr	r3, [r3, #8]
 801d656:	4798      	blx	r3
 801d658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d65c:	1cd3      	adds	r3, r2, #3
 801d65e:	b29b      	uxth	r3, r3
 801d660:	2b06      	cmp	r3, #6
 801d662:	d916      	bls.n	801d692 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d664:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801d6c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801d668:	f8cd c004 	str.w	ip, [sp, #4]
 801d66c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d670:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d674:	6920      	ldr	r0, [r4, #16]
 801d676:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d67a:	f04f 0c01 	mov.w	ip, #1
 801d67e:	f88d c008 	strb.w	ip, [sp, #8]
 801d682:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d686:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d68a:	6803      	ldr	r3, [r0, #0]
 801d68c:	a901      	add	r1, sp, #4
 801d68e:	689b      	ldr	r3, [r3, #8]
 801d690:	4798      	blx	r3
 801d692:	4b0b      	ldr	r3, [pc, #44]	; (801d6c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 801d694:	9301      	str	r3, [sp, #4]
 801d696:	6920      	ldr	r0, [r4, #16]
 801d698:	f88d 5008 	strb.w	r5, [sp, #8]
 801d69c:	2300      	movs	r3, #0
 801d69e:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d6a2:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d6a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d6aa:	6803      	ldr	r3, [r0, #0]
 801d6ac:	a901      	add	r1, sp, #4
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	4798      	blx	r3
 801d6b2:	b005      	add	sp, #20
 801d6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6b6:	2900      	cmp	r1, #0
 801d6b8:	d1eb      	bne.n	801d692 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d6ba:	80a2      	strh	r2, [r4, #4]
 801d6bc:	80c6      	strh	r6, [r0, #6]
 801d6be:	e7e8      	b.n	801d692 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d6c0:	08020b10 	.word	0x08020b10
 801d6c4:	08020b38 	.word	0x08020b38

0801d6c8 <__aeabi_atexit>:
 801d6c8:	460b      	mov	r3, r1
 801d6ca:	4601      	mov	r1, r0
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f000 b853 	b.w	801d778 <__cxa_atexit>

0801d6d2 <__cxa_pure_virtual>:
 801d6d2:	b508      	push	{r3, lr}
 801d6d4:	f000 f820 	bl	801d718 <_ZSt9terminatev>

0801d6d8 <_ZdlPvj>:
 801d6d8:	f000 b80f 	b.w	801d6fa <_ZdlPv>

0801d6dc <__cxa_guard_acquire>:
 801d6dc:	6803      	ldr	r3, [r0, #0]
 801d6de:	07db      	lsls	r3, r3, #31
 801d6e0:	d406      	bmi.n	801d6f0 <__cxa_guard_acquire+0x14>
 801d6e2:	7843      	ldrb	r3, [r0, #1]
 801d6e4:	b103      	cbz	r3, 801d6e8 <__cxa_guard_acquire+0xc>
 801d6e6:	deff      	udf	#255	; 0xff
 801d6e8:	2301      	movs	r3, #1
 801d6ea:	7043      	strb	r3, [r0, #1]
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	4770      	bx	lr
 801d6f0:	2000      	movs	r0, #0
 801d6f2:	4770      	bx	lr

0801d6f4 <__cxa_guard_release>:
 801d6f4:	2301      	movs	r3, #1
 801d6f6:	6003      	str	r3, [r0, #0]
 801d6f8:	4770      	bx	lr

0801d6fa <_ZdlPv>:
 801d6fa:	f000 b88f 	b.w	801d81c <free>

0801d6fe <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d6fe:	b508      	push	{r3, lr}
 801d700:	4780      	blx	r0
 801d702:	f000 f80e 	bl	801d722 <abort>
	...

0801d708 <_ZSt13get_terminatev>:
 801d708:	4b02      	ldr	r3, [pc, #8]	; (801d714 <_ZSt13get_terminatev+0xc>)
 801d70a:	6818      	ldr	r0, [r3, #0]
 801d70c:	f3bf 8f5b 	dmb	ish
 801d710:	4770      	bx	lr
 801d712:	bf00      	nop
 801d714:	200000e8 	.word	0x200000e8

0801d718 <_ZSt9terminatev>:
 801d718:	b508      	push	{r3, lr}
 801d71a:	f7ff fff5 	bl	801d708 <_ZSt13get_terminatev>
 801d71e:	f7ff ffee 	bl	801d6fe <_ZN10__cxxabiv111__terminateEPFvvE>

0801d722 <abort>:
 801d722:	b508      	push	{r3, lr}
 801d724:	2006      	movs	r0, #6
 801d726:	f000 fc4b 	bl	801dfc0 <raise>
 801d72a:	2001      	movs	r0, #1
 801d72c:	f7e4 f82c 	bl	8001788 <_exit>

0801d730 <__assert_func>:
 801d730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d732:	461c      	mov	r4, r3
 801d734:	4b09      	ldr	r3, [pc, #36]	; (801d75c <__assert_func+0x2c>)
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	4605      	mov	r5, r0
 801d73a:	68d8      	ldr	r0, [r3, #12]
 801d73c:	b152      	cbz	r2, 801d754 <__assert_func+0x24>
 801d73e:	4b08      	ldr	r3, [pc, #32]	; (801d760 <__assert_func+0x30>)
 801d740:	9100      	str	r1, [sp, #0]
 801d742:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d746:	4907      	ldr	r1, [pc, #28]	; (801d764 <__assert_func+0x34>)
 801d748:	462b      	mov	r3, r5
 801d74a:	4622      	mov	r2, r4
 801d74c:	f000 f828 	bl	801d7a0 <fiprintf>
 801d750:	f7ff ffe7 	bl	801d722 <abort>
 801d754:	4b04      	ldr	r3, [pc, #16]	; (801d768 <__assert_func+0x38>)
 801d756:	461a      	mov	r2, r3
 801d758:	e7f2      	b.n	801d740 <__assert_func+0x10>
 801d75a:	bf00      	nop
 801d75c:	200000ec 	.word	0x200000ec
 801d760:	08021e2e 	.word	0x08021e2e
 801d764:	08021e3b 	.word	0x08021e3b
 801d768:	08021e69 	.word	0x08021e69

0801d76c <atexit>:
 801d76c:	2300      	movs	r3, #0
 801d76e:	4601      	mov	r1, r0
 801d770:	461a      	mov	r2, r3
 801d772:	4618      	mov	r0, r3
 801d774:	f000 bd00 	b.w	801e178 <__register_exitproc>

0801d778 <__cxa_atexit>:
 801d778:	b510      	push	{r4, lr}
 801d77a:	4c05      	ldr	r4, [pc, #20]	; (801d790 <__cxa_atexit+0x18>)
 801d77c:	4613      	mov	r3, r2
 801d77e:	b12c      	cbz	r4, 801d78c <__cxa_atexit+0x14>
 801d780:	460a      	mov	r2, r1
 801d782:	4601      	mov	r1, r0
 801d784:	2002      	movs	r0, #2
 801d786:	f000 fcf7 	bl	801e178 <__register_exitproc>
 801d78a:	bd10      	pop	{r4, pc}
 801d78c:	4620      	mov	r0, r4
 801d78e:	e7fc      	b.n	801d78a <__cxa_atexit+0x12>
 801d790:	0801e179 	.word	0x0801e179

0801d794 <__errno>:
 801d794:	4b01      	ldr	r3, [pc, #4]	; (801d79c <__errno+0x8>)
 801d796:	6818      	ldr	r0, [r3, #0]
 801d798:	4770      	bx	lr
 801d79a:	bf00      	nop
 801d79c:	200000ec 	.word	0x200000ec

0801d7a0 <fiprintf>:
 801d7a0:	b40e      	push	{r1, r2, r3}
 801d7a2:	b503      	push	{r0, r1, lr}
 801d7a4:	4601      	mov	r1, r0
 801d7a6:	ab03      	add	r3, sp, #12
 801d7a8:	4805      	ldr	r0, [pc, #20]	; (801d7c0 <fiprintf+0x20>)
 801d7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7ae:	6800      	ldr	r0, [r0, #0]
 801d7b0:	9301      	str	r3, [sp, #4]
 801d7b2:	f000 f92f 	bl	801da14 <_vfiprintf_r>
 801d7b6:	b002      	add	sp, #8
 801d7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d7bc:	b003      	add	sp, #12
 801d7be:	4770      	bx	lr
 801d7c0:	200000ec 	.word	0x200000ec

0801d7c4 <__libc_init_array>:
 801d7c4:	b570      	push	{r4, r5, r6, lr}
 801d7c6:	4e0d      	ldr	r6, [pc, #52]	; (801d7fc <__libc_init_array+0x38>)
 801d7c8:	4c0d      	ldr	r4, [pc, #52]	; (801d800 <__libc_init_array+0x3c>)
 801d7ca:	1ba4      	subs	r4, r4, r6
 801d7cc:	10a4      	asrs	r4, r4, #2
 801d7ce:	2500      	movs	r5, #0
 801d7d0:	42a5      	cmp	r5, r4
 801d7d2:	d109      	bne.n	801d7e8 <__libc_init_array+0x24>
 801d7d4:	4e0b      	ldr	r6, [pc, #44]	; (801d804 <__libc_init_array+0x40>)
 801d7d6:	4c0c      	ldr	r4, [pc, #48]	; (801d808 <__libc_init_array+0x44>)
 801d7d8:	f000 ffbe 	bl	801e758 <_init>
 801d7dc:	1ba4      	subs	r4, r4, r6
 801d7de:	10a4      	asrs	r4, r4, #2
 801d7e0:	2500      	movs	r5, #0
 801d7e2:	42a5      	cmp	r5, r4
 801d7e4:	d105      	bne.n	801d7f2 <__libc_init_array+0x2e>
 801d7e6:	bd70      	pop	{r4, r5, r6, pc}
 801d7e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d7ec:	4798      	blx	r3
 801d7ee:	3501      	adds	r5, #1
 801d7f0:	e7ee      	b.n	801d7d0 <__libc_init_array+0xc>
 801d7f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d7f6:	4798      	blx	r3
 801d7f8:	3501      	adds	r5, #1
 801d7fa:	e7f2      	b.n	801d7e2 <__libc_init_array+0x1e>
 801d7fc:	0803f9dc 	.word	0x0803f9dc
 801d800:	0803f9dc 	.word	0x0803f9dc
 801d804:	0803f9dc 	.word	0x0803f9dc
 801d808:	0803f9f0 	.word	0x0803f9f0

0801d80c <malloc>:
 801d80c:	4b02      	ldr	r3, [pc, #8]	; (801d818 <malloc+0xc>)
 801d80e:	4601      	mov	r1, r0
 801d810:	6818      	ldr	r0, [r3, #0]
 801d812:	f000 b87b 	b.w	801d90c <_malloc_r>
 801d816:	bf00      	nop
 801d818:	200000ec 	.word	0x200000ec

0801d81c <free>:
 801d81c:	4b02      	ldr	r3, [pc, #8]	; (801d828 <free+0xc>)
 801d81e:	4601      	mov	r1, r0
 801d820:	6818      	ldr	r0, [r3, #0]
 801d822:	f000 b825 	b.w	801d870 <_free_r>
 801d826:	bf00      	nop
 801d828:	200000ec 	.word	0x200000ec

0801d82c <memcmp>:
 801d82c:	b530      	push	{r4, r5, lr}
 801d82e:	2400      	movs	r4, #0
 801d830:	42a2      	cmp	r2, r4
 801d832:	d101      	bne.n	801d838 <memcmp+0xc>
 801d834:	2000      	movs	r0, #0
 801d836:	e007      	b.n	801d848 <memcmp+0x1c>
 801d838:	5d03      	ldrb	r3, [r0, r4]
 801d83a:	3401      	adds	r4, #1
 801d83c:	190d      	adds	r5, r1, r4
 801d83e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801d842:	42ab      	cmp	r3, r5
 801d844:	d0f4      	beq.n	801d830 <memcmp+0x4>
 801d846:	1b58      	subs	r0, r3, r5
 801d848:	bd30      	pop	{r4, r5, pc}

0801d84a <memcpy>:
 801d84a:	b510      	push	{r4, lr}
 801d84c:	1e43      	subs	r3, r0, #1
 801d84e:	440a      	add	r2, r1
 801d850:	4291      	cmp	r1, r2
 801d852:	d100      	bne.n	801d856 <memcpy+0xc>
 801d854:	bd10      	pop	{r4, pc}
 801d856:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d85e:	e7f7      	b.n	801d850 <memcpy+0x6>

0801d860 <memset>:
 801d860:	4402      	add	r2, r0
 801d862:	4603      	mov	r3, r0
 801d864:	4293      	cmp	r3, r2
 801d866:	d100      	bne.n	801d86a <memset+0xa>
 801d868:	4770      	bx	lr
 801d86a:	f803 1b01 	strb.w	r1, [r3], #1
 801d86e:	e7f9      	b.n	801d864 <memset+0x4>

0801d870 <_free_r>:
 801d870:	b538      	push	{r3, r4, r5, lr}
 801d872:	4605      	mov	r5, r0
 801d874:	2900      	cmp	r1, #0
 801d876:	d045      	beq.n	801d904 <_free_r+0x94>
 801d878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d87c:	1f0c      	subs	r4, r1, #4
 801d87e:	2b00      	cmp	r3, #0
 801d880:	bfb8      	it	lt
 801d882:	18e4      	addlt	r4, r4, r3
 801d884:	f000 feba 	bl	801e5fc <__malloc_lock>
 801d888:	4a1f      	ldr	r2, [pc, #124]	; (801d908 <_free_r+0x98>)
 801d88a:	6813      	ldr	r3, [r2, #0]
 801d88c:	4610      	mov	r0, r2
 801d88e:	b933      	cbnz	r3, 801d89e <_free_r+0x2e>
 801d890:	6063      	str	r3, [r4, #4]
 801d892:	6014      	str	r4, [r2, #0]
 801d894:	4628      	mov	r0, r5
 801d896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d89a:	f000 beb0 	b.w	801e5fe <__malloc_unlock>
 801d89e:	42a3      	cmp	r3, r4
 801d8a0:	d90c      	bls.n	801d8bc <_free_r+0x4c>
 801d8a2:	6821      	ldr	r1, [r4, #0]
 801d8a4:	1862      	adds	r2, r4, r1
 801d8a6:	4293      	cmp	r3, r2
 801d8a8:	bf04      	itt	eq
 801d8aa:	681a      	ldreq	r2, [r3, #0]
 801d8ac:	685b      	ldreq	r3, [r3, #4]
 801d8ae:	6063      	str	r3, [r4, #4]
 801d8b0:	bf04      	itt	eq
 801d8b2:	1852      	addeq	r2, r2, r1
 801d8b4:	6022      	streq	r2, [r4, #0]
 801d8b6:	6004      	str	r4, [r0, #0]
 801d8b8:	e7ec      	b.n	801d894 <_free_r+0x24>
 801d8ba:	4613      	mov	r3, r2
 801d8bc:	685a      	ldr	r2, [r3, #4]
 801d8be:	b10a      	cbz	r2, 801d8c4 <_free_r+0x54>
 801d8c0:	42a2      	cmp	r2, r4
 801d8c2:	d9fa      	bls.n	801d8ba <_free_r+0x4a>
 801d8c4:	6819      	ldr	r1, [r3, #0]
 801d8c6:	1858      	adds	r0, r3, r1
 801d8c8:	42a0      	cmp	r0, r4
 801d8ca:	d10b      	bne.n	801d8e4 <_free_r+0x74>
 801d8cc:	6820      	ldr	r0, [r4, #0]
 801d8ce:	4401      	add	r1, r0
 801d8d0:	1858      	adds	r0, r3, r1
 801d8d2:	4282      	cmp	r2, r0
 801d8d4:	6019      	str	r1, [r3, #0]
 801d8d6:	d1dd      	bne.n	801d894 <_free_r+0x24>
 801d8d8:	6810      	ldr	r0, [r2, #0]
 801d8da:	6852      	ldr	r2, [r2, #4]
 801d8dc:	605a      	str	r2, [r3, #4]
 801d8de:	4401      	add	r1, r0
 801d8e0:	6019      	str	r1, [r3, #0]
 801d8e2:	e7d7      	b.n	801d894 <_free_r+0x24>
 801d8e4:	d902      	bls.n	801d8ec <_free_r+0x7c>
 801d8e6:	230c      	movs	r3, #12
 801d8e8:	602b      	str	r3, [r5, #0]
 801d8ea:	e7d3      	b.n	801d894 <_free_r+0x24>
 801d8ec:	6820      	ldr	r0, [r4, #0]
 801d8ee:	1821      	adds	r1, r4, r0
 801d8f0:	428a      	cmp	r2, r1
 801d8f2:	bf04      	itt	eq
 801d8f4:	6811      	ldreq	r1, [r2, #0]
 801d8f6:	6852      	ldreq	r2, [r2, #4]
 801d8f8:	6062      	str	r2, [r4, #4]
 801d8fa:	bf04      	itt	eq
 801d8fc:	1809      	addeq	r1, r1, r0
 801d8fe:	6021      	streq	r1, [r4, #0]
 801d900:	605c      	str	r4, [r3, #4]
 801d902:	e7c7      	b.n	801d894 <_free_r+0x24>
 801d904:	bd38      	pop	{r3, r4, r5, pc}
 801d906:	bf00      	nop
 801d908:	200085e8 	.word	0x200085e8

0801d90c <_malloc_r>:
 801d90c:	b570      	push	{r4, r5, r6, lr}
 801d90e:	1ccd      	adds	r5, r1, #3
 801d910:	f025 0503 	bic.w	r5, r5, #3
 801d914:	3508      	adds	r5, #8
 801d916:	2d0c      	cmp	r5, #12
 801d918:	bf38      	it	cc
 801d91a:	250c      	movcc	r5, #12
 801d91c:	2d00      	cmp	r5, #0
 801d91e:	4606      	mov	r6, r0
 801d920:	db01      	blt.n	801d926 <_malloc_r+0x1a>
 801d922:	42a9      	cmp	r1, r5
 801d924:	d903      	bls.n	801d92e <_malloc_r+0x22>
 801d926:	230c      	movs	r3, #12
 801d928:	6033      	str	r3, [r6, #0]
 801d92a:	2000      	movs	r0, #0
 801d92c:	bd70      	pop	{r4, r5, r6, pc}
 801d92e:	f000 fe65 	bl	801e5fc <__malloc_lock>
 801d932:	4a21      	ldr	r2, [pc, #132]	; (801d9b8 <_malloc_r+0xac>)
 801d934:	6814      	ldr	r4, [r2, #0]
 801d936:	4621      	mov	r1, r4
 801d938:	b991      	cbnz	r1, 801d960 <_malloc_r+0x54>
 801d93a:	4c20      	ldr	r4, [pc, #128]	; (801d9bc <_malloc_r+0xb0>)
 801d93c:	6823      	ldr	r3, [r4, #0]
 801d93e:	b91b      	cbnz	r3, 801d948 <_malloc_r+0x3c>
 801d940:	4630      	mov	r0, r6
 801d942:	f000 fb05 	bl	801df50 <_sbrk_r>
 801d946:	6020      	str	r0, [r4, #0]
 801d948:	4629      	mov	r1, r5
 801d94a:	4630      	mov	r0, r6
 801d94c:	f000 fb00 	bl	801df50 <_sbrk_r>
 801d950:	1c43      	adds	r3, r0, #1
 801d952:	d124      	bne.n	801d99e <_malloc_r+0x92>
 801d954:	230c      	movs	r3, #12
 801d956:	6033      	str	r3, [r6, #0]
 801d958:	4630      	mov	r0, r6
 801d95a:	f000 fe50 	bl	801e5fe <__malloc_unlock>
 801d95e:	e7e4      	b.n	801d92a <_malloc_r+0x1e>
 801d960:	680b      	ldr	r3, [r1, #0]
 801d962:	1b5b      	subs	r3, r3, r5
 801d964:	d418      	bmi.n	801d998 <_malloc_r+0x8c>
 801d966:	2b0b      	cmp	r3, #11
 801d968:	d90f      	bls.n	801d98a <_malloc_r+0x7e>
 801d96a:	600b      	str	r3, [r1, #0]
 801d96c:	50cd      	str	r5, [r1, r3]
 801d96e:	18cc      	adds	r4, r1, r3
 801d970:	4630      	mov	r0, r6
 801d972:	f000 fe44 	bl	801e5fe <__malloc_unlock>
 801d976:	f104 000b 	add.w	r0, r4, #11
 801d97a:	1d23      	adds	r3, r4, #4
 801d97c:	f020 0007 	bic.w	r0, r0, #7
 801d980:	1ac3      	subs	r3, r0, r3
 801d982:	d0d3      	beq.n	801d92c <_malloc_r+0x20>
 801d984:	425a      	negs	r2, r3
 801d986:	50e2      	str	r2, [r4, r3]
 801d988:	e7d0      	b.n	801d92c <_malloc_r+0x20>
 801d98a:	428c      	cmp	r4, r1
 801d98c:	684b      	ldr	r3, [r1, #4]
 801d98e:	bf16      	itet	ne
 801d990:	6063      	strne	r3, [r4, #4]
 801d992:	6013      	streq	r3, [r2, #0]
 801d994:	460c      	movne	r4, r1
 801d996:	e7eb      	b.n	801d970 <_malloc_r+0x64>
 801d998:	460c      	mov	r4, r1
 801d99a:	6849      	ldr	r1, [r1, #4]
 801d99c:	e7cc      	b.n	801d938 <_malloc_r+0x2c>
 801d99e:	1cc4      	adds	r4, r0, #3
 801d9a0:	f024 0403 	bic.w	r4, r4, #3
 801d9a4:	42a0      	cmp	r0, r4
 801d9a6:	d005      	beq.n	801d9b4 <_malloc_r+0xa8>
 801d9a8:	1a21      	subs	r1, r4, r0
 801d9aa:	4630      	mov	r0, r6
 801d9ac:	f000 fad0 	bl	801df50 <_sbrk_r>
 801d9b0:	3001      	adds	r0, #1
 801d9b2:	d0cf      	beq.n	801d954 <_malloc_r+0x48>
 801d9b4:	6025      	str	r5, [r4, #0]
 801d9b6:	e7db      	b.n	801d970 <_malloc_r+0x64>
 801d9b8:	200085e8 	.word	0x200085e8
 801d9bc:	200085ec 	.word	0x200085ec

0801d9c0 <__sfputc_r>:
 801d9c0:	6893      	ldr	r3, [r2, #8]
 801d9c2:	3b01      	subs	r3, #1
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	b410      	push	{r4}
 801d9c8:	6093      	str	r3, [r2, #8]
 801d9ca:	da08      	bge.n	801d9de <__sfputc_r+0x1e>
 801d9cc:	6994      	ldr	r4, [r2, #24]
 801d9ce:	42a3      	cmp	r3, r4
 801d9d0:	db01      	blt.n	801d9d6 <__sfputc_r+0x16>
 801d9d2:	290a      	cmp	r1, #10
 801d9d4:	d103      	bne.n	801d9de <__sfputc_r+0x1e>
 801d9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9da:	f000 bb0d 	b.w	801dff8 <__swbuf_r>
 801d9de:	6813      	ldr	r3, [r2, #0]
 801d9e0:	1c58      	adds	r0, r3, #1
 801d9e2:	6010      	str	r0, [r2, #0]
 801d9e4:	7019      	strb	r1, [r3, #0]
 801d9e6:	4608      	mov	r0, r1
 801d9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9ec:	4770      	bx	lr

0801d9ee <__sfputs_r>:
 801d9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9f0:	4606      	mov	r6, r0
 801d9f2:	460f      	mov	r7, r1
 801d9f4:	4614      	mov	r4, r2
 801d9f6:	18d5      	adds	r5, r2, r3
 801d9f8:	42ac      	cmp	r4, r5
 801d9fa:	d101      	bne.n	801da00 <__sfputs_r+0x12>
 801d9fc:	2000      	movs	r0, #0
 801d9fe:	e007      	b.n	801da10 <__sfputs_r+0x22>
 801da00:	463a      	mov	r2, r7
 801da02:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da06:	4630      	mov	r0, r6
 801da08:	f7ff ffda 	bl	801d9c0 <__sfputc_r>
 801da0c:	1c43      	adds	r3, r0, #1
 801da0e:	d1f3      	bne.n	801d9f8 <__sfputs_r+0xa>
 801da10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801da14 <_vfiprintf_r>:
 801da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da18:	460c      	mov	r4, r1
 801da1a:	b09d      	sub	sp, #116	; 0x74
 801da1c:	4617      	mov	r7, r2
 801da1e:	461d      	mov	r5, r3
 801da20:	4606      	mov	r6, r0
 801da22:	b118      	cbz	r0, 801da2c <_vfiprintf_r+0x18>
 801da24:	6983      	ldr	r3, [r0, #24]
 801da26:	b90b      	cbnz	r3, 801da2c <_vfiprintf_r+0x18>
 801da28:	f000 fcfa 	bl	801e420 <__sinit>
 801da2c:	4b7c      	ldr	r3, [pc, #496]	; (801dc20 <_vfiprintf_r+0x20c>)
 801da2e:	429c      	cmp	r4, r3
 801da30:	d158      	bne.n	801dae4 <_vfiprintf_r+0xd0>
 801da32:	6874      	ldr	r4, [r6, #4]
 801da34:	89a3      	ldrh	r3, [r4, #12]
 801da36:	0718      	lsls	r0, r3, #28
 801da38:	d55e      	bpl.n	801daf8 <_vfiprintf_r+0xe4>
 801da3a:	6923      	ldr	r3, [r4, #16]
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d05b      	beq.n	801daf8 <_vfiprintf_r+0xe4>
 801da40:	2300      	movs	r3, #0
 801da42:	9309      	str	r3, [sp, #36]	; 0x24
 801da44:	2320      	movs	r3, #32
 801da46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801da4a:	2330      	movs	r3, #48	; 0x30
 801da4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801da50:	9503      	str	r5, [sp, #12]
 801da52:	f04f 0b01 	mov.w	fp, #1
 801da56:	46b8      	mov	r8, r7
 801da58:	4645      	mov	r5, r8
 801da5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801da5e:	b10b      	cbz	r3, 801da64 <_vfiprintf_r+0x50>
 801da60:	2b25      	cmp	r3, #37	; 0x25
 801da62:	d154      	bne.n	801db0e <_vfiprintf_r+0xfa>
 801da64:	ebb8 0a07 	subs.w	sl, r8, r7
 801da68:	d00b      	beq.n	801da82 <_vfiprintf_r+0x6e>
 801da6a:	4653      	mov	r3, sl
 801da6c:	463a      	mov	r2, r7
 801da6e:	4621      	mov	r1, r4
 801da70:	4630      	mov	r0, r6
 801da72:	f7ff ffbc 	bl	801d9ee <__sfputs_r>
 801da76:	3001      	adds	r0, #1
 801da78:	f000 80c2 	beq.w	801dc00 <_vfiprintf_r+0x1ec>
 801da7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da7e:	4453      	add	r3, sl
 801da80:	9309      	str	r3, [sp, #36]	; 0x24
 801da82:	f898 3000 	ldrb.w	r3, [r8]
 801da86:	2b00      	cmp	r3, #0
 801da88:	f000 80ba 	beq.w	801dc00 <_vfiprintf_r+0x1ec>
 801da8c:	2300      	movs	r3, #0
 801da8e:	f04f 32ff 	mov.w	r2, #4294967295
 801da92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da96:	9304      	str	r3, [sp, #16]
 801da98:	9307      	str	r3, [sp, #28]
 801da9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801da9e:	931a      	str	r3, [sp, #104]	; 0x68
 801daa0:	46a8      	mov	r8, r5
 801daa2:	2205      	movs	r2, #5
 801daa4:	f818 1b01 	ldrb.w	r1, [r8], #1
 801daa8:	485e      	ldr	r0, [pc, #376]	; (801dc24 <_vfiprintf_r+0x210>)
 801daaa:	f7e2 fba1 	bl	80001f0 <memchr>
 801daae:	9b04      	ldr	r3, [sp, #16]
 801dab0:	bb78      	cbnz	r0, 801db12 <_vfiprintf_r+0xfe>
 801dab2:	06d9      	lsls	r1, r3, #27
 801dab4:	bf44      	itt	mi
 801dab6:	2220      	movmi	r2, #32
 801dab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dabc:	071a      	lsls	r2, r3, #28
 801dabe:	bf44      	itt	mi
 801dac0:	222b      	movmi	r2, #43	; 0x2b
 801dac2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dac6:	782a      	ldrb	r2, [r5, #0]
 801dac8:	2a2a      	cmp	r2, #42	; 0x2a
 801daca:	d02a      	beq.n	801db22 <_vfiprintf_r+0x10e>
 801dacc:	9a07      	ldr	r2, [sp, #28]
 801dace:	46a8      	mov	r8, r5
 801dad0:	2000      	movs	r0, #0
 801dad2:	250a      	movs	r5, #10
 801dad4:	4641      	mov	r1, r8
 801dad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dada:	3b30      	subs	r3, #48	; 0x30
 801dadc:	2b09      	cmp	r3, #9
 801dade:	d969      	bls.n	801dbb4 <_vfiprintf_r+0x1a0>
 801dae0:	b360      	cbz	r0, 801db3c <_vfiprintf_r+0x128>
 801dae2:	e024      	b.n	801db2e <_vfiprintf_r+0x11a>
 801dae4:	4b50      	ldr	r3, [pc, #320]	; (801dc28 <_vfiprintf_r+0x214>)
 801dae6:	429c      	cmp	r4, r3
 801dae8:	d101      	bne.n	801daee <_vfiprintf_r+0xda>
 801daea:	68b4      	ldr	r4, [r6, #8]
 801daec:	e7a2      	b.n	801da34 <_vfiprintf_r+0x20>
 801daee:	4b4f      	ldr	r3, [pc, #316]	; (801dc2c <_vfiprintf_r+0x218>)
 801daf0:	429c      	cmp	r4, r3
 801daf2:	bf08      	it	eq
 801daf4:	68f4      	ldreq	r4, [r6, #12]
 801daf6:	e79d      	b.n	801da34 <_vfiprintf_r+0x20>
 801daf8:	4621      	mov	r1, r4
 801dafa:	4630      	mov	r0, r6
 801dafc:	f000 face 	bl	801e09c <__swsetup_r>
 801db00:	2800      	cmp	r0, #0
 801db02:	d09d      	beq.n	801da40 <_vfiprintf_r+0x2c>
 801db04:	f04f 30ff 	mov.w	r0, #4294967295
 801db08:	b01d      	add	sp, #116	; 0x74
 801db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db0e:	46a8      	mov	r8, r5
 801db10:	e7a2      	b.n	801da58 <_vfiprintf_r+0x44>
 801db12:	4a44      	ldr	r2, [pc, #272]	; (801dc24 <_vfiprintf_r+0x210>)
 801db14:	1a80      	subs	r0, r0, r2
 801db16:	fa0b f000 	lsl.w	r0, fp, r0
 801db1a:	4318      	orrs	r0, r3
 801db1c:	9004      	str	r0, [sp, #16]
 801db1e:	4645      	mov	r5, r8
 801db20:	e7be      	b.n	801daa0 <_vfiprintf_r+0x8c>
 801db22:	9a03      	ldr	r2, [sp, #12]
 801db24:	1d11      	adds	r1, r2, #4
 801db26:	6812      	ldr	r2, [r2, #0]
 801db28:	9103      	str	r1, [sp, #12]
 801db2a:	2a00      	cmp	r2, #0
 801db2c:	db01      	blt.n	801db32 <_vfiprintf_r+0x11e>
 801db2e:	9207      	str	r2, [sp, #28]
 801db30:	e004      	b.n	801db3c <_vfiprintf_r+0x128>
 801db32:	4252      	negs	r2, r2
 801db34:	f043 0302 	orr.w	r3, r3, #2
 801db38:	9207      	str	r2, [sp, #28]
 801db3a:	9304      	str	r3, [sp, #16]
 801db3c:	f898 3000 	ldrb.w	r3, [r8]
 801db40:	2b2e      	cmp	r3, #46	; 0x2e
 801db42:	d10e      	bne.n	801db62 <_vfiprintf_r+0x14e>
 801db44:	f898 3001 	ldrb.w	r3, [r8, #1]
 801db48:	2b2a      	cmp	r3, #42	; 0x2a
 801db4a:	d138      	bne.n	801dbbe <_vfiprintf_r+0x1aa>
 801db4c:	9b03      	ldr	r3, [sp, #12]
 801db4e:	1d1a      	adds	r2, r3, #4
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	9203      	str	r2, [sp, #12]
 801db54:	2b00      	cmp	r3, #0
 801db56:	bfb8      	it	lt
 801db58:	f04f 33ff 	movlt.w	r3, #4294967295
 801db5c:	f108 0802 	add.w	r8, r8, #2
 801db60:	9305      	str	r3, [sp, #20]
 801db62:	4d33      	ldr	r5, [pc, #204]	; (801dc30 <_vfiprintf_r+0x21c>)
 801db64:	f898 1000 	ldrb.w	r1, [r8]
 801db68:	2203      	movs	r2, #3
 801db6a:	4628      	mov	r0, r5
 801db6c:	f7e2 fb40 	bl	80001f0 <memchr>
 801db70:	b140      	cbz	r0, 801db84 <_vfiprintf_r+0x170>
 801db72:	2340      	movs	r3, #64	; 0x40
 801db74:	1b40      	subs	r0, r0, r5
 801db76:	fa03 f000 	lsl.w	r0, r3, r0
 801db7a:	9b04      	ldr	r3, [sp, #16]
 801db7c:	4303      	orrs	r3, r0
 801db7e:	f108 0801 	add.w	r8, r8, #1
 801db82:	9304      	str	r3, [sp, #16]
 801db84:	f898 1000 	ldrb.w	r1, [r8]
 801db88:	482a      	ldr	r0, [pc, #168]	; (801dc34 <_vfiprintf_r+0x220>)
 801db8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801db8e:	2206      	movs	r2, #6
 801db90:	f108 0701 	add.w	r7, r8, #1
 801db94:	f7e2 fb2c 	bl	80001f0 <memchr>
 801db98:	2800      	cmp	r0, #0
 801db9a:	d037      	beq.n	801dc0c <_vfiprintf_r+0x1f8>
 801db9c:	4b26      	ldr	r3, [pc, #152]	; (801dc38 <_vfiprintf_r+0x224>)
 801db9e:	bb1b      	cbnz	r3, 801dbe8 <_vfiprintf_r+0x1d4>
 801dba0:	9b03      	ldr	r3, [sp, #12]
 801dba2:	3307      	adds	r3, #7
 801dba4:	f023 0307 	bic.w	r3, r3, #7
 801dba8:	3308      	adds	r3, #8
 801dbaa:	9303      	str	r3, [sp, #12]
 801dbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbae:	444b      	add	r3, r9
 801dbb0:	9309      	str	r3, [sp, #36]	; 0x24
 801dbb2:	e750      	b.n	801da56 <_vfiprintf_r+0x42>
 801dbb4:	fb05 3202 	mla	r2, r5, r2, r3
 801dbb8:	2001      	movs	r0, #1
 801dbba:	4688      	mov	r8, r1
 801dbbc:	e78a      	b.n	801dad4 <_vfiprintf_r+0xc0>
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	f108 0801 	add.w	r8, r8, #1
 801dbc4:	9305      	str	r3, [sp, #20]
 801dbc6:	4619      	mov	r1, r3
 801dbc8:	250a      	movs	r5, #10
 801dbca:	4640      	mov	r0, r8
 801dbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dbd0:	3a30      	subs	r2, #48	; 0x30
 801dbd2:	2a09      	cmp	r2, #9
 801dbd4:	d903      	bls.n	801dbde <_vfiprintf_r+0x1ca>
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d0c3      	beq.n	801db62 <_vfiprintf_r+0x14e>
 801dbda:	9105      	str	r1, [sp, #20]
 801dbdc:	e7c1      	b.n	801db62 <_vfiprintf_r+0x14e>
 801dbde:	fb05 2101 	mla	r1, r5, r1, r2
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	4680      	mov	r8, r0
 801dbe6:	e7f0      	b.n	801dbca <_vfiprintf_r+0x1b6>
 801dbe8:	ab03      	add	r3, sp, #12
 801dbea:	9300      	str	r3, [sp, #0]
 801dbec:	4622      	mov	r2, r4
 801dbee:	4b13      	ldr	r3, [pc, #76]	; (801dc3c <_vfiprintf_r+0x228>)
 801dbf0:	a904      	add	r1, sp, #16
 801dbf2:	4630      	mov	r0, r6
 801dbf4:	f3af 8000 	nop.w
 801dbf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dbfc:	4681      	mov	r9, r0
 801dbfe:	d1d5      	bne.n	801dbac <_vfiprintf_r+0x198>
 801dc00:	89a3      	ldrh	r3, [r4, #12]
 801dc02:	065b      	lsls	r3, r3, #25
 801dc04:	f53f af7e 	bmi.w	801db04 <_vfiprintf_r+0xf0>
 801dc08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dc0a:	e77d      	b.n	801db08 <_vfiprintf_r+0xf4>
 801dc0c:	ab03      	add	r3, sp, #12
 801dc0e:	9300      	str	r3, [sp, #0]
 801dc10:	4622      	mov	r2, r4
 801dc12:	4b0a      	ldr	r3, [pc, #40]	; (801dc3c <_vfiprintf_r+0x228>)
 801dc14:	a904      	add	r1, sp, #16
 801dc16:	4630      	mov	r0, r6
 801dc18:	f000 f888 	bl	801dd2c <_printf_i>
 801dc1c:	e7ec      	b.n	801dbf8 <_vfiprintf_r+0x1e4>
 801dc1e:	bf00      	nop
 801dc20:	08021ec8 	.word	0x08021ec8
 801dc24:	08021e70 	.word	0x08021e70
 801dc28:	08021ee8 	.word	0x08021ee8
 801dc2c:	08021ea8 	.word	0x08021ea8
 801dc30:	08021e76 	.word	0x08021e76
 801dc34:	08021e7a 	.word	0x08021e7a
 801dc38:	00000000 	.word	0x00000000
 801dc3c:	0801d9ef 	.word	0x0801d9ef

0801dc40 <_printf_common>:
 801dc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc44:	4691      	mov	r9, r2
 801dc46:	461f      	mov	r7, r3
 801dc48:	688a      	ldr	r2, [r1, #8]
 801dc4a:	690b      	ldr	r3, [r1, #16]
 801dc4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dc50:	4293      	cmp	r3, r2
 801dc52:	bfb8      	it	lt
 801dc54:	4613      	movlt	r3, r2
 801dc56:	f8c9 3000 	str.w	r3, [r9]
 801dc5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dc5e:	4606      	mov	r6, r0
 801dc60:	460c      	mov	r4, r1
 801dc62:	b112      	cbz	r2, 801dc6a <_printf_common+0x2a>
 801dc64:	3301      	adds	r3, #1
 801dc66:	f8c9 3000 	str.w	r3, [r9]
 801dc6a:	6823      	ldr	r3, [r4, #0]
 801dc6c:	0699      	lsls	r1, r3, #26
 801dc6e:	bf42      	ittt	mi
 801dc70:	f8d9 3000 	ldrmi.w	r3, [r9]
 801dc74:	3302      	addmi	r3, #2
 801dc76:	f8c9 3000 	strmi.w	r3, [r9]
 801dc7a:	6825      	ldr	r5, [r4, #0]
 801dc7c:	f015 0506 	ands.w	r5, r5, #6
 801dc80:	d107      	bne.n	801dc92 <_printf_common+0x52>
 801dc82:	f104 0a19 	add.w	sl, r4, #25
 801dc86:	68e3      	ldr	r3, [r4, #12]
 801dc88:	f8d9 2000 	ldr.w	r2, [r9]
 801dc8c:	1a9b      	subs	r3, r3, r2
 801dc8e:	42ab      	cmp	r3, r5
 801dc90:	dc28      	bgt.n	801dce4 <_printf_common+0xa4>
 801dc92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801dc96:	6822      	ldr	r2, [r4, #0]
 801dc98:	3300      	adds	r3, #0
 801dc9a:	bf18      	it	ne
 801dc9c:	2301      	movne	r3, #1
 801dc9e:	0692      	lsls	r2, r2, #26
 801dca0:	d42d      	bmi.n	801dcfe <_printf_common+0xbe>
 801dca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dca6:	4639      	mov	r1, r7
 801dca8:	4630      	mov	r0, r6
 801dcaa:	47c0      	blx	r8
 801dcac:	3001      	adds	r0, #1
 801dcae:	d020      	beq.n	801dcf2 <_printf_common+0xb2>
 801dcb0:	6823      	ldr	r3, [r4, #0]
 801dcb2:	68e5      	ldr	r5, [r4, #12]
 801dcb4:	f8d9 2000 	ldr.w	r2, [r9]
 801dcb8:	f003 0306 	and.w	r3, r3, #6
 801dcbc:	2b04      	cmp	r3, #4
 801dcbe:	bf08      	it	eq
 801dcc0:	1aad      	subeq	r5, r5, r2
 801dcc2:	68a3      	ldr	r3, [r4, #8]
 801dcc4:	6922      	ldr	r2, [r4, #16]
 801dcc6:	bf0c      	ite	eq
 801dcc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dccc:	2500      	movne	r5, #0
 801dcce:	4293      	cmp	r3, r2
 801dcd0:	bfc4      	itt	gt
 801dcd2:	1a9b      	subgt	r3, r3, r2
 801dcd4:	18ed      	addgt	r5, r5, r3
 801dcd6:	f04f 0900 	mov.w	r9, #0
 801dcda:	341a      	adds	r4, #26
 801dcdc:	454d      	cmp	r5, r9
 801dcde:	d11a      	bne.n	801dd16 <_printf_common+0xd6>
 801dce0:	2000      	movs	r0, #0
 801dce2:	e008      	b.n	801dcf6 <_printf_common+0xb6>
 801dce4:	2301      	movs	r3, #1
 801dce6:	4652      	mov	r2, sl
 801dce8:	4639      	mov	r1, r7
 801dcea:	4630      	mov	r0, r6
 801dcec:	47c0      	blx	r8
 801dcee:	3001      	adds	r0, #1
 801dcf0:	d103      	bne.n	801dcfa <_printf_common+0xba>
 801dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 801dcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcfa:	3501      	adds	r5, #1
 801dcfc:	e7c3      	b.n	801dc86 <_printf_common+0x46>
 801dcfe:	18e1      	adds	r1, r4, r3
 801dd00:	1c5a      	adds	r2, r3, #1
 801dd02:	2030      	movs	r0, #48	; 0x30
 801dd04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dd08:	4422      	add	r2, r4
 801dd0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dd0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dd12:	3302      	adds	r3, #2
 801dd14:	e7c5      	b.n	801dca2 <_printf_common+0x62>
 801dd16:	2301      	movs	r3, #1
 801dd18:	4622      	mov	r2, r4
 801dd1a:	4639      	mov	r1, r7
 801dd1c:	4630      	mov	r0, r6
 801dd1e:	47c0      	blx	r8
 801dd20:	3001      	adds	r0, #1
 801dd22:	d0e6      	beq.n	801dcf2 <_printf_common+0xb2>
 801dd24:	f109 0901 	add.w	r9, r9, #1
 801dd28:	e7d8      	b.n	801dcdc <_printf_common+0x9c>
	...

0801dd2c <_printf_i>:
 801dd2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801dd34:	460c      	mov	r4, r1
 801dd36:	7e09      	ldrb	r1, [r1, #24]
 801dd38:	b085      	sub	sp, #20
 801dd3a:	296e      	cmp	r1, #110	; 0x6e
 801dd3c:	4617      	mov	r7, r2
 801dd3e:	4606      	mov	r6, r0
 801dd40:	4698      	mov	r8, r3
 801dd42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dd44:	f000 80b3 	beq.w	801deae <_printf_i+0x182>
 801dd48:	d822      	bhi.n	801dd90 <_printf_i+0x64>
 801dd4a:	2963      	cmp	r1, #99	; 0x63
 801dd4c:	d036      	beq.n	801ddbc <_printf_i+0x90>
 801dd4e:	d80a      	bhi.n	801dd66 <_printf_i+0x3a>
 801dd50:	2900      	cmp	r1, #0
 801dd52:	f000 80b9 	beq.w	801dec8 <_printf_i+0x19c>
 801dd56:	2958      	cmp	r1, #88	; 0x58
 801dd58:	f000 8083 	beq.w	801de62 <_printf_i+0x136>
 801dd5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dd60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801dd64:	e032      	b.n	801ddcc <_printf_i+0xa0>
 801dd66:	2964      	cmp	r1, #100	; 0x64
 801dd68:	d001      	beq.n	801dd6e <_printf_i+0x42>
 801dd6a:	2969      	cmp	r1, #105	; 0x69
 801dd6c:	d1f6      	bne.n	801dd5c <_printf_i+0x30>
 801dd6e:	6820      	ldr	r0, [r4, #0]
 801dd70:	6813      	ldr	r3, [r2, #0]
 801dd72:	0605      	lsls	r5, r0, #24
 801dd74:	f103 0104 	add.w	r1, r3, #4
 801dd78:	d52a      	bpl.n	801ddd0 <_printf_i+0xa4>
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	6011      	str	r1, [r2, #0]
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	da03      	bge.n	801dd8a <_printf_i+0x5e>
 801dd82:	222d      	movs	r2, #45	; 0x2d
 801dd84:	425b      	negs	r3, r3
 801dd86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801dd8a:	486f      	ldr	r0, [pc, #444]	; (801df48 <_printf_i+0x21c>)
 801dd8c:	220a      	movs	r2, #10
 801dd8e:	e039      	b.n	801de04 <_printf_i+0xd8>
 801dd90:	2973      	cmp	r1, #115	; 0x73
 801dd92:	f000 809d 	beq.w	801ded0 <_printf_i+0x1a4>
 801dd96:	d808      	bhi.n	801ddaa <_printf_i+0x7e>
 801dd98:	296f      	cmp	r1, #111	; 0x6f
 801dd9a:	d020      	beq.n	801ddde <_printf_i+0xb2>
 801dd9c:	2970      	cmp	r1, #112	; 0x70
 801dd9e:	d1dd      	bne.n	801dd5c <_printf_i+0x30>
 801dda0:	6823      	ldr	r3, [r4, #0]
 801dda2:	f043 0320 	orr.w	r3, r3, #32
 801dda6:	6023      	str	r3, [r4, #0]
 801dda8:	e003      	b.n	801ddb2 <_printf_i+0x86>
 801ddaa:	2975      	cmp	r1, #117	; 0x75
 801ddac:	d017      	beq.n	801ddde <_printf_i+0xb2>
 801ddae:	2978      	cmp	r1, #120	; 0x78
 801ddb0:	d1d4      	bne.n	801dd5c <_printf_i+0x30>
 801ddb2:	2378      	movs	r3, #120	; 0x78
 801ddb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ddb8:	4864      	ldr	r0, [pc, #400]	; (801df4c <_printf_i+0x220>)
 801ddba:	e055      	b.n	801de68 <_printf_i+0x13c>
 801ddbc:	6813      	ldr	r3, [r2, #0]
 801ddbe:	1d19      	adds	r1, r3, #4
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	6011      	str	r1, [r2, #0]
 801ddc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ddc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ddcc:	2301      	movs	r3, #1
 801ddce:	e08c      	b.n	801deea <_printf_i+0x1be>
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	6011      	str	r1, [r2, #0]
 801ddd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ddd8:	bf18      	it	ne
 801ddda:	b21b      	sxthne	r3, r3
 801dddc:	e7cf      	b.n	801dd7e <_printf_i+0x52>
 801ddde:	6813      	ldr	r3, [r2, #0]
 801dde0:	6825      	ldr	r5, [r4, #0]
 801dde2:	1d18      	adds	r0, r3, #4
 801dde4:	6010      	str	r0, [r2, #0]
 801dde6:	0628      	lsls	r0, r5, #24
 801dde8:	d501      	bpl.n	801ddee <_printf_i+0xc2>
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	e002      	b.n	801ddf4 <_printf_i+0xc8>
 801ddee:	0668      	lsls	r0, r5, #25
 801ddf0:	d5fb      	bpl.n	801ddea <_printf_i+0xbe>
 801ddf2:	881b      	ldrh	r3, [r3, #0]
 801ddf4:	4854      	ldr	r0, [pc, #336]	; (801df48 <_printf_i+0x21c>)
 801ddf6:	296f      	cmp	r1, #111	; 0x6f
 801ddf8:	bf14      	ite	ne
 801ddfa:	220a      	movne	r2, #10
 801ddfc:	2208      	moveq	r2, #8
 801ddfe:	2100      	movs	r1, #0
 801de00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801de04:	6865      	ldr	r5, [r4, #4]
 801de06:	60a5      	str	r5, [r4, #8]
 801de08:	2d00      	cmp	r5, #0
 801de0a:	f2c0 8095 	blt.w	801df38 <_printf_i+0x20c>
 801de0e:	6821      	ldr	r1, [r4, #0]
 801de10:	f021 0104 	bic.w	r1, r1, #4
 801de14:	6021      	str	r1, [r4, #0]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d13d      	bne.n	801de96 <_printf_i+0x16a>
 801de1a:	2d00      	cmp	r5, #0
 801de1c:	f040 808e 	bne.w	801df3c <_printf_i+0x210>
 801de20:	4665      	mov	r5, ip
 801de22:	2a08      	cmp	r2, #8
 801de24:	d10b      	bne.n	801de3e <_printf_i+0x112>
 801de26:	6823      	ldr	r3, [r4, #0]
 801de28:	07db      	lsls	r3, r3, #31
 801de2a:	d508      	bpl.n	801de3e <_printf_i+0x112>
 801de2c:	6923      	ldr	r3, [r4, #16]
 801de2e:	6862      	ldr	r2, [r4, #4]
 801de30:	429a      	cmp	r2, r3
 801de32:	bfde      	ittt	le
 801de34:	2330      	movle	r3, #48	; 0x30
 801de36:	f805 3c01 	strble.w	r3, [r5, #-1]
 801de3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801de3e:	ebac 0305 	sub.w	r3, ip, r5
 801de42:	6123      	str	r3, [r4, #16]
 801de44:	f8cd 8000 	str.w	r8, [sp]
 801de48:	463b      	mov	r3, r7
 801de4a:	aa03      	add	r2, sp, #12
 801de4c:	4621      	mov	r1, r4
 801de4e:	4630      	mov	r0, r6
 801de50:	f7ff fef6 	bl	801dc40 <_printf_common>
 801de54:	3001      	adds	r0, #1
 801de56:	d14d      	bne.n	801def4 <_printf_i+0x1c8>
 801de58:	f04f 30ff 	mov.w	r0, #4294967295
 801de5c:	b005      	add	sp, #20
 801de5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de62:	4839      	ldr	r0, [pc, #228]	; (801df48 <_printf_i+0x21c>)
 801de64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801de68:	6813      	ldr	r3, [r2, #0]
 801de6a:	6821      	ldr	r1, [r4, #0]
 801de6c:	1d1d      	adds	r5, r3, #4
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	6015      	str	r5, [r2, #0]
 801de72:	060a      	lsls	r2, r1, #24
 801de74:	d50b      	bpl.n	801de8e <_printf_i+0x162>
 801de76:	07ca      	lsls	r2, r1, #31
 801de78:	bf44      	itt	mi
 801de7a:	f041 0120 	orrmi.w	r1, r1, #32
 801de7e:	6021      	strmi	r1, [r4, #0]
 801de80:	b91b      	cbnz	r3, 801de8a <_printf_i+0x15e>
 801de82:	6822      	ldr	r2, [r4, #0]
 801de84:	f022 0220 	bic.w	r2, r2, #32
 801de88:	6022      	str	r2, [r4, #0]
 801de8a:	2210      	movs	r2, #16
 801de8c:	e7b7      	b.n	801ddfe <_printf_i+0xd2>
 801de8e:	064d      	lsls	r5, r1, #25
 801de90:	bf48      	it	mi
 801de92:	b29b      	uxthmi	r3, r3
 801de94:	e7ef      	b.n	801de76 <_printf_i+0x14a>
 801de96:	4665      	mov	r5, ip
 801de98:	fbb3 f1f2 	udiv	r1, r3, r2
 801de9c:	fb02 3311 	mls	r3, r2, r1, r3
 801dea0:	5cc3      	ldrb	r3, [r0, r3]
 801dea2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801dea6:	460b      	mov	r3, r1
 801dea8:	2900      	cmp	r1, #0
 801deaa:	d1f5      	bne.n	801de98 <_printf_i+0x16c>
 801deac:	e7b9      	b.n	801de22 <_printf_i+0xf6>
 801deae:	6813      	ldr	r3, [r2, #0]
 801deb0:	6825      	ldr	r5, [r4, #0]
 801deb2:	6961      	ldr	r1, [r4, #20]
 801deb4:	1d18      	adds	r0, r3, #4
 801deb6:	6010      	str	r0, [r2, #0]
 801deb8:	0628      	lsls	r0, r5, #24
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	d501      	bpl.n	801dec2 <_printf_i+0x196>
 801debe:	6019      	str	r1, [r3, #0]
 801dec0:	e002      	b.n	801dec8 <_printf_i+0x19c>
 801dec2:	066a      	lsls	r2, r5, #25
 801dec4:	d5fb      	bpl.n	801debe <_printf_i+0x192>
 801dec6:	8019      	strh	r1, [r3, #0]
 801dec8:	2300      	movs	r3, #0
 801deca:	6123      	str	r3, [r4, #16]
 801decc:	4665      	mov	r5, ip
 801dece:	e7b9      	b.n	801de44 <_printf_i+0x118>
 801ded0:	6813      	ldr	r3, [r2, #0]
 801ded2:	1d19      	adds	r1, r3, #4
 801ded4:	6011      	str	r1, [r2, #0]
 801ded6:	681d      	ldr	r5, [r3, #0]
 801ded8:	6862      	ldr	r2, [r4, #4]
 801deda:	2100      	movs	r1, #0
 801dedc:	4628      	mov	r0, r5
 801dede:	f7e2 f987 	bl	80001f0 <memchr>
 801dee2:	b108      	cbz	r0, 801dee8 <_printf_i+0x1bc>
 801dee4:	1b40      	subs	r0, r0, r5
 801dee6:	6060      	str	r0, [r4, #4]
 801dee8:	6863      	ldr	r3, [r4, #4]
 801deea:	6123      	str	r3, [r4, #16]
 801deec:	2300      	movs	r3, #0
 801deee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801def2:	e7a7      	b.n	801de44 <_printf_i+0x118>
 801def4:	6923      	ldr	r3, [r4, #16]
 801def6:	462a      	mov	r2, r5
 801def8:	4639      	mov	r1, r7
 801defa:	4630      	mov	r0, r6
 801defc:	47c0      	blx	r8
 801defe:	3001      	adds	r0, #1
 801df00:	d0aa      	beq.n	801de58 <_printf_i+0x12c>
 801df02:	6823      	ldr	r3, [r4, #0]
 801df04:	079b      	lsls	r3, r3, #30
 801df06:	d413      	bmi.n	801df30 <_printf_i+0x204>
 801df08:	68e0      	ldr	r0, [r4, #12]
 801df0a:	9b03      	ldr	r3, [sp, #12]
 801df0c:	4298      	cmp	r0, r3
 801df0e:	bfb8      	it	lt
 801df10:	4618      	movlt	r0, r3
 801df12:	e7a3      	b.n	801de5c <_printf_i+0x130>
 801df14:	2301      	movs	r3, #1
 801df16:	464a      	mov	r2, r9
 801df18:	4639      	mov	r1, r7
 801df1a:	4630      	mov	r0, r6
 801df1c:	47c0      	blx	r8
 801df1e:	3001      	adds	r0, #1
 801df20:	d09a      	beq.n	801de58 <_printf_i+0x12c>
 801df22:	3501      	adds	r5, #1
 801df24:	68e3      	ldr	r3, [r4, #12]
 801df26:	9a03      	ldr	r2, [sp, #12]
 801df28:	1a9b      	subs	r3, r3, r2
 801df2a:	42ab      	cmp	r3, r5
 801df2c:	dcf2      	bgt.n	801df14 <_printf_i+0x1e8>
 801df2e:	e7eb      	b.n	801df08 <_printf_i+0x1dc>
 801df30:	2500      	movs	r5, #0
 801df32:	f104 0919 	add.w	r9, r4, #25
 801df36:	e7f5      	b.n	801df24 <_printf_i+0x1f8>
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d1ac      	bne.n	801de96 <_printf_i+0x16a>
 801df3c:	7803      	ldrb	r3, [r0, #0]
 801df3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801df42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801df46:	e76c      	b.n	801de22 <_printf_i+0xf6>
 801df48:	08021e81 	.word	0x08021e81
 801df4c:	08021e92 	.word	0x08021e92

0801df50 <_sbrk_r>:
 801df50:	b538      	push	{r3, r4, r5, lr}
 801df52:	4c06      	ldr	r4, [pc, #24]	; (801df6c <_sbrk_r+0x1c>)
 801df54:	2300      	movs	r3, #0
 801df56:	4605      	mov	r5, r0
 801df58:	4608      	mov	r0, r1
 801df5a:	6023      	str	r3, [r4, #0]
 801df5c:	f7e3 fc8c 	bl	8001878 <_sbrk>
 801df60:	1c43      	adds	r3, r0, #1
 801df62:	d102      	bne.n	801df6a <_sbrk_r+0x1a>
 801df64:	6823      	ldr	r3, [r4, #0]
 801df66:	b103      	cbz	r3, 801df6a <_sbrk_r+0x1a>
 801df68:	602b      	str	r3, [r5, #0]
 801df6a:	bd38      	pop	{r3, r4, r5, pc}
 801df6c:	20008acc 	.word	0x20008acc

0801df70 <_raise_r>:
 801df70:	291f      	cmp	r1, #31
 801df72:	b538      	push	{r3, r4, r5, lr}
 801df74:	4604      	mov	r4, r0
 801df76:	460d      	mov	r5, r1
 801df78:	d904      	bls.n	801df84 <_raise_r+0x14>
 801df7a:	2316      	movs	r3, #22
 801df7c:	6003      	str	r3, [r0, #0]
 801df7e:	f04f 30ff 	mov.w	r0, #4294967295
 801df82:	bd38      	pop	{r3, r4, r5, pc}
 801df84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801df86:	b112      	cbz	r2, 801df8e <_raise_r+0x1e>
 801df88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df8c:	b94b      	cbnz	r3, 801dfa2 <_raise_r+0x32>
 801df8e:	4620      	mov	r0, r4
 801df90:	f000 f830 	bl	801dff4 <_getpid_r>
 801df94:	462a      	mov	r2, r5
 801df96:	4601      	mov	r1, r0
 801df98:	4620      	mov	r0, r4
 801df9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df9e:	f000 b817 	b.w	801dfd0 <_kill_r>
 801dfa2:	2b01      	cmp	r3, #1
 801dfa4:	d00a      	beq.n	801dfbc <_raise_r+0x4c>
 801dfa6:	1c59      	adds	r1, r3, #1
 801dfa8:	d103      	bne.n	801dfb2 <_raise_r+0x42>
 801dfaa:	2316      	movs	r3, #22
 801dfac:	6003      	str	r3, [r0, #0]
 801dfae:	2001      	movs	r0, #1
 801dfb0:	e7e7      	b.n	801df82 <_raise_r+0x12>
 801dfb2:	2400      	movs	r4, #0
 801dfb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dfb8:	4628      	mov	r0, r5
 801dfba:	4798      	blx	r3
 801dfbc:	2000      	movs	r0, #0
 801dfbe:	e7e0      	b.n	801df82 <_raise_r+0x12>

0801dfc0 <raise>:
 801dfc0:	4b02      	ldr	r3, [pc, #8]	; (801dfcc <raise+0xc>)
 801dfc2:	4601      	mov	r1, r0
 801dfc4:	6818      	ldr	r0, [r3, #0]
 801dfc6:	f7ff bfd3 	b.w	801df70 <_raise_r>
 801dfca:	bf00      	nop
 801dfcc:	200000ec 	.word	0x200000ec

0801dfd0 <_kill_r>:
 801dfd0:	b538      	push	{r3, r4, r5, lr}
 801dfd2:	4c07      	ldr	r4, [pc, #28]	; (801dff0 <_kill_r+0x20>)
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	4605      	mov	r5, r0
 801dfd8:	4608      	mov	r0, r1
 801dfda:	4611      	mov	r1, r2
 801dfdc:	6023      	str	r3, [r4, #0]
 801dfde:	f7e3 fbc3 	bl	8001768 <_kill>
 801dfe2:	1c43      	adds	r3, r0, #1
 801dfe4:	d102      	bne.n	801dfec <_kill_r+0x1c>
 801dfe6:	6823      	ldr	r3, [r4, #0]
 801dfe8:	b103      	cbz	r3, 801dfec <_kill_r+0x1c>
 801dfea:	602b      	str	r3, [r5, #0]
 801dfec:	bd38      	pop	{r3, r4, r5, pc}
 801dfee:	bf00      	nop
 801dff0:	20008acc 	.word	0x20008acc

0801dff4 <_getpid_r>:
 801dff4:	f7e3 bbb0 	b.w	8001758 <_getpid>

0801dff8 <__swbuf_r>:
 801dff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dffa:	460e      	mov	r6, r1
 801dffc:	4614      	mov	r4, r2
 801dffe:	4605      	mov	r5, r0
 801e000:	b118      	cbz	r0, 801e00a <__swbuf_r+0x12>
 801e002:	6983      	ldr	r3, [r0, #24]
 801e004:	b90b      	cbnz	r3, 801e00a <__swbuf_r+0x12>
 801e006:	f000 fa0b 	bl	801e420 <__sinit>
 801e00a:	4b21      	ldr	r3, [pc, #132]	; (801e090 <__swbuf_r+0x98>)
 801e00c:	429c      	cmp	r4, r3
 801e00e:	d12a      	bne.n	801e066 <__swbuf_r+0x6e>
 801e010:	686c      	ldr	r4, [r5, #4]
 801e012:	69a3      	ldr	r3, [r4, #24]
 801e014:	60a3      	str	r3, [r4, #8]
 801e016:	89a3      	ldrh	r3, [r4, #12]
 801e018:	071a      	lsls	r2, r3, #28
 801e01a:	d52e      	bpl.n	801e07a <__swbuf_r+0x82>
 801e01c:	6923      	ldr	r3, [r4, #16]
 801e01e:	b363      	cbz	r3, 801e07a <__swbuf_r+0x82>
 801e020:	6923      	ldr	r3, [r4, #16]
 801e022:	6820      	ldr	r0, [r4, #0]
 801e024:	1ac0      	subs	r0, r0, r3
 801e026:	6963      	ldr	r3, [r4, #20]
 801e028:	b2f6      	uxtb	r6, r6
 801e02a:	4283      	cmp	r3, r0
 801e02c:	4637      	mov	r7, r6
 801e02e:	dc04      	bgt.n	801e03a <__swbuf_r+0x42>
 801e030:	4621      	mov	r1, r4
 801e032:	4628      	mov	r0, r5
 801e034:	f000 f98a 	bl	801e34c <_fflush_r>
 801e038:	bb28      	cbnz	r0, 801e086 <__swbuf_r+0x8e>
 801e03a:	68a3      	ldr	r3, [r4, #8]
 801e03c:	3b01      	subs	r3, #1
 801e03e:	60a3      	str	r3, [r4, #8]
 801e040:	6823      	ldr	r3, [r4, #0]
 801e042:	1c5a      	adds	r2, r3, #1
 801e044:	6022      	str	r2, [r4, #0]
 801e046:	701e      	strb	r6, [r3, #0]
 801e048:	6963      	ldr	r3, [r4, #20]
 801e04a:	3001      	adds	r0, #1
 801e04c:	4283      	cmp	r3, r0
 801e04e:	d004      	beq.n	801e05a <__swbuf_r+0x62>
 801e050:	89a3      	ldrh	r3, [r4, #12]
 801e052:	07db      	lsls	r3, r3, #31
 801e054:	d519      	bpl.n	801e08a <__swbuf_r+0x92>
 801e056:	2e0a      	cmp	r6, #10
 801e058:	d117      	bne.n	801e08a <__swbuf_r+0x92>
 801e05a:	4621      	mov	r1, r4
 801e05c:	4628      	mov	r0, r5
 801e05e:	f000 f975 	bl	801e34c <_fflush_r>
 801e062:	b190      	cbz	r0, 801e08a <__swbuf_r+0x92>
 801e064:	e00f      	b.n	801e086 <__swbuf_r+0x8e>
 801e066:	4b0b      	ldr	r3, [pc, #44]	; (801e094 <__swbuf_r+0x9c>)
 801e068:	429c      	cmp	r4, r3
 801e06a:	d101      	bne.n	801e070 <__swbuf_r+0x78>
 801e06c:	68ac      	ldr	r4, [r5, #8]
 801e06e:	e7d0      	b.n	801e012 <__swbuf_r+0x1a>
 801e070:	4b09      	ldr	r3, [pc, #36]	; (801e098 <__swbuf_r+0xa0>)
 801e072:	429c      	cmp	r4, r3
 801e074:	bf08      	it	eq
 801e076:	68ec      	ldreq	r4, [r5, #12]
 801e078:	e7cb      	b.n	801e012 <__swbuf_r+0x1a>
 801e07a:	4621      	mov	r1, r4
 801e07c:	4628      	mov	r0, r5
 801e07e:	f000 f80d 	bl	801e09c <__swsetup_r>
 801e082:	2800      	cmp	r0, #0
 801e084:	d0cc      	beq.n	801e020 <__swbuf_r+0x28>
 801e086:	f04f 37ff 	mov.w	r7, #4294967295
 801e08a:	4638      	mov	r0, r7
 801e08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e08e:	bf00      	nop
 801e090:	08021ec8 	.word	0x08021ec8
 801e094:	08021ee8 	.word	0x08021ee8
 801e098:	08021ea8 	.word	0x08021ea8

0801e09c <__swsetup_r>:
 801e09c:	4b32      	ldr	r3, [pc, #200]	; (801e168 <__swsetup_r+0xcc>)
 801e09e:	b570      	push	{r4, r5, r6, lr}
 801e0a0:	681d      	ldr	r5, [r3, #0]
 801e0a2:	4606      	mov	r6, r0
 801e0a4:	460c      	mov	r4, r1
 801e0a6:	b125      	cbz	r5, 801e0b2 <__swsetup_r+0x16>
 801e0a8:	69ab      	ldr	r3, [r5, #24]
 801e0aa:	b913      	cbnz	r3, 801e0b2 <__swsetup_r+0x16>
 801e0ac:	4628      	mov	r0, r5
 801e0ae:	f000 f9b7 	bl	801e420 <__sinit>
 801e0b2:	4b2e      	ldr	r3, [pc, #184]	; (801e16c <__swsetup_r+0xd0>)
 801e0b4:	429c      	cmp	r4, r3
 801e0b6:	d10f      	bne.n	801e0d8 <__swsetup_r+0x3c>
 801e0b8:	686c      	ldr	r4, [r5, #4]
 801e0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0be:	b29a      	uxth	r2, r3
 801e0c0:	0715      	lsls	r5, r2, #28
 801e0c2:	d42c      	bmi.n	801e11e <__swsetup_r+0x82>
 801e0c4:	06d0      	lsls	r0, r2, #27
 801e0c6:	d411      	bmi.n	801e0ec <__swsetup_r+0x50>
 801e0c8:	2209      	movs	r2, #9
 801e0ca:	6032      	str	r2, [r6, #0]
 801e0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0d0:	81a3      	strh	r3, [r4, #12]
 801e0d2:	f04f 30ff 	mov.w	r0, #4294967295
 801e0d6:	e03e      	b.n	801e156 <__swsetup_r+0xba>
 801e0d8:	4b25      	ldr	r3, [pc, #148]	; (801e170 <__swsetup_r+0xd4>)
 801e0da:	429c      	cmp	r4, r3
 801e0dc:	d101      	bne.n	801e0e2 <__swsetup_r+0x46>
 801e0de:	68ac      	ldr	r4, [r5, #8]
 801e0e0:	e7eb      	b.n	801e0ba <__swsetup_r+0x1e>
 801e0e2:	4b24      	ldr	r3, [pc, #144]	; (801e174 <__swsetup_r+0xd8>)
 801e0e4:	429c      	cmp	r4, r3
 801e0e6:	bf08      	it	eq
 801e0e8:	68ec      	ldreq	r4, [r5, #12]
 801e0ea:	e7e6      	b.n	801e0ba <__swsetup_r+0x1e>
 801e0ec:	0751      	lsls	r1, r2, #29
 801e0ee:	d512      	bpl.n	801e116 <__swsetup_r+0x7a>
 801e0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e0f2:	b141      	cbz	r1, 801e106 <__swsetup_r+0x6a>
 801e0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e0f8:	4299      	cmp	r1, r3
 801e0fa:	d002      	beq.n	801e102 <__swsetup_r+0x66>
 801e0fc:	4630      	mov	r0, r6
 801e0fe:	f7ff fbb7 	bl	801d870 <_free_r>
 801e102:	2300      	movs	r3, #0
 801e104:	6363      	str	r3, [r4, #52]	; 0x34
 801e106:	89a3      	ldrh	r3, [r4, #12]
 801e108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e10c:	81a3      	strh	r3, [r4, #12]
 801e10e:	2300      	movs	r3, #0
 801e110:	6063      	str	r3, [r4, #4]
 801e112:	6923      	ldr	r3, [r4, #16]
 801e114:	6023      	str	r3, [r4, #0]
 801e116:	89a3      	ldrh	r3, [r4, #12]
 801e118:	f043 0308 	orr.w	r3, r3, #8
 801e11c:	81a3      	strh	r3, [r4, #12]
 801e11e:	6923      	ldr	r3, [r4, #16]
 801e120:	b94b      	cbnz	r3, 801e136 <__swsetup_r+0x9a>
 801e122:	89a3      	ldrh	r3, [r4, #12]
 801e124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e12c:	d003      	beq.n	801e136 <__swsetup_r+0x9a>
 801e12e:	4621      	mov	r1, r4
 801e130:	4630      	mov	r0, r6
 801e132:	f000 fa23 	bl	801e57c <__smakebuf_r>
 801e136:	89a2      	ldrh	r2, [r4, #12]
 801e138:	f012 0301 	ands.w	r3, r2, #1
 801e13c:	d00c      	beq.n	801e158 <__swsetup_r+0xbc>
 801e13e:	2300      	movs	r3, #0
 801e140:	60a3      	str	r3, [r4, #8]
 801e142:	6963      	ldr	r3, [r4, #20]
 801e144:	425b      	negs	r3, r3
 801e146:	61a3      	str	r3, [r4, #24]
 801e148:	6923      	ldr	r3, [r4, #16]
 801e14a:	b953      	cbnz	r3, 801e162 <__swsetup_r+0xc6>
 801e14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e150:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801e154:	d1ba      	bne.n	801e0cc <__swsetup_r+0x30>
 801e156:	bd70      	pop	{r4, r5, r6, pc}
 801e158:	0792      	lsls	r2, r2, #30
 801e15a:	bf58      	it	pl
 801e15c:	6963      	ldrpl	r3, [r4, #20]
 801e15e:	60a3      	str	r3, [r4, #8]
 801e160:	e7f2      	b.n	801e148 <__swsetup_r+0xac>
 801e162:	2000      	movs	r0, #0
 801e164:	e7f7      	b.n	801e156 <__swsetup_r+0xba>
 801e166:	bf00      	nop
 801e168:	200000ec 	.word	0x200000ec
 801e16c:	08021ec8 	.word	0x08021ec8
 801e170:	08021ee8 	.word	0x08021ee8
 801e174:	08021ea8 	.word	0x08021ea8

0801e178 <__register_exitproc>:
 801e178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e17c:	4d2c      	ldr	r5, [pc, #176]	; (801e230 <__register_exitproc+0xb8>)
 801e17e:	682c      	ldr	r4, [r5, #0]
 801e180:	4607      	mov	r7, r0
 801e182:	460e      	mov	r6, r1
 801e184:	4691      	mov	r9, r2
 801e186:	4698      	mov	r8, r3
 801e188:	b934      	cbnz	r4, 801e198 <__register_exitproc+0x20>
 801e18a:	4b2a      	ldr	r3, [pc, #168]	; (801e234 <__register_exitproc+0xbc>)
 801e18c:	4c2a      	ldr	r4, [pc, #168]	; (801e238 <__register_exitproc+0xc0>)
 801e18e:	602c      	str	r4, [r5, #0]
 801e190:	b113      	cbz	r3, 801e198 <__register_exitproc+0x20>
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801e198:	6863      	ldr	r3, [r4, #4]
 801e19a:	2b1f      	cmp	r3, #31
 801e19c:	dd3d      	ble.n	801e21a <__register_exitproc+0xa2>
 801e19e:	4b27      	ldr	r3, [pc, #156]	; (801e23c <__register_exitproc+0xc4>)
 801e1a0:	b91b      	cbnz	r3, 801e1aa <__register_exitproc+0x32>
 801e1a2:	f04f 30ff 	mov.w	r0, #4294967295
 801e1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e1aa:	208c      	movs	r0, #140	; 0x8c
 801e1ac:	f7ff fb2e 	bl	801d80c <malloc>
 801e1b0:	4604      	mov	r4, r0
 801e1b2:	2800      	cmp	r0, #0
 801e1b4:	d0f5      	beq.n	801e1a2 <__register_exitproc+0x2a>
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	682a      	ldr	r2, [r5, #0]
 801e1ba:	6002      	str	r2, [r0, #0]
 801e1bc:	6043      	str	r3, [r0, #4]
 801e1be:	6028      	str	r0, [r5, #0]
 801e1c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801e1c4:	b30f      	cbz	r7, 801e20a <__register_exitproc+0x92>
 801e1c6:	f44f 7084 	mov.w	r0, #264	; 0x108
 801e1ca:	f7ff fb1f 	bl	801d80c <malloc>
 801e1ce:	2800      	cmp	r0, #0
 801e1d0:	d0e7      	beq.n	801e1a2 <__register_exitproc+0x2a>
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801e1d8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801e1dc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801e1e0:	6862      	ldr	r2, [r4, #4]
 801e1e2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801e1e6:	2301      	movs	r3, #1
 801e1e8:	4093      	lsls	r3, r2
 801e1ea:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801e1ee:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801e1f2:	431a      	orrs	r2, r3
 801e1f4:	2f02      	cmp	r7, #2
 801e1f6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801e1fa:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801e1fe:	bf02      	ittt	eq
 801e200:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801e204:	4313      	orreq	r3, r2
 801e206:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801e20a:	6863      	ldr	r3, [r4, #4]
 801e20c:	1c5a      	adds	r2, r3, #1
 801e20e:	3302      	adds	r3, #2
 801e210:	6062      	str	r2, [r4, #4]
 801e212:	2000      	movs	r0, #0
 801e214:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801e218:	e7c5      	b.n	801e1a6 <__register_exitproc+0x2e>
 801e21a:	2f00      	cmp	r7, #0
 801e21c:	d0f5      	beq.n	801e20a <__register_exitproc+0x92>
 801e21e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801e222:	2800      	cmp	r0, #0
 801e224:	d1dc      	bne.n	801e1e0 <__register_exitproc+0x68>
 801e226:	4b05      	ldr	r3, [pc, #20]	; (801e23c <__register_exitproc+0xc4>)
 801e228:	2b00      	cmp	r3, #0
 801e22a:	d0ba      	beq.n	801e1a2 <__register_exitproc+0x2a>
 801e22c:	e7cb      	b.n	801e1c6 <__register_exitproc+0x4e>
 801e22e:	bf00      	nop
 801e230:	20008784 	.word	0x20008784
 801e234:	08021ea4 	.word	0x08021ea4
 801e238:	200086f8 	.word	0x200086f8
 801e23c:	0801d80d 	.word	0x0801d80d

0801e240 <__sflush_r>:
 801e240:	898a      	ldrh	r2, [r1, #12]
 801e242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e246:	4605      	mov	r5, r0
 801e248:	0710      	lsls	r0, r2, #28
 801e24a:	460c      	mov	r4, r1
 801e24c:	d458      	bmi.n	801e300 <__sflush_r+0xc0>
 801e24e:	684b      	ldr	r3, [r1, #4]
 801e250:	2b00      	cmp	r3, #0
 801e252:	dc05      	bgt.n	801e260 <__sflush_r+0x20>
 801e254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e256:	2b00      	cmp	r3, #0
 801e258:	dc02      	bgt.n	801e260 <__sflush_r+0x20>
 801e25a:	2000      	movs	r0, #0
 801e25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e262:	2e00      	cmp	r6, #0
 801e264:	d0f9      	beq.n	801e25a <__sflush_r+0x1a>
 801e266:	2300      	movs	r3, #0
 801e268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e26c:	682f      	ldr	r7, [r5, #0]
 801e26e:	6a21      	ldr	r1, [r4, #32]
 801e270:	602b      	str	r3, [r5, #0]
 801e272:	d032      	beq.n	801e2da <__sflush_r+0x9a>
 801e274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e276:	89a3      	ldrh	r3, [r4, #12]
 801e278:	075a      	lsls	r2, r3, #29
 801e27a:	d505      	bpl.n	801e288 <__sflush_r+0x48>
 801e27c:	6863      	ldr	r3, [r4, #4]
 801e27e:	1ac0      	subs	r0, r0, r3
 801e280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e282:	b10b      	cbz	r3, 801e288 <__sflush_r+0x48>
 801e284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e286:	1ac0      	subs	r0, r0, r3
 801e288:	2300      	movs	r3, #0
 801e28a:	4602      	mov	r2, r0
 801e28c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e28e:	6a21      	ldr	r1, [r4, #32]
 801e290:	4628      	mov	r0, r5
 801e292:	47b0      	blx	r6
 801e294:	1c43      	adds	r3, r0, #1
 801e296:	89a3      	ldrh	r3, [r4, #12]
 801e298:	d106      	bne.n	801e2a8 <__sflush_r+0x68>
 801e29a:	6829      	ldr	r1, [r5, #0]
 801e29c:	291d      	cmp	r1, #29
 801e29e:	d848      	bhi.n	801e332 <__sflush_r+0xf2>
 801e2a0:	4a29      	ldr	r2, [pc, #164]	; (801e348 <__sflush_r+0x108>)
 801e2a2:	40ca      	lsrs	r2, r1
 801e2a4:	07d6      	lsls	r6, r2, #31
 801e2a6:	d544      	bpl.n	801e332 <__sflush_r+0xf2>
 801e2a8:	2200      	movs	r2, #0
 801e2aa:	6062      	str	r2, [r4, #4]
 801e2ac:	04d9      	lsls	r1, r3, #19
 801e2ae:	6922      	ldr	r2, [r4, #16]
 801e2b0:	6022      	str	r2, [r4, #0]
 801e2b2:	d504      	bpl.n	801e2be <__sflush_r+0x7e>
 801e2b4:	1c42      	adds	r2, r0, #1
 801e2b6:	d101      	bne.n	801e2bc <__sflush_r+0x7c>
 801e2b8:	682b      	ldr	r3, [r5, #0]
 801e2ba:	b903      	cbnz	r3, 801e2be <__sflush_r+0x7e>
 801e2bc:	6560      	str	r0, [r4, #84]	; 0x54
 801e2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2c0:	602f      	str	r7, [r5, #0]
 801e2c2:	2900      	cmp	r1, #0
 801e2c4:	d0c9      	beq.n	801e25a <__sflush_r+0x1a>
 801e2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e2ca:	4299      	cmp	r1, r3
 801e2cc:	d002      	beq.n	801e2d4 <__sflush_r+0x94>
 801e2ce:	4628      	mov	r0, r5
 801e2d0:	f7ff face 	bl	801d870 <_free_r>
 801e2d4:	2000      	movs	r0, #0
 801e2d6:	6360      	str	r0, [r4, #52]	; 0x34
 801e2d8:	e7c0      	b.n	801e25c <__sflush_r+0x1c>
 801e2da:	2301      	movs	r3, #1
 801e2dc:	4628      	mov	r0, r5
 801e2de:	47b0      	blx	r6
 801e2e0:	1c41      	adds	r1, r0, #1
 801e2e2:	d1c8      	bne.n	801e276 <__sflush_r+0x36>
 801e2e4:	682b      	ldr	r3, [r5, #0]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d0c5      	beq.n	801e276 <__sflush_r+0x36>
 801e2ea:	2b1d      	cmp	r3, #29
 801e2ec:	d001      	beq.n	801e2f2 <__sflush_r+0xb2>
 801e2ee:	2b16      	cmp	r3, #22
 801e2f0:	d101      	bne.n	801e2f6 <__sflush_r+0xb6>
 801e2f2:	602f      	str	r7, [r5, #0]
 801e2f4:	e7b1      	b.n	801e25a <__sflush_r+0x1a>
 801e2f6:	89a3      	ldrh	r3, [r4, #12]
 801e2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e2fc:	81a3      	strh	r3, [r4, #12]
 801e2fe:	e7ad      	b.n	801e25c <__sflush_r+0x1c>
 801e300:	690f      	ldr	r7, [r1, #16]
 801e302:	2f00      	cmp	r7, #0
 801e304:	d0a9      	beq.n	801e25a <__sflush_r+0x1a>
 801e306:	0793      	lsls	r3, r2, #30
 801e308:	680e      	ldr	r6, [r1, #0]
 801e30a:	bf08      	it	eq
 801e30c:	694b      	ldreq	r3, [r1, #20]
 801e30e:	600f      	str	r7, [r1, #0]
 801e310:	bf18      	it	ne
 801e312:	2300      	movne	r3, #0
 801e314:	eba6 0807 	sub.w	r8, r6, r7
 801e318:	608b      	str	r3, [r1, #8]
 801e31a:	f1b8 0f00 	cmp.w	r8, #0
 801e31e:	dd9c      	ble.n	801e25a <__sflush_r+0x1a>
 801e320:	4643      	mov	r3, r8
 801e322:	463a      	mov	r2, r7
 801e324:	6a21      	ldr	r1, [r4, #32]
 801e326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e328:	4628      	mov	r0, r5
 801e32a:	47b0      	blx	r6
 801e32c:	2800      	cmp	r0, #0
 801e32e:	dc06      	bgt.n	801e33e <__sflush_r+0xfe>
 801e330:	89a3      	ldrh	r3, [r4, #12]
 801e332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e336:	81a3      	strh	r3, [r4, #12]
 801e338:	f04f 30ff 	mov.w	r0, #4294967295
 801e33c:	e78e      	b.n	801e25c <__sflush_r+0x1c>
 801e33e:	4407      	add	r7, r0
 801e340:	eba8 0800 	sub.w	r8, r8, r0
 801e344:	e7e9      	b.n	801e31a <__sflush_r+0xda>
 801e346:	bf00      	nop
 801e348:	20400001 	.word	0x20400001

0801e34c <_fflush_r>:
 801e34c:	b538      	push	{r3, r4, r5, lr}
 801e34e:	690b      	ldr	r3, [r1, #16]
 801e350:	4605      	mov	r5, r0
 801e352:	460c      	mov	r4, r1
 801e354:	b1db      	cbz	r3, 801e38e <_fflush_r+0x42>
 801e356:	b118      	cbz	r0, 801e360 <_fflush_r+0x14>
 801e358:	6983      	ldr	r3, [r0, #24]
 801e35a:	b90b      	cbnz	r3, 801e360 <_fflush_r+0x14>
 801e35c:	f000 f860 	bl	801e420 <__sinit>
 801e360:	4b0c      	ldr	r3, [pc, #48]	; (801e394 <_fflush_r+0x48>)
 801e362:	429c      	cmp	r4, r3
 801e364:	d109      	bne.n	801e37a <_fflush_r+0x2e>
 801e366:	686c      	ldr	r4, [r5, #4]
 801e368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e36c:	b17b      	cbz	r3, 801e38e <_fflush_r+0x42>
 801e36e:	4621      	mov	r1, r4
 801e370:	4628      	mov	r0, r5
 801e372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e376:	f7ff bf63 	b.w	801e240 <__sflush_r>
 801e37a:	4b07      	ldr	r3, [pc, #28]	; (801e398 <_fflush_r+0x4c>)
 801e37c:	429c      	cmp	r4, r3
 801e37e:	d101      	bne.n	801e384 <_fflush_r+0x38>
 801e380:	68ac      	ldr	r4, [r5, #8]
 801e382:	e7f1      	b.n	801e368 <_fflush_r+0x1c>
 801e384:	4b05      	ldr	r3, [pc, #20]	; (801e39c <_fflush_r+0x50>)
 801e386:	429c      	cmp	r4, r3
 801e388:	bf08      	it	eq
 801e38a:	68ec      	ldreq	r4, [r5, #12]
 801e38c:	e7ec      	b.n	801e368 <_fflush_r+0x1c>
 801e38e:	2000      	movs	r0, #0
 801e390:	bd38      	pop	{r3, r4, r5, pc}
 801e392:	bf00      	nop
 801e394:	08021ec8 	.word	0x08021ec8
 801e398:	08021ee8 	.word	0x08021ee8
 801e39c:	08021ea8 	.word	0x08021ea8

0801e3a0 <std>:
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	b510      	push	{r4, lr}
 801e3a4:	4604      	mov	r4, r0
 801e3a6:	e9c0 3300 	strd	r3, r3, [r0]
 801e3aa:	6083      	str	r3, [r0, #8]
 801e3ac:	8181      	strh	r1, [r0, #12]
 801e3ae:	6643      	str	r3, [r0, #100]	; 0x64
 801e3b0:	81c2      	strh	r2, [r0, #14]
 801e3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e3b6:	6183      	str	r3, [r0, #24]
 801e3b8:	4619      	mov	r1, r3
 801e3ba:	2208      	movs	r2, #8
 801e3bc:	305c      	adds	r0, #92	; 0x5c
 801e3be:	f7ff fa4f 	bl	801d860 <memset>
 801e3c2:	4b05      	ldr	r3, [pc, #20]	; (801e3d8 <std+0x38>)
 801e3c4:	6263      	str	r3, [r4, #36]	; 0x24
 801e3c6:	4b05      	ldr	r3, [pc, #20]	; (801e3dc <std+0x3c>)
 801e3c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e3ca:	4b05      	ldr	r3, [pc, #20]	; (801e3e0 <std+0x40>)
 801e3cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e3ce:	4b05      	ldr	r3, [pc, #20]	; (801e3e4 <std+0x44>)
 801e3d0:	6224      	str	r4, [r4, #32]
 801e3d2:	6323      	str	r3, [r4, #48]	; 0x30
 801e3d4:	bd10      	pop	{r4, pc}
 801e3d6:	bf00      	nop
 801e3d8:	0801e601 	.word	0x0801e601
 801e3dc:	0801e623 	.word	0x0801e623
 801e3e0:	0801e65b 	.word	0x0801e65b
 801e3e4:	0801e67f 	.word	0x0801e67f

0801e3e8 <_cleanup_r>:
 801e3e8:	4901      	ldr	r1, [pc, #4]	; (801e3f0 <_cleanup_r+0x8>)
 801e3ea:	f000 b885 	b.w	801e4f8 <_fwalk_reent>
 801e3ee:	bf00      	nop
 801e3f0:	0801e34d 	.word	0x0801e34d

0801e3f4 <__sfmoreglue>:
 801e3f4:	b570      	push	{r4, r5, r6, lr}
 801e3f6:	1e4a      	subs	r2, r1, #1
 801e3f8:	2568      	movs	r5, #104	; 0x68
 801e3fa:	4355      	muls	r5, r2
 801e3fc:	460e      	mov	r6, r1
 801e3fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e402:	f7ff fa83 	bl	801d90c <_malloc_r>
 801e406:	4604      	mov	r4, r0
 801e408:	b140      	cbz	r0, 801e41c <__sfmoreglue+0x28>
 801e40a:	2100      	movs	r1, #0
 801e40c:	e9c0 1600 	strd	r1, r6, [r0]
 801e410:	300c      	adds	r0, #12
 801e412:	60a0      	str	r0, [r4, #8]
 801e414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e418:	f7ff fa22 	bl	801d860 <memset>
 801e41c:	4620      	mov	r0, r4
 801e41e:	bd70      	pop	{r4, r5, r6, pc}

0801e420 <__sinit>:
 801e420:	6983      	ldr	r3, [r0, #24]
 801e422:	b510      	push	{r4, lr}
 801e424:	4604      	mov	r4, r0
 801e426:	bb33      	cbnz	r3, 801e476 <__sinit+0x56>
 801e428:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801e42c:	6503      	str	r3, [r0, #80]	; 0x50
 801e42e:	4b12      	ldr	r3, [pc, #72]	; (801e478 <__sinit+0x58>)
 801e430:	4a12      	ldr	r2, [pc, #72]	; (801e47c <__sinit+0x5c>)
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	6282      	str	r2, [r0, #40]	; 0x28
 801e436:	4298      	cmp	r0, r3
 801e438:	bf04      	itt	eq
 801e43a:	2301      	moveq	r3, #1
 801e43c:	6183      	streq	r3, [r0, #24]
 801e43e:	f000 f81f 	bl	801e480 <__sfp>
 801e442:	6060      	str	r0, [r4, #4]
 801e444:	4620      	mov	r0, r4
 801e446:	f000 f81b 	bl	801e480 <__sfp>
 801e44a:	60a0      	str	r0, [r4, #8]
 801e44c:	4620      	mov	r0, r4
 801e44e:	f000 f817 	bl	801e480 <__sfp>
 801e452:	2200      	movs	r2, #0
 801e454:	60e0      	str	r0, [r4, #12]
 801e456:	2104      	movs	r1, #4
 801e458:	6860      	ldr	r0, [r4, #4]
 801e45a:	f7ff ffa1 	bl	801e3a0 <std>
 801e45e:	2201      	movs	r2, #1
 801e460:	2109      	movs	r1, #9
 801e462:	68a0      	ldr	r0, [r4, #8]
 801e464:	f7ff ff9c 	bl	801e3a0 <std>
 801e468:	2202      	movs	r2, #2
 801e46a:	2112      	movs	r1, #18
 801e46c:	68e0      	ldr	r0, [r4, #12]
 801e46e:	f7ff ff97 	bl	801e3a0 <std>
 801e472:	2301      	movs	r3, #1
 801e474:	61a3      	str	r3, [r4, #24]
 801e476:	bd10      	pop	{r4, pc}
 801e478:	08021e6c 	.word	0x08021e6c
 801e47c:	0801e3e9 	.word	0x0801e3e9

0801e480 <__sfp>:
 801e480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e482:	4b1b      	ldr	r3, [pc, #108]	; (801e4f0 <__sfp+0x70>)
 801e484:	681e      	ldr	r6, [r3, #0]
 801e486:	69b3      	ldr	r3, [r6, #24]
 801e488:	4607      	mov	r7, r0
 801e48a:	b913      	cbnz	r3, 801e492 <__sfp+0x12>
 801e48c:	4630      	mov	r0, r6
 801e48e:	f7ff ffc7 	bl	801e420 <__sinit>
 801e492:	3648      	adds	r6, #72	; 0x48
 801e494:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e498:	3b01      	subs	r3, #1
 801e49a:	d503      	bpl.n	801e4a4 <__sfp+0x24>
 801e49c:	6833      	ldr	r3, [r6, #0]
 801e49e:	b133      	cbz	r3, 801e4ae <__sfp+0x2e>
 801e4a0:	6836      	ldr	r6, [r6, #0]
 801e4a2:	e7f7      	b.n	801e494 <__sfp+0x14>
 801e4a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e4a8:	b16d      	cbz	r5, 801e4c6 <__sfp+0x46>
 801e4aa:	3468      	adds	r4, #104	; 0x68
 801e4ac:	e7f4      	b.n	801e498 <__sfp+0x18>
 801e4ae:	2104      	movs	r1, #4
 801e4b0:	4638      	mov	r0, r7
 801e4b2:	f7ff ff9f 	bl	801e3f4 <__sfmoreglue>
 801e4b6:	6030      	str	r0, [r6, #0]
 801e4b8:	2800      	cmp	r0, #0
 801e4ba:	d1f1      	bne.n	801e4a0 <__sfp+0x20>
 801e4bc:	230c      	movs	r3, #12
 801e4be:	603b      	str	r3, [r7, #0]
 801e4c0:	4604      	mov	r4, r0
 801e4c2:	4620      	mov	r0, r4
 801e4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4c6:	4b0b      	ldr	r3, [pc, #44]	; (801e4f4 <__sfp+0x74>)
 801e4c8:	6665      	str	r5, [r4, #100]	; 0x64
 801e4ca:	e9c4 5500 	strd	r5, r5, [r4]
 801e4ce:	60a5      	str	r5, [r4, #8]
 801e4d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801e4d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801e4d8:	2208      	movs	r2, #8
 801e4da:	4629      	mov	r1, r5
 801e4dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e4e0:	f7ff f9be 	bl	801d860 <memset>
 801e4e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e4e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e4ec:	e7e9      	b.n	801e4c2 <__sfp+0x42>
 801e4ee:	bf00      	nop
 801e4f0:	08021e6c 	.word	0x08021e6c
 801e4f4:	ffff0001 	.word	0xffff0001

0801e4f8 <_fwalk_reent>:
 801e4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4fc:	4680      	mov	r8, r0
 801e4fe:	4689      	mov	r9, r1
 801e500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e504:	2600      	movs	r6, #0
 801e506:	b914      	cbnz	r4, 801e50e <_fwalk_reent+0x16>
 801e508:	4630      	mov	r0, r6
 801e50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e50e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801e512:	3f01      	subs	r7, #1
 801e514:	d501      	bpl.n	801e51a <_fwalk_reent+0x22>
 801e516:	6824      	ldr	r4, [r4, #0]
 801e518:	e7f5      	b.n	801e506 <_fwalk_reent+0xe>
 801e51a:	89ab      	ldrh	r3, [r5, #12]
 801e51c:	2b01      	cmp	r3, #1
 801e51e:	d907      	bls.n	801e530 <_fwalk_reent+0x38>
 801e520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e524:	3301      	adds	r3, #1
 801e526:	d003      	beq.n	801e530 <_fwalk_reent+0x38>
 801e528:	4629      	mov	r1, r5
 801e52a:	4640      	mov	r0, r8
 801e52c:	47c8      	blx	r9
 801e52e:	4306      	orrs	r6, r0
 801e530:	3568      	adds	r5, #104	; 0x68
 801e532:	e7ee      	b.n	801e512 <_fwalk_reent+0x1a>

0801e534 <__swhatbuf_r>:
 801e534:	b570      	push	{r4, r5, r6, lr}
 801e536:	460e      	mov	r6, r1
 801e538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e53c:	2900      	cmp	r1, #0
 801e53e:	b096      	sub	sp, #88	; 0x58
 801e540:	4614      	mov	r4, r2
 801e542:	461d      	mov	r5, r3
 801e544:	da07      	bge.n	801e556 <__swhatbuf_r+0x22>
 801e546:	2300      	movs	r3, #0
 801e548:	602b      	str	r3, [r5, #0]
 801e54a:	89b3      	ldrh	r3, [r6, #12]
 801e54c:	061a      	lsls	r2, r3, #24
 801e54e:	d410      	bmi.n	801e572 <__swhatbuf_r+0x3e>
 801e550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e554:	e00e      	b.n	801e574 <__swhatbuf_r+0x40>
 801e556:	466a      	mov	r2, sp
 801e558:	f000 f8b8 	bl	801e6cc <_fstat_r>
 801e55c:	2800      	cmp	r0, #0
 801e55e:	dbf2      	blt.n	801e546 <__swhatbuf_r+0x12>
 801e560:	9a01      	ldr	r2, [sp, #4]
 801e562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e56a:	425a      	negs	r2, r3
 801e56c:	415a      	adcs	r2, r3
 801e56e:	602a      	str	r2, [r5, #0]
 801e570:	e7ee      	b.n	801e550 <__swhatbuf_r+0x1c>
 801e572:	2340      	movs	r3, #64	; 0x40
 801e574:	2000      	movs	r0, #0
 801e576:	6023      	str	r3, [r4, #0]
 801e578:	b016      	add	sp, #88	; 0x58
 801e57a:	bd70      	pop	{r4, r5, r6, pc}

0801e57c <__smakebuf_r>:
 801e57c:	898b      	ldrh	r3, [r1, #12]
 801e57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e580:	079d      	lsls	r5, r3, #30
 801e582:	4606      	mov	r6, r0
 801e584:	460c      	mov	r4, r1
 801e586:	d507      	bpl.n	801e598 <__smakebuf_r+0x1c>
 801e588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e58c:	6023      	str	r3, [r4, #0]
 801e58e:	6123      	str	r3, [r4, #16]
 801e590:	2301      	movs	r3, #1
 801e592:	6163      	str	r3, [r4, #20]
 801e594:	b002      	add	sp, #8
 801e596:	bd70      	pop	{r4, r5, r6, pc}
 801e598:	ab01      	add	r3, sp, #4
 801e59a:	466a      	mov	r2, sp
 801e59c:	f7ff ffca 	bl	801e534 <__swhatbuf_r>
 801e5a0:	9900      	ldr	r1, [sp, #0]
 801e5a2:	4605      	mov	r5, r0
 801e5a4:	4630      	mov	r0, r6
 801e5a6:	f7ff f9b1 	bl	801d90c <_malloc_r>
 801e5aa:	b948      	cbnz	r0, 801e5c0 <__smakebuf_r+0x44>
 801e5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5b0:	059a      	lsls	r2, r3, #22
 801e5b2:	d4ef      	bmi.n	801e594 <__smakebuf_r+0x18>
 801e5b4:	f023 0303 	bic.w	r3, r3, #3
 801e5b8:	f043 0302 	orr.w	r3, r3, #2
 801e5bc:	81a3      	strh	r3, [r4, #12]
 801e5be:	e7e3      	b.n	801e588 <__smakebuf_r+0xc>
 801e5c0:	4b0d      	ldr	r3, [pc, #52]	; (801e5f8 <__smakebuf_r+0x7c>)
 801e5c2:	62b3      	str	r3, [r6, #40]	; 0x28
 801e5c4:	89a3      	ldrh	r3, [r4, #12]
 801e5c6:	6020      	str	r0, [r4, #0]
 801e5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e5cc:	81a3      	strh	r3, [r4, #12]
 801e5ce:	9b00      	ldr	r3, [sp, #0]
 801e5d0:	6163      	str	r3, [r4, #20]
 801e5d2:	9b01      	ldr	r3, [sp, #4]
 801e5d4:	6120      	str	r0, [r4, #16]
 801e5d6:	b15b      	cbz	r3, 801e5f0 <__smakebuf_r+0x74>
 801e5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5dc:	4630      	mov	r0, r6
 801e5de:	f000 f887 	bl	801e6f0 <_isatty_r>
 801e5e2:	b128      	cbz	r0, 801e5f0 <__smakebuf_r+0x74>
 801e5e4:	89a3      	ldrh	r3, [r4, #12]
 801e5e6:	f023 0303 	bic.w	r3, r3, #3
 801e5ea:	f043 0301 	orr.w	r3, r3, #1
 801e5ee:	81a3      	strh	r3, [r4, #12]
 801e5f0:	89a3      	ldrh	r3, [r4, #12]
 801e5f2:	431d      	orrs	r5, r3
 801e5f4:	81a5      	strh	r5, [r4, #12]
 801e5f6:	e7cd      	b.n	801e594 <__smakebuf_r+0x18>
 801e5f8:	0801e3e9 	.word	0x0801e3e9

0801e5fc <__malloc_lock>:
 801e5fc:	4770      	bx	lr

0801e5fe <__malloc_unlock>:
 801e5fe:	4770      	bx	lr

0801e600 <__sread>:
 801e600:	b510      	push	{r4, lr}
 801e602:	460c      	mov	r4, r1
 801e604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e608:	f000 f894 	bl	801e734 <_read_r>
 801e60c:	2800      	cmp	r0, #0
 801e60e:	bfab      	itete	ge
 801e610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e612:	89a3      	ldrhlt	r3, [r4, #12]
 801e614:	181b      	addge	r3, r3, r0
 801e616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e61a:	bfac      	ite	ge
 801e61c:	6563      	strge	r3, [r4, #84]	; 0x54
 801e61e:	81a3      	strhlt	r3, [r4, #12]
 801e620:	bd10      	pop	{r4, pc}

0801e622 <__swrite>:
 801e622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e626:	461f      	mov	r7, r3
 801e628:	898b      	ldrh	r3, [r1, #12]
 801e62a:	05db      	lsls	r3, r3, #23
 801e62c:	4605      	mov	r5, r0
 801e62e:	460c      	mov	r4, r1
 801e630:	4616      	mov	r6, r2
 801e632:	d505      	bpl.n	801e640 <__swrite+0x1e>
 801e634:	2302      	movs	r3, #2
 801e636:	2200      	movs	r2, #0
 801e638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e63c:	f000 f868 	bl	801e710 <_lseek_r>
 801e640:	89a3      	ldrh	r3, [r4, #12]
 801e642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e64a:	81a3      	strh	r3, [r4, #12]
 801e64c:	4632      	mov	r2, r6
 801e64e:	463b      	mov	r3, r7
 801e650:	4628      	mov	r0, r5
 801e652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e656:	f000 b817 	b.w	801e688 <_write_r>

0801e65a <__sseek>:
 801e65a:	b510      	push	{r4, lr}
 801e65c:	460c      	mov	r4, r1
 801e65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e662:	f000 f855 	bl	801e710 <_lseek_r>
 801e666:	1c43      	adds	r3, r0, #1
 801e668:	89a3      	ldrh	r3, [r4, #12]
 801e66a:	bf15      	itete	ne
 801e66c:	6560      	strne	r0, [r4, #84]	; 0x54
 801e66e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e676:	81a3      	strheq	r3, [r4, #12]
 801e678:	bf18      	it	ne
 801e67a:	81a3      	strhne	r3, [r4, #12]
 801e67c:	bd10      	pop	{r4, pc}

0801e67e <__sclose>:
 801e67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e682:	f000 b813 	b.w	801e6ac <_close_r>
	...

0801e688 <_write_r>:
 801e688:	b538      	push	{r3, r4, r5, lr}
 801e68a:	4c07      	ldr	r4, [pc, #28]	; (801e6a8 <_write_r+0x20>)
 801e68c:	4605      	mov	r5, r0
 801e68e:	4608      	mov	r0, r1
 801e690:	4611      	mov	r1, r2
 801e692:	2200      	movs	r2, #0
 801e694:	6022      	str	r2, [r4, #0]
 801e696:	461a      	mov	r2, r3
 801e698:	f7e3 f89d 	bl	80017d6 <_write>
 801e69c:	1c43      	adds	r3, r0, #1
 801e69e:	d102      	bne.n	801e6a6 <_write_r+0x1e>
 801e6a0:	6823      	ldr	r3, [r4, #0]
 801e6a2:	b103      	cbz	r3, 801e6a6 <_write_r+0x1e>
 801e6a4:	602b      	str	r3, [r5, #0]
 801e6a6:	bd38      	pop	{r3, r4, r5, pc}
 801e6a8:	20008acc 	.word	0x20008acc

0801e6ac <_close_r>:
 801e6ac:	b538      	push	{r3, r4, r5, lr}
 801e6ae:	4c06      	ldr	r4, [pc, #24]	; (801e6c8 <_close_r+0x1c>)
 801e6b0:	2300      	movs	r3, #0
 801e6b2:	4605      	mov	r5, r0
 801e6b4:	4608      	mov	r0, r1
 801e6b6:	6023      	str	r3, [r4, #0]
 801e6b8:	f7e3 f8a9 	bl	800180e <_close>
 801e6bc:	1c43      	adds	r3, r0, #1
 801e6be:	d102      	bne.n	801e6c6 <_close_r+0x1a>
 801e6c0:	6823      	ldr	r3, [r4, #0]
 801e6c2:	b103      	cbz	r3, 801e6c6 <_close_r+0x1a>
 801e6c4:	602b      	str	r3, [r5, #0]
 801e6c6:	bd38      	pop	{r3, r4, r5, pc}
 801e6c8:	20008acc 	.word	0x20008acc

0801e6cc <_fstat_r>:
 801e6cc:	b538      	push	{r3, r4, r5, lr}
 801e6ce:	4c07      	ldr	r4, [pc, #28]	; (801e6ec <_fstat_r+0x20>)
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	4605      	mov	r5, r0
 801e6d4:	4608      	mov	r0, r1
 801e6d6:	4611      	mov	r1, r2
 801e6d8:	6023      	str	r3, [r4, #0]
 801e6da:	f7e3 f8a4 	bl	8001826 <_fstat>
 801e6de:	1c43      	adds	r3, r0, #1
 801e6e0:	d102      	bne.n	801e6e8 <_fstat_r+0x1c>
 801e6e2:	6823      	ldr	r3, [r4, #0]
 801e6e4:	b103      	cbz	r3, 801e6e8 <_fstat_r+0x1c>
 801e6e6:	602b      	str	r3, [r5, #0]
 801e6e8:	bd38      	pop	{r3, r4, r5, pc}
 801e6ea:	bf00      	nop
 801e6ec:	20008acc 	.word	0x20008acc

0801e6f0 <_isatty_r>:
 801e6f0:	b538      	push	{r3, r4, r5, lr}
 801e6f2:	4c06      	ldr	r4, [pc, #24]	; (801e70c <_isatty_r+0x1c>)
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	4605      	mov	r5, r0
 801e6f8:	4608      	mov	r0, r1
 801e6fa:	6023      	str	r3, [r4, #0]
 801e6fc:	f7e3 f8a3 	bl	8001846 <_isatty>
 801e700:	1c43      	adds	r3, r0, #1
 801e702:	d102      	bne.n	801e70a <_isatty_r+0x1a>
 801e704:	6823      	ldr	r3, [r4, #0]
 801e706:	b103      	cbz	r3, 801e70a <_isatty_r+0x1a>
 801e708:	602b      	str	r3, [r5, #0]
 801e70a:	bd38      	pop	{r3, r4, r5, pc}
 801e70c:	20008acc 	.word	0x20008acc

0801e710 <_lseek_r>:
 801e710:	b538      	push	{r3, r4, r5, lr}
 801e712:	4c07      	ldr	r4, [pc, #28]	; (801e730 <_lseek_r+0x20>)
 801e714:	4605      	mov	r5, r0
 801e716:	4608      	mov	r0, r1
 801e718:	4611      	mov	r1, r2
 801e71a:	2200      	movs	r2, #0
 801e71c:	6022      	str	r2, [r4, #0]
 801e71e:	461a      	mov	r2, r3
 801e720:	f7e3 f89c 	bl	800185c <_lseek>
 801e724:	1c43      	adds	r3, r0, #1
 801e726:	d102      	bne.n	801e72e <_lseek_r+0x1e>
 801e728:	6823      	ldr	r3, [r4, #0]
 801e72a:	b103      	cbz	r3, 801e72e <_lseek_r+0x1e>
 801e72c:	602b      	str	r3, [r5, #0]
 801e72e:	bd38      	pop	{r3, r4, r5, pc}
 801e730:	20008acc 	.word	0x20008acc

0801e734 <_read_r>:
 801e734:	b538      	push	{r3, r4, r5, lr}
 801e736:	4c07      	ldr	r4, [pc, #28]	; (801e754 <_read_r+0x20>)
 801e738:	4605      	mov	r5, r0
 801e73a:	4608      	mov	r0, r1
 801e73c:	4611      	mov	r1, r2
 801e73e:	2200      	movs	r2, #0
 801e740:	6022      	str	r2, [r4, #0]
 801e742:	461a      	mov	r2, r3
 801e744:	f7e3 f82a 	bl	800179c <_read>
 801e748:	1c43      	adds	r3, r0, #1
 801e74a:	d102      	bne.n	801e752 <_read_r+0x1e>
 801e74c:	6823      	ldr	r3, [r4, #0]
 801e74e:	b103      	cbz	r3, 801e752 <_read_r+0x1e>
 801e750:	602b      	str	r3, [r5, #0]
 801e752:	bd38      	pop	{r3, r4, r5, pc}
 801e754:	20008acc 	.word	0x20008acc

0801e758 <_init>:
 801e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e75a:	bf00      	nop
 801e75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e75e:	bc08      	pop	{r3}
 801e760:	469e      	mov	lr, r3
 801e762:	4770      	bx	lr

0801e764 <_fini>:
 801e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e766:	bf00      	nop
 801e768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e76a:	bc08      	pop	{r3}
 801e76c:	469e      	mov	lr, r3
 801e76e:	4770      	bx	lr
